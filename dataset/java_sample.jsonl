{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java", "func_name": "IndexedElementsBinder.bindIndexed", "original_string": "protected final void bindIndexed(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder, ResolvableType aggregateType,\n\t\t\tResolvableType elementType, IndexedCollectionSupplier result) {\n\t\tfor (ConfigurationPropertySource source : getContext().getSources()) {\n\t\t\tbindIndexed(source, name, target, elementBinder, result, aggregateType,\n\t\t\t\t\telementType);\n\t\t\tif (result.wasSupplied() && result.get() != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected final void bindIndexed(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder, ResolvableType aggregateType,\n\t\t\tResolvableType elementType, IndexedCollectionSupplier result) {\n\t\tfor (ConfigurationPropertySource source : getContext().getSources()) {\n\t\t\tbindIndexed(source, name, target, elementBinder, result, aggregateType,\n\t\t\t\t\telementType);\n\t\t\tif (result.wasSupplied() && result.get() != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "final", "void", "bindIndexed", "(", "ConfigurationPropertyName", "name", ",", "Bindable", "<", "?", ">", "target", ",", "AggregateElementBinder", "elementBinder", ",", "ResolvableType", "aggregateType", ",", "ResolvableType", "elementType", ",", "IndexedCollectionSupplier", "result", ")", "{", "for", "(", "ConfigurationPropertySource", "source", ":", "getContext", "(", ")", ".", "getSources", "(", ")", ")", "{", "bindIndexed", "(", "source", ",", "name", ",", "target", ",", "elementBinder", ",", "result", ",", "aggregateType", ",", "elementType", ")", ";", "if", "(", "result", ".", "wasSupplied", "(", ")", "&&", "result", ".", "get", "(", ")", "!=", "null", ")", "{", "return", ";", "}", "}", "}"], "docstring": "Bind indexed elements to the supplied collection.\n@param name the name of the property to bind\n@param target the target bindable\n@param elementBinder the binder to use for elements\n@param aggregateType the aggregate type, may be a collection or an array\n@param elementType the element type\n@param result the destination for results", "docstring_tokens": ["Bind", "indexed", "elements", "to", "the", "supplied", "collection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java#L67-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setServletRegistrationBeans", "original_string": "public void setServletRegistrationBeans(\n\t\t\tCollection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}", "language": "java", "code": "public void setServletRegistrationBeans(\n\t\t\tCollection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}", "code_tokens": ["public", "void", "setServletRegistrationBeans", "(", "Collection", "<", "?", "extends", "ServletRegistrationBean", "<", "?", ">", ">", "servletRegistrationBeans", ")", "{", "Assert", ".", "notNull", "(", "servletRegistrationBeans", ",", "\"ServletRegistrationBeans must not be null\"", ")", ";", "this", ".", "servletRegistrationBeans", "=", "new", "LinkedHashSet", "<>", "(", "servletRegistrationBeans", ")", ";", "}"], "docstring": "Set {@link ServletRegistrationBean}s that the filter will be registered against.\n@param servletRegistrationBeans the Servlet registration beans", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L75-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addServletRegistrationBeans", "original_string": "public void addServletRegistrationBeans(\n\t\t\tServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}", "language": "java", "code": "public void addServletRegistrationBeans(\n\t\t\tServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}", "code_tokens": ["public", "void", "addServletRegistrationBeans", "(", "ServletRegistrationBean", "<", "?", ">", "...", "servletRegistrationBeans", ")", "{", "Assert", ".", "notNull", "(", "servletRegistrationBeans", ",", "\"ServletRegistrationBeans must not be null\"", ")", ";", "Collections", ".", "addAll", "(", "this", ".", "servletRegistrationBeans", ",", "servletRegistrationBeans", ")", ";", "}"], "docstring": "Add {@link ServletRegistrationBean}s for the filter.\n@param servletRegistrationBeans the servlet registration beans to add\n@see #setServletRegistrationBeans", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L98-L103", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setServletNames", "original_string": "public void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}", "language": "java", "code": "public void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}", "code_tokens": ["public", "void", "setServletNames", "(", "Collection", "<", "String", ">", "servletNames", ")", "{", "Assert", ".", "notNull", "(", "servletNames", ",", "\"ServletNames must not be null\"", ")", ";", "this", ".", "servletNames", "=", "new", "LinkedHashSet", "<>", "(", "servletNames", ")", ";", "}"], "docstring": "Set servlet names that the filter will be registered against. This will replace any\npreviously specified servlet names.\n@param servletNames the servlet names\n@see #setServletRegistrationBeans\n@see #setUrlPatterns", "docstring_tokens": ["Set", "servlet", "names", "that", "the", "filter", "will", "be", "registered", "against", ".", "This", "will", "replace", "any", "previously", "specified", "servlet", "names", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L112-L115", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addServletNames", "original_string": "public void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}", "language": "java", "code": "public void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}", "code_tokens": ["public", "void", "addServletNames", "(", "String", "...", "servletNames", ")", "{", "Assert", ".", "notNull", "(", "servletNames", ",", "\"ServletNames must not be null\"", ")", ";", "this", ".", "servletNames", ".", "addAll", "(", "Arrays", ".", "asList", "(", "servletNames", ")", ")", ";", "}"], "docstring": "Add servlet names for the filter.\n@param servletNames the servlet names to add", "docstring_tokens": ["Add", "servlet", "names", "for", "the", "filter", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L130-L133", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setUrlPatterns", "original_string": "public void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}", "language": "java", "code": "public void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}", "code_tokens": ["public", "void", "setUrlPatterns", "(", "Collection", "<", "String", ">", "urlPatterns", ")", "{", "Assert", ".", "notNull", "(", "urlPatterns", ",", "\"UrlPatterns must not be null\"", ")", ";", "this", ".", "urlPatterns", "=", "new", "LinkedHashSet", "<>", "(", "urlPatterns", ")", ";", "}"], "docstring": "Set the URL patterns that the filter will be registered against. This will replace\nany previously specified URL patterns.\n@param urlPatterns the URL patterns\n@see #setServletRegistrationBeans\n@see #setServletNames", "docstring_tokens": ["Set", "the", "URL", "patterns", "that", "the", "filter", "will", "be", "registered", "against", ".", "This", "will", "replace", "any", "previously", "specified", "URL", "patterns", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L142-L145", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addUrlPatterns", "original_string": "public void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}", "language": "java", "code": "public void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}", "code_tokens": ["public", "void", "addUrlPatterns", "(", "String", "...", "urlPatterns", ")", "{", "Assert", ".", "notNull", "(", "urlPatterns", ",", "\"UrlPatterns must not be null\"", ")", ";", "Collections", ".", "addAll", "(", "this", ".", "urlPatterns", ",", "urlPatterns", ")", ";", "}"], "docstring": "Add URL patterns, as defined in the Servlet specification, that the filter will be\nregistered against.\n@param urlPatterns the URL patterns", "docstring_tokens": ["Add", "URL", "patterns", "as", "defined", "in", "the", "Servlet", "specification", "that", "the", "filter", "will", "be", "registered", "against", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L161-L164", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setDispatcherTypes", "original_string": "public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {\n\t\tthis.dispatcherTypes = EnumSet.of(first, rest);\n\t}", "language": "java", "code": "public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {\n\t\tthis.dispatcherTypes = EnumSet.of(first, rest);\n\t}", "code_tokens": ["public", "void", "setDispatcherTypes", "(", "DispatcherType", "first", ",", "DispatcherType", "...", "rest", ")", "{", "this", ".", "dispatcherTypes", "=", "EnumSet", ".", "of", "(", "first", ",", "rest", ")", ";", "}"], "docstring": "Convenience method to {@link #setDispatcherTypes(EnumSet) set dispatcher types}\nusing the specified elements.\n@param first the first dispatcher type\n@param rest additional dispatcher types", "docstring_tokens": ["Convenience", "method", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L172-L174", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.configure", "original_string": "@Override\n\tprotected void configure(FilterRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tEnumSet<DispatcherType> dispatcherTypes = this.dispatcherTypes;\n\t\tif (dispatcherTypes == null) {\n\t\t\tdispatcherTypes = EnumSet.of(DispatcherType.REQUEST);\n\t\t}\n\t\tSet<String> servletNames = new LinkedHashSet<>();\n\t\tfor (ServletRegistrationBean<?> servletRegistrationBean : this.servletRegistrationBeans) {\n\t\t\tservletNames.add(servletRegistrationBean.getServletName());\n\t\t}\n\t\tservletNames.addAll(this.servletNames);\n\t\tif (servletNames.isEmpty() && this.urlPatterns.isEmpty()) {\n\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\tDEFAULT_URL_MAPPINGS);\n\t\t}\n\t\telse {\n\t\t\tif (!servletNames.isEmpty()) {\n\t\t\t\tregistration.addMappingForServletNames(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(servletNames));\n\t\t\t}\n\t\t\tif (!this.urlPatterns.isEmpty()) {\n\t\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(this.urlPatterns));\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "@Override\n\tprotected void configure(FilterRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tEnumSet<DispatcherType> dispatcherTypes = this.dispatcherTypes;\n\t\tif (dispatcherTypes == null) {\n\t\t\tdispatcherTypes = EnumSet.of(DispatcherType.REQUEST);\n\t\t}\n\t\tSet<String> servletNames = new LinkedHashSet<>();\n\t\tfor (ServletRegistrationBean<?> servletRegistrationBean : this.servletRegistrationBeans) {\n\t\t\tservletNames.add(servletRegistrationBean.getServletName());\n\t\t}\n\t\tservletNames.addAll(this.servletNames);\n\t\tif (servletNames.isEmpty() && this.urlPatterns.isEmpty()) {\n\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\tDEFAULT_URL_MAPPINGS);\n\t\t}\n\t\telse {\n\t\t\tif (!servletNames.isEmpty()) {\n\t\t\t\tregistration.addMappingForServletNames(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(servletNames));\n\t\t\t}\n\t\t\tif (!this.urlPatterns.isEmpty()) {\n\t\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(this.urlPatterns));\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["@", "Override", "protected", "void", "configure", "(", "FilterRegistration", ".", "Dynamic", "registration", ")", "{", "super", ".", "configure", "(", "registration", ")", ";", "EnumSet", "<", "DispatcherType", ">", "dispatcherTypes", "=", "this", ".", "dispatcherTypes", ";", "if", "(", "dispatcherTypes", "==", "null", ")", "{", "dispatcherTypes", "=", "EnumSet", ".", "of", "(", "DispatcherType", ".", "REQUEST", ")", ";", "}", "Set", "<", "String", ">", "servletNames", "=", "new", "LinkedHashSet", "<>", "(", ")", ";", "for", "(", "ServletRegistrationBean", "<", "?", ">", "servletRegistrationBean", ":", "this", ".", "servletRegistrationBeans", ")", "{", "servletNames", ".", "add", "(", "servletRegistrationBean", ".", "getServletName", "(", ")", ")", ";", "}", "servletNames", ".", "addAll", "(", "this", ".", "servletNames", ")", ";", "if", "(", "servletNames", ".", "isEmpty", "(", ")", "&&", "this", ".", "urlPatterns", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForUrlPatterns", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "DEFAULT_URL_MAPPINGS", ")", ";", "}", "else", "{", "if", "(", "!", "servletNames", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForServletNames", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "StringUtils", ".", "toStringArray", "(", "servletNames", ")", ")", ";", "}", "if", "(", "!", "this", ".", "urlPatterns", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForUrlPatterns", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "StringUtils", ".", "toStringArray", "(", "this", ".", "urlPatterns", ")", ")", ";", "}", "}", "}"], "docstring": "Configure registration settings. Subclasses can override this method to perform\nadditional configuration if required.\n@param registration the registration", "docstring_tokens": ["Configure", "registration", "settings", ".", "Subclasses", "can", "override", "this", "method", "to", "perform", "additional", "configuration", "if", "required", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L223-L249", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAnyMissingClasses", "original_string": "public DependencyCustomizer ifAnyMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAnyMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAnyMissingClasses", "(", "String", "...", "classNames", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "className", ":", "classNames", ")", "{", "try", "{", "DependencyCustomizer", ".", "this", ".", "loader", ".", "loadClass", "(", "className", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if any of the\nspecified class names are not on the class path.\n@param classNames the class names to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L91-L106", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAllMissingClasses", "original_string": "public DependencyCustomizer ifAllMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAllMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAllMissingClasses", "(", "String", "...", "classNames", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "className", ":", "classNames", ")", "{", "try", "{", "DependencyCustomizer", ".", "this", ".", "loader", ".", "loadClass", "(", "className", ")", ";", "return", "false", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "// swallow exception and continue", "}", "}", "return", "DependencyCustomizer", ".", "this", ".", "canAdd", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if all of the\nspecified class names are not on the class path.\n@param classNames the class names to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L114-L130", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAllResourcesPresent", "original_string": "public DependencyCustomizer ifAllResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (DependencyCustomizer.this.loader.getResource(path) == null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAllResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (DependencyCustomizer.this.loader.getResource(path) == null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAllResourcesPresent", "(", "String", "...", "paths", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "path", ":", "paths", ")", "{", "try", "{", "if", "(", "DependencyCustomizer", ".", "this", ".", "loader", ".", "getResource", "(", "path", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "// swallow exception and continue", "}", "}", "return", "DependencyCustomizer", ".", "this", ".", "canAdd", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if the specified\npaths are on the class path.\n@param paths the paths to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L138-L156", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String... modules) {\n\t\tfor (String module : modules) {\n\t\t\tadd(module, null, null, true);\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public DependencyCustomizer add(String... modules) {\n\t\tfor (String module : modules) {\n\t\t\tadd(module, null, null, true);\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "...", "modules", ")", "{", "for", "(", "String", "module", ":", "modules", ")", "{", "add", "(", "module", ",", "null", ",", "null", ",", "true", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Add dependencies and all of their dependencies. The group ID and version of the\ndependencies are resolved from the modules using the customizer's\n{@link ArtifactCoordinatesResolver}.\n@param modules the module IDs\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "dependencies", "and", "all", "of", "their", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependencies", "are", "resolved", "from", "the", "modules", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L191-L196", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String module, boolean transitive) {\n\t\treturn add(module, null, null, transitive);\n\t}", "language": "java", "code": "public DependencyCustomizer add(String module, boolean transitive) {\n\t\treturn add(module, null, null, transitive);\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "module", ",", "boolean", "transitive", ")", "{", "return", "add", "(", "module", ",", "null", ",", "null", ",", "transitive", ")", ";", "}"], "docstring": "Add a single dependency and, optionally, all of its dependencies. The group ID and\nversion of the dependency are resolved from the module using the customizer's\n{@link ArtifactCoordinatesResolver}.\n@param module the module ID\n@param transitive {@code true} if the transitive dependencies should also be added,\notherwise {@code false}\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "a", "single", "dependency", "and", "optionally", "all", "of", "its", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependency", "are", "resolved", "from", "the", "module", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L207-L209", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String module, String classifier, String type,\n\t\t\tboolean transitive) {\n\t\tif (canAdd()) {\n\t\t\tArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext\n\t\t\t\t\t.getArtifactCoordinatesResolver();\n\t\t\tthis.classNode.addAnnotation(\n\t\t\t\t\tcreateGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getArtifactId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getVersion(module), classifier,\n\t\t\t\t\t\t\ttype, transitive));\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public DependencyCustomizer add(String module, String classifier, String type,\n\t\t\tboolean transitive) {\n\t\tif (canAdd()) {\n\t\t\tArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext\n\t\t\t\t\t.getArtifactCoordinatesResolver();\n\t\t\tthis.classNode.addAnnotation(\n\t\t\t\t\tcreateGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getArtifactId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getVersion(module), classifier,\n\t\t\t\t\t\t\ttype, transitive));\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "module", ",", "String", "classifier", ",", "String", "type", ",", "boolean", "transitive", ")", "{", "if", "(", "canAdd", "(", ")", ")", "{", "ArtifactCoordinatesResolver", "artifactCoordinatesResolver", "=", "this", ".", "dependencyResolutionContext", ".", "getArtifactCoordinatesResolver", "(", ")", ";", "this", ".", "classNode", ".", "addAnnotation", "(", "createGrabAnnotation", "(", "artifactCoordinatesResolver", ".", "getGroupId", "(", "module", ")", ",", "artifactCoordinatesResolver", ".", "getArtifactId", "(", "module", ")", ",", "artifactCoordinatesResolver", ".", "getVersion", "(", "module", ")", ",", "classifier", ",", "type", ",", "transitive", ")", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Add a single dependency with the specified classifier and type and, optionally, all\nof its dependencies. The group ID and version of the dependency are resolved from\nthe module by using the customizer's {@link ArtifactCoordinatesResolver}.\n@param module the module ID\n@param classifier the classifier, may be {@code null}\n@param type the type, may be {@code null}\n@param transitive {@code true} if the transitive dependencies should also be added,\notherwise {@code false}\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "a", "single", "dependency", "with", "the", "specified", "classifier", "and", "type", "and", "optionally", "all", "of", "its", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependency", "are", "resolved", "from", "the", "module", "by", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L222-L234", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicatorRegistryFactory.java", "func_name": "ReactiveHealthIndicatorRegistryFactory.createReactiveHealthIndicatorRegistry", "original_string": "public ReactiveHealthIndicatorRegistry createReactiveHealthIndicatorRegistry(\n\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(reactiveHealthIndicators,\n\t\t\t\t\"ReactiveHealthIndicators must not be null\");\n\t\treturn initialize(new DefaultReactiveHealthIndicatorRegistry(),\n\t\t\t\treactiveHealthIndicators, healthIndicators);\n\t}", "language": "java", "code": "public ReactiveHealthIndicatorRegistry createReactiveHealthIndicatorRegistry(\n\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(reactiveHealthIndicators,\n\t\t\t\t\"ReactiveHealthIndicators must not be null\");\n\t\treturn initialize(new DefaultReactiveHealthIndicatorRegistry(),\n\t\t\t\treactiveHealthIndicators, healthIndicators);\n\t}", "code_tokens": ["public", "ReactiveHealthIndicatorRegistry", "createReactiveHealthIndicatorRegistry", "(", "Map", "<", "String", ",", "ReactiveHealthIndicator", ">", "reactiveHealthIndicators", ",", "Map", "<", "String", ",", "HealthIndicator", ">", "healthIndicators", ")", "{", "Assert", ".", "notNull", "(", "reactiveHealthIndicators", ",", "\"ReactiveHealthIndicators must not be null\"", ")", ";", "return", "initialize", "(", "new", "DefaultReactiveHealthIndicatorRegistry", "(", ")", ",", "reactiveHealthIndicators", ",", "healthIndicators", ")", ";", "}"], "docstring": "Create a {@link ReactiveHealthIndicatorRegistry} based on the specified health\nindicators. Each {@link HealthIndicator} are wrapped to a\n{@link HealthIndicatorReactiveAdapter}. If two instances share the same name, the\nreactive variant takes precedence.\n@param reactiveHealthIndicators the {@link ReactiveHealthIndicator} instances\nmapped by name\n@param healthIndicators the {@link HealthIndicator} instances mapped by name if\nany.\n@return a {@link ReactiveHealthIndicator} that delegates to the specified\n{@code reactiveHealthIndicators}.", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicatorRegistryFactory.java#L57-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java", "func_name": "CentralDirectoryParser.parse", "original_string": "public RandomAccessData parse(RandomAccessData data, boolean skipPrefixBytes)\n\t\t\tthrows IOException {\n\t\tCentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);\n\t\tif (skipPrefixBytes) {\n\t\t\tdata = getArchiveData(endRecord, data);\n\t\t}\n\t\tRandomAccessData centralDirectoryData = endRecord.getCentralDirectory(data);\n\t\tvisitStart(endRecord, centralDirectoryData);\n\t\tparseEntries(endRecord, centralDirectoryData);\n\t\tvisitEnd();\n\t\treturn data;\n\t}", "language": "java", "code": "public RandomAccessData parse(RandomAccessData data, boolean skipPrefixBytes)\n\t\t\tthrows IOException {\n\t\tCentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);\n\t\tif (skipPrefixBytes) {\n\t\t\tdata = getArchiveData(endRecord, data);\n\t\t}\n\t\tRandomAccessData centralDirectoryData = endRecord.getCentralDirectory(data);\n\t\tvisitStart(endRecord, centralDirectoryData);\n\t\tparseEntries(endRecord, centralDirectoryData);\n\t\tvisitEnd();\n\t\treturn data;\n\t}", "code_tokens": ["public", "RandomAccessData", "parse", "(", "RandomAccessData", "data", ",", "boolean", "skipPrefixBytes", ")", "throws", "IOException", "{", "CentralDirectoryEndRecord", "endRecord", "=", "new", "CentralDirectoryEndRecord", "(", "data", ")", ";", "if", "(", "skipPrefixBytes", ")", "{", "data", "=", "getArchiveData", "(", "endRecord", ",", "data", ")", ";", "}", "RandomAccessData", "centralDirectoryData", "=", "endRecord", ".", "getCentralDirectory", "(", "data", ")", ";", "visitStart", "(", "endRecord", ",", "centralDirectoryData", ")", ";", "parseEntries", "(", "endRecord", ",", "centralDirectoryData", ")", ";", "visitEnd", "(", ")", ";", "return", "data", ";", "}"], "docstring": "Parse the source data, triggering {@link CentralDirectoryVisitor visitors}.\n@param data the source data\n@param skipPrefixBytes if prefix bytes should be skipped\n@return the actual archive data without any prefix bytes\n@throws IOException on error", "docstring_tokens": ["Parse", "the", "source", "data", "triggering", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java#L50-L61", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/properties/PropertiesConfigAdapter.java", "func_name": "PropertiesConfigAdapter.get", "original_string": "protected final <V> V get(Function<T, V> getter, Supplier<V> fallback) {\n\t\tV value = getter.apply(this.properties);\n\t\treturn (value != null) ? value : fallback.get();\n\t}", "language": "java", "code": "protected final <V> V get(Function<T, V> getter, Supplier<V> fallback) {\n\t\tV value = getter.apply(this.properties);\n\t\treturn (value != null) ? value : fallback.get();\n\t}", "code_tokens": ["protected", "final", "<", "V", ">", "V", "get", "(", "Function", "<", "T", ",", "V", ">", "getter", ",", "Supplier", "<", "V", ">", "fallback", ")", "{", "V", "value", "=", "getter", ".", "apply", "(", "this", ".", "properties", ")", ";", "return", "(", "value", "!=", "null", ")", "?", "value", ":", "fallback", ".", "get", "(", ")", ";", "}"], "docstring": "Get the value from the properties or use a fallback from the {@code defaults}.\n@param getter the getter for the properties\n@param fallback the fallback method, usually super interface method reference\n@param <V> the value type\n@return the property or fallback value", "docstring_tokens": ["Get", "the", "value", "from", "the", "properties", "or", "use", "a", "fallback", "from", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/properties/PropertiesConfigAdapter.java#L52-L55", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java", "func_name": "ApplicationTemp.getDir", "original_string": "public File getDir(String subDir) {\n\t\tFile dir = new File(getDir(), subDir);\n\t\tdir.mkdirs();\n\t\treturn dir;\n\t}", "language": "java", "code": "public File getDir(String subDir) {\n\t\tFile dir = new File(getDir(), subDir);\n\t\tdir.mkdirs();\n\t\treturn dir;\n\t}", "code_tokens": ["public", "File", "getDir", "(", "String", "subDir", ")", "{", "File", "dir", "=", "new", "File", "(", "getDir", "(", ")", ",", "subDir", ")", ";", "dir", ".", "mkdirs", "(", ")", ";", "return", "dir", ";", "}"], "docstring": "Return a sub-directory of the application temp.\n@param subDir the sub-directory name\n@return a sub-directory", "docstring_tokens": ["Return", "a", "sub", "-", "directory", "of", "the", "application", "temp", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java#L66-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java", "func_name": "ApplicationTemp.getDir", "original_string": "public File getDir() {\n\t\tif (this.dir == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tbyte[] hash = generateHash(this.sourceClass);\n\t\t\t\tthis.dir = new File(getTempDirectory(), toHexString(hash));\n\t\t\t\tthis.dir.mkdirs();\n\t\t\t\tAssert.state(this.dir.exists(),\n\t\t\t\t\t\t() -> \"Unable to create temp directory \" + this.dir);\n\t\t\t}\n\t\t}\n\t\treturn this.dir;\n\t}", "language": "java", "code": "public File getDir() {\n\t\tif (this.dir == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tbyte[] hash = generateHash(this.sourceClass);\n\t\t\t\tthis.dir = new File(getTempDirectory(), toHexString(hash));\n\t\t\t\tthis.dir.mkdirs();\n\t\t\t\tAssert.state(this.dir.exists(),\n\t\t\t\t\t\t() -> \"Unable to create temp directory \" + this.dir);\n\t\t\t}\n\t\t}\n\t\treturn this.dir;\n\t}", "code_tokens": ["public", "File", "getDir", "(", ")", "{", "if", "(", "this", ".", "dir", "==", "null", ")", "{", "synchronized", "(", "this", ")", "{", "byte", "[", "]", "hash", "=", "generateHash", "(", "this", ".", "sourceClass", ")", ";", "this", ".", "dir", "=", "new", "File", "(", "getTempDirectory", "(", ")", ",", "toHexString", "(", "hash", ")", ")", ";", "this", ".", "dir", ".", "mkdirs", "(", ")", ";", "Assert", ".", "state", "(", "this", ".", "dir", ".", "exists", "(", ")", ",", "(", ")", "->", "\"Unable to create temp directory \"", "+", "this", ".", "dir", ")", ";", "}", "}", "return", "this", ".", "dir", ";", "}"], "docstring": "Return the directory to be used for application specific temp files.\n@return the application temp directory", "docstring_tokens": ["Return", "the", "directory", "to", "be", "used", "for", "application", "specific", "temp", "files", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java#L76-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java", "func_name": "InfoPropertiesInfoContributor.generateContent", "original_string": "protected Map<String, Object> generateContent() {\n\t\tMap<String, Object> content = extractContent(toPropertySource());\n\t\tpostProcessContent(content);\n\t\treturn content;\n\t}", "language": "java", "code": "protected Map<String, Object> generateContent() {\n\t\tMap<String, Object> content = extractContent(toPropertySource());\n\t\tpostProcessContent(content);\n\t\treturn content;\n\t}", "code_tokens": ["protected", "Map", "<", "String", ",", "Object", ">", "generateContent", "(", ")", "{", "Map", "<", "String", ",", "Object", ">", "content", "=", "extractContent", "(", "toPropertySource", "(", ")", ")", ";", "postProcessContent", "(", "content", ")", ";", "return", "content", ";", "}"], "docstring": "Extract the content to contribute to the info endpoint.\n@return the content to expose\n@see #extractContent(PropertySource)\n@see #postProcessContent(Map)", "docstring_tokens": ["Extract", "the", "content", "to", "contribute", "to", "the", "info", "endpoint", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java#L83-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java", "func_name": "InfoPropertiesInfoContributor.extractContent", "original_string": "protected Map<String, Object> extractContent(PropertySource<?> propertySource) {\n\t\treturn new Binder(ConfigurationPropertySources.from(propertySource))\n\t\t\t\t.bind(\"\", STRING_OBJECT_MAP).orElseGet(LinkedHashMap::new);\n\t}", "language": "java", "code": "protected Map<String, Object> extractContent(PropertySource<?> propertySource) {\n\t\treturn new Binder(ConfigurationPropertySources.from(propertySource))\n\t\t\t\t.bind(\"\", STRING_OBJECT_MAP).orElseGet(LinkedHashMap::new);\n\t}", "code_tokens": ["protected", "Map", "<", "String", ",", "Object", ">", "extractContent", "(", "PropertySource", "<", "?", ">", "propertySource", ")", "{", "return", "new", "Binder", "(", "ConfigurationPropertySources", ".", "from", "(", "propertySource", ")", ")", ".", "bind", "(", "\"\"", ",", "STRING_OBJECT_MAP", ")", ".", "orElseGet", "(", "LinkedHashMap", "::", "new", ")", ";", "}"], "docstring": "Extract the raw content based on the specified {@link PropertySource}.\n@param propertySource the property source to use\n@return the raw content", "docstring_tokens": ["Extract", "the", "raw", "content", "based", "on", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java#L94-L97", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java", "func_name": "InfoPropertiesInfoContributor.copyIfSet", "original_string": "protected void copyIfSet(Properties target, String key) {\n\t\tString value = this.properties.get(key);\n\t\tif (StringUtils.hasText(value)) {\n\t\t\ttarget.put(key, value);\n\t\t}\n\t}", "language": "java", "code": "protected void copyIfSet(Properties target, String key) {\n\t\tString value = this.properties.get(key);\n\t\tif (StringUtils.hasText(value)) {\n\t\t\ttarget.put(key, value);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "copyIfSet", "(", "Properties", "target", ",", "String", "key", ")", "{", "String", "value", "=", "this", ".", "properties", ".", "get", "(", "key", ")", ";", "if", "(", "StringUtils", ".", "hasText", "(", "value", ")", ")", "{", "target", ".", "put", "(", "key", ",", "value", ")", ";", "}", "}"], "docstring": "Copy the specified key to the target {@link Properties} if it is set.\n@param target the target properties to update\n@param key the key", "docstring_tokens": ["Copy", "the", "specified", "key", "to", "the", "target", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java#L123-L128", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java", "func_name": "InfoPropertiesInfoContributor.replaceValue", "original_string": "protected void replaceValue(Map<String, Object> content, String key, Object value) {\n\t\tif (content.containsKey(key) && value != null) {\n\t\t\tcontent.put(key, value);\n\t\t}\n\t}", "language": "java", "code": "protected void replaceValue(Map<String, Object> content, String key, Object value) {\n\t\tif (content.containsKey(key) && value != null) {\n\t\t\tcontent.put(key, value);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "replaceValue", "(", "Map", "<", "String", ",", "Object", ">", "content", ",", "String", "key", ",", "Object", "value", ")", "{", "if", "(", "content", ".", "containsKey", "(", "key", ")", "&&", "value", "!=", "null", ")", "{", "content", ".", "put", "(", "key", ",", "value", ")", ";", "}", "}"], "docstring": "Replace the {@code value} for the specified key if the value is not {@code null}.\n@param content the content to expose\n@param key the property to replace\n@param value the new value", "docstring_tokens": ["Replace", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java#L136-L140", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java", "func_name": "InfoPropertiesInfoContributor.getNestedMap", "original_string": "@SuppressWarnings(\"unchecked\")\n\tprotected Map<String, Object> getNestedMap(Map<String, Object> map, String key) {\n\t\tObject value = map.get(key);\n\t\tif (value == null) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\treturn (Map<String, Object>) value;\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tprotected Map<String, Object> getNestedMap(Map<String, Object> map, String key) {\n\t\tObject value = map.get(key);\n\t\tif (value == null) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\treturn (Map<String, Object>) value;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "protected", "Map", "<", "String", ",", "Object", ">", "getNestedMap", "(", "Map", "<", "String", ",", "Object", ">", "map", ",", "String", "key", ")", "{", "Object", "value", "=", "map", ".", "get", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "return", "Collections", ".", "emptyMap", "(", ")", ";", "}", "return", "(", "Map", "<", "String", ",", "Object", ">", ")", "value", ";", "}"], "docstring": "Return the nested map with the specified key or empty map if the specified map\ncontains no mapping for the key.\n@param map the content\n@param key the key of a nested map\n@return the nested map", "docstring_tokens": ["Return", "the", "nested", "map", "with", "the", "specified", "key", "or", "empty", "map", "if", "the", "specified", "map", "contains", "no", "mapping", "for", "the", "key", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoPropertiesInfoContributor.java#L149-L156", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpoint.java", "func_name": "HealthEndpoint.healthForComponent", "original_string": "@ReadOperation\n\tpublic Health healthForComponent(@Selector String component) {\n\t\tHealthIndicator indicator = getNestedHealthIndicator(this.healthIndicator,\n\t\t\t\tcomponent);\n\t\treturn (indicator != null) ? indicator.health() : null;\n\t}", "language": "java", "code": "@ReadOperation\n\tpublic Health healthForComponent(@Selector String component) {\n\t\tHealthIndicator indicator = getNestedHealthIndicator(this.healthIndicator,\n\t\t\t\tcomponent);\n\t\treturn (indicator != null) ? indicator.health() : null;\n\t}", "code_tokens": ["@", "ReadOperation", "public", "Health", "healthForComponent", "(", "@", "Selector", "String", "component", ")", "{", "HealthIndicator", "indicator", "=", "getNestedHealthIndicator", "(", "this", ".", "healthIndicator", ",", "component", ")", ";", "return", "(", "indicator", "!=", "null", ")", "?", "indicator", ".", "health", "(", ")", ":", "null", ";", "}"], "docstring": "Return the {@link Health} of a particular component or {@code null} if such\ncomponent does not exist.\n@param component the name of a particular {@link HealthIndicator}\n@return the {@link Health} for the component or {@code null}", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpoint.java#L59-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpoint.java", "func_name": "HealthEndpoint.healthForComponentInstance", "original_string": "@ReadOperation\n\tpublic Health healthForComponentInstance(@Selector String component,\n\t\t\t@Selector String instance) {\n\t\tHealthIndicator indicator = getNestedHealthIndicator(this.healthIndicator,\n\t\t\t\tcomponent);\n\t\tHealthIndicator nestedIndicator = getNestedHealthIndicator(indicator, instance);\n\t\treturn (nestedIndicator != null) ? nestedIndicator.health() : null;\n\t}", "language": "java", "code": "@ReadOperation\n\tpublic Health healthForComponentInstance(@Selector String component,\n\t\t\t@Selector String instance) {\n\t\tHealthIndicator indicator = getNestedHealthIndicator(this.healthIndicator,\n\t\t\t\tcomponent);\n\t\tHealthIndicator nestedIndicator = getNestedHealthIndicator(indicator, instance);\n\t\treturn (nestedIndicator != null) ? nestedIndicator.health() : null;\n\t}", "code_tokens": ["@", "ReadOperation", "public", "Health", "healthForComponentInstance", "(", "@", "Selector", "String", "component", ",", "@", "Selector", "String", "instance", ")", "{", "HealthIndicator", "indicator", "=", "getNestedHealthIndicator", "(", "this", ".", "healthIndicator", ",", "component", ")", ";", "HealthIndicator", "nestedIndicator", "=", "getNestedHealthIndicator", "(", "indicator", ",", "instance", ")", ";", "return", "(", "nestedIndicator", "!=", "null", ")", "?", "nestedIndicator", ".", "health", "(", ")", ":", "null", ";", "}"], "docstring": "Return the {@link Health} of a particular {@code instance} managed by the specified\n{@code component} or {@code null} if that particular component is not a\n{@link CompositeHealthIndicator} or if such instance does not exist.\n@param component the name of a particular {@link CompositeHealthIndicator}\n@param instance the name of an instance managed by that component\n@return the {@link Health} for the component instance of {@code null}", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthEndpoint.java#L74-L81", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterValue.java", "func_name": "MeterValue.valueOf", "original_string": "public static MeterValue valueOf(String value) {\n\t\tif (isNumber(value)) {\n\t\t\treturn new MeterValue(Long.parseLong(value));\n\t\t}\n\t\treturn new MeterValue(DurationStyle.detectAndParse(value));\n\t}", "language": "java", "code": "public static MeterValue valueOf(String value) {\n\t\tif (isNumber(value)) {\n\t\t\treturn new MeterValue(Long.parseLong(value));\n\t\t}\n\t\treturn new MeterValue(DurationStyle.detectAndParse(value));\n\t}", "code_tokens": ["public", "static", "MeterValue", "valueOf", "(", "String", "value", ")", "{", "if", "(", "isNumber", "(", "value", ")", ")", "{", "return", "new", "MeterValue", "(", "Long", ".", "parseLong", "(", "value", ")", ")", ";", "}", "return", "new", "MeterValue", "(", "DurationStyle", ".", "detectAndParse", "(", "value", ")", ")", ";", "}"], "docstring": "Return a new {@link MeterValue} instance for the given String value. The value may\ncontain a simple number, or a {@link DurationStyle duration style string}.\n@param value the source value\n@return a {@link MeterValue} instance", "docstring_tokens": ["Return", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterValue.java#L84-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java", "func_name": "LambdaSafe.callback", "original_string": "public static <C, A> Callback<C, A> callback(Class<C> callbackType,\n\t\t\tC callbackInstance, A argument, Object... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstance, \"CallbackInstance must not be null\");\n\t\treturn new Callback<>(callbackType, callbackInstance, argument,\n\t\t\t\tadditionalArguments);\n\t}", "language": "java", "code": "public static <C, A> Callback<C, A> callback(Class<C> callbackType,\n\t\t\tC callbackInstance, A argument, Object... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstance, \"CallbackInstance must not be null\");\n\t\treturn new Callback<>(callbackType, callbackInstance, argument,\n\t\t\t\tadditionalArguments);\n\t}", "code_tokens": ["public", "static", "<", "C", ",", "A", ">", "Callback", "<", "C", ",", "A", ">", "callback", "(", "Class", "<", "C", ">", "callbackType", ",", "C", "callbackInstance", ",", "A", "argument", ",", "Object", "...", "additionalArguments", ")", "{", "Assert", ".", "notNull", "(", "callbackType", ",", "\"CallbackType must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "callbackInstance", ",", "\"CallbackInstance must not be null\"", ")", ";", "return", "new", "Callback", "<>", "(", "callbackType", ",", "callbackInstance", ",", "argument", ",", "additionalArguments", ")", ";", "}"], "docstring": "Start a call to a single callback instance, dealing with common generic type\nconcerns and exceptions.\n@param callbackType the callback type (a {@link FunctionalInterface functional\ninterface})\n@param callbackInstance the callback instance (may be a lambda)\n@param argument the primary argument passed to the callback\n@param additionalArguments any additional arguments passed to the callback\n@param <C> the callback type\n@param <A> the primary argument type\n@return a {@link Callback} instance that can be invoked.", "docstring_tokens": ["Start", "a", "call", "to", "a", "single", "callback", "instance", "dealing", "with", "common", "generic", "type", "concerns", "and", "exceptions", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L72-L78", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java", "func_name": "LambdaSafe.callbacks", "original_string": "public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,\n\t\t\tCollection<? extends C> callbackInstances, A argument,\n\t\t\tObject... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstances, \"CallbackInstances must not be null\");\n\t\treturn new Callbacks<>(callbackType, callbackInstances, argument,\n\t\t\t\tadditionalArguments);\n\t}", "language": "java", "code": "public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,\n\t\t\tCollection<? extends C> callbackInstances, A argument,\n\t\t\tObject... additionalArguments) {\n\t\tAssert.notNull(callbackType, \"CallbackType must not be null\");\n\t\tAssert.notNull(callbackInstances, \"CallbackInstances must not be null\");\n\t\treturn new Callbacks<>(callbackType, callbackInstances, argument,\n\t\t\t\tadditionalArguments);\n\t}", "code_tokens": ["public", "static", "<", "C", ",", "A", ">", "Callbacks", "<", "C", ",", "A", ">", "callbacks", "(", "Class", "<", "C", ">", "callbackType", ",", "Collection", "<", "?", "extends", "C", ">", "callbackInstances", ",", "A", "argument", ",", "Object", "...", "additionalArguments", ")", "{", "Assert", ".", "notNull", "(", "callbackType", ",", "\"CallbackType must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "callbackInstances", ",", "\"CallbackInstances must not be null\"", ")", ";", "return", "new", "Callbacks", "<>", "(", "callbackType", ",", "callbackInstances", ",", "argument", ",", "additionalArguments", ")", ";", "}"], "docstring": "Start a call to callback instances, dealing with common generic type concerns and\nexceptions.\n@param callbackType the callback type (a {@link FunctionalInterface functional\ninterface})\n@param callbackInstances the callback instances (elements may be lambdas)\n@param argument the primary argument passed to the callbacks\n@param additionalArguments any additional arguments passed to the callbacks\n@param <C> the callback type\n@param <A> the primary argument type\n@return a {@link Callbacks} instance that can be invoked.", "docstring_tokens": ["Start", "a", "call", "to", "callback", "instances", "dealing", "with", "common", "generic", "type", "concerns", "and", "exceptions", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L92-L99", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java", "func_name": "LambdaSafe.invokeAnd", "original_string": "public <R> Stream<R> invokeAnd(Function<C, R> invoker) {\n\t\t\tFunction<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(\n\t\t\t\t\tcallbackInstance, () -> invoker.apply(callbackInstance));\n\t\t\treturn this.callbackInstances.stream().map(mapper)\n\t\t\t\t\t.filter(InvocationResult::hasResult).map(InvocationResult::get);\n\t\t}", "language": "java", "code": "public <R> Stream<R> invokeAnd(Function<C, R> invoker) {\n\t\t\tFunction<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(\n\t\t\t\t\tcallbackInstance, () -> invoker.apply(callbackInstance));\n\t\t\treturn this.callbackInstances.stream().map(mapper)\n\t\t\t\t\t.filter(InvocationResult::hasResult).map(InvocationResult::get);\n\t\t}", "code_tokens": ["public", "<", "R", ">", "Stream", "<", "R", ">", "invokeAnd", "(", "Function", "<", "C", ",", "R", ">", "invoker", ")", "{", "Function", "<", "C", ",", "InvocationResult", "<", "R", ">", ">", "mapper", "=", "(", "callbackInstance", ")", "-", ">", "invoke", "(", "callbackInstance", ",", "(", ")", "->", "invoker", ".", "apply", "(", "callbackInstance", ")", ")", ";", "return", "this", ".", "callbackInstances", ".", "stream", "(", ")", ".", "map", "(", "mapper", ")", ".", "filter", "(", "InvocationResult", "::", "hasResult", ")", ".", "map", "(", "InvocationResult", "::", "get", ")", ";", "}"], "docstring": "Invoke the callback instances where the callback method returns a result.\n@param invoker the invoker used to invoke the callback\n@param <R> the result type\n@return the results of the invocation (may be an empty stream if no callbacks\ncould be called)", "docstring_tokens": ["Invoke", "the", "callback", "instances", "where", "the", "callback", "method", "returns", "a", "result", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java#L315-L320", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java", "func_name": "LiveReloadServer.start", "original_string": "public int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(!isStarted(), \"Server already started\");\n\t\t\tlogger.debug(\"Starting live reload server on port \" + this.port);\n\t\t\tthis.serverSocket = new ServerSocket(this.port);\n\t\t\tint localPort = this.serverSocket.getLocalPort();\n\t\t\tthis.listenThread = this.threadFactory.newThread(this::acceptConnections);\n\t\t\tthis.listenThread.setDaemon(true);\n\t\t\tthis.listenThread.setName(\"Live Reload Server\");\n\t\t\tthis.listenThread.start();\n\t\t\treturn localPort;\n\t\t}\n\t}", "language": "java", "code": "public int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(!isStarted(), \"Server already started\");\n\t\t\tlogger.debug(\"Starting live reload server on port \" + this.port);\n\t\t\tthis.serverSocket = new ServerSocket(this.port);\n\t\t\tint localPort = this.serverSocket.getLocalPort();\n\t\t\tthis.listenThread = this.threadFactory.newThread(this::acceptConnections);\n\t\t\tthis.listenThread.setDaemon(true);\n\t\t\tthis.listenThread.setName(\"Live Reload Server\");\n\t\t\tthis.listenThread.start();\n\t\t\treturn localPort;\n\t\t}\n\t}", "code_tokens": ["public", "int", "start", "(", ")", "throws", "IOException", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "Assert", ".", "state", "(", "!", "isStarted", "(", ")", ",", "\"Server already started\"", ")", ";", "logger", ".", "debug", "(", "\"Starting live reload server on port \"", "+", "this", ".", "port", ")", ";", "this", ".", "serverSocket", "=", "new", "ServerSocket", "(", "this", ".", "port", ")", ";", "int", "localPort", "=", "this", ".", "serverSocket", ".", "getLocalPort", "(", ")", ";", "this", ".", "listenThread", "=", "this", ".", "threadFactory", ".", "newThread", "(", "this", "::", "acceptConnections", ")", ";", "this", ".", "listenThread", ".", "setDaemon", "(", "true", ")", ";", "this", ".", "listenThread", ".", "setName", "(", "\"Live Reload Server\"", ")", ";", "this", ".", "listenThread", ".", "start", "(", ")", ";", "return", "localPort", ";", "}", "}"], "docstring": "Start the livereload server and accept incoming connections.\n@return the port on which the server is listening\n@throws IOException in case of I/O errors", "docstring_tokens": ["Start", "the", "livereload", "server", "and", "accept", "incoming", "connections", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java#L111-L123", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java", "func_name": "LiveReloadServer.stop", "original_string": "public void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.listenThread != null) {\n\t\t\t\tcloseAllConnections();\n\t\t\t\ttry {\n\t\t\t\t\tthis.executor.shutdown();\n\t\t\t\t\tthis.executor.awaitTermination(1, TimeUnit.MINUTES);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverSocket.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.listenThread.join();\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.listenThread = null;\n\t\t\t\tthis.serverSocket = null;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.listenThread != null) {\n\t\t\t\tcloseAllConnections();\n\t\t\t\ttry {\n\t\t\t\t\tthis.executor.shutdown();\n\t\t\t\t\tthis.executor.awaitTermination(1, TimeUnit.MINUTES);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverSocket.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.listenThread.join();\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.listenThread = null;\n\t\t\t\tthis.serverSocket = null;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "stop", "(", ")", "throws", "IOException", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "if", "(", "this", ".", "listenThread", "!=", "null", ")", "{", "closeAllConnections", "(", ")", ";", "try", "{", "this", ".", "executor", ".", "shutdown", "(", ")", ";", "this", ".", "executor", ".", "awaitTermination", "(", "1", ",", "TimeUnit", ".", "MINUTES", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "}", "this", ".", "serverSocket", ".", "close", "(", ")", ";", "try", "{", "this", ".", "listenThread", ".", "join", "(", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "}", "this", ".", "listenThread", "=", "null", ";", "this", ".", "serverSocket", "=", "null", ";", "}", "}", "}"], "docstring": "Gracefully stop the livereload server.\n@throws IOException in case of I/O errors", "docstring_tokens": ["Gracefully", "stop", "the", "livereload", "server", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java#L166-L188", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java", "func_name": "LiveReloadServer.triggerReload", "original_string": "public void triggerReload() {\n\t\tsynchronized (this.monitor) {\n\t\t\tsynchronized (this.connections) {\n\t\t\t\tfor (Connection connection : this.connections) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.triggerReload();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\tlogger.debug(\"Unable to send reload message\", ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void triggerReload() {\n\t\tsynchronized (this.monitor) {\n\t\t\tsynchronized (this.connections) {\n\t\t\t\tfor (Connection connection : this.connections) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.triggerReload();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\tlogger.debug(\"Unable to send reload message\", ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "triggerReload", "(", ")", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "synchronized", "(", "this", ".", "connections", ")", "{", "for", "(", "Connection", "connection", ":", "this", ".", "connections", ")", "{", "try", "{", "connection", ".", "triggerReload", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "logger", ".", "debug", "(", "\"Unable to send reload message\"", ",", "ex", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Trigger livereload of all connected clients.", "docstring_tokens": ["Trigger", "livereload", "of", "all", "connected", "clients", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java#L201-L214", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java", "func_name": "LiveReloadServer.createConnection", "original_string": "protected Connection createConnection(Socket socket, InputStream inputStream,\n\t\t\tOutputStream outputStream) throws IOException {\n\t\treturn new Connection(socket, inputStream, outputStream);\n\t}", "language": "java", "code": "protected Connection createConnection(Socket socket, InputStream inputStream,\n\t\t\tOutputStream outputStream) throws IOException {\n\t\treturn new Connection(socket, inputStream, outputStream);\n\t}", "code_tokens": ["protected", "Connection", "createConnection", "(", "Socket", "socket", ",", "InputStream", "inputStream", ",", "OutputStream", "outputStream", ")", "throws", "IOException", "{", "return", "new", "Connection", "(", "socket", ",", "inputStream", ",", "outputStream", ")", ";", "}"], "docstring": "Factory method used to create the {@link Connection}.\n@param socket the source socket\n@param inputStream the socket input stream\n@param outputStream the socket output stream\n@return a connection\n@throws IOException in case of I/O errors", "docstring_tokens": ["Factory", "method", "used", "to", "create", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/LiveReloadServer.java#L236-L239", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.run", "original_string": "public ConfigurableApplicationContext run(String... args) {\n\t\tif (this.running.get()) {\n\t\t\t// If already created we just return the existing context\n\t\t\treturn this.context;\n\t\t}\n\t\tconfigureAsChildIfNecessary(args);\n\t\tif (this.running.compareAndSet(false, true)) {\n\t\t\tsynchronized (this.running) {\n\t\t\t\t// If not already running copy the sources over and then run.\n\t\t\t\tthis.context = build().run(args);\n\t\t\t}\n\t\t}\n\t\treturn this.context;\n\t}", "language": "java", "code": "public ConfigurableApplicationContext run(String... args) {\n\t\tif (this.running.get()) {\n\t\t\t// If already created we just return the existing context\n\t\t\treturn this.context;\n\t\t}\n\t\tconfigureAsChildIfNecessary(args);\n\t\tif (this.running.compareAndSet(false, true)) {\n\t\t\tsynchronized (this.running) {\n\t\t\t\t// If not already running copy the sources over and then run.\n\t\t\t\tthis.context = build().run(args);\n\t\t\t}\n\t\t}\n\t\treturn this.context;\n\t}", "code_tokens": ["public", "ConfigurableApplicationContext", "run", "(", "String", "...", "args", ")", "{", "if", "(", "this", ".", "running", ".", "get", "(", ")", ")", "{", "// If already created we just return the existing context", "return", "this", ".", "context", ";", "}", "configureAsChildIfNecessary", "(", "args", ")", ";", "if", "(", "this", ".", "running", ".", "compareAndSet", "(", "false", ",", "true", ")", ")", "{", "synchronized", "(", "this", ".", "running", ")", "{", "// If not already running copy the sources over and then run.", "this", ".", "context", "=", "build", "(", ")", ".", "run", "(", "args", ")", ";", "}", "}", "return", "this", ".", "context", ";", "}"], "docstring": "Create an application context (and its parent if specified) with the command line\nargs provided. The parent is run first with the same arguments if has not yet been\nstarted.\n@param args the command line arguments\n@return an application context created from the current state", "docstring_tokens": ["Create", "an", "application", "context", "(", "and", "its", "parent", "if", "specified", ")", "with", "the", "command", "line", "args", "provided", ".", "The", "parent", "is", "run", "first", "with", "the", "same", "arguments", "if", "has", "not", "yet", "been", "started", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L130-L143", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.build", "original_string": "public SpringApplication build(String... args) {\n\t\tconfigureAsChildIfNecessary(args);\n\t\tthis.application.addPrimarySources(this.sources);\n\t\treturn this.application;\n\t}", "language": "java", "code": "public SpringApplication build(String... args) {\n\t\tconfigureAsChildIfNecessary(args);\n\t\tthis.application.addPrimarySources(this.sources);\n\t\treturn this.application;\n\t}", "code_tokens": ["public", "SpringApplication", "build", "(", "String", "...", "args", ")", "{", "configureAsChildIfNecessary", "(", "args", ")", ";", "this", ".", "application", ".", "addPrimarySources", "(", "this", ".", "sources", ")", ";", "return", "this", ".", "application", ";", "}"], "docstring": "Returns a fully configured {@link SpringApplication} that is ready to run. Any\nparent that has been configured will be run with the given {@code args}.\n@param args the parent's args\n@return the fully configured {@link SpringApplication}.", "docstring_tokens": ["Returns", "a", "fully", "configured", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L170-L174", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.child", "original_string": "public SpringApplicationBuilder child(Class<?>... sources) {\n\t\tSpringApplicationBuilder child = new SpringApplicationBuilder();\n\t\tchild.sources(sources);\n\n\t\t// Copy environment stuff from parent to child\n\t\tchild.properties(this.defaultProperties).environment(this.environment)\n\t\t\t\t.additionalProfiles(this.additionalProfiles);\n\t\tchild.parent = this;\n\n\t\t// It's not possible if embedded web server are enabled to support web contexts as\n\t\t// parents because the servlets cannot be initialized at the right point in\n\t\t// lifecycle.\n\t\tweb(WebApplicationType.NONE);\n\n\t\t// Probably not interested in multiple banners\n\t\tbannerMode(Banner.Mode.OFF);\n\n\t\t// Make sure sources get copied over\n\t\tthis.application.addPrimarySources(this.sources);\n\n\t\treturn child;\n\t}", "language": "java", "code": "public SpringApplicationBuilder child(Class<?>... sources) {\n\t\tSpringApplicationBuilder child = new SpringApplicationBuilder();\n\t\tchild.sources(sources);\n\n\t\t// Copy environment stuff from parent to child\n\t\tchild.properties(this.defaultProperties).environment(this.environment)\n\t\t\t\t.additionalProfiles(this.additionalProfiles);\n\t\tchild.parent = this;\n\n\t\t// It's not possible if embedded web server are enabled to support web contexts as\n\t\t// parents because the servlets cannot be initialized at the right point in\n\t\t// lifecycle.\n\t\tweb(WebApplicationType.NONE);\n\n\t\t// Probably not interested in multiple banners\n\t\tbannerMode(Banner.Mode.OFF);\n\n\t\t// Make sure sources get copied over\n\t\tthis.application.addPrimarySources(this.sources);\n\n\t\treturn child;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "child", "(", "Class", "<", "?", ">", "...", "sources", ")", "{", "SpringApplicationBuilder", "child", "=", "new", "SpringApplicationBuilder", "(", ")", ";", "child", ".", "sources", "(", "sources", ")", ";", "// Copy environment stuff from parent to child", "child", ".", "properties", "(", "this", ".", "defaultProperties", ")", ".", "environment", "(", "this", ".", "environment", ")", ".", "additionalProfiles", "(", "this", ".", "additionalProfiles", ")", ";", "child", ".", "parent", "=", "this", ";", "// It's not possible if embedded web server are enabled to support web contexts as", "// parents because the servlets cannot be initialized at the right point in", "// lifecycle.", "web", "(", "WebApplicationType", ".", "NONE", ")", ";", "// Probably not interested in multiple banners", "bannerMode", "(", "Banner", ".", "Mode", ".", "OFF", ")", ";", "// Make sure sources get copied over", "this", ".", "application", ".", "addPrimarySources", "(", "this", ".", "sources", ")", ";", "return", "child", ";", "}"], "docstring": "Create a child application with the provided sources. Default args and environment\nare copied down into the child, but everything else is a clean sheet.\n@param sources the sources for the application (Spring configuration)\n@return the child application builder", "docstring_tokens": ["Create", "a", "child", "application", "with", "the", "provided", "sources", ".", "Default", "args", "and", "environment", "are", "copied", "down", "into", "the", "child", "but", "everything", "else", "is", "a", "clean", "sheet", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L182-L203", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.parent", "original_string": "public SpringApplicationBuilder parent(Class<?>... sources) {\n\t\tif (this.parent == null) {\n\t\t\tthis.parent = new SpringApplicationBuilder(sources)\n\t\t\t\t\t.web(WebApplicationType.NONE).properties(this.defaultProperties)\n\t\t\t\t\t.environment(this.environment);\n\t\t}\n\t\telse {\n\t\t\tthis.parent.sources(sources);\n\t\t}\n\t\treturn this.parent;\n\t}", "language": "java", "code": "public SpringApplicationBuilder parent(Class<?>... sources) {\n\t\tif (this.parent == null) {\n\t\t\tthis.parent = new SpringApplicationBuilder(sources)\n\t\t\t\t\t.web(WebApplicationType.NONE).properties(this.defaultProperties)\n\t\t\t\t\t.environment(this.environment);\n\t\t}\n\t\telse {\n\t\t\tthis.parent.sources(sources);\n\t\t}\n\t\treturn this.parent;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "parent", "(", "Class", "<", "?", ">", "...", "sources", ")", "{", "if", "(", "this", ".", "parent", "==", "null", ")", "{", "this", ".", "parent", "=", "new", "SpringApplicationBuilder", "(", "sources", ")", ".", "web", "(", "WebApplicationType", ".", "NONE", ")", ".", "properties", "(", "this", ".", "defaultProperties", ")", ".", "environment", "(", "this", ".", "environment", ")", ";", "}", "else", "{", "this", ".", "parent", ".", "sources", "(", "sources", ")", ";", "}", "return", "this", ".", "parent", ";", "}"], "docstring": "Add a parent application with the provided sources. Default args and environment\nare copied up into the parent, but everything else is a clean sheet.\n@param sources the sources for the application (Spring configuration)\n@return the parent builder", "docstring_tokens": ["Add", "a", "parent", "application", "with", "the", "provided", "sources", ".", "Default", "args", "and", "environment", "are", "copied", "up", "into", "the", "parent", "but", "everything", "else", "is", "a", "clean", "sheet", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L211-L221", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.parent", "original_string": "public SpringApplicationBuilder parent(ConfigurableApplicationContext parent) {\n\t\tthis.parent = new SpringApplicationBuilder();\n\t\tthis.parent.context = parent;\n\t\tthis.parent.running.set(true);\n\t\treturn this;\n\t}", "language": "java", "code": "public SpringApplicationBuilder parent(ConfigurableApplicationContext parent) {\n\t\tthis.parent = new SpringApplicationBuilder();\n\t\tthis.parent.context = parent;\n\t\tthis.parent.running.set(true);\n\t\treturn this;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "parent", "(", "ConfigurableApplicationContext", "parent", ")", "{", "this", ".", "parent", "=", "new", "SpringApplicationBuilder", "(", ")", ";", "this", ".", "parent", ".", "context", "=", "parent", ";", "this", ".", "parent", ".", "running", ".", "set", "(", "true", ")", ";", "return", "this", ";", "}"], "docstring": "Add an already running parent context to an existing application.\n@param parent the parent context\n@return the current builder (not the parent)", "docstring_tokens": ["Add", "an", "already", "running", "parent", "context", "to", "an", "existing", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L239-L244", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.sibling", "original_string": "public SpringApplicationBuilder sibling(Class<?>[] sources, String... args) {\n\t\treturn runAndExtractParent(args).child(sources);\n\t}", "language": "java", "code": "public SpringApplicationBuilder sibling(Class<?>[] sources, String... args) {\n\t\treturn runAndExtractParent(args).child(sources);\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "sibling", "(", "Class", "<", "?", ">", "[", "]", "sources", ",", "String", "...", "args", ")", "{", "return", "runAndExtractParent", "(", "args", ")", ".", "child", "(", "sources", ")", ";", "}"], "docstring": "Create a sibling application (one with the same parent). A side effect of calling\nthis method is that the current application (and its parent) are started if they\nare not already running.\n@param sources the sources for the application (Spring configuration)\n@param args the command line arguments to use when starting the current app and its\nparent\n@return the new sibling builder", "docstring_tokens": ["Create", "a", "sibling", "application", "(", "one", "with", "the", "same", "parent", ")", ".", "A", "side", "effect", "of", "calling", "this", "method", "is", "that", "the", "current", "application", "(", "and", "its", "parent", ")", "are", "started", "if", "they", "are", "not", "already", "running", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L268-L270", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.sources", "original_string": "public SpringApplicationBuilder sources(Class<?>... sources) {\n\t\tthis.sources.addAll(new LinkedHashSet<>(Arrays.asList(sources)));\n\t\treturn this;\n\t}", "language": "java", "code": "public SpringApplicationBuilder sources(Class<?>... sources) {\n\t\tthis.sources.addAll(new LinkedHashSet<>(Arrays.asList(sources)));\n\t\treturn this;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "sources", "(", "Class", "<", "?", ">", "...", "sources", ")", "{", "this", ".", "sources", ".", "addAll", "(", "new", "LinkedHashSet", "<>", "(", "Arrays", ".", "asList", "(", "sources", ")", ")", ")", ";", "return", "this", ";", "}"], "docstring": "Add more sources (configuration classes and components) to this application.\n@param sources the sources to add\n@return the current builder", "docstring_tokens": ["Add", "more", "sources", "(", "configuration", "classes", "and", "components", ")", "to", "this", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L288-L291", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.properties", "original_string": "public SpringApplicationBuilder properties(Map<String, Object> defaults) {\n\t\tthis.defaultProperties.putAll(defaults);\n\t\tthis.application.setDefaultProperties(this.defaultProperties);\n\t\tif (this.parent != null) {\n\t\t\tthis.parent.properties(this.defaultProperties);\n\t\t\tthis.parent.environment(this.environment);\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public SpringApplicationBuilder properties(Map<String, Object> defaults) {\n\t\tthis.defaultProperties.putAll(defaults);\n\t\tthis.application.setDefaultProperties(this.defaultProperties);\n\t\tif (this.parent != null) {\n\t\t\tthis.parent.properties(this.defaultProperties);\n\t\t\tthis.parent.environment(this.environment);\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "properties", "(", "Map", "<", "String", ",", "Object", ">", "defaults", ")", "{", "this", ".", "defaultProperties", ".", "putAll", "(", "defaults", ")", ";", "this", ".", "application", ".", "setDefaultProperties", "(", "this", ".", "defaultProperties", ")", ";", "if", "(", "this", ".", "parent", "!=", "null", ")", "{", "this", ".", "parent", ".", "properties", "(", "this", ".", "defaultProperties", ")", ";", "this", ".", "parent", ".", "environment", "(", "this", ".", "environment", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Default properties for the environment. Multiple calls to this method are\ncumulative.\n@param defaults the default properties\n@return the current builder\n@see SpringApplicationBuilder#properties(String...)", "docstring_tokens": ["Default", "properties", "for", "the", "environment", ".", "Multiple", "calls", "to", "this", "method", "are", "cumulative", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L456-L464", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java", "func_name": "SpringApplicationBuilder.profiles", "original_string": "public SpringApplicationBuilder profiles(String... profiles) {\n\t\tthis.additionalProfiles.addAll(Arrays.asList(profiles));\n\t\tthis.application.setAdditionalProfiles(\n\t\t\t\tStringUtils.toStringArray(this.additionalProfiles));\n\t\treturn this;\n\t}", "language": "java", "code": "public SpringApplicationBuilder profiles(String... profiles) {\n\t\tthis.additionalProfiles.addAll(Arrays.asList(profiles));\n\t\tthis.application.setAdditionalProfiles(\n\t\t\t\tStringUtils.toStringArray(this.additionalProfiles));\n\t\treturn this;\n\t}", "code_tokens": ["public", "SpringApplicationBuilder", "profiles", "(", "String", "...", "profiles", ")", "{", "this", ".", "additionalProfiles", ".", "addAll", "(", "Arrays", ".", "asList", "(", "profiles", ")", ")", ";", "this", ".", "application", ".", "setAdditionalProfiles", "(", "StringUtils", ".", "toStringArray", "(", "this", ".", "additionalProfiles", ")", ")", ";", "return", "this", ";", "}"], "docstring": "Add to the active Spring profiles for this app (and its parent and children).\n@param profiles the profiles to add.\n@return the current builder", "docstring_tokens": ["Add", "to", "the", "active", "Spring", "profiles", "for", "this", "app", "(", "and", "its", "parent", "and", "children", ")", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java#L471-L476", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java", "func_name": "ApplicationConversionService.getSharedInstance", "original_string": "public static ConversionService getSharedInstance() {\n\t\tApplicationConversionService sharedInstance = ApplicationConversionService.sharedInstance;\n\t\tif (sharedInstance == null) {\n\t\t\tsynchronized (ApplicationConversionService.class) {\n\t\t\t\tsharedInstance = ApplicationConversionService.sharedInstance;\n\t\t\t\tif (sharedInstance == null) {\n\t\t\t\t\tsharedInstance = new ApplicationConversionService();\n\t\t\t\t\tApplicationConversionService.sharedInstance = sharedInstance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sharedInstance;\n\t}", "language": "java", "code": "public static ConversionService getSharedInstance() {\n\t\tApplicationConversionService sharedInstance = ApplicationConversionService.sharedInstance;\n\t\tif (sharedInstance == null) {\n\t\t\tsynchronized (ApplicationConversionService.class) {\n\t\t\t\tsharedInstance = ApplicationConversionService.sharedInstance;\n\t\t\t\tif (sharedInstance == null) {\n\t\t\t\t\tsharedInstance = new ApplicationConversionService();\n\t\t\t\t\tApplicationConversionService.sharedInstance = sharedInstance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sharedInstance;\n\t}", "code_tokens": ["public", "static", "ConversionService", "getSharedInstance", "(", ")", "{", "ApplicationConversionService", "sharedInstance", "=", "ApplicationConversionService", ".", "sharedInstance", ";", "if", "(", "sharedInstance", "==", "null", ")", "{", "synchronized", "(", "ApplicationConversionService", ".", "class", ")", "{", "sharedInstance", "=", "ApplicationConversionService", ".", "sharedInstance", ";", "if", "(", "sharedInstance", "==", "null", ")", "{", "sharedInstance", "=", "new", "ApplicationConversionService", "(", ")", ";", "ApplicationConversionService", ".", "sharedInstance", "=", "sharedInstance", ";", "}", "}", "}", "return", "sharedInstance", ";", "}"], "docstring": "Return a shared default application {@code ConversionService} instance, lazily\nbuilding it once needed.\n<p>\nNote: This method actually returns an {@link ApplicationConversionService}\ninstance. However, the {@code ConversionService} signature has been preserved for\nbinary compatibility.\n@return the shared {@code ApplicationConversionService} instance (never\n{@code null})", "docstring_tokens": ["Return", "a", "shared", "default", "application", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L65-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java", "func_name": "ApplicationConversionService.configure", "original_string": "public static void configure(FormatterRegistry registry) {\n\t\tDefaultConversionService.addDefaultConverters(registry);\n\t\tDefaultFormattingConversionService.addDefaultFormatters(registry);\n\t\taddApplicationFormatters(registry);\n\t\taddApplicationConverters(registry);\n\t}", "language": "java", "code": "public static void configure(FormatterRegistry registry) {\n\t\tDefaultConversionService.addDefaultConverters(registry);\n\t\tDefaultFormattingConversionService.addDefaultFormatters(registry);\n\t\taddApplicationFormatters(registry);\n\t\taddApplicationConverters(registry);\n\t}", "code_tokens": ["public", "static", "void", "configure", "(", "FormatterRegistry", "registry", ")", "{", "DefaultConversionService", ".", "addDefaultConverters", "(", "registry", ")", ";", "DefaultFormattingConversionService", ".", "addDefaultFormatters", "(", "registry", ")", ";", "addApplicationFormatters", "(", "registry", ")", ";", "addApplicationConverters", "(", "registry", ")", ";", "}"], "docstring": "Configure the given {@link FormatterRegistry} with formatters and converters\nappropriate for most Spring Boot applications.\n@param registry the registry of converters to add to (must also be castable to\nConversionService, e.g. being a {@link ConfigurableConversionService})\n@throws ClassCastException if the given FormatterRegistry could not be cast to a\nConversionService", "docstring_tokens": ["Configure", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L87-L92", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java", "func_name": "ApplicationConversionService.addApplicationConverters", "original_string": "public static void addApplicationConverters(ConverterRegistry registry) {\n\t\taddDelimitedStringConverters(registry);\n\t\tregistry.addConverter(new StringToDurationConverter());\n\t\tregistry.addConverter(new DurationToStringConverter());\n\t\tregistry.addConverter(new NumberToDurationConverter());\n\t\tregistry.addConverter(new DurationToNumberConverter());\n\t\tregistry.addConverter(new StringToDataSizeConverter());\n\t\tregistry.addConverter(new NumberToDataSizeConverter());\n\t\tregistry.addConverterFactory(new StringToEnumIgnoringCaseConverterFactory());\n\t}", "language": "java", "code": "public static void addApplicationConverters(ConverterRegistry registry) {\n\t\taddDelimitedStringConverters(registry);\n\t\tregistry.addConverter(new StringToDurationConverter());\n\t\tregistry.addConverter(new DurationToStringConverter());\n\t\tregistry.addConverter(new NumberToDurationConverter());\n\t\tregistry.addConverter(new DurationToNumberConverter());\n\t\tregistry.addConverter(new StringToDataSizeConverter());\n\t\tregistry.addConverter(new NumberToDataSizeConverter());\n\t\tregistry.addConverterFactory(new StringToEnumIgnoringCaseConverterFactory());\n\t}", "code_tokens": ["public", "static", "void", "addApplicationConverters", "(", "ConverterRegistry", "registry", ")", "{", "addDelimitedStringConverters", "(", "registry", ")", ";", "registry", ".", "addConverter", "(", "new", "StringToDurationConverter", "(", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "DurationToStringConverter", "(", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "NumberToDurationConverter", "(", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "DurationToNumberConverter", "(", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "StringToDataSizeConverter", "(", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "NumberToDataSizeConverter", "(", ")", ")", ";", "registry", ".", "addConverterFactory", "(", "new", "StringToEnumIgnoringCaseConverterFactory", "(", ")", ")", ";", "}"], "docstring": "Add converters useful for most Spring Boot applications.\n@param registry the registry of converters to add to (must also be castable to\nConversionService, e.g. being a {@link ConfigurableConversionService})\n@throws ClassCastException if the given ConverterRegistry could not be cast to a\nConversionService", "docstring_tokens": ["Add", "converters", "useful", "for", "most", "Spring", "Boot", "applications", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L101-L110", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java", "func_name": "ApplicationConversionService.addDelimitedStringConverters", "original_string": "public static void addDelimitedStringConverters(ConverterRegistry registry) {\n\t\tConversionService service = (ConversionService) registry;\n\t\tregistry.addConverter(new ArrayToDelimitedStringConverter(service));\n\t\tregistry.addConverter(new CollectionToDelimitedStringConverter(service));\n\t\tregistry.addConverter(new DelimitedStringToArrayConverter(service));\n\t\tregistry.addConverter(new DelimitedStringToCollectionConverter(service));\n\t}", "language": "java", "code": "public static void addDelimitedStringConverters(ConverterRegistry registry) {\n\t\tConversionService service = (ConversionService) registry;\n\t\tregistry.addConverter(new ArrayToDelimitedStringConverter(service));\n\t\tregistry.addConverter(new CollectionToDelimitedStringConverter(service));\n\t\tregistry.addConverter(new DelimitedStringToArrayConverter(service));\n\t\tregistry.addConverter(new DelimitedStringToCollectionConverter(service));\n\t}", "code_tokens": ["public", "static", "void", "addDelimitedStringConverters", "(", "ConverterRegistry", "registry", ")", "{", "ConversionService", "service", "=", "(", "ConversionService", ")", "registry", ";", "registry", ".", "addConverter", "(", "new", "ArrayToDelimitedStringConverter", "(", "service", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "CollectionToDelimitedStringConverter", "(", "service", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "DelimitedStringToArrayConverter", "(", "service", ")", ")", ";", "registry", ".", "addConverter", "(", "new", "DelimitedStringToCollectionConverter", "(", "service", ")", ")", ";", "}"], "docstring": "Add converters to support delimited strings.\n@param registry the registry of converters to add to (must also be castable to\nConversionService, e.g. being a {@link ConfigurableConversionService})\n@throws ClassCastException if the given ConverterRegistry could not be cast to a\nConversionService", "docstring_tokens": ["Add", "converters", "to", "support", "delimited", "strings", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L119-L125", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java", "func_name": "ApplicationConversionService.addApplicationFormatters", "original_string": "public static void addApplicationFormatters(FormatterRegistry registry) {\n\t\tregistry.addFormatter(new CharArrayFormatter());\n\t\tregistry.addFormatter(new InetAddressFormatter());\n\t\tregistry.addFormatter(new IsoOffsetFormatter());\n\t}", "language": "java", "code": "public static void addApplicationFormatters(FormatterRegistry registry) {\n\t\tregistry.addFormatter(new CharArrayFormatter());\n\t\tregistry.addFormatter(new InetAddressFormatter());\n\t\tregistry.addFormatter(new IsoOffsetFormatter());\n\t}", "code_tokens": ["public", "static", "void", "addApplicationFormatters", "(", "FormatterRegistry", "registry", ")", "{", "registry", ".", "addFormatter", "(", "new", "CharArrayFormatter", "(", ")", ")", ";", "registry", ".", "addFormatter", "(", "new", "InetAddressFormatter", "(", ")", ")", ";", "registry", ".", "addFormatter", "(", "new", "IsoOffsetFormatter", "(", ")", ")", ";", "}"], "docstring": "Add formatters useful for most Spring Boot applications.\n@param registry the service to register default formatters with", "docstring_tokens": ["Add", "formatters", "useful", "for", "most", "Spring", "Boot", "applications", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L131-L135", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServerFactory.java", "func_name": "NettyRSocketServerFactory.setServerCustomizers", "original_string": "public void setServerCustomizers(\n\t\t\tCollection<? extends ServerRSocketFactoryCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new ArrayList<>(serverCustomizers);\n\t}", "language": "java", "code": "public void setServerCustomizers(\n\t\t\tCollection<? extends ServerRSocketFactoryCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new ArrayList<>(serverCustomizers);\n\t}", "code_tokens": ["public", "void", "setServerCustomizers", "(", "Collection", "<", "?", "extends", "ServerRSocketFactoryCustomizer", ">", "serverCustomizers", ")", "{", "Assert", ".", "notNull", "(", "serverCustomizers", ",", "\"ServerCustomizers must not be null\"", ")", ";", "this", ".", "serverCustomizers", "=", "new", "ArrayList", "<>", "(", "serverCustomizers", ")", ";", "}"], "docstring": "Set {@link ServerRSocketFactoryCustomizer}s that should be applied to the RSocket\nserver builder. Calling this method will replace any existing customizers.\n@param serverCustomizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServerFactory.java#L94-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServerFactory.java", "func_name": "NettyRSocketServerFactory.addServerCustomizers", "original_string": "public void addServerCustomizers(\n\t\t\tServerRSocketFactoryCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}", "language": "java", "code": "public void addServerCustomizers(\n\t\t\tServerRSocketFactoryCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}", "code_tokens": ["public", "void", "addServerCustomizers", "(", "ServerRSocketFactoryCustomizer", "...", "serverCustomizers", ")", "{", "Assert", ".", "notNull", "(", "serverCustomizers", ",", "\"ServerCustomizer must not be null\"", ")", ";", "this", ".", "serverCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "serverCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link ServerRSocketFactoryCustomizer}s that should applied while building the\nserver.\n@param serverCustomizers the customizers to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/rsocket/netty/NettyRSocketServerFactory.java#L105-L109", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/MultipartConfigFactory.java", "func_name": "MultipartConfigFactory.createMultipartConfig", "original_string": "public MultipartConfigElement createMultipartConfig() {\n\t\tlong maxFileSizeBytes = convertToBytes(this.maxFileSize, -1);\n\t\tlong maxRequestSizeBytes = convertToBytes(this.maxRequestSize, -1);\n\t\tlong fileSizeThresholdBytes = convertToBytes(this.fileSizeThreshold, 0);\n\t\treturn new MultipartConfigElement(this.location, maxFileSizeBytes,\n\t\t\t\tmaxRequestSizeBytes, (int) fileSizeThresholdBytes);\n\t}", "language": "java", "code": "public MultipartConfigElement createMultipartConfig() {\n\t\tlong maxFileSizeBytes = convertToBytes(this.maxFileSize, -1);\n\t\tlong maxRequestSizeBytes = convertToBytes(this.maxRequestSize, -1);\n\t\tlong fileSizeThresholdBytes = convertToBytes(this.fileSizeThreshold, 0);\n\t\treturn new MultipartConfigElement(this.location, maxFileSizeBytes,\n\t\t\t\tmaxRequestSizeBytes, (int) fileSizeThresholdBytes);\n\t}", "code_tokens": ["public", "MultipartConfigElement", "createMultipartConfig", "(", ")", "{", "long", "maxFileSizeBytes", "=", "convertToBytes", "(", "this", ".", "maxFileSize", ",", "-", "1", ")", ";", "long", "maxRequestSizeBytes", "=", "convertToBytes", "(", "this", ".", "maxRequestSize", ",", "-", "1", ")", ";", "long", "fileSizeThresholdBytes", "=", "convertToBytes", "(", "this", ".", "fileSizeThreshold", ",", "0", ")", ";", "return", "new", "MultipartConfigElement", "(", "this", ".", "location", ",", "maxFileSizeBytes", ",", "maxRequestSizeBytes", ",", "(", "int", ")", "fileSizeThresholdBytes", ")", ";", "}"], "docstring": "Create a new {@link MultipartConfigElement} instance.\n@return the multipart config element", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/MultipartConfigFactory.java#L77-L83", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/MultipartConfigFactory.java", "func_name": "MultipartConfigFactory.convertToBytes", "original_string": "private long convertToBytes(DataSize size, int defaultValue) {\n\t\tif (size != null && !size.isNegative()) {\n\t\t\treturn size.toBytes();\n\t\t}\n\t\treturn defaultValue;\n\t}", "language": "java", "code": "private long convertToBytes(DataSize size, int defaultValue) {\n\t\tif (size != null && !size.isNegative()) {\n\t\t\treturn size.toBytes();\n\t\t}\n\t\treturn defaultValue;\n\t}", "code_tokens": ["private", "long", "convertToBytes", "(", "DataSize", "size", ",", "int", "defaultValue", ")", "{", "if", "(", "size", "!=", "null", "&&", "!", "size", ".", "isNegative", "(", ")", ")", "{", "return", "size", ".", "toBytes", "(", ")", ";", "}", "return", "defaultValue", ";", "}"], "docstring": "Return the amount of bytes from the specified {@link DataSize size}. If the size is\n{@code null} or negative, returns {@code defaultValue}.\n@param size the data size to handle\n@param defaultValue the default value if the size is {@code null} or negative\n@return the amount of bytes to use", "docstring_tokens": ["Return", "the", "amount", "of", "bytes", "from", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/MultipartConfigFactory.java#L92-L97", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.initializeDataSourceBuilder", "original_string": "public DataSourceBuilder<?> initializeDataSourceBuilder() {\n\t\treturn DataSourceBuilder.create(getClassLoader()).type(getType())\n\t\t\t\t.driverClassName(determineDriverClassName()).url(determineUrl())\n\t\t\t\t.username(determineUsername()).password(determinePassword());\n\t}", "language": "java", "code": "public DataSourceBuilder<?> initializeDataSourceBuilder() {\n\t\treturn DataSourceBuilder.create(getClassLoader()).type(getType())\n\t\t\t\t.driverClassName(determineDriverClassName()).url(determineUrl())\n\t\t\t\t.username(determineUsername()).password(determinePassword());\n\t}", "code_tokens": ["public", "DataSourceBuilder", "<", "?", ">", "initializeDataSourceBuilder", "(", ")", "{", "return", "DataSourceBuilder", ".", "create", "(", "getClassLoader", "(", ")", ")", ".", "type", "(", "getType", "(", ")", ")", ".", "driverClassName", "(", "determineDriverClassName", "(", ")", ")", ".", "url", "(", "determineUrl", "(", ")", ")", ".", "username", "(", "determineUsername", "(", ")", ")", ".", "password", "(", "determinePassword", "(", ")", ")", ";", "}"], "docstring": "Initialize a {@link DataSourceBuilder} with the state of this instance.\n@return a {@link DataSourceBuilder} initialized with the customizations defined on\nthis instance", "docstring_tokens": ["Initialize", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L174-L178", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.determineDriverClassName", "original_string": "public String determineDriverClassName() {\n\t\tif (StringUtils.hasText(this.driverClassName)) {\n\t\t\tAssert.state(driverClassIsLoadable(),\n\t\t\t\t\t() -> \"Cannot load driver class: \" + this.driverClassName);\n\t\t\treturn this.driverClassName;\n\t\t}\n\t\tString driverClassName = null;\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\tdriverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tdriverClassName = this.embeddedDatabaseConnection.getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tthrow new DataSourceBeanCreationException(\n\t\t\t\t\t\"Failed to determine a suitable driver class\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn driverClassName;\n\t}", "language": "java", "code": "public String determineDriverClassName() {\n\t\tif (StringUtils.hasText(this.driverClassName)) {\n\t\t\tAssert.state(driverClassIsLoadable(),\n\t\t\t\t\t() -> \"Cannot load driver class: \" + this.driverClassName);\n\t\t\treturn this.driverClassName;\n\t\t}\n\t\tString driverClassName = null;\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\tdriverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tdriverClassName = this.embeddedDatabaseConnection.getDriverClassName();\n\t\t}\n\t\tif (!StringUtils.hasText(driverClassName)) {\n\t\t\tthrow new DataSourceBeanCreationException(\n\t\t\t\t\t\"Failed to determine a suitable driver class\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn driverClassName;\n\t}", "code_tokens": ["public", "String", "determineDriverClassName", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "driverClassName", ")", ")", "{", "Assert", ".", "state", "(", "driverClassIsLoadable", "(", ")", ",", "(", ")", "->", "\"Cannot load driver class: \"", "+", "this", ".", "driverClassName", ")", ";", "return", "this", ".", "driverClassName", ";", "}", "String", "driverClassName", "=", "null", ";", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "url", ")", ")", "{", "driverClassName", "=", "DatabaseDriver", ".", "fromJdbcUrl", "(", "this", ".", "url", ")", ".", "getDriverClassName", "(", ")", ";", "}", "if", "(", "!", "StringUtils", ".", "hasText", "(", "driverClassName", ")", ")", "{", "driverClassName", "=", "this", ".", "embeddedDatabaseConnection", ".", "getDriverClassName", "(", ")", ";", "}", "if", "(", "!", "StringUtils", ".", "hasText", "(", "driverClassName", ")", ")", "{", "throw", "new", "DataSourceBeanCreationException", "(", "\"Failed to determine a suitable driver class\"", ",", "this", ",", "this", ".", "embeddedDatabaseConnection", ")", ";", "}", "return", "driverClassName", ";", "}"], "docstring": "Determine the driver to use based on this configuration and the environment.\n@return the driver to use\n@since 1.4.0", "docstring_tokens": ["Determine", "the", "driver", "to", "use", "based", "on", "this", "configuration", "and", "the", "environment", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L222-L241", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.determineUrl", "original_string": "public String determineUrl() {\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\treturn this.url;\n\t\t}\n\t\tString databaseName = determineDatabaseName();\n\t\tString url = (databaseName != null)\n\t\t\t\t? this.embeddedDatabaseConnection.getUrl(databaseName) : null;\n\t\tif (!StringUtils.hasText(url)) {\n\t\t\tthrow new DataSourceBeanCreationException(\n\t\t\t\t\t\"Failed to determine suitable jdbc url\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn url;\n\t}", "language": "java", "code": "public String determineUrl() {\n\t\tif (StringUtils.hasText(this.url)) {\n\t\t\treturn this.url;\n\t\t}\n\t\tString databaseName = determineDatabaseName();\n\t\tString url = (databaseName != null)\n\t\t\t\t? this.embeddedDatabaseConnection.getUrl(databaseName) : null;\n\t\tif (!StringUtils.hasText(url)) {\n\t\t\tthrow new DataSourceBeanCreationException(\n\t\t\t\t\t\"Failed to determine suitable jdbc url\", this,\n\t\t\t\t\tthis.embeddedDatabaseConnection);\n\t\t}\n\t\treturn url;\n\t}", "code_tokens": ["public", "String", "determineUrl", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "url", ")", ")", "{", "return", "this", ".", "url", ";", "}", "String", "databaseName", "=", "determineDatabaseName", "(", ")", ";", "String", "url", "=", "(", "databaseName", "!=", "null", ")", "?", "this", ".", "embeddedDatabaseConnection", ".", "getUrl", "(", "databaseName", ")", ":", "null", ";", "if", "(", "!", "StringUtils", ".", "hasText", "(", "url", ")", ")", "{", "throw", "new", "DataSourceBeanCreationException", "(", "\"Failed to determine suitable jdbc url\"", ",", "this", ",", "this", ".", "embeddedDatabaseConnection", ")", ";", "}", "return", "url", ";", "}"], "docstring": "Determine the url to use based on this configuration and the environment.\n@return the url to use\n@since 1.4.0", "docstring_tokens": ["Determine", "the", "url", "to", "use", "based", "on", "this", "configuration", "and", "the", "environment", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L275-L288", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.determineDatabaseName", "original_string": "public String determineDatabaseName() {\n\t\tif (this.generateUniqueName) {\n\t\t\tif (this.uniqueName == null) {\n\t\t\t\tthis.uniqueName = UUID.randomUUID().toString();\n\t\t\t}\n\t\t\treturn this.uniqueName;\n\t\t}\n\t\tif (StringUtils.hasLength(this.name)) {\n\t\t\treturn this.name;\n\t\t}\n\t\tif (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn \"testdb\";\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public String determineDatabaseName() {\n\t\tif (this.generateUniqueName) {\n\t\t\tif (this.uniqueName == null) {\n\t\t\t\tthis.uniqueName = UUID.randomUUID().toString();\n\t\t\t}\n\t\t\treturn this.uniqueName;\n\t\t}\n\t\tif (StringUtils.hasLength(this.name)) {\n\t\t\treturn this.name;\n\t\t}\n\t\tif (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {\n\t\t\treturn \"testdb\";\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "String", "determineDatabaseName", "(", ")", "{", "if", "(", "this", ".", "generateUniqueName", ")", "{", "if", "(", "this", ".", "uniqueName", "==", "null", ")", "{", "this", ".", "uniqueName", "=", "UUID", ".", "randomUUID", "(", ")", ".", "toString", "(", ")", ";", "}", "return", "this", ".", "uniqueName", ";", "}", "if", "(", "StringUtils", ".", "hasLength", "(", "this", ".", "name", ")", ")", "{", "return", "this", ".", "name", ";", "}", "if", "(", "this", ".", "embeddedDatabaseConnection", "!=", "EmbeddedDatabaseConnection", ".", "NONE", ")", "{", "return", "\"testdb\"", ";", "}", "return", "null", ";", "}"], "docstring": "Determine the name to used based on this configuration.\n@return the database name to use or {@code null}\n@since 2.0.0", "docstring_tokens": ["Determine", "the", "name", "to", "used", "based", "on", "this", "configuration", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L295-L309", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.determineUsername", "original_string": "public String determineUsername() {\n\t\tif (StringUtils.hasText(this.username)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {\n\t\t\treturn \"sa\";\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public String determineUsername() {\n\t\tif (StringUtils.hasText(this.username)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {\n\t\t\treturn \"sa\";\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "String", "determineUsername", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "username", ")", ")", "{", "return", "this", ".", "username", ";", "}", "if", "(", "EmbeddedDatabaseConnection", ".", "isEmbedded", "(", "determineDriverClassName", "(", ")", ")", ")", "{", "return", "\"sa\"", ";", "}", "return", "null", ";", "}"], "docstring": "Determine the username to use based on this configuration and the environment.\n@return the username to use\n@since 1.4.0", "docstring_tokens": ["Determine", "the", "username", "to", "use", "based", "on", "this", "configuration", "and", "the", "environment", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L329-L337", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java", "func_name": "DataSourceProperties.determinePassword", "original_string": "public String determinePassword() {\n\t\tif (StringUtils.hasText(this.password)) {\n\t\t\treturn this.password;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public String determinePassword() {\n\t\tif (StringUtils.hasText(this.password)) {\n\t\t\treturn this.password;\n\t\t}\n\t\tif (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "String", "determinePassword", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "password", ")", ")", "{", "return", "this", ".", "password", ";", "}", "if", "(", "EmbeddedDatabaseConnection", ".", "isEmbedded", "(", "determineDriverClassName", "(", ")", ")", ")", "{", "return", "\"\"", ";", "}", "return", "null", ";", "}"], "docstring": "Determine the password to use based on this configuration and the environment.\n@return the password to use\n@since 1.4.0", "docstring_tokens": ["Determine", "the", "password", "to", "use", "based", "on", "this", "configuration", "and", "the", "environment", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java#L357-L365", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java", "func_name": "JsonObjectDeserializer.nullSafeValue", "original_string": "@SuppressWarnings({ \"unchecked\" })\n\tprotected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tif (jsonNode == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type == String.class) {\n\t\t\treturn (D) jsonNode.textValue();\n\t\t}\n\t\tif (type == Boolean.class) {\n\t\t\treturn (D) Boolean.valueOf(jsonNode.booleanValue());\n\t\t}\n\t\tif (type == Long.class) {\n\t\t\treturn (D) Long.valueOf(jsonNode.longValue());\n\t\t}\n\t\tif (type == Integer.class) {\n\t\t\treturn (D) Integer.valueOf(jsonNode.intValue());\n\t\t}\n\t\tif (type == Short.class) {\n\t\t\treturn (D) Short.valueOf(jsonNode.shortValue());\n\t\t}\n\t\tif (type == Double.class) {\n\t\t\treturn (D) Double.valueOf(jsonNode.doubleValue());\n\t\t}\n\t\tif (type == Float.class) {\n\t\t\treturn (D) Float.valueOf(jsonNode.floatValue());\n\t\t}\n\t\tif (type == BigDecimal.class) {\n\t\t\treturn (D) jsonNode.decimalValue();\n\t\t}\n\t\tif (type == BigInteger.class) {\n\t\t\treturn (D) jsonNode.bigIntegerValue();\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Unsupported value type \" + type.getName());\n\t}", "language": "java", "code": "@SuppressWarnings({ \"unchecked\" })\n\tprotected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tif (jsonNode == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type == String.class) {\n\t\t\treturn (D) jsonNode.textValue();\n\t\t}\n\t\tif (type == Boolean.class) {\n\t\t\treturn (D) Boolean.valueOf(jsonNode.booleanValue());\n\t\t}\n\t\tif (type == Long.class) {\n\t\t\treturn (D) Long.valueOf(jsonNode.longValue());\n\t\t}\n\t\tif (type == Integer.class) {\n\t\t\treturn (D) Integer.valueOf(jsonNode.intValue());\n\t\t}\n\t\tif (type == Short.class) {\n\t\t\treturn (D) Short.valueOf(jsonNode.shortValue());\n\t\t}\n\t\tif (type == Double.class) {\n\t\t\treturn (D) Double.valueOf(jsonNode.doubleValue());\n\t\t}\n\t\tif (type == Float.class) {\n\t\t\treturn (D) Float.valueOf(jsonNode.floatValue());\n\t\t}\n\t\tif (type == BigDecimal.class) {\n\t\t\treturn (D) jsonNode.decimalValue();\n\t\t}\n\t\tif (type == BigInteger.class) {\n\t\t\treturn (D) jsonNode.bigIntegerValue();\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Unsupported value type \" + type.getName());\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", "}", ")", "protected", "final", "<", "D", ">", "D", "nullSafeValue", "(", "JsonNode", "jsonNode", ",", "Class", "<", "D", ">", "type", ")", "{", "Assert", ".", "notNull", "(", "type", ",", "\"Type must not be null\"", ")", ";", "if", "(", "jsonNode", "==", "null", ")", "{", "return", "null", ";", "}", "if", "(", "type", "==", "String", ".", "class", ")", "{", "return", "(", "D", ")", "jsonNode", ".", "textValue", "(", ")", ";", "}", "if", "(", "type", "==", "Boolean", ".", "class", ")", "{", "return", "(", "D", ")", "Boolean", ".", "valueOf", "(", "jsonNode", ".", "booleanValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "Long", ".", "class", ")", "{", "return", "(", "D", ")", "Long", ".", "valueOf", "(", "jsonNode", ".", "longValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "Integer", ".", "class", ")", "{", "return", "(", "D", ")", "Integer", ".", "valueOf", "(", "jsonNode", ".", "intValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "Short", ".", "class", ")", "{", "return", "(", "D", ")", "Short", ".", "valueOf", "(", "jsonNode", ".", "shortValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "Double", ".", "class", ")", "{", "return", "(", "D", ")", "Double", ".", "valueOf", "(", "jsonNode", ".", "doubleValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "Float", ".", "class", ")", "{", "return", "(", "D", ")", "Float", ".", "valueOf", "(", "jsonNode", ".", "floatValue", "(", ")", ")", ";", "}", "if", "(", "type", "==", "BigDecimal", ".", "class", ")", "{", "return", "(", "D", ")", "jsonNode", ".", "decimalValue", "(", ")", ";", "}", "if", "(", "type", "==", "BigInteger", ".", "class", ")", "{", "return", "(", "D", ")", "jsonNode", ".", "bigIntegerValue", "(", ")", ";", "}", "throw", "new", "IllegalArgumentException", "(", "\"Unsupported value type \"", "+", "type", ".", "getName", "(", ")", ")", ";", "}"], "docstring": "Helper method to extract a value from the given {@code jsonNode} or return\n{@code null} when the node itself is {@code null}.\n@param jsonNode the source node (may be {@code null})\n@param type the data type. May be {@link String}, {@link Boolean}, {@link Long},\n{@link Integer}, {@link Short}, {@link Double}, {@link Float}, {@link BigDecimal}\nor {@link BigInteger}.\n@param <D> the data type requested\n@return the node value or {@code null}", "docstring_tokens": ["Helper", "method", "to", "extract", "a", "value", "from", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java#L88-L122", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java", "func_name": "JsonObjectDeserializer.getRequiredNode", "original_string": "protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {\n\t\tAssert.notNull(tree, \"Tree must not be null\");\n\t\tJsonNode node = tree.get(fieldName);\n\t\tAssert.state(node != null && !(node instanceof NullNode),\n\t\t\t\t() -> \"Missing JSON field '\" + fieldName + \"'\");\n\t\treturn node;\n\t}", "language": "java", "code": "protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {\n\t\tAssert.notNull(tree, \"Tree must not be null\");\n\t\tJsonNode node = tree.get(fieldName);\n\t\tAssert.state(node != null && !(node instanceof NullNode),\n\t\t\t\t() -> \"Missing JSON field '\" + fieldName + \"'\");\n\t\treturn node;\n\t}", "code_tokens": ["protected", "final", "JsonNode", "getRequiredNode", "(", "JsonNode", "tree", ",", "String", "fieldName", ")", "{", "Assert", ".", "notNull", "(", "tree", ",", "\"Tree must not be null\"", ")", ";", "JsonNode", "node", "=", "tree", ".", "get", "(", "fieldName", ")", ";", "Assert", ".", "state", "(", "node", "!=", "null", "&&", "!", "(", "node", "instanceof", "NullNode", ")", ",", "(", ")", "->", "\"Missing JSON field '\"", "+", "fieldName", "+", "\"'\"", ")", ";", "return", "node", ";", "}"], "docstring": "Helper method to return a {@link JsonNode} from the tree.\n@param tree the source tree\n@param fieldName the field name to extract\n@return the {@link JsonNode}", "docstring_tokens": ["Helper", "method", "to", "return", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java#L130-L136", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsPoolConnectionFactoryFactory.java", "func_name": "JmsPoolConnectionFactoryFactory.createPooledConnectionFactory", "original_string": "public JmsPoolConnectionFactory createPooledConnectionFactory(\n\t\t\tConnectionFactory connectionFactory) {\n\t\tJmsPoolConnectionFactory pooledConnectionFactory = new JmsPoolConnectionFactory();\n\t\tpooledConnectionFactory.setConnectionFactory(connectionFactory);\n\n\t\tpooledConnectionFactory\n\t\t\t\t.setBlockIfSessionPoolIsFull(this.properties.isBlockIfFull());\n\t\tif (this.properties.getBlockIfFullTimeout() != null) {\n\t\t\tpooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(\n\t\t\t\t\tthis.properties.getBlockIfFullTimeout().toMillis());\n\t\t}\n\t\tif (this.properties.getIdleTimeout() != null) {\n\t\t\tpooledConnectionFactory.setConnectionIdleTimeout(\n\t\t\t\t\t(int) this.properties.getIdleTimeout().toMillis());\n\t\t}\n\t\tpooledConnectionFactory.setMaxConnections(this.properties.getMaxConnections());\n\t\tpooledConnectionFactory.setMaxSessionsPerConnection(\n\t\t\t\tthis.properties.getMaxSessionsPerConnection());\n\t\tif (this.properties.getTimeBetweenExpirationCheck() != null) {\n\t\t\tpooledConnectionFactory.setConnectionCheckInterval(\n\t\t\t\t\tthis.properties.getTimeBetweenExpirationCheck().toMillis());\n\t\t}\n\t\tpooledConnectionFactory\n\t\t\t\t.setUseAnonymousProducers(this.properties.isUseAnonymousProducers());\n\t\treturn pooledConnectionFactory;\n\t}", "language": "java", "code": "public JmsPoolConnectionFactory createPooledConnectionFactory(\n\t\t\tConnectionFactory connectionFactory) {\n\t\tJmsPoolConnectionFactory pooledConnectionFactory = new JmsPoolConnectionFactory();\n\t\tpooledConnectionFactory.setConnectionFactory(connectionFactory);\n\n\t\tpooledConnectionFactory\n\t\t\t\t.setBlockIfSessionPoolIsFull(this.properties.isBlockIfFull());\n\t\tif (this.properties.getBlockIfFullTimeout() != null) {\n\t\t\tpooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(\n\t\t\t\t\tthis.properties.getBlockIfFullTimeout().toMillis());\n\t\t}\n\t\tif (this.properties.getIdleTimeout() != null) {\n\t\t\tpooledConnectionFactory.setConnectionIdleTimeout(\n\t\t\t\t\t(int) this.properties.getIdleTimeout().toMillis());\n\t\t}\n\t\tpooledConnectionFactory.setMaxConnections(this.properties.getMaxConnections());\n\t\tpooledConnectionFactory.setMaxSessionsPerConnection(\n\t\t\t\tthis.properties.getMaxSessionsPerConnection());\n\t\tif (this.properties.getTimeBetweenExpirationCheck() != null) {\n\t\t\tpooledConnectionFactory.setConnectionCheckInterval(\n\t\t\t\t\tthis.properties.getTimeBetweenExpirationCheck().toMillis());\n\t\t}\n\t\tpooledConnectionFactory\n\t\t\t\t.setUseAnonymousProducers(this.properties.isUseAnonymousProducers());\n\t\treturn pooledConnectionFactory;\n\t}", "code_tokens": ["public", "JmsPoolConnectionFactory", "createPooledConnectionFactory", "(", "ConnectionFactory", "connectionFactory", ")", "{", "JmsPoolConnectionFactory", "pooledConnectionFactory", "=", "new", "JmsPoolConnectionFactory", "(", ")", ";", "pooledConnectionFactory", ".", "setConnectionFactory", "(", "connectionFactory", ")", ";", "pooledConnectionFactory", ".", "setBlockIfSessionPoolIsFull", "(", "this", ".", "properties", ".", "isBlockIfFull", "(", ")", ")", ";", "if", "(", "this", ".", "properties", ".", "getBlockIfFullTimeout", "(", ")", "!=", "null", ")", "{", "pooledConnectionFactory", ".", "setBlockIfSessionPoolIsFullTimeout", "(", "this", ".", "properties", ".", "getBlockIfFullTimeout", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "if", "(", "this", ".", "properties", ".", "getIdleTimeout", "(", ")", "!=", "null", ")", "{", "pooledConnectionFactory", ".", "setConnectionIdleTimeout", "(", "(", "int", ")", "this", ".", "properties", ".", "getIdleTimeout", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "pooledConnectionFactory", ".", "setMaxConnections", "(", "this", ".", "properties", ".", "getMaxConnections", "(", ")", ")", ";", "pooledConnectionFactory", ".", "setMaxSessionsPerConnection", "(", "this", ".", "properties", ".", "getMaxSessionsPerConnection", "(", ")", ")", ";", "if", "(", "this", ".", "properties", ".", "getTimeBetweenExpirationCheck", "(", ")", "!=", "null", ")", "{", "pooledConnectionFactory", ".", "setConnectionCheckInterval", "(", "this", ".", "properties", ".", "getTimeBetweenExpirationCheck", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "pooledConnectionFactory", ".", "setUseAnonymousProducers", "(", "this", ".", "properties", ".", "isUseAnonymousProducers", "(", ")", ")", ";", "return", "pooledConnectionFactory", ";", "}"], "docstring": "Create a\u00a0{@link JmsPoolConnectionFactory} based on the specified\n{@link ConnectionFactory}.\n@param connectionFactory the connection factory to wrap\n@return a pooled connection factory", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsPoolConnectionFactoryFactory.java#L45-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java", "func_name": "InitializrService.generate", "original_string": "public ProjectGenerationResponse generate(ProjectGenerationRequest request)\n\t\t\tthrows IOException {\n\t\tLog.info(\"Using service at \" + request.getServiceUrl());\n\t\tInitializrServiceMetadata metadata = loadMetadata(request.getServiceUrl());\n\t\tURI url = request.generateUrl(metadata);\n\t\tCloseableHttpResponse httpResponse = executeProjectGenerationRequest(url);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tvalidateResponse(httpResponse, request.getServiceUrl());\n\t\treturn createResponse(httpResponse, httpEntity);\n\t}", "language": "java", "code": "public ProjectGenerationResponse generate(ProjectGenerationRequest request)\n\t\t\tthrows IOException {\n\t\tLog.info(\"Using service at \" + request.getServiceUrl());\n\t\tInitializrServiceMetadata metadata = loadMetadata(request.getServiceUrl());\n\t\tURI url = request.generateUrl(metadata);\n\t\tCloseableHttpResponse httpResponse = executeProjectGenerationRequest(url);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tvalidateResponse(httpResponse, request.getServiceUrl());\n\t\treturn createResponse(httpResponse, httpEntity);\n\t}", "code_tokens": ["public", "ProjectGenerationResponse", "generate", "(", "ProjectGenerationRequest", "request", ")", "throws", "IOException", "{", "Log", ".", "info", "(", "\"Using service at \"", "+", "request", ".", "getServiceUrl", "(", ")", ")", ";", "InitializrServiceMetadata", "metadata", "=", "loadMetadata", "(", "request", ".", "getServiceUrl", "(", ")", ")", ";", "URI", "url", "=", "request", ".", "generateUrl", "(", "metadata", ")", ";", "CloseableHttpResponse", "httpResponse", "=", "executeProjectGenerationRequest", "(", "url", ")", ";", "HttpEntity", "httpEntity", "=", "httpResponse", ".", "getEntity", "(", ")", ";", "validateResponse", "(", "httpResponse", ",", "request", ".", "getServiceUrl", "(", ")", ")", ";", "return", "createResponse", "(", "httpResponse", ",", "httpEntity", ")", ";", "}"], "docstring": "Generate a project based on the specified {@link ProjectGenerationRequest}.\n@param request the generation request\n@return an entity defining the project\n@throws IOException if generation fails", "docstring_tokens": ["Generate", "a", "project", "based", "on", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java#L89-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java", "func_name": "InitializrService.loadMetadata", "original_string": "public InitializrServiceMetadata loadMetadata(String serviceUrl) throws IOException {\n\t\tCloseableHttpResponse httpResponse = executeInitializrMetadataRetrieval(\n\t\t\t\tserviceUrl);\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\treturn parseJsonMetadata(httpResponse.getEntity());\n\t}", "language": "java", "code": "public InitializrServiceMetadata loadMetadata(String serviceUrl) throws IOException {\n\t\tCloseableHttpResponse httpResponse = executeInitializrMetadataRetrieval(\n\t\t\t\tserviceUrl);\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\treturn parseJsonMetadata(httpResponse.getEntity());\n\t}", "code_tokens": ["public", "InitializrServiceMetadata", "loadMetadata", "(", "String", "serviceUrl", ")", "throws", "IOException", "{", "CloseableHttpResponse", "httpResponse", "=", "executeInitializrMetadataRetrieval", "(", "serviceUrl", ")", ";", "validateResponse", "(", "httpResponse", ",", "serviceUrl", ")", ";", "return", "parseJsonMetadata", "(", "httpResponse", ".", "getEntity", "(", ")", ")", ";", "}"], "docstring": "Load the {@link InitializrServiceMetadata} at the specified url.\n@param serviceUrl to url of the initializer service\n@return the metadata describing the service\n@throws IOException if the service's metadata cannot be loaded", "docstring_tokens": ["Load", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java#L106-L111", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java", "func_name": "InitializrService.loadServiceCapabilities", "original_string": "public Object loadServiceCapabilities(String serviceUrl) throws IOException {\n\t\tHttpGet request = new HttpGet(serviceUrl);\n\t\trequest.setHeader(\n\t\t\t\tnew BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES));\n\t\tCloseableHttpResponse httpResponse = execute(request, serviceUrl,\n\t\t\t\t\"retrieve help\");\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tContentType contentType = ContentType.getOrDefault(httpEntity);\n\t\tif (contentType.getMimeType().equals(\"text/plain\")) {\n\t\t\treturn getContent(httpEntity);\n\t\t}\n\t\treturn parseJsonMetadata(httpEntity);\n\t}", "language": "java", "code": "public Object loadServiceCapabilities(String serviceUrl) throws IOException {\n\t\tHttpGet request = new HttpGet(serviceUrl);\n\t\trequest.setHeader(\n\t\t\t\tnew BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES));\n\t\tCloseableHttpResponse httpResponse = execute(request, serviceUrl,\n\t\t\t\t\"retrieve help\");\n\t\tvalidateResponse(httpResponse, serviceUrl);\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tContentType contentType = ContentType.getOrDefault(httpEntity);\n\t\tif (contentType.getMimeType().equals(\"text/plain\")) {\n\t\t\treturn getContent(httpEntity);\n\t\t}\n\t\treturn parseJsonMetadata(httpEntity);\n\t}", "code_tokens": ["public", "Object", "loadServiceCapabilities", "(", "String", "serviceUrl", ")", "throws", "IOException", "{", "HttpGet", "request", "=", "new", "HttpGet", "(", "serviceUrl", ")", ";", "request", ".", "setHeader", "(", "new", "BasicHeader", "(", "HttpHeaders", ".", "ACCEPT", ",", "ACCEPT_SERVICE_CAPABILITIES", ")", ")", ";", "CloseableHttpResponse", "httpResponse", "=", "execute", "(", "request", ",", "serviceUrl", ",", "\"retrieve help\"", ")", ";", "validateResponse", "(", "httpResponse", ",", "serviceUrl", ")", ";", "HttpEntity", "httpEntity", "=", "httpResponse", ".", "getEntity", "(", ")", ";", "ContentType", "contentType", "=", "ContentType", ".", "getOrDefault", "(", "httpEntity", ")", ";", "if", "(", "contentType", ".", "getMimeType", "(", ")", ".", "equals", "(", "\"text/plain\"", ")", ")", "{", "return", "getContent", "(", "httpEntity", ")", ";", "}", "return", "parseJsonMetadata", "(", "httpEntity", ")", ";", "}"], "docstring": "Loads the service capabilities of the service at the specified URL. If the service\nsupports generating a textual representation of the capabilities, it is returned,\notherwise {@link InitializrServiceMetadata} is returned.\n@param serviceUrl to url of the initializer service\n@return the service capabilities (as a String) or the\n{@link InitializrServiceMetadata} describing the service\n@throws IOException if the service capabilities cannot be loaded", "docstring_tokens": ["Loads", "the", "service", "capabilities", "of", "the", "service", "at", "the", "specified", "URL", ".", "If", "the", "service", "supports", "generating", "a", "textual", "representation", "of", "the", "capabilities", "it", "is", "returned", "otherwise", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java#L122-L135", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java", "func_name": "InitializrService.executeInitializrMetadataRetrieval", "original_string": "private CloseableHttpResponse executeInitializrMetadataRetrieval(String url) {\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_META_DATA));\n\t\treturn execute(request, url, \"retrieve metadata\");\n\t}", "language": "java", "code": "private CloseableHttpResponse executeInitializrMetadataRetrieval(String url) {\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_META_DATA));\n\t\treturn execute(request, url, \"retrieve metadata\");\n\t}", "code_tokens": ["private", "CloseableHttpResponse", "executeInitializrMetadataRetrieval", "(", "String", "url", ")", "{", "HttpGet", "request", "=", "new", "HttpGet", "(", "url", ")", ";", "request", ".", "setHeader", "(", "new", "BasicHeader", "(", "HttpHeaders", ".", "ACCEPT", ",", "ACCEPT_META_DATA", ")", ")", ";", "return", "execute", "(", "request", ",", "url", ",", "\"retrieve metadata\"", ")", ";", "}"], "docstring": "Retrieves the meta-data of the service at the specified URL.\n@param url the URL\n@return the response", "docstring_tokens": ["Retrieves", "the", "meta", "-", "data", "of", "the", "service", "at", "the", "specified", "URL", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java#L185-L189", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java", "func_name": "PropertiesMigrationReporter.getReport", "original_string": "public PropertiesMigrationReport getReport() {\n\t\tPropertiesMigrationReport report = new PropertiesMigrationReport();\n\t\tMap<String, List<PropertyMigration>> properties = getMatchingProperties(\n\t\t\t\tdeprecatedFilter());\n\t\tif (properties.isEmpty()) {\n\t\t\treturn report;\n\t\t}\n\t\tproperties.forEach((name, candidates) -> {\n\t\t\tPropertySource<?> propertySource = mapPropertiesWithReplacement(report, name,\n\t\t\t\t\tcandidates);\n\t\t\tif (propertySource != null) {\n\t\t\t\tthis.environment.getPropertySources().addBefore(name, propertySource);\n\t\t\t}\n\t\t});\n\t\treturn report;\n\t}", "language": "java", "code": "public PropertiesMigrationReport getReport() {\n\t\tPropertiesMigrationReport report = new PropertiesMigrationReport();\n\t\tMap<String, List<PropertyMigration>> properties = getMatchingProperties(\n\t\t\t\tdeprecatedFilter());\n\t\tif (properties.isEmpty()) {\n\t\t\treturn report;\n\t\t}\n\t\tproperties.forEach((name, candidates) -> {\n\t\t\tPropertySource<?> propertySource = mapPropertiesWithReplacement(report, name,\n\t\t\t\t\tcandidates);\n\t\t\tif (propertySource != null) {\n\t\t\t\tthis.environment.getPropertySources().addBefore(name, propertySource);\n\t\t\t}\n\t\t});\n\t\treturn report;\n\t}", "code_tokens": ["public", "PropertiesMigrationReport", "getReport", "(", ")", "{", "PropertiesMigrationReport", "report", "=", "new", "PropertiesMigrationReport", "(", ")", ";", "Map", "<", "String", ",", "List", "<", "PropertyMigration", ">", ">", "properties", "=", "getMatchingProperties", "(", "deprecatedFilter", "(", ")", ")", ";", "if", "(", "properties", ".", "isEmpty", "(", ")", ")", "{", "return", "report", ";", "}", "properties", ".", "forEach", "(", "(", "name", ",", "candidates", ")", "->", "{", "PropertySource", "<", "?", ">", "propertySource", "=", "mapPropertiesWithReplacement", "(", "report", ",", "name", ",", "candidates", ")", ";", "if", "(", "propertySource", "!=", "null", ")", "{", "this", ".", "environment", ".", "getPropertySources", "(", ")", ".", "addBefore", "(", "name", ",", "propertySource", ")", ";", "}", "}", ")", ";", "return", "report", ";", "}"], "docstring": "Analyse the {@link ConfigurableEnvironment environment} and attempt to rename\nlegacy properties if a replacement exists.\n@return a report of the migration", "docstring_tokens": ["Analyse", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java#L64-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java", "func_name": "JerseyEndpointResourceFactory.createEndpointResources", "original_string": "public Collection<Resource> createEndpointResources(EndpointMapping endpointMapping,\n\t\t\tCollection<ExposableWebEndpoint> endpoints,\n\t\t\tEndpointMediaTypes endpointMediaTypes, EndpointLinksResolver linksResolver) {\n\t\tList<Resource> resources = new ArrayList<>();\n\t\tendpoints.stream().flatMap((endpoint) -> endpoint.getOperations().stream())\n\t\t\t\t.map((operation) -> createResource(endpointMapping, operation))\n\t\t\t\t.forEach(resources::add);\n\t\tif (StringUtils.hasText(endpointMapping.getPath())) {\n\t\t\tResource resource = createEndpointLinksResource(endpointMapping.getPath(),\n\t\t\t\t\tendpointMediaTypes, linksResolver);\n\t\t\tresources.add(resource);\n\t\t}\n\t\treturn resources;\n\t}", "language": "java", "code": "public Collection<Resource> createEndpointResources(EndpointMapping endpointMapping,\n\t\t\tCollection<ExposableWebEndpoint> endpoints,\n\t\t\tEndpointMediaTypes endpointMediaTypes, EndpointLinksResolver linksResolver) {\n\t\tList<Resource> resources = new ArrayList<>();\n\t\tendpoints.stream().flatMap((endpoint) -> endpoint.getOperations().stream())\n\t\t\t\t.map((operation) -> createResource(endpointMapping, operation))\n\t\t\t\t.forEach(resources::add);\n\t\tif (StringUtils.hasText(endpointMapping.getPath())) {\n\t\t\tResource resource = createEndpointLinksResource(endpointMapping.getPath(),\n\t\t\t\t\tendpointMediaTypes, linksResolver);\n\t\t\tresources.add(resource);\n\t\t}\n\t\treturn resources;\n\t}", "code_tokens": ["public", "Collection", "<", "Resource", ">", "createEndpointResources", "(", "EndpointMapping", "endpointMapping", ",", "Collection", "<", "ExposableWebEndpoint", ">", "endpoints", ",", "EndpointMediaTypes", "endpointMediaTypes", ",", "EndpointLinksResolver", "linksResolver", ")", "{", "List", "<", "Resource", ">", "resources", "=", "new", "ArrayList", "<>", "(", ")", ";", "endpoints", ".", "stream", "(", ")", ".", "flatMap", "(", "(", "endpoint", ")", "-", ">", "endpoint", ".", "getOperations", "(", ")", ".", "stream", "(", ")", ")", ".", "map", "(", "(", "operation", ")", "-", ">", "createResource", "(", "endpointMapping", ",", "operation", ")", ")", ".", "forEach", "(", "resources", "::", "add", ")", ";", "if", "(", "StringUtils", ".", "hasText", "(", "endpointMapping", ".", "getPath", "(", ")", ")", ")", "{", "Resource", "resource", "=", "createEndpointLinksResource", "(", "endpointMapping", ".", "getPath", "(", ")", ",", "endpointMediaTypes", ",", "linksResolver", ")", ";", "resources", ".", "add", "(", "resource", ")", ";", "}", "return", "resources", ";", "}"], "docstring": "Creates {@link Resource Resources} for the operations of the given\n{@code webEndpoints}.\n@param endpointMapping the base mapping for all endpoints\n@param endpoints the web endpoints\n@param endpointMediaTypes media types consumed and produced by the endpoints\n@param linksResolver resolver for determining links to available endpoints\n@return the resources for the operations", "docstring_tokens": ["Creates", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java#L76-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/StaticResourceRequest.java", "func_name": "StaticResourceRequest.at", "original_string": "public StaticResourceServerWebExchange at(StaticResourceLocation first,\n\t\t\tStaticResourceLocation... rest) {\n\t\treturn at(EnumSet.of(first, rest));\n\t}", "language": "java", "code": "public StaticResourceServerWebExchange at(StaticResourceLocation first,\n\t\t\tStaticResourceLocation... rest) {\n\t\treturn at(EnumSet.of(first, rest));\n\t}", "code_tokens": ["public", "StaticResourceServerWebExchange", "at", "(", "StaticResourceLocation", "first", ",", "StaticResourceLocation", "...", "rest", ")", "{", "return", "at", "(", "EnumSet", ".", "of", "(", "first", ",", "rest", ")", ")", ";", "}"], "docstring": "Returns a matcher that includes the specified {@link StaticResourceLocation\nLocations}. For example: <pre class=\"code\">\nPathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)\n</pre>\n@param first the first location to include\n@param rest additional locations to include\n@return the configured {@link ServerWebExchangeMatcher}", "docstring_tokens": ["Returns", "a", "matcher", "that", "includes", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/StaticResourceRequest.java#L73-L76", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/StaticResourceRequest.java", "func_name": "StaticResourceRequest.at", "original_string": "public StaticResourceServerWebExchange at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceServerWebExchange(new LinkedHashSet<>(locations));\n\t}", "language": "java", "code": "public StaticResourceServerWebExchange at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceServerWebExchange(new LinkedHashSet<>(locations));\n\t}", "code_tokens": ["public", "StaticResourceServerWebExchange", "at", "(", "Set", "<", "StaticResourceLocation", ">", "locations", ")", "{", "Assert", ".", "notNull", "(", "locations", ",", "\"Locations must not be null\"", ")", ";", "return", "new", "StaticResourceServerWebExchange", "(", "new", "LinkedHashSet", "<>", "(", "locations", ")", ")", ";", "}"], "docstring": "Returns a matcher that includes the specified {@link StaticResourceLocation\nLocations}. For example: <pre class=\"code\">\nPathRequest.toStaticResources().at(locations)\n</pre>\n@param locations the locations to include\n@return the configured {@link ServerWebExchangeMatcher}", "docstring_tokens": ["Returns", "a", "matcher", "that", "includes", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/StaticResourceRequest.java#L86-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java", "func_name": "EnvironmentConverter.convertEnvironmentIfNecessary", "original_string": "StandardEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment environment,\n\t\t\tClass<? extends StandardEnvironment> type) {\n\t\tif (type.equals(environment.getClass())) {\n\t\t\treturn (StandardEnvironment) environment;\n\t\t}\n\t\treturn convertEnvironment(environment, type);\n\t}", "language": "java", "code": "StandardEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment environment,\n\t\t\tClass<? extends StandardEnvironment> type) {\n\t\tif (type.equals(environment.getClass())) {\n\t\t\treturn (StandardEnvironment) environment;\n\t\t}\n\t\treturn convertEnvironment(environment, type);\n\t}", "code_tokens": ["StandardEnvironment", "convertEnvironmentIfNecessary", "(", "ConfigurableEnvironment", "environment", ",", "Class", "<", "?", "extends", "StandardEnvironment", ">", "type", ")", "{", "if", "(", "type", ".", "equals", "(", "environment", ".", "getClass", "(", ")", ")", ")", "{", "return", "(", "StandardEnvironment", ")", "environment", ";", "}", "return", "convertEnvironment", "(", "environment", ",", "type", ")", ";", "}"], "docstring": "Converts the given {@code environment} to the given {@link StandardEnvironment}\ntype. If the environment is already of the same type, no conversion is performed\nand it is returned unchanged.\n@param environment the Environment to convert\n@param type the type to convert the Environment to\n@return the converted Environment", "docstring_tokens": ["Converts", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java#L71-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java", "func_name": "BeanTypeRegistry.getNamesForType", "original_string": "public Set<String> getNamesForType(Class<?> type, TypeExtractor typeExtractor) {\n\t\tupdateTypesIfNecessary();\n\t\treturn this.beanTypes.entrySet().stream().filter((entry) -> {\n\t\t\tClass<?> beanType = extractType(entry.getValue(), typeExtractor);\n\t\t\treturn beanType != null && type.isAssignableFrom(beanType);\n\t\t}", "language": "java", "code": "public Set<String> getNamesForType(Class<?> type, TypeExtractor typeExtractor) {\n\t\tupdateTypesIfNecessary();\n\t\treturn this.beanTypes.entrySet().stream().filter((entry) -> {\n\t\t\tClass<?> beanType = extractType(entry.getValue(), typeExtractor);\n\t\t\treturn beanType != null && type.isAssignableFrom(beanType);\n\t\t}", "code_tokens": ["public", "Set", "<", "String", ">", "getNamesForType", "(", "Class", "<", "?", ">", "type", ",", "TypeExtractor", "typeExtractor", ")", "{", "updateTypesIfNecessary", "(", ")", ";", "return", "this", ".", "beanTypes", ".", "entrySet", "(", ")", ".", "stream", "(", ")", ".", "filter", "(", "(", "entry", ")", "-", ">", "{", "Class", "<", "?", ">", "beanType", "=", "extractType", "(", "entry", ".", "getValue", "(", ")", ",", "typeExtractor", ")", "", ";", "return", "beanType", "!=", "null", "&&", "type", ".", "isAssignableFrom", "(", "beanType", ")", ";", "}"], "docstring": "Return the names of beans matching the given type (including subclasses), judging\nfrom either bean definitions or the value of {@link FactoryBean#getObjectType()} in\nthe case of {@link FactoryBean FactoryBeans}. Will include singletons but will not\ncause early bean initialization.\n@param type the class or interface to match (must not be {@code null})\n@param typeExtractor function used to extract the actual type\n@return the names of beans (or objects created by FactoryBeans) matching the given\nobject type (including subclasses), or an empty set if none", "docstring_tokens": ["Return", "the", "names", "of", "beans", "matching", "the", "given", "type", "(", "including", "subclasses", ")", "judging", "from", "either", "bean", "definitions", "or", "the", "value", "of", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java#L96-L101", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java", "func_name": "CacheManagerCustomizers.customize", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic <T extends CacheManager> T customize(T cacheManager) {\n\t\tLambdaSafe.callbacks(CacheManagerCustomizer.class, this.customizers, cacheManager)\n\t\t\t\t.withLogger(CacheManagerCustomizers.class)\n\t\t\t\t.invoke((customizer) -> customizer.customize(cacheManager));\n\t\treturn cacheManager;\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic <T extends CacheManager> T customize(T cacheManager) {\n\t\tLambdaSafe.callbacks(CacheManagerCustomizer.class, this.customizers, cacheManager)\n\t\t\t\t.withLogger(CacheManagerCustomizers.class)\n\t\t\t\t.invoke((customizer) -> customizer.customize(cacheManager));\n\t\treturn cacheManager;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "<", "T", "extends", "CacheManager", ">", "T", "customize", "(", "T", "cacheManager", ")", "{", "LambdaSafe", ".", "callbacks", "(", "CacheManagerCustomizer", ".", "class", ",", "this", ".", "customizers", ",", "cacheManager", ")", ".", "withLogger", "(", "CacheManagerCustomizers", ".", "class", ")", ".", "invoke", "(", "(", "customizer", ")", "-", ">", "customizer", ".", "customize", "(", "cacheManager", ")", ")", ";", "return", "cacheManager", ";", "}"], "docstring": "Customize the specified {@link CacheManager}. Locates all\n{@link CacheManagerCustomizer} beans able to handle the specified instance and\ninvoke {@link CacheManagerCustomizer#customize(CacheManager)} on them.\n@param <T> the type of cache manager\n@param cacheManager the cache manager to customize\n@return the cache manager", "docstring_tokens": ["Customize", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java#L51-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java", "func_name": "SpringApplicationRunner.compileAndRun", "original_string": "public void compileAndRun() throws Exception {\n\t\tsynchronized (this.monitor) {\n\t\t\ttry {\n\t\t\t\tstop();\n\t\t\t\tClass<?>[] compiledSources = compile();\n\t\t\t\tmonitorForChanges();\n\t\t\t\t// Run in new thread to ensure that the context classloader is setup\n\t\t\t\tthis.runThread = new RunThread(compiledSources);\n\t\t\t\tthis.runThread.start();\n\t\t\t\tthis.runThread.join();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tif (this.fileWatchThread == null) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void compileAndRun() throws Exception {\n\t\tsynchronized (this.monitor) {\n\t\t\ttry {\n\t\t\t\tstop();\n\t\t\t\tClass<?>[] compiledSources = compile();\n\t\t\t\tmonitorForChanges();\n\t\t\t\t// Run in new thread to ensure that the context classloader is setup\n\t\t\t\tthis.runThread = new RunThread(compiledSources);\n\t\t\t\tthis.runThread.start();\n\t\t\t\tthis.runThread.join();\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tif (this.fileWatchThread == null) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "compileAndRun", "(", ")", "throws", "Exception", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "try", "{", "stop", "(", ")", ";", "Class", "<", "?", ">", "[", "]", "compiledSources", "=", "compile", "(", ")", ";", "monitorForChanges", "(", ")", ";", "// Run in new thread to ensure that the context classloader is setup", "this", ".", "runThread", "=", "new", "RunThread", "(", "compiledSources", ")", ";", "this", ".", "runThread", ".", "start", "(", ")", ";", "this", ".", "runThread", ".", "join", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "if", "(", "this", ".", "fileWatchThread", "==", "null", ")", "{", "throw", "ex", ";", "}", "else", "{", "ex", ".", "printStackTrace", "(", ")", ";", "}", "}", "}", "}"], "docstring": "Compile and run the application.\n@throws Exception on error", "docstring_tokens": ["Compile", "and", "run", "the", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java#L97-L117", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java", "func_name": "ProjectGenerationRequest.generateUrl", "original_string": "URI generateUrl(InitializrServiceMetadata metadata) {\n\t\ttry {\n\t\t\tURIBuilder builder = new URIBuilder(this.serviceUrl);\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tif (builder.getPath() != null) {\n\t\t\t\tsb.append(builder.getPath());\n\t\t\t}\n\n\t\t\tProjectType projectType = determineProjectType(metadata);\n\t\t\tthis.type = projectType.getId();\n\t\t\tsb.append(projectType.getAction());\n\t\t\tbuilder.setPath(sb.toString());\n\n\t\t\tif (!this.dependencies.isEmpty()) {\n\t\t\t\tbuilder.setParameter(\"dependencies\",\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(this.dependencies));\n\t\t\t}\n\n\t\t\tif (this.groupId != null) {\n\t\t\t\tbuilder.setParameter(\"groupId\", this.groupId);\n\t\t\t}\n\t\t\tString resolvedArtifactId = resolveArtifactId();\n\t\t\tif (resolvedArtifactId != null) {\n\t\t\t\tbuilder.setParameter(\"artifactId\", resolvedArtifactId);\n\t\t\t}\n\t\t\tif (this.version != null) {\n\t\t\t\tbuilder.setParameter(\"version\", this.version);\n\t\t\t}\n\t\t\tif (this.name != null) {\n\t\t\t\tbuilder.setParameter(\"name\", this.name);\n\t\t\t}\n\t\t\tif (this.description != null) {\n\t\t\t\tbuilder.setParameter(\"description\", this.description);\n\t\t\t}\n\t\t\tif (this.packageName != null) {\n\t\t\t\tbuilder.setParameter(\"packageName\", this.packageName);\n\t\t\t}\n\t\t\tif (this.type != null) {\n\t\t\t\tbuilder.setParameter(\"type\", projectType.getId());\n\t\t\t}\n\t\t\tif (this.packaging != null) {\n\t\t\t\tbuilder.setParameter(\"packaging\", this.packaging);\n\t\t\t}\n\t\t\tif (this.javaVersion != null) {\n\t\t\t\tbuilder.setParameter(\"javaVersion\", this.javaVersion);\n\t\t\t}\n\t\t\tif (this.language != null) {\n\t\t\t\tbuilder.setParameter(\"language\", this.language);\n\t\t\t}\n\t\t\tif (this.bootVersion != null) {\n\t\t\t\tbuilder.setParameter(\"bootVersion\", this.bootVersion);\n\t\t\t}\n\n\t\t\treturn builder.build();\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new ReportableException(\n\t\t\t\t\t\"Invalid service URL (\" + ex.getMessage() + \")\");\n\t\t}\n\t}", "language": "java", "code": "URI generateUrl(InitializrServiceMetadata metadata) {\n\t\ttry {\n\t\t\tURIBuilder builder = new URIBuilder(this.serviceUrl);\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tif (builder.getPath() != null) {\n\t\t\t\tsb.append(builder.getPath());\n\t\t\t}\n\n\t\t\tProjectType projectType = determineProjectType(metadata);\n\t\t\tthis.type = projectType.getId();\n\t\t\tsb.append(projectType.getAction());\n\t\t\tbuilder.setPath(sb.toString());\n\n\t\t\tif (!this.dependencies.isEmpty()) {\n\t\t\t\tbuilder.setParameter(\"dependencies\",\n\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(this.dependencies));\n\t\t\t}\n\n\t\t\tif (this.groupId != null) {\n\t\t\t\tbuilder.setParameter(\"groupId\", this.groupId);\n\t\t\t}\n\t\t\tString resolvedArtifactId = resolveArtifactId();\n\t\t\tif (resolvedArtifactId != null) {\n\t\t\t\tbuilder.setParameter(\"artifactId\", resolvedArtifactId);\n\t\t\t}\n\t\t\tif (this.version != null) {\n\t\t\t\tbuilder.setParameter(\"version\", this.version);\n\t\t\t}\n\t\t\tif (this.name != null) {\n\t\t\t\tbuilder.setParameter(\"name\", this.name);\n\t\t\t}\n\t\t\tif (this.description != null) {\n\t\t\t\tbuilder.setParameter(\"description\", this.description);\n\t\t\t}\n\t\t\tif (this.packageName != null) {\n\t\t\t\tbuilder.setParameter(\"packageName\", this.packageName);\n\t\t\t}\n\t\t\tif (this.type != null) {\n\t\t\t\tbuilder.setParameter(\"type\", projectType.getId());\n\t\t\t}\n\t\t\tif (this.packaging != null) {\n\t\t\t\tbuilder.setParameter(\"packaging\", this.packaging);\n\t\t\t}\n\t\t\tif (this.javaVersion != null) {\n\t\t\t\tbuilder.setParameter(\"javaVersion\", this.javaVersion);\n\t\t\t}\n\t\t\tif (this.language != null) {\n\t\t\t\tbuilder.setParameter(\"language\", this.language);\n\t\t\t}\n\t\t\tif (this.bootVersion != null) {\n\t\t\t\tbuilder.setParameter(\"bootVersion\", this.bootVersion);\n\t\t\t}\n\n\t\t\treturn builder.build();\n\t\t}\n\t\tcatch (URISyntaxException ex) {\n\t\t\tthrow new ReportableException(\n\t\t\t\t\t\"Invalid service URL (\" + ex.getMessage() + \")\");\n\t\t}\n\t}", "code_tokens": ["URI", "generateUrl", "(", "InitializrServiceMetadata", "metadata", ")", "{", "try", "{", "URIBuilder", "builder", "=", "new", "URIBuilder", "(", "this", ".", "serviceUrl", ")", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "builder", ".", "getPath", "(", ")", "!=", "null", ")", "{", "sb", ".", "append", "(", "builder", ".", "getPath", "(", ")", ")", ";", "}", "ProjectType", "projectType", "=", "determineProjectType", "(", "metadata", ")", ";", "this", ".", "type", "=", "projectType", ".", "getId", "(", ")", ";", "sb", ".", "append", "(", "projectType", ".", "getAction", "(", ")", ")", ";", "builder", ".", "setPath", "(", "sb", ".", "toString", "(", ")", ")", ";", "if", "(", "!", "this", ".", "dependencies", ".", "isEmpty", "(", ")", ")", "{", "builder", ".", "setParameter", "(", "\"dependencies\"", ",", "StringUtils", ".", "collectionToCommaDelimitedString", "(", "this", ".", "dependencies", ")", ")", ";", "}", "if", "(", "this", ".", "groupId", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"groupId\"", ",", "this", ".", "groupId", ")", ";", "}", "String", "resolvedArtifactId", "=", "resolveArtifactId", "(", ")", ";", "if", "(", "resolvedArtifactId", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"artifactId\"", ",", "resolvedArtifactId", ")", ";", "}", "if", "(", "this", ".", "version", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"version\"", ",", "this", ".", "version", ")", ";", "}", "if", "(", "this", ".", "name", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"name\"", ",", "this", ".", "name", ")", ";", "}", "if", "(", "this", ".", "description", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"description\"", ",", "this", ".", "description", ")", ";", "}", "if", "(", "this", ".", "packageName", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"packageName\"", ",", "this", ".", "packageName", ")", ";", "}", "if", "(", "this", ".", "type", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"type\"", ",", "projectType", ".", "getId", "(", ")", ")", ";", "}", "if", "(", "this", ".", "packaging", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"packaging\"", ",", "this", ".", "packaging", ")", ";", "}", "if", "(", "this", ".", "javaVersion", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"javaVersion\"", ",", "this", ".", "javaVersion", ")", ";", "}", "if", "(", "this", ".", "language", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"language\"", ",", "this", ".", "language", ")", ";", "}", "if", "(", "this", ".", "bootVersion", "!=", "null", ")", "{", "builder", ".", "setParameter", "(", "\"bootVersion\"", ",", "this", ".", "bootVersion", ")", ";", "}", "return", "builder", ".", "build", "(", ")", ";", "}", "catch", "(", "URISyntaxException", "ex", ")", "{", "throw", "new", "ReportableException", "(", "\"Invalid service URL (\"", "+", "ex", ".", "getMessage", "(", ")", "+", "\")\"", ")", ";", "}", "}"], "docstring": "Generates the URI to use to generate a project represented by this request.\n@param metadata the metadata that describes the service\n@return the project generation URI", "docstring_tokens": ["Generates", "the", "URI", "to", "use", "to", "generate", "a", "project", "represented", "by", "this", "request", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java#L306-L365", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java", "func_name": "ProjectGenerationRequest.resolveArtifactId", "original_string": "protected String resolveArtifactId() {\n\t\tif (this.artifactId != null) {\n\t\t\treturn this.artifactId;\n\t\t}\n\t\tif (this.output != null) {\n\t\t\tint i = this.output.lastIndexOf('.');\n\t\t\treturn (i != -1) ? this.output.substring(0, i) : this.output;\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "protected String resolveArtifactId() {\n\t\tif (this.artifactId != null) {\n\t\t\treturn this.artifactId;\n\t\t}\n\t\tif (this.output != null) {\n\t\t\tint i = this.output.lastIndexOf('.');\n\t\t\treturn (i != -1) ? this.output.substring(0, i) : this.output;\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["protected", "String", "resolveArtifactId", "(", ")", "{", "if", "(", "this", ".", "artifactId", "!=", "null", ")", "{", "return", "this", ".", "artifactId", ";", "}", "if", "(", "this", ".", "output", "!=", "null", ")", "{", "int", "i", "=", "this", ".", "output", ".", "lastIndexOf", "(", "'", "'", ")", ";", "return", "(", "i", "!=", "-", "1", ")", "?", "this", ".", "output", ".", "substring", "(", "0", ",", "i", ")", ":", "this", ".", "output", ";", "}", "return", "null", ";", "}"], "docstring": "Resolve the artifactId to use or {@code null} if it should not be customized.\n@return the artifactId", "docstring_tokens": ["Resolve", "the", "artifactId", "to", "use", "or", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerationRequest.java#L413-L422", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java", "func_name": "SpringBootCondition.anyMatches", "original_string": "protected final boolean anyMatches(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata, Condition... conditions) {\n\t\tfor (Condition condition : conditions) {\n\t\t\tif (matches(context, metadata, condition)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "protected final boolean anyMatches(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata, Condition... conditions) {\n\t\tfor (Condition condition : conditions) {\n\t\t\tif (matches(context, metadata, condition)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["protected", "final", "boolean", "anyMatches", "(", "ConditionContext", "context", ",", "AnnotatedTypeMetadata", "metadata", ",", "Condition", "...", "conditions", ")", "{", "for", "(", "Condition", "condition", ":", "conditions", ")", "{", "if", "(", "matches", "(", "context", ",", "metadata", ",", "condition", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Return true if any of the specified conditions match.\n@param context the context\n@param metadata the annotation meta-data\n@param conditions conditions to test\n@return {@code true} if any condition matches.", "docstring_tokens": ["Return", "true", "if", "any", "of", "the", "specified", "conditions", "match", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java#L135-L143", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java", "func_name": "SpringBootCondition.matches", "original_string": "protected final boolean matches(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata, Condition condition) {\n\t\tif (condition instanceof SpringBootCondition) {\n\t\t\treturn ((SpringBootCondition) condition).getMatchOutcome(context, metadata)\n\t\t\t\t\t.isMatch();\n\t\t}\n\t\treturn condition.matches(context, metadata);\n\t}", "language": "java", "code": "protected final boolean matches(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata, Condition condition) {\n\t\tif (condition instanceof SpringBootCondition) {\n\t\t\treturn ((SpringBootCondition) condition).getMatchOutcome(context, metadata)\n\t\t\t\t\t.isMatch();\n\t\t}\n\t\treturn condition.matches(context, metadata);\n\t}", "code_tokens": ["protected", "final", "boolean", "matches", "(", "ConditionContext", "context", ",", "AnnotatedTypeMetadata", "metadata", ",", "Condition", "condition", ")", "{", "if", "(", "condition", "instanceof", "SpringBootCondition", ")", "{", "return", "(", "(", "SpringBootCondition", ")", "condition", ")", ".", "getMatchOutcome", "(", "context", ",", "metadata", ")", ".", "isMatch", "(", ")", ";", "}", "return", "condition", ".", "matches", "(", "context", ",", "metadata", ")", ";", "}"], "docstring": "Return true if any of the specified condition matches.\n@param context the context\n@param metadata the annotation meta-data\n@param condition condition to test\n@return {@code true} if the condition matches.", "docstring_tokens": ["Return", "true", "if", "any", "of", "the", "specified", "condition", "matches", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java#L152-L159", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java", "func_name": "SpringBootExceptionHandler.isLogConfigurationMessage", "original_string": "private boolean isLogConfigurationMessage(Throwable ex) {\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\treturn isLogConfigurationMessage(ex.getCause());\n\t\t}\n\t\tString message = ex.getMessage();\n\t\tif (message != null) {\n\t\t\tfor (String candidate : LOG_CONFIGURATION_MESSAGES) {\n\t\t\t\tif (message.contains(candidate)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "private boolean isLogConfigurationMessage(Throwable ex) {\n\t\tif (ex instanceof InvocationTargetException) {\n\t\t\treturn isLogConfigurationMessage(ex.getCause());\n\t\t}\n\t\tString message = ex.getMessage();\n\t\tif (message != null) {\n\t\t\tfor (String candidate : LOG_CONFIGURATION_MESSAGES) {\n\t\t\t\tif (message.contains(candidate)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["private", "boolean", "isLogConfigurationMessage", "(", "Throwable", "ex", ")", "{", "if", "(", "ex", "instanceof", "InvocationTargetException", ")", "{", "return", "isLogConfigurationMessage", "(", "ex", ".", "getCause", "(", ")", ")", ";", "}", "String", "message", "=", "ex", ".", "getMessage", "(", ")", ";", "if", "(", "message", "!=", "null", ")", "{", "for", "(", "String", "candidate", ":", "LOG_CONFIGURATION_MESSAGES", ")", "{", "if", "(", "message", ".", "contains", "(", "candidate", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Check if the exception is a log configuration message, i.e. the log call might not\nhave actually output anything.\n@param ex the source exception\n@return {@code true} if the exception contains a log configuration message", "docstring_tokens": ["Check", "if", "the", "exception", "is", "a", "log", "configuration", "message", "i", ".", "e", ".", "the", "log", "call", "might", "not", "have", "actually", "output", "anything", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootExceptionHandler.java#L88-L101", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslator.java", "func_name": "JooqExceptionTranslator.handle", "original_string": "private void handle(ExecuteContext context, SQLExceptionTranslator translator,\n\t\t\tSQLException exception) {\n\t\tDataAccessException translated = translate(context, translator, exception);\n\t\tif (exception.getNextException() == null) {\n\t\t\tcontext.exception(translated);\n\t\t}\n\t\telse {\n\t\t\tlogger.error(\"Execution of SQL statement failed.\", translated);\n\t\t}\n\t}", "language": "java", "code": "private void handle(ExecuteContext context, SQLExceptionTranslator translator,\n\t\t\tSQLException exception) {\n\t\tDataAccessException translated = translate(context, translator, exception);\n\t\tif (exception.getNextException() == null) {\n\t\t\tcontext.exception(translated);\n\t\t}\n\t\telse {\n\t\t\tlogger.error(\"Execution of SQL statement failed.\", translated);\n\t\t}\n\t}", "code_tokens": ["private", "void", "handle", "(", "ExecuteContext", "context", ",", "SQLExceptionTranslator", "translator", ",", "SQLException", "exception", ")", "{", "DataAccessException", "translated", "=", "translate", "(", "context", ",", "translator", ",", "exception", ")", ";", "if", "(", "exception", ".", "getNextException", "(", ")", "==", "null", ")", "{", "context", ".", "exception", "(", "translated", ")", ";", "}", "else", "{", "logger", ".", "error", "(", "\"Execution of SQL statement failed.\"", ",", "translated", ")", ";", "}", "}"], "docstring": "Handle a single exception in the chain. SQLExceptions might be nested multiple\nlevels deep. The outermost exception is usually the least interesting one (\"Call\ngetNextException to see the cause.\"). Therefore the innermost exception is\npropagated and all other exceptions are logged.\n@param context the execute context\n@param translator the exception translator\n@param exception the exception", "docstring_tokens": ["Handle", "a", "single", "exception", "in", "the", "chain", ".", "SQLExceptions", "might", "be", "nested", "multiple", "levels", "deep", ".", "The", "outermost", "exception", "is", "usually", "the", "least", "interesting", "one", "(", "Call", "getNextException", "to", "see", "the", "cause", ".", ")", ".", "Therefore", "the", "innermost", "exception", "is", "propagated", "and", "all", "other", "exceptions", "are", "logged", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslator.java#L80-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.awaitTerminationPeriod", "original_string": "public TaskSchedulerBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tawaitTerminationPeriod, this.threadNamePrefix, this.customizers);\n\t}", "language": "java", "code": "public TaskSchedulerBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tawaitTerminationPeriod, this.threadNamePrefix, this.customizers);\n\t}", "code_tokens": ["public", "TaskSchedulerBuilder", "awaitTerminationPeriod", "(", "Duration", "awaitTerminationPeriod", ")", "{", "return", "new", "TaskSchedulerBuilder", "(", "this", ".", "poolSize", ",", "this", ".", "awaitTermination", ",", "awaitTerminationPeriod", ",", "this", ".", "threadNamePrefix", ",", "this", ".", "customizers", ")", ";", "}"], "docstring": "Set the maximum time the executor is supposed to block on shutdown. When set, the\nexecutor blocks on shutdown in order to wait for remaining tasks to complete their\nexecution before the rest of the container continues to shut down. This is\nparticularly useful if your remaining tasks are likely to need access to other\nresources that are also managed by the container.\n@param awaitTerminationPeriod the await termination period to set\n@return a new builder instance", "docstring_tokens": ["Set", "the", "maximum", "time", "the", "executor", "is", "supposed", "to", "block", "on", "shutdown", ".", "When", "set", "the", "executor", "blocks", "on", "shutdown", "in", "order", "to", "wait", "for", "remaining", "tasks", "to", "complete", "their", "execution", "before", "the", "rest", "of", "the", "container", "continues", "to", "shut", "down", ".", "This", "is", "particularly", "useful", "if", "your", "remaining", "tasks", "are", "likely", "to", "need", "access", "to", "other", "resources", "that", "are", "also", "managed", "by", "the", "container", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L104-L107", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.threadNamePrefix", "original_string": "public TaskSchedulerBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tthis.awaitTerminationPeriod, threadNamePrefix, this.customizers);\n\t}", "language": "java", "code": "public TaskSchedulerBuilder threadNamePrefix(String threadNamePrefix) {\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tthis.awaitTerminationPeriod, threadNamePrefix, this.customizers);\n\t}", "code_tokens": ["public", "TaskSchedulerBuilder", "threadNamePrefix", "(", "String", "threadNamePrefix", ")", "{", "return", "new", "TaskSchedulerBuilder", "(", "this", ".", "poolSize", ",", "this", ".", "awaitTermination", ",", "this", ".", "awaitTerminationPeriod", ",", "threadNamePrefix", ",", "this", ".", "customizers", ")", ";", "}"], "docstring": "Set the prefix to use for the names of newly created threads.\n@param threadNamePrefix the thread name prefix to set\n@return a new builder instance", "docstring_tokens": ["Set", "the", "prefix", "to", "use", "for", "the", "names", "of", "newly", "created", "threads", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L114-L117", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.customizers", "original_string": "public TaskSchedulerBuilder customizers(TaskSchedulerCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public TaskSchedulerBuilder customizers(TaskSchedulerCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "TaskSchedulerBuilder", "customizers", "(", "TaskSchedulerCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "customizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Set the {@link TaskSchedulerCustomizer TaskSchedulerCustomizers} that should be\napplied to the {@link ThreadPoolTaskScheduler}. Customizers are applied in the\norder that they were added after builder configuration has been applied. Setting\nthis value will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(TaskSchedulerCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L128-L131", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.customizers", "original_string": "public TaskSchedulerBuilder customizers(\n\t\t\tIterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tthis.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tappend(null, customizers));\n\t}", "language": "java", "code": "public TaskSchedulerBuilder customizers(\n\t\t\tIterable<TaskSchedulerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskSchedulerBuilder(this.poolSize, this.awaitTermination,\n\t\t\t\tthis.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tappend(null, customizers));\n\t}", "code_tokens": ["public", "TaskSchedulerBuilder", "customizers", "(", "Iterable", "<", "TaskSchedulerCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "new", "TaskSchedulerBuilder", "(", "this", ".", "poolSize", ",", "this", ".", "awaitTermination", ",", "this", ".", "awaitTerminationPeriod", ",", "this", ".", "threadNamePrefix", ",", "append", "(", "null", ",", "customizers", ")", ")", ";", "}"], "docstring": "Set the {@link TaskSchedulerCustomizer taskSchedulerCustomizers} that should be\napplied to the {@link ThreadPoolTaskScheduler}. Customizers are applied in the\norder that they were added after builder configuration has been applied. Setting\nthis value will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(TaskSchedulerCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L142-L148", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.additionalCustomizers", "original_string": "public TaskSchedulerBuilder additionalCustomizers(\n\t\t\tTaskSchedulerCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public TaskSchedulerBuilder additionalCustomizers(\n\t\t\tTaskSchedulerCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "TaskSchedulerBuilder", "additionalCustomizers", "(", "TaskSchedulerCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "additionalCustomizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Add {@link TaskSchedulerCustomizer taskSchedulerCustomizers} that should be applied\nto the {@link ThreadPoolTaskScheduler}. Customizers are applied in the order that\nthey were added after builder configuration has been applied.\n@param customizers the customizers to add\n@return a new builder instance\n@see #customizers(TaskSchedulerCustomizer...)", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L158-L162", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java", "func_name": "TaskSchedulerBuilder.configure", "original_string": "public <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}", "language": "java", "code": "public <T extends ThreadPoolTaskScheduler> T configure(T taskScheduler) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.poolSize).to(taskScheduler::setPoolSize);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskScheduler::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskScheduler::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).to(taskScheduler::setThreadNamePrefix);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskScheduler));\n\t\t}\n\t\treturn taskScheduler;\n\t}", "code_tokens": ["public", "<", "T", "extends", "ThreadPoolTaskScheduler", ">", "T", "configure", "(", "T", "taskScheduler", ")", "{", "PropertyMapper", "map", "=", "PropertyMapper", ".", "get", "(", ")", ".", "alwaysApplyingWhenNonNull", "(", ")", ";", "map", ".", "from", "(", "this", ".", "poolSize", ")", ".", "to", "(", "taskScheduler", "::", "setPoolSize", ")", ";", "map", ".", "from", "(", "this", ".", "awaitTermination", ")", ".", "to", "(", "taskScheduler", "::", "setWaitForTasksToCompleteOnShutdown", ")", ";", "map", ".", "from", "(", "this", ".", "awaitTerminationPeriod", ")", ".", "asInt", "(", "Duration", "::", "getSeconds", ")", ".", "to", "(", "taskScheduler", "::", "setAwaitTerminationSeconds", ")", ";", "map", ".", "from", "(", "this", ".", "threadNamePrefix", ")", ".", "to", "(", "taskScheduler", "::", "setThreadNamePrefix", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "customizers", ")", ")", "{", "this", ".", "customizers", ".", "forEach", "(", "(", "customizer", ")", "-", ">", "customizer", ".", "customize", "(", "taskScheduler", ")", ")", ";", "}", "return", "taskScheduler", ";", "}"], "docstring": "Configure the provided {@link ThreadPoolTaskScheduler} instance using this builder.\n@param <T> the type of task scheduler\n@param taskScheduler the {@link ThreadPoolTaskScheduler} to configure\n@return the task scheduler instance\n@see #build()", "docstring_tokens": ["Configure", "the", "provided", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskSchedulerBuilder.java#L197-L209", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java", "func_name": "LoggingSystem.get", "original_string": "public static LoggingSystem get(ClassLoader classLoader) {\n\t\tString loggingSystem = System.getProperty(SYSTEM_PROPERTY);\n\t\tif (StringUtils.hasLength(loggingSystem)) {\n\t\t\tif (NONE.equals(loggingSystem)) {\n\t\t\t\treturn new NoOpLoggingSystem();\n\t\t\t}\n\t\t\treturn get(classLoader, loggingSystem);\n\t\t}\n\t\treturn SYSTEMS.entrySet().stream()\n\t\t\t\t.filter((entry) -> ClassUtils.isPresent(entry.getKey(), classLoader))\n\t\t\t\t.map((entry) -> get(classLoader, entry.getValue())).findFirst()\n\t\t\t\t.orElseThrow(() -> new IllegalStateException(\n\t\t\t\t\t\t\"No suitable logging system located\"));\n\t}", "language": "java", "code": "public static LoggingSystem get(ClassLoader classLoader) {\n\t\tString loggingSystem = System.getProperty(SYSTEM_PROPERTY);\n\t\tif (StringUtils.hasLength(loggingSystem)) {\n\t\t\tif (NONE.equals(loggingSystem)) {\n\t\t\t\treturn new NoOpLoggingSystem();\n\t\t\t}\n\t\t\treturn get(classLoader, loggingSystem);\n\t\t}\n\t\treturn SYSTEMS.entrySet().stream()\n\t\t\t\t.filter((entry) -> ClassUtils.isPresent(entry.getKey(), classLoader))\n\t\t\t\t.map((entry) -> get(classLoader, entry.getValue())).findFirst()\n\t\t\t\t.orElseThrow(() -> new IllegalStateException(\n\t\t\t\t\t\t\"No suitable logging system located\"));\n\t}", "code_tokens": ["public", "static", "LoggingSystem", "get", "(", "ClassLoader", "classLoader", ")", "{", "String", "loggingSystem", "=", "System", ".", "getProperty", "(", "SYSTEM_PROPERTY", ")", ";", "if", "(", "StringUtils", ".", "hasLength", "(", "loggingSystem", ")", ")", "{", "if", "(", "NONE", ".", "equals", "(", "loggingSystem", ")", ")", "{", "return", "new", "NoOpLoggingSystem", "(", ")", ";", "}", "return", "get", "(", "classLoader", ",", "loggingSystem", ")", ";", "}", "return", "SYSTEMS", ".", "entrySet", "(", ")", ".", "stream", "(", ")", ".", "filter", "(", "(", "entry", ")", "-", ">", "ClassUtils", ".", "isPresent", "(", "entry", ".", "getKey", "(", ")", ",", "classLoader", ")", ")", ".", "map", "(", "(", "entry", ")", "-", ">", "get", "(", "classLoader", ",", "entry", ".", "getValue", "(", ")", ")", ")", ".", "findFirst", "(", ")", ".", "orElseThrow", "(", "(", ")", "->", "new", "IllegalStateException", "(", "\"No suitable logging system located\"", ")", ")", ";", "}"], "docstring": "Detect and return the logging system in use. Supports Logback and Java Logging.\n@param classLoader the classloader\n@return the logging system", "docstring_tokens": ["Detect", "and", "return", "the", "logging", "system", "in", "use", ".", "Supports", "Logback", "and", "Java", "Logging", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java#L151-L164", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java", "func_name": "FileSystemWatcher.addListener", "original_string": "public void addListener(FileChangeListener fileChangeListener) {\n\t\tAssert.notNull(fileChangeListener, \"FileChangeListener must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.listeners.add(fileChangeListener);\n\t\t}\n\t}", "language": "java", "code": "public void addListener(FileChangeListener fileChangeListener) {\n\t\tAssert.notNull(fileChangeListener, \"FileChangeListener must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.listeners.add(fileChangeListener);\n\t\t}\n\t}", "code_tokens": ["public", "void", "addListener", "(", "FileChangeListener", "fileChangeListener", ")", "{", "Assert", ".", "notNull", "(", "fileChangeListener", ",", "\"FileChangeListener must not be null\"", ")", ";", "synchronized", "(", "this", ".", "monitor", ")", "{", "checkNotStarted", "(", ")", ";", "this", ".", "listeners", ".", "add", "(", "fileChangeListener", ")", ";", "}", "}"], "docstring": "Add listener for file change events. Cannot be called after the watcher has been\n{@link #start() started}.\n@param fileChangeListener the listener to add", "docstring_tokens": ["Add", "listener", "for", "file", "change", "events", ".", "Cannot", "be", "called", "after", "the", "watcher", "has", "been", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java#L99-L105", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java", "func_name": "FileSystemWatcher.addSourceFolders", "original_string": "public void addSourceFolders(Iterable<File> folders) {\n\t\tAssert.notNull(folders, \"Folders must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tfor (File folder : folders) {\n\t\t\t\taddSourceFolder(folder);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void addSourceFolders(Iterable<File> folders) {\n\t\tAssert.notNull(folders, \"Folders must not be null\");\n\t\tsynchronized (this.monitor) {\n\t\t\tfor (File folder : folders) {\n\t\t\t\taddSourceFolder(folder);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "addSourceFolders", "(", "Iterable", "<", "File", ">", "folders", ")", "{", "Assert", ".", "notNull", "(", "folders", ",", "\"Folders must not be null\"", ")", ";", "synchronized", "(", "this", ".", "monitor", ")", "{", "for", "(", "File", "folder", ":", "folders", ")", "{", "addSourceFolder", "(", "folder", ")", ";", "}", "}", "}"], "docstring": "Add source folders to monitor. Cannot be called after the watcher has been\n{@link #start() started}.\n@param folders the folders to monitor", "docstring_tokens": ["Add", "source", "folders", "to", "monitor", ".", "Cannot", "be", "called", "after", "the", "watcher", "has", "been", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java#L112-L119", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java", "func_name": "FileSystemWatcher.addSourceFolder", "original_string": "public void addSourceFolder(File folder) {\n\t\tAssert.notNull(folder, \"Folder must not be null\");\n\t\tAssert.isTrue(!folder.isFile(), \"Folder '\" + folder + \"' must not be a file\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.folders.put(folder, null);\n\t\t}\n\t}", "language": "java", "code": "public void addSourceFolder(File folder) {\n\t\tAssert.notNull(folder, \"Folder must not be null\");\n\t\tAssert.isTrue(!folder.isFile(), \"Folder '\" + folder + \"' must not be a file\");\n\t\tsynchronized (this.monitor) {\n\t\t\tcheckNotStarted();\n\t\t\tthis.folders.put(folder, null);\n\t\t}\n\t}", "code_tokens": ["public", "void", "addSourceFolder", "(", "File", "folder", ")", "{", "Assert", ".", "notNull", "(", "folder", ",", "\"Folder must not be null\"", ")", ";", "Assert", ".", "isTrue", "(", "!", "folder", ".", "isFile", "(", ")", ",", "\"Folder '\"", "+", "folder", "+", "\"' must not be a file\"", ")", ";", "synchronized", "(", "this", ".", "monitor", ")", "{", "checkNotStarted", "(", ")", ";", "this", ".", "folders", ".", "put", "(", "folder", ",", "null", ")", ";", "}", "}"], "docstring": "Add a source folder to monitor. Cannot be called after the watcher has been\n{@link #start() started}.\n@param folder the folder to monitor", "docstring_tokens": ["Add", "a", "source", "folder", "to", "monitor", ".", "Cannot", "be", "called", "after", "the", "watcher", "has", "been", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java#L126-L133", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java", "func_name": "FileSystemWatcher.start", "original_string": "public void start() {\n\t\tsynchronized (this.monitor) {\n\t\t\tsaveInitialSnapshots();\n\t\t\tif (this.watchThread == null) {\n\t\t\t\tMap<File, FolderSnapshot> localFolders = new HashMap<>();\n\t\t\t\tlocalFolders.putAll(this.folders);\n\t\t\t\tthis.watchThread = new Thread(new Watcher(this.remainingScans,\n\t\t\t\t\t\tnew ArrayList<>(this.listeners), this.triggerFilter,\n\t\t\t\t\t\tthis.pollInterval, this.quietPeriod, localFolders));\n\t\t\t\tthis.watchThread.setName(\"File Watcher\");\n\t\t\t\tthis.watchThread.setDaemon(this.daemon);\n\t\t\t\tthis.watchThread.start();\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void start() {\n\t\tsynchronized (this.monitor) {\n\t\t\tsaveInitialSnapshots();\n\t\t\tif (this.watchThread == null) {\n\t\t\t\tMap<File, FolderSnapshot> localFolders = new HashMap<>();\n\t\t\t\tlocalFolders.putAll(this.folders);\n\t\t\t\tthis.watchThread = new Thread(new Watcher(this.remainingScans,\n\t\t\t\t\t\tnew ArrayList<>(this.listeners), this.triggerFilter,\n\t\t\t\t\t\tthis.pollInterval, this.quietPeriod, localFolders));\n\t\t\t\tthis.watchThread.setName(\"File Watcher\");\n\t\t\t\tthis.watchThread.setDaemon(this.daemon);\n\t\t\t\tthis.watchThread.start();\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "start", "(", ")", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "saveInitialSnapshots", "(", ")", ";", "if", "(", "this", ".", "watchThread", "==", "null", ")", "{", "Map", "<", "File", ",", "FolderSnapshot", ">", "localFolders", "=", "new", "HashMap", "<>", "(", ")", ";", "localFolders", ".", "putAll", "(", "this", ".", "folders", ")", ";", "this", ".", "watchThread", "=", "new", "Thread", "(", "new", "Watcher", "(", "this", ".", "remainingScans", ",", "new", "ArrayList", "<>", "(", "this", ".", "listeners", ")", ",", "this", ".", "triggerFilter", ",", "this", ".", "pollInterval", ",", "this", ".", "quietPeriod", ",", "localFolders", ")", ")", ";", "this", ".", "watchThread", ".", "setName", "(", "\"File Watcher\"", ")", ";", "this", ".", "watchThread", ".", "setDaemon", "(", "this", ".", "daemon", ")", ";", "this", ".", "watchThread", ".", "start", "(", ")", ";", "}", "}", "}"], "docstring": "Start monitoring the source folder for changes.", "docstring_tokens": ["Start", "monitoring", "the", "source", "folder", "for", "changes", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java#L154-L168", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java", "func_name": "FileSystemWatcher.stopAfter", "original_string": "void stopAfter(int remainingScans) {\n\t\tThread thread;\n\t\tsynchronized (this.monitor) {\n\t\t\tthread = this.watchThread;\n\t\t\tif (thread != null) {\n\t\t\t\tthis.remainingScans.set(remainingScans);\n\t\t\t\tif (remainingScans <= 0) {\n\t\t\t\t\tthread.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.watchThread = null;\n\t\t}\n\t\tif (thread != null && Thread.currentThread() != thread) {\n\t\t\ttry {\n\t\t\t\tthread.join();\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void stopAfter(int remainingScans) {\n\t\tThread thread;\n\t\tsynchronized (this.monitor) {\n\t\t\tthread = this.watchThread;\n\t\t\tif (thread != null) {\n\t\t\t\tthis.remainingScans.set(remainingScans);\n\t\t\t\tif (remainingScans <= 0) {\n\t\t\t\t\tthread.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.watchThread = null;\n\t\t}\n\t\tif (thread != null && Thread.currentThread() != thread) {\n\t\t\ttry {\n\t\t\t\tthread.join();\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "stopAfter", "(", "int", "remainingScans", ")", "{", "Thread", "thread", ";", "synchronized", "(", "this", ".", "monitor", ")", "{", "thread", "=", "this", ".", "watchThread", ";", "if", "(", "thread", "!=", "null", ")", "{", "this", ".", "remainingScans", ".", "set", "(", "remainingScans", ")", ";", "if", "(", "remainingScans", "<=", "0", ")", "{", "thread", ".", "interrupt", "(", ")", ";", "}", "}", "this", ".", "watchThread", "=", "null", ";", "}", "if", "(", "thread", "!=", "null", "&&", "Thread", ".", "currentThread", "(", ")", "!=", "thread", ")", "{", "try", "{", "thread", ".", "join", "(", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "}", "}", "}"], "docstring": "Stop monitoring the source folders.\n@param remainingScans the number of remaining scans", "docstring_tokens": ["Stop", "monitoring", "the", "source", "folders", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java#L187-L207", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java", "func_name": "AbstractErrorWebExceptionHandler.getErrorAttributes", "original_string": "protected Map<String, Object> getErrorAttributes(ServerRequest request,\n\t\t\tboolean includeStackTrace) {\n\t\treturn this.errorAttributes.getErrorAttributes(request, includeStackTrace);\n\t}", "language": "java", "code": "protected Map<String, Object> getErrorAttributes(ServerRequest request,\n\t\t\tboolean includeStackTrace) {\n\t\treturn this.errorAttributes.getErrorAttributes(request, includeStackTrace);\n\t}", "code_tokens": ["protected", "Map", "<", "String", ",", "Object", ">", "getErrorAttributes", "(", "ServerRequest", "request", ",", "boolean", "includeStackTrace", ")", "{", "return", "this", ".", "errorAttributes", ".", "getErrorAttributes", "(", "request", ",", "includeStackTrace", ")", ";", "}"], "docstring": "Extract the error attributes from the current request, to be used to populate error\nviews or JSON payloads.\n@param request the source request\n@param includeStackTrace whether to include the error stacktrace information\n@return the error attributes as a Map.", "docstring_tokens": ["Extract", "the", "error", "attributes", "from", "the", "current", "request", "to", "be", "used", "to", "populate", "error", "views", "or", "JSON", "payloads", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java#L138-L141", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java", "func_name": "AbstractErrorWebExceptionHandler.isTraceEnabled", "original_string": "protected boolean isTraceEnabled(ServerRequest request) {\n\t\tString parameter = request.queryParam(\"trace\").orElse(\"false\");\n\t\treturn !\"false\".equalsIgnoreCase(parameter);\n\t}", "language": "java", "code": "protected boolean isTraceEnabled(ServerRequest request) {\n\t\tString parameter = request.queryParam(\"trace\").orElse(\"false\");\n\t\treturn !\"false\".equalsIgnoreCase(parameter);\n\t}", "code_tokens": ["protected", "boolean", "isTraceEnabled", "(", "ServerRequest", "request", ")", "{", "String", "parameter", "=", "request", ".", "queryParam", "(", "\"trace\"", ")", ".", "orElse", "(", "\"false\"", ")", ";", "return", "!", "\"false\"", ".", "equalsIgnoreCase", "(", "parameter", ")", ";", "}"], "docstring": "Check whether the trace attribute has been set on the given request.\n@param request the source request\n@return {@code true} if the error trace has been requested, {@code false} otherwise", "docstring_tokens": ["Check", "whether", "the", "trace", "attribute", "has", "been", "set", "on", "the", "given", "request", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java#L157-L160", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java", "func_name": "AbstractErrorWebExceptionHandler.renderErrorView", "original_string": "protected Mono<ServerResponse> renderErrorView(String viewName,\n\t\t\tServerResponse.BodyBuilder responseBody, Map<String, Object> error) {\n\t\tif (isTemplateAvailable(viewName)) {\n\t\t\treturn responseBody.render(viewName, error);\n\t\t}\n\t\tResource resource = resolveResource(viewName);\n\t\tif (resource != null) {\n\t\t\treturn responseBody.body(BodyInserters.fromResource(resource));\n\t\t}\n\t\treturn Mono.empty();\n\t}", "language": "java", "code": "protected Mono<ServerResponse> renderErrorView(String viewName,\n\t\t\tServerResponse.BodyBuilder responseBody, Map<String, Object> error) {\n\t\tif (isTemplateAvailable(viewName)) {\n\t\t\treturn responseBody.render(viewName, error);\n\t\t}\n\t\tResource resource = resolveResource(viewName);\n\t\tif (resource != null) {\n\t\t\treturn responseBody.body(BodyInserters.fromResource(resource));\n\t\t}\n\t\treturn Mono.empty();\n\t}", "code_tokens": ["protected", "Mono", "<", "ServerResponse", ">", "renderErrorView", "(", "String", "viewName", ",", "ServerResponse", ".", "BodyBuilder", "responseBody", ",", "Map", "<", "String", ",", "Object", ">", "error", ")", "{", "if", "(", "isTemplateAvailable", "(", "viewName", ")", ")", "{", "return", "responseBody", ".", "render", "(", "viewName", ",", "error", ")", ";", "}", "Resource", "resource", "=", "resolveResource", "(", "viewName", ")", ";", "if", "(", "resource", "!=", "null", ")", "{", "return", "responseBody", ".", "body", "(", "BodyInserters", ".", "fromResource", "(", "resource", ")", ")", ";", "}", "return", "Mono", ".", "empty", "(", ")", ";", "}"], "docstring": "Render the given error data as a view, using a template view if available or a\nstatic HTML file if available otherwise. This will return an empty\n{@code Publisher} if none of the above are available.\n@param viewName the view name\n@param responseBody the error response being built\n@param error the error data as a map\n@return a Publisher of the {@link ServerResponse}", "docstring_tokens": ["Render", "the", "given", "error", "data", "as", "a", "view", "using", "a", "template", "view", "if", "available", "or", "a", "static", "HTML", "file", "if", "available", "otherwise", ".", "This", "will", "return", "an", "empty", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java#L171-L181", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java", "func_name": "AbstractErrorWebExceptionHandler.renderDefaultErrorView", "original_string": "protected Mono<ServerResponse> renderDefaultErrorView(\n\t\t\tServerResponse.BodyBuilder responseBody, Map<String, Object> error) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tDate timestamp = (Date) error.get(\"timestamp\");\n\t\tObject message = error.get(\"message\");\n\t\tObject trace = error.get(\"trace\");\n\t\tObject requestId = error.get(\"requestId\");\n\t\tbuilder.append(\"<html><body><h1>Whitelabel Error Page</h1>\").append(\n\t\t\t\t\"<p>This application has no configured error view, so you are seeing this as a fallback.</p>\")\n\t\t\t\t.append(\"<div id='created'>\").append(timestamp).append(\"</div>\")\n\t\t\t\t.append(\"<div>[\").append(requestId)\n\t\t\t\t.append(\"] There was an unexpected error (type=\")\n\t\t\t\t.append(htmlEscape(error.get(\"error\"))).append(\", status=\")\n\t\t\t\t.append(htmlEscape(error.get(\"status\"))).append(\").</div>\");\n\t\tif (message != null) {\n\t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n\t\t}\n\t\tif (trace != null) {\n\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\")\n\t\t\t\t\t.append(htmlEscape(trace)).append(\"</div>\");\n\t\t}\n\t\tbuilder.append(\"</body></html>\");\n\t\treturn responseBody.syncBody(builder.toString());\n\t}", "language": "java", "code": "protected Mono<ServerResponse> renderDefaultErrorView(\n\t\t\tServerResponse.BodyBuilder responseBody, Map<String, Object> error) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tDate timestamp = (Date) error.get(\"timestamp\");\n\t\tObject message = error.get(\"message\");\n\t\tObject trace = error.get(\"trace\");\n\t\tObject requestId = error.get(\"requestId\");\n\t\tbuilder.append(\"<html><body><h1>Whitelabel Error Page</h1>\").append(\n\t\t\t\t\"<p>This application has no configured error view, so you are seeing this as a fallback.</p>\")\n\t\t\t\t.append(\"<div id='created'>\").append(timestamp).append(\"</div>\")\n\t\t\t\t.append(\"<div>[\").append(requestId)\n\t\t\t\t.append(\"] There was an unexpected error (type=\")\n\t\t\t\t.append(htmlEscape(error.get(\"error\"))).append(\", status=\")\n\t\t\t\t.append(htmlEscape(error.get(\"status\"))).append(\").</div>\");\n\t\tif (message != null) {\n\t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n\t\t}\n\t\tif (trace != null) {\n\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\")\n\t\t\t\t\t.append(htmlEscape(trace)).append(\"</div>\");\n\t\t}\n\t\tbuilder.append(\"</body></html>\");\n\t\treturn responseBody.syncBody(builder.toString());\n\t}", "code_tokens": ["protected", "Mono", "<", "ServerResponse", ">", "renderDefaultErrorView", "(", "ServerResponse", ".", "BodyBuilder", "responseBody", ",", "Map", "<", "String", ",", "Object", ">", "error", ")", "{", "StringBuilder", "builder", "=", "new", "StringBuilder", "(", ")", ";", "Date", "timestamp", "=", "(", "Date", ")", "error", ".", "get", "(", "\"timestamp\"", ")", ";", "Object", "message", "=", "error", ".", "get", "(", "\"message\"", ")", ";", "Object", "trace", "=", "error", ".", "get", "(", "\"trace\"", ")", ";", "Object", "requestId", "=", "error", ".", "get", "(", "\"requestId\"", ")", ";", "builder", ".", "append", "(", "\"<html><body><h1>Whitelabel Error Page</h1>\"", ")", ".", "append", "(", "\"<p>This application has no configured error view, so you are seeing this as a fallback.</p>\"", ")", ".", "append", "(", "\"<div id='created'>\"", ")", ".", "append", "(", "timestamp", ")", ".", "append", "(", "\"</div>\"", ")", ".", "append", "(", "\"<div>[\"", ")", ".", "append", "(", "requestId", ")", ".", "append", "(", "\"] There was an unexpected error (type=\"", ")", ".", "append", "(", "htmlEscape", "(", "error", ".", "get", "(", "\"error\"", ")", ")", ")", ".", "append", "(", "\", status=\"", ")", ".", "append", "(", "htmlEscape", "(", "error", ".", "get", "(", "\"status\"", ")", ")", ")", ".", "append", "(", "\").</div>\"", ")", ";", "if", "(", "message", "!=", "null", ")", "{", "builder", ".", "append", "(", "\"<div>\"", ")", ".", "append", "(", "htmlEscape", "(", "message", ")", ")", ".", "append", "(", "\"</div>\"", ")", ";", "}", "if", "(", "trace", "!=", "null", ")", "{", "builder", ".", "append", "(", "\"<div style='white-space:pre-wrap;'>\"", ")", ".", "append", "(", "htmlEscape", "(", "trace", ")", ")", ".", "append", "(", "\"</div>\"", ")", ";", "}", "builder", ".", "append", "(", "\"</body></html>\"", ")", ";", "return", "responseBody", ".", "syncBody", "(", "builder", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "Render a default HTML \"Whitelabel Error Page\".\n<p>\nUseful when no other error view is available in the application.\n@param responseBody the error response being built\n@param error the error data as a map\n@return a Publisher of the {@link ServerResponse}", "docstring_tokens": ["Render", "a", "default", "HTML", "Whitelabel", "Error", "Page", ".", "<p", ">", "Useful", "when", "no", "other", "error", "view", "is", "available", "in", "the", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java#L212-L235", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java", "func_name": "ConnectionInputStream.readHeader", "original_string": "public String readHeader() throws IOException {\n\t\tbyte[] buffer = new byte[BUFFER_SIZE];\n\t\tStringBuilder content = new StringBuilder(BUFFER_SIZE);\n\t\twhile (content.indexOf(HEADER_END) == -1) {\n\t\t\tint amountRead = checkedRead(buffer, 0, BUFFER_SIZE);\n\t\t\tcontent.append(new String(buffer, 0, amountRead));\n\t\t}\n\t\treturn content.substring(0, content.indexOf(HEADER_END));\n\t}", "language": "java", "code": "public String readHeader() throws IOException {\n\t\tbyte[] buffer = new byte[BUFFER_SIZE];\n\t\tStringBuilder content = new StringBuilder(BUFFER_SIZE);\n\t\twhile (content.indexOf(HEADER_END) == -1) {\n\t\t\tint amountRead = checkedRead(buffer, 0, BUFFER_SIZE);\n\t\t\tcontent.append(new String(buffer, 0, amountRead));\n\t\t}\n\t\treturn content.substring(0, content.indexOf(HEADER_END));\n\t}", "code_tokens": ["public", "String", "readHeader", "(", ")", "throws", "IOException", "{", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "BUFFER_SIZE", "]", ";", "StringBuilder", "content", "=", "new", "StringBuilder", "(", "BUFFER_SIZE", ")", ";", "while", "(", "content", ".", "indexOf", "(", "HEADER_END", ")", "==", "-", "1", ")", "{", "int", "amountRead", "=", "checkedRead", "(", "buffer", ",", "0", ",", "BUFFER_SIZE", ")", ";", "content", ".", "append", "(", "new", "String", "(", "buffer", ",", "0", ",", "amountRead", ")", ")", ";", "}", "return", "content", ".", "substring", "(", "0", ",", "content", ".", "indexOf", "(", "HEADER_END", ")", ")", ";", "}"], "docstring": "Read the HTTP header from the {@link InputStream}. Note: This method doesn't expect\nany HTTP content after the header since the initial request is usually just a\nWebSocket upgrade.\n@return the HTTP header\n@throws IOException in case of I/O errors", "docstring_tokens": ["Read", "the", "HTTP", "header", "from", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java#L45-L53", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java", "func_name": "ConnectionInputStream.readFully", "original_string": "public void readFully(byte[] buffer, int offset, int length) throws IOException {\n\t\twhile (length > 0) {\n\t\t\tint amountRead = checkedRead(buffer, offset, length);\n\t\t\toffset += amountRead;\n\t\t\tlength -= amountRead;\n\t\t}\n\t}", "language": "java", "code": "public void readFully(byte[] buffer, int offset, int length) throws IOException {\n\t\twhile (length > 0) {\n\t\t\tint amountRead = checkedRead(buffer, offset, length);\n\t\t\toffset += amountRead;\n\t\t\tlength -= amountRead;\n\t\t}\n\t}", "code_tokens": ["public", "void", "readFully", "(", "byte", "[", "]", "buffer", ",", "int", "offset", ",", "int", "length", ")", "throws", "IOException", "{", "while", "(", "length", ">", "0", ")", "{", "int", "amountRead", "=", "checkedRead", "(", "buffer", ",", "offset", ",", "length", ")", ";", "offset", "+=", "amountRead", ";", "length", "-=", "amountRead", ";", "}", "}"], "docstring": "Repeatedly read the underlying {@link InputStream} until the requested number of\nbytes have been loaded.\n@param buffer the destination buffer\n@param offset the buffer offset\n@param length the amount of data to read\n@throws IOException in case of I/O errors", "docstring_tokens": ["Repeatedly", "read", "the", "underlying", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java#L63-L69", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java", "func_name": "ConnectionInputStream.checkedRead", "original_string": "public int checkedRead(byte[] buffer, int offset, int length) throws IOException {\n\t\tint amountRead = read(buffer, offset, length);\n\t\tif (amountRead == -1) {\n\t\t\tthrow new IOException(\"End of stream\");\n\t\t}\n\t\treturn amountRead;\n\t}", "language": "java", "code": "public int checkedRead(byte[] buffer, int offset, int length) throws IOException {\n\t\tint amountRead = read(buffer, offset, length);\n\t\tif (amountRead == -1) {\n\t\t\tthrow new IOException(\"End of stream\");\n\t\t}\n\t\treturn amountRead;\n\t}", "code_tokens": ["public", "int", "checkedRead", "(", "byte", "[", "]", "buffer", ",", "int", "offset", ",", "int", "length", ")", "throws", "IOException", "{", "int", "amountRead", "=", "read", "(", "buffer", ",", "offset", ",", "length", ")", ";", "if", "(", "amountRead", "==", "-", "1", ")", "{", "throw", "new", "IOException", "(", "\"End of stream\"", ")", ";", "}", "return", "amountRead", ";", "}"], "docstring": "Read a number of bytes from the stream (checking that the end of the stream hasn't\nbeen reached).\n@param buffer the destination buffer\n@param offset the buffer offset\n@param length the length to read\n@return the amount of data read\n@throws IOException in case of I/O errors", "docstring_tokens": ["Read", "a", "number", "of", "bytes", "from", "the", "stream", "(", "checking", "that", "the", "end", "of", "the", "stream", "hasn", "t", "been", "reached", ")", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java#L94-L100", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java", "func_name": "HibernateMetricsAutoConfiguration.getEntityManagerFactoryName", "original_string": "private String getEntityManagerFactoryName(String beanName) {\n\t\tif (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length() && StringUtils\n\t\t\t\t.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "language": "java", "code": "private String getEntityManagerFactoryName(String beanName) {\n\t\tif (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length() && StringUtils\n\t\t\t\t.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "code_tokens": ["private", "String", "getEntityManagerFactoryName", "(", "String", "beanName", ")", "{", "if", "(", "beanName", ".", "length", "(", ")", ">", "ENTITY_MANAGER_FACTORY_SUFFIX", ".", "length", "(", ")", "&&", "StringUtils", ".", "endsWithIgnoreCase", "(", "beanName", ",", "ENTITY_MANAGER_FACTORY_SUFFIX", ")", ")", "{", "return", "beanName", ".", "substring", "(", "0", ",", "beanName", ".", "length", "(", ")", "-", "ENTITY_MANAGER_FACTORY_SUFFIX", ".", "length", "(", ")", ")", ";", "}", "return", "beanName", ";", "}"], "docstring": "Get the name of an {@link EntityManagerFactory} based on its {@code beanName}.\n@param beanName the name of the {@link EntityManagerFactory} bean\n@return a name for the given entity manager factory", "docstring_tokens": ["Get", "the", "name", "of", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java#L83-L90", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/SpringApplicationAdminClient.java", "func_name": "SpringApplicationAdminClient.stop", "original_string": "public void stop()\n\t\t\tthrows MojoExecutionException, IOException, InstanceNotFoundException {\n\t\ttry {\n\t\t\tthis.connection.invoke(this.objectName, \"shutdown\", null, null);\n\t\t}\n\t\tcatch (ReflectionException ex) {\n\t\t\tthrow new MojoExecutionException(\"Shutdown failed\", ex.getCause());\n\t\t}\n\t\tcatch (MBeanException ex) {\n\t\t\tthrow new MojoExecutionException(\"Could not invoke shutdown operation\", ex);\n\t\t}\n\t}", "language": "java", "code": "public void stop()\n\t\t\tthrows MojoExecutionException, IOException, InstanceNotFoundException {\n\t\ttry {\n\t\t\tthis.connection.invoke(this.objectName, \"shutdown\", null, null);\n\t\t}\n\t\tcatch (ReflectionException ex) {\n\t\t\tthrow new MojoExecutionException(\"Shutdown failed\", ex.getCause());\n\t\t}\n\t\tcatch (MBeanException ex) {\n\t\t\tthrow new MojoExecutionException(\"Could not invoke shutdown operation\", ex);\n\t\t}\n\t}", "code_tokens": ["public", "void", "stop", "(", ")", "throws", "MojoExecutionException", ",", "IOException", ",", "InstanceNotFoundException", "{", "try", "{", "this", ".", "connection", ".", "invoke", "(", "this", ".", "objectName", ",", "\"shutdown\"", ",", "null", ",", "null", ")", ";", "}", "catch", "(", "ReflectionException", "ex", ")", "{", "throw", "new", "MojoExecutionException", "(", "\"Shutdown failed\"", ",", "ex", ".", "getCause", "(", ")", ")", ";", "}", "catch", "(", "MBeanException", "ex", ")", "{", "throw", "new", "MojoExecutionException", "(", "\"Could not invoke shutdown operation\"", ",", "ex", ")", ";", "}", "}"], "docstring": "Stop the application managed by this instance.\n@throws MojoExecutionException if the JMX service could not be contacted\n@throws IOException if an I/O error occurs\n@throws InstanceNotFoundException if the lifecycle mbean cannot be found", "docstring_tokens": ["Stop", "the", "application", "managed", "by", "this", "instance", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/SpringApplicationAdminClient.java#L87-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/SpringApplicationAdminClient.java", "func_name": "SpringApplicationAdminClient.connect", "original_string": "public static JMXConnector connect(int port) throws IOException {\n\t\tString url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\" + port + \"/jmxrmi\";\n\t\tJMXServiceURL serviceUrl = new JMXServiceURL(url);\n\t\treturn JMXConnectorFactory.connect(serviceUrl, null);\n\t}", "language": "java", "code": "public static JMXConnector connect(int port) throws IOException {\n\t\tString url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\" + port + \"/jmxrmi\";\n\t\tJMXServiceURL serviceUrl = new JMXServiceURL(url);\n\t\treturn JMXConnectorFactory.connect(serviceUrl, null);\n\t}", "code_tokens": ["public", "static", "JMXConnector", "connect", "(", "int", "port", ")", "throws", "IOException", "{", "String", "url", "=", "\"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"", "+", "port", "+", "\"/jmxrmi\"", ";", "JMXServiceURL", "serviceUrl", "=", "new", "JMXServiceURL", "(", "url", ")", ";", "return", "JMXConnectorFactory", ".", "connect", "(", "serviceUrl", ",", "null", ")", ";", "}"], "docstring": "Create a connector for an {@link javax.management.MBeanServer} exposed on the\ncurrent machine and the current port. Security should be disabled.\n@param port the port on which the mbean server is exposed\n@return a connection\n@throws IOException if the connection to that server failed", "docstring_tokens": ["Create", "a", "connector", "for", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/SpringApplicationAdminClient.java#L116-L120", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/server/Dispatcher.java", "func_name": "Dispatcher.handle", "original_string": "public boolean handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\tfor (HandlerMapper mapper : this.mappers) {\n\t\t\tHandler handler = mapper.getHandler(request);\n\t\t\tif (handler != null) {\n\t\t\t\thandle(handler, request, response);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public boolean handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\tfor (HandlerMapper mapper : this.mappers) {\n\t\t\tHandler handler = mapper.getHandler(request);\n\t\t\tif (handler != null) {\n\t\t\t\thandle(handler, request, response);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "boolean", "handle", "(", "ServerHttpRequest", "request", ",", "ServerHttpResponse", "response", ")", "throws", "IOException", "{", "for", "(", "HandlerMapper", "mapper", ":", "this", ".", "mappers", ")", "{", "Handler", "handler", "=", "mapper", ".", "getHandler", "(", "request", ")", ";", "if", "(", "handler", "!=", "null", ")", "{", "handle", "(", "handler", ",", "request", ",", "response", ")", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Dispatch the specified request to an appropriate {@link Handler}.\n@param request the request\n@param response the response\n@return {@code true} if the request was dispatched\n@throws IOException in case of I/O errors", "docstring_tokens": ["Dispatch", "the", "specified", "request", "to", "an", "appropriate", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/remote/server/Dispatcher.java#L60-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java", "func_name": "HttpExchangeTracer.sendingResponse", "original_string": "public final void sendingResponse(HttpTrace trace, TraceableResponse response,\n\t\t\tSupplier<Principal> principal, Supplier<String> sessionId) {\n\t\tsetIfIncluded(Include.TIME_TAKEN,\n\t\t\t\t() -> System.currentTimeMillis() - trace.getTimestamp().toEpochMilli(),\n\t\t\t\ttrace::setTimeTaken);\n\t\tsetIfIncluded(Include.SESSION_ID, sessionId, trace::setSessionId);\n\t\tsetIfIncluded(Include.PRINCIPAL, principal, trace::setPrincipal);\n\t\ttrace.setResponse(\n\t\t\t\tnew HttpTrace.Response(new FilteredTraceableResponse(response)));\n\t}", "language": "java", "code": "public final void sendingResponse(HttpTrace trace, TraceableResponse response,\n\t\t\tSupplier<Principal> principal, Supplier<String> sessionId) {\n\t\tsetIfIncluded(Include.TIME_TAKEN,\n\t\t\t\t() -> System.currentTimeMillis() - trace.getTimestamp().toEpochMilli(),\n\t\t\t\ttrace::setTimeTaken);\n\t\tsetIfIncluded(Include.SESSION_ID, sessionId, trace::setSessionId);\n\t\tsetIfIncluded(Include.PRINCIPAL, principal, trace::setPrincipal);\n\t\ttrace.setResponse(\n\t\t\t\tnew HttpTrace.Response(new FilteredTraceableResponse(response)));\n\t}", "code_tokens": ["public", "final", "void", "sendingResponse", "(", "HttpTrace", "trace", ",", "TraceableResponse", "response", ",", "Supplier", "<", "Principal", ">", "principal", ",", "Supplier", "<", "String", ">", "sessionId", ")", "{", "setIfIncluded", "(", "Include", ".", "TIME_TAKEN", ",", "(", ")", "->", "System", ".", "currentTimeMillis", "(", ")", "-", "trace", ".", "getTimestamp", "(", ")", ".", "toEpochMilli", "(", ")", ",", "trace", "::", "setTimeTaken", ")", ";", "setIfIncluded", "(", "Include", ".", "SESSION_ID", ",", "sessionId", ",", "trace", "::", "setSessionId", ")", ";", "setIfIncluded", "(", "Include", ".", "PRINCIPAL", ",", "principal", ",", "trace", "::", "setPrincipal", ")", ";", "trace", ".", "setResponse", "(", "new", "HttpTrace", ".", "Response", "(", "new", "FilteredTraceableResponse", "(", "response", ")", ")", ")", ";", "}"], "docstring": "Ends the tracing of the exchange that is being concluded by sending the given\n{@code response}.\n@param trace the trace for the exchange\n@param response the response that concludes the exchange\n@param principal a supplier for the exchange's principal\n@param sessionId a supplier for the id of the exchange's session", "docstring_tokens": ["Ends", "the", "tracing", "of", "the", "exchange", "that", "is", "being", "concluded", "by", "sending", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java#L69-L78", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java", "func_name": "TomcatEmbeddedContext.doWithThreadContextClassLoader", "original_string": "private void doWithThreadContextClassLoader(ClassLoader classLoader, Runnable code) {\n\t\tClassLoader existingLoader = (classLoader != null)\n\t\t\t\t? ClassUtils.overrideThreadContextClassLoader(classLoader) : null;\n\t\ttry {\n\t\t\tcode.run();\n\t\t}\n\t\tfinally {\n\t\t\tif (existingLoader != null) {\n\t\t\t\tClassUtils.overrideThreadContextClassLoader(existingLoader);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void doWithThreadContextClassLoader(ClassLoader classLoader, Runnable code) {\n\t\tClassLoader existingLoader = (classLoader != null)\n\t\t\t\t? ClassUtils.overrideThreadContextClassLoader(classLoader) : null;\n\t\ttry {\n\t\t\tcode.run();\n\t\t}\n\t\tfinally {\n\t\t\tif (existingLoader != null) {\n\t\t\t\tClassUtils.overrideThreadContextClassLoader(existingLoader);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "doWithThreadContextClassLoader", "(", "ClassLoader", "classLoader", ",", "Runnable", "code", ")", "{", "ClassLoader", "existingLoader", "=", "(", "classLoader", "!=", "null", ")", "?", "ClassUtils", ".", "overrideThreadContextClassLoader", "(", "classLoader", ")", ":", "null", ";", "try", "{", "code", ".", "run", "(", ")", ";", "}", "finally", "{", "if", "(", "existingLoader", "!=", "null", ")", "{", "ClassUtils", ".", "overrideThreadContextClassLoader", "(", "existingLoader", ")", ";", "}", "}", "}"], "docstring": "Some older Servlet frameworks (e.g. Struts, BIRT) use the Thread context class\nloader to create servlet instances in this phase. If they do that and then try to\ninitialize them later the class loader may have changed, so wrap the call to\nloadOnStartup in what we think its going to be the main webapp classloader at\nruntime.\n@param classLoader the class loader to use\n@param code the code to run", "docstring_tokens": ["Some", "older", "Servlet", "frameworks", "(", "e", ".", "g", ".", "Struts", "BIRT", ")", "use", "the", "Thread", "context", "class", "loader", "to", "create", "servlet", "instances", "in", "this", "phase", ".", "If", "they", "do", "that", "and", "then", "try", "to", "initialize", "them", "later", "the", "class", "loader", "may", "have", "changed", "so", "wrap", "the", "call", "to", "loadOnStartup", "in", "what", "we", "think", "its", "going", "to", "be", "the", "main", "webapp", "classloader", "at", "runtime", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java#L104-L115", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java", "func_name": "TemplateAvailabilityProviders.getProvider", "original_string": "public TemplateAvailabilityProvider getProvider(String view,\n\t\t\tApplicationContext applicationContext) {\n\t\tAssert.notNull(applicationContext, \"ApplicationContext must not be null\");\n\t\treturn getProvider(view, applicationContext.getEnvironment(),\n\t\t\t\tapplicationContext.getClassLoader(), applicationContext);\n\t}", "language": "java", "code": "public TemplateAvailabilityProvider getProvider(String view,\n\t\t\tApplicationContext applicationContext) {\n\t\tAssert.notNull(applicationContext, \"ApplicationContext must not be null\");\n\t\treturn getProvider(view, applicationContext.getEnvironment(),\n\t\t\t\tapplicationContext.getClassLoader(), applicationContext);\n\t}", "code_tokens": ["public", "TemplateAvailabilityProvider", "getProvider", "(", "String", "view", ",", "ApplicationContext", "applicationContext", ")", "{", "Assert", ".", "notNull", "(", "applicationContext", ",", "\"ApplicationContext must not be null\"", ")", ";", "return", "getProvider", "(", "view", ",", "applicationContext", ".", "getEnvironment", "(", ")", ",", "applicationContext", ".", "getClassLoader", "(", ")", ",", "applicationContext", ")", ";", "}"], "docstring": "Get the provider that can be used to render the given view.\n@param view the view to render\n@param applicationContext the application context\n@return a {@link TemplateAvailabilityProvider} or null", "docstring_tokens": ["Get", "the", "provider", "that", "can", "be", "used", "to", "render", "the", "given", "view", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java#L116-L121", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java", "func_name": "TemplateAvailabilityProviders.getProvider", "original_string": "public TemplateAvailabilityProvider getProvider(String view, Environment environment,\n\t\t\tClassLoader classLoader, ResourceLoader resourceLoader) {\n\t\tAssert.notNull(view, \"View must not be null\");\n\t\tAssert.notNull(environment, \"Environment must not be null\");\n\t\tAssert.notNull(classLoader, \"ClassLoader must not be null\");\n\t\tAssert.notNull(resourceLoader, \"ResourceLoader must not be null\");\n\t\tBoolean useCache = environment.getProperty(\"spring.template.provider.cache\",\n\t\t\t\tBoolean.class, true);\n\t\tif (!useCache) {\n\t\t\treturn findProvider(view, environment, classLoader, resourceLoader);\n\t\t}\n\t\tTemplateAvailabilityProvider provider = this.resolved.get(view);\n\t\tif (provider == null) {\n\t\t\tsynchronized (this.cache) {\n\t\t\t\tprovider = findProvider(view, environment, classLoader, resourceLoader);\n\t\t\t\tprovider = (provider != null) ? provider : NONE;\n\t\t\t\tthis.resolved.put(view, provider);\n\t\t\t\tthis.cache.put(view, provider);\n\t\t\t}\n\t\t}\n\t\treturn (provider != NONE) ? provider : null;\n\t}", "language": "java", "code": "public TemplateAvailabilityProvider getProvider(String view, Environment environment,\n\t\t\tClassLoader classLoader, ResourceLoader resourceLoader) {\n\t\tAssert.notNull(view, \"View must not be null\");\n\t\tAssert.notNull(environment, \"Environment must not be null\");\n\t\tAssert.notNull(classLoader, \"ClassLoader must not be null\");\n\t\tAssert.notNull(resourceLoader, \"ResourceLoader must not be null\");\n\t\tBoolean useCache = environment.getProperty(\"spring.template.provider.cache\",\n\t\t\t\tBoolean.class, true);\n\t\tif (!useCache) {\n\t\t\treturn findProvider(view, environment, classLoader, resourceLoader);\n\t\t}\n\t\tTemplateAvailabilityProvider provider = this.resolved.get(view);\n\t\tif (provider == null) {\n\t\t\tsynchronized (this.cache) {\n\t\t\t\tprovider = findProvider(view, environment, classLoader, resourceLoader);\n\t\t\t\tprovider = (provider != null) ? provider : NONE;\n\t\t\t\tthis.resolved.put(view, provider);\n\t\t\t\tthis.cache.put(view, provider);\n\t\t\t}\n\t\t}\n\t\treturn (provider != NONE) ? provider : null;\n\t}", "code_tokens": ["public", "TemplateAvailabilityProvider", "getProvider", "(", "String", "view", ",", "Environment", "environment", ",", "ClassLoader", "classLoader", ",", "ResourceLoader", "resourceLoader", ")", "{", "Assert", ".", "notNull", "(", "view", ",", "\"View must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "environment", ",", "\"Environment must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "classLoader", ",", "\"ClassLoader must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "resourceLoader", ",", "\"ResourceLoader must not be null\"", ")", ";", "Boolean", "useCache", "=", "environment", ".", "getProperty", "(", "\"spring.template.provider.cache\"", ",", "Boolean", ".", "class", ",", "true", ")", ";", "if", "(", "!", "useCache", ")", "{", "return", "findProvider", "(", "view", ",", "environment", ",", "classLoader", ",", "resourceLoader", ")", ";", "}", "TemplateAvailabilityProvider", "provider", "=", "this", ".", "resolved", ".", "get", "(", "view", ")", ";", "if", "(", "provider", "==", "null", ")", "{", "synchronized", "(", "this", ".", "cache", ")", "{", "provider", "=", "findProvider", "(", "view", ",", "environment", ",", "classLoader", ",", "resourceLoader", ")", ";", "provider", "=", "(", "provider", "!=", "null", ")", "?", "provider", ":", "NONE", ";", "this", ".", "resolved", ".", "put", "(", "view", ",", "provider", ")", ";", "this", ".", "cache", ".", "put", "(", "view", ",", "provider", ")", ";", "}", "}", "return", "(", "provider", "!=", "NONE", ")", "?", "provider", ":", "null", ";", "}"], "docstring": "Get the provider that can be used to render the given view.\n@param view the view to render\n@param environment the environment\n@param classLoader the class loader\n@param resourceLoader the resource loader\n@return a {@link TemplateAvailabilityProvider} or null", "docstring_tokens": ["Get", "the", "provider", "that", "can", "be", "used", "to", "render", "the", "given", "view", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java#L131-L152", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Book.java", "func_name": "Book.getReferences", "original_string": "@Override\n\tpublic List<ForeignKey<Record, ?>> getReferences() {\n\t\treturn Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_BOOK_AUTHOR,\n\t\t\t\tKeys.FK_BOOK_LANGUAGE);\n\t}", "language": "java", "code": "@Override\n\tpublic List<ForeignKey<Record, ?>> getReferences() {\n\t\treturn Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_BOOK_AUTHOR,\n\t\t\t\tKeys.FK_BOOK_LANGUAGE);\n\t}", "code_tokens": ["@", "Override", "public", "List", "<", "ForeignKey", "<", "Record", ",", "?", ">", ">", "getReferences", "(", ")", "{", "return", "Arrays", ".", "<", "ForeignKey", "<", "Record", ",", "?", ">", ">", "asList", "(", "Keys", ".", "FK_BOOK_AUTHOR", ",", "Keys", ".", "FK_BOOK_LANGUAGE", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Book.java#L122-L126", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java", "func_name": "GroovyCompiler.compile", "original_string": "public Class<?>[] compile(String... sources)\n\t\t\tthrows CompilationFailedException, IOException {\n\n\t\tthis.loader.clearCache();\n\t\tList<Class<?>> classes = new ArrayList<>();\n\n\t\tCompilerConfiguration configuration = this.loader.getConfiguration();\n\n\t\tCompilationUnit compilationUnit = new CompilationUnit(configuration, null,\n\t\t\t\tthis.loader);\n\t\tClassCollector collector = this.loader.createCollector(compilationUnit, null);\n\t\tcompilationUnit.setClassgenCallback(collector);\n\n\t\tfor (String source : sources) {\n\t\t\tList<String> paths = ResourceUtils.getUrls(source, this.loader);\n\t\t\tfor (String path : paths) {\n\t\t\t\tcompilationUnit.addSource(new URL(path));\n\t\t\t}\n\t\t}\n\n\t\taddAstTransformations(compilationUnit);\n\n\t\tcompilationUnit.compile(Phases.CLASS_GENERATION);\n\t\tfor (Object loadedClass : collector.getLoadedClasses()) {\n\t\t\tclasses.add((Class<?>) loadedClass);\n\t\t}\n\t\tClassNode mainClassNode = MainClass.get(compilationUnit);\n\n\t\tClass<?> mainClass = null;\n\t\tfor (Class<?> loadedClass : classes) {\n\t\t\tif (mainClassNode.getName().equals(loadedClass.getName())) {\n\t\t\t\tmainClass = loadedClass;\n\t\t\t}\n\t\t}\n\t\tif (mainClass != null) {\n\t\t\tclasses.remove(mainClass);\n\t\t\tclasses.add(0, mainClass);\n\t\t}\n\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "language": "java", "code": "public Class<?>[] compile(String... sources)\n\t\t\tthrows CompilationFailedException, IOException {\n\n\t\tthis.loader.clearCache();\n\t\tList<Class<?>> classes = new ArrayList<>();\n\n\t\tCompilerConfiguration configuration = this.loader.getConfiguration();\n\n\t\tCompilationUnit compilationUnit = new CompilationUnit(configuration, null,\n\t\t\t\tthis.loader);\n\t\tClassCollector collector = this.loader.createCollector(compilationUnit, null);\n\t\tcompilationUnit.setClassgenCallback(collector);\n\n\t\tfor (String source : sources) {\n\t\t\tList<String> paths = ResourceUtils.getUrls(source, this.loader);\n\t\t\tfor (String path : paths) {\n\t\t\t\tcompilationUnit.addSource(new URL(path));\n\t\t\t}\n\t\t}\n\n\t\taddAstTransformations(compilationUnit);\n\n\t\tcompilationUnit.compile(Phases.CLASS_GENERATION);\n\t\tfor (Object loadedClass : collector.getLoadedClasses()) {\n\t\t\tclasses.add((Class<?>) loadedClass);\n\t\t}\n\t\tClassNode mainClassNode = MainClass.get(compilationUnit);\n\n\t\tClass<?> mainClass = null;\n\t\tfor (Class<?> loadedClass : classes) {\n\t\t\tif (mainClassNode.getName().equals(loadedClass.getName())) {\n\t\t\t\tmainClass = loadedClass;\n\t\t\t}\n\t\t}\n\t\tif (mainClass != null) {\n\t\t\tclasses.remove(mainClass);\n\t\t\tclasses.add(0, mainClass);\n\t\t}\n\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "code_tokens": ["public", "Class", "<", "?", ">", "[", "]", "compile", "(", "String", "...", "sources", ")", "throws", "CompilationFailedException", ",", "IOException", "{", "this", ".", "loader", ".", "clearCache", "(", ")", ";", "List", "<", "Class", "<", "?", ">", ">", "classes", "=", "new", "ArrayList", "<>", "(", ")", ";", "CompilerConfiguration", "configuration", "=", "this", ".", "loader", ".", "getConfiguration", "(", ")", ";", "CompilationUnit", "compilationUnit", "=", "new", "CompilationUnit", "(", "configuration", ",", "null", ",", "this", ".", "loader", ")", ";", "ClassCollector", "collector", "=", "this", ".", "loader", ".", "createCollector", "(", "compilationUnit", ",", "null", ")", ";", "compilationUnit", ".", "setClassgenCallback", "(", "collector", ")", ";", "for", "(", "String", "source", ":", "sources", ")", "{", "List", "<", "String", ">", "paths", "=", "ResourceUtils", ".", "getUrls", "(", "source", ",", "this", ".", "loader", ")", ";", "for", "(", "String", "path", ":", "paths", ")", "{", "compilationUnit", ".", "addSource", "(", "new", "URL", "(", "path", ")", ")", ";", "}", "}", "addAstTransformations", "(", "compilationUnit", ")", ";", "compilationUnit", ".", "compile", "(", "Phases", ".", "CLASS_GENERATION", ")", ";", "for", "(", "Object", "loadedClass", ":", "collector", ".", "getLoadedClasses", "(", ")", ")", "{", "classes", ".", "add", "(", "(", "Class", "<", "?", ">", ")", "loadedClass", ")", ";", "}", "ClassNode", "mainClassNode", "=", "MainClass", ".", "get", "(", "compilationUnit", ")", ";", "Class", "<", "?", ">", "mainClass", "=", "null", ";", "for", "(", "Class", "<", "?", ">", "loadedClass", ":", "classes", ")", "{", "if", "(", "mainClassNode", ".", "getName", "(", ")", ".", "equals", "(", "loadedClass", ".", "getName", "(", ")", ")", ")", "{", "mainClass", "=", "loadedClass", ";", "}", "}", "if", "(", "mainClass", "!=", "null", ")", "{", "classes", ".", "remove", "(", "mainClass", ")", ";", "classes", ".", "add", "(", "0", ",", "mainClass", ")", ";", "}", "return", "ClassUtils", ".", "toClassArray", "(", "classes", ")", ";", "}"], "docstring": "Compile the specified Groovy sources, applying any\n{@link CompilerAutoConfiguration}s. All classes defined in the sources will be\nreturned from this method.\n@param sources the sources to compile\n@return compiled classes\n@throws CompilationFailedException in case of compilation failures\n@throws IOException in case of I/O errors\n@throws CompilationFailedException in case of compilation errors", "docstring_tokens": ["Compile", "the", "specified", "Groovy", "sources", "applying", "any", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java#L185-L225", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java", "func_name": "JettyReactiveWebServerFactory.setServerCustomizers", "original_string": "public void setServerCustomizers(\n\t\t\tCollection<? extends JettyServerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers = new ArrayList<>(customizers);\n\t}", "language": "java", "code": "public void setServerCustomizers(\n\t\t\tCollection<? extends JettyServerCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.jettyServerCustomizers = new ArrayList<>(customizers);\n\t}", "code_tokens": ["public", "void", "setServerCustomizers", "(", "Collection", "<", "?", "extends", "JettyServerCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "this", ".", "jettyServerCustomizers", "=", "new", "ArrayList", "<>", "(", "customizers", ")", ";", "}"], "docstring": "Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}\nbefore it is started. Calling this method will replace any existing customizers.\n@param customizers the Jetty customizers to apply", "docstring_tokens": ["Sets", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java#L121-L125", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java", "func_name": "ServiceCapabilitiesReportGenerator.generate", "original_string": "public String generate(String url) throws IOException {\n\t\tObject content = this.initializrService.loadServiceCapabilities(url);\n\t\tif (content instanceof InitializrServiceMetadata) {\n\t\t\treturn generateHelp(url, (InitializrServiceMetadata) content);\n\t\t}\n\t\treturn content.toString();\n\t}", "language": "java", "code": "public String generate(String url) throws IOException {\n\t\tObject content = this.initializrService.loadServiceCapabilities(url);\n\t\tif (content instanceof InitializrServiceMetadata) {\n\t\t\treturn generateHelp(url, (InitializrServiceMetadata) content);\n\t\t}\n\t\treturn content.toString();\n\t}", "code_tokens": ["public", "String", "generate", "(", "String", "url", ")", "throws", "IOException", "{", "Object", "content", "=", "this", ".", "initializrService", ".", "loadServiceCapabilities", "(", "url", ")", ";", "if", "(", "content", "instanceof", "InitializrServiceMetadata", ")", "{", "return", "generateHelp", "(", "url", ",", "(", "InitializrServiceMetadata", ")", "content", ")", ";", "}", "return", "content", ".", "toString", "(", ")", ";", "}"], "docstring": "Generate a report for the specified service. The report contains the available\ncapabilities as advertised by the root endpoint.\n@param url the url of the service\n@return the report that describes the service\n@throws IOException if the report cannot be generated", "docstring_tokens": ["Generate", "a", "report", "for", "the", "specified", "service", ".", "The", "report", "contains", "the", "available", "capabilities", "as", "advertised", "by", "the", "root", "endpoint", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java#L58-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java", "func_name": "InitializrServiceMetadata.getDefaultType", "original_string": "public ProjectType getDefaultType() {\n\t\tif (this.projectTypes.getDefaultItem() != null) {\n\t\t\treturn this.projectTypes.getDefaultItem();\n\t\t}\n\t\tString defaultTypeId = getDefaults().get(\"type\");\n\t\tif (defaultTypeId != null) {\n\t\t\treturn this.projectTypes.getContent().get(defaultTypeId);\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public ProjectType getDefaultType() {\n\t\tif (this.projectTypes.getDefaultItem() != null) {\n\t\t\treturn this.projectTypes.getDefaultItem();\n\t\t}\n\t\tString defaultTypeId = getDefaults().get(\"type\");\n\t\tif (defaultTypeId != null) {\n\t\t\treturn this.projectTypes.getContent().get(defaultTypeId);\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "ProjectType", "getDefaultType", "(", ")", "{", "if", "(", "this", ".", "projectTypes", ".", "getDefaultItem", "(", ")", "!=", "null", ")", "{", "return", "this", ".", "projectTypes", ".", "getDefaultItem", "(", ")", ";", "}", "String", "defaultTypeId", "=", "getDefaults", "(", ")", ".", "get", "(", "\"type\"", ")", ";", "if", "(", "defaultTypeId", "!=", "null", ")", "{", "return", "this", ".", "projectTypes", ".", "getContent", "(", ")", ".", "get", "(", "defaultTypeId", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Return the default type to use or {@code null} if the metadata does not define any\ndefault.\n@return the default project type or {@code null}", "docstring_tokens": ["Return", "the", "default", "type", "to", "use", "or", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java#L110-L119", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java", "func_name": "DefaultErrorWebExceptionHandler.renderErrorView", "original_string": "protected Mono<ServerResponse> renderErrorView(ServerRequest request) {\n\t\tboolean includeStackTrace = isIncludeStackTrace(request, MediaType.TEXT_HTML);\n\t\tMap<String, Object> error = getErrorAttributes(request, includeStackTrace);\n\t\tHttpStatus errorStatus = getHttpStatus(error);\n\t\tServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus)\n\t\t\t\t.contentType(MediaType.TEXT_HTML);\n\t\treturn Flux\n\t\t\t\t.just(\"error/\" + errorStatus.value(),\n\t\t\t\t\t\t\"error/\" + SERIES_VIEWS.get(errorStatus.series()), \"error/error\")\n\t\t\t\t.flatMap((viewName) -> renderErrorView(viewName, responseBody, error))\n\t\t\t\t.switchIfEmpty(this.errorProperties.getWhitelabel().isEnabled()\n\t\t\t\t\t\t? renderDefaultErrorView(responseBody, error)\n\t\t\t\t\t\t: Mono.error(getError(request)))\n\t\t\t\t.next();\n\t}", "language": "java", "code": "protected Mono<ServerResponse> renderErrorView(ServerRequest request) {\n\t\tboolean includeStackTrace = isIncludeStackTrace(request, MediaType.TEXT_HTML);\n\t\tMap<String, Object> error = getErrorAttributes(request, includeStackTrace);\n\t\tHttpStatus errorStatus = getHttpStatus(error);\n\t\tServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus)\n\t\t\t\t.contentType(MediaType.TEXT_HTML);\n\t\treturn Flux\n\t\t\t\t.just(\"error/\" + errorStatus.value(),\n\t\t\t\t\t\t\"error/\" + SERIES_VIEWS.get(errorStatus.series()), \"error/error\")\n\t\t\t\t.flatMap((viewName) -> renderErrorView(viewName, responseBody, error))\n\t\t\t\t.switchIfEmpty(this.errorProperties.getWhitelabel().isEnabled()\n\t\t\t\t\t\t? renderDefaultErrorView(responseBody, error)\n\t\t\t\t\t\t: Mono.error(getError(request)))\n\t\t\t\t.next();\n\t}", "code_tokens": ["protected", "Mono", "<", "ServerResponse", ">", "renderErrorView", "(", "ServerRequest", "request", ")", "{", "boolean", "includeStackTrace", "=", "isIncludeStackTrace", "(", "request", ",", "MediaType", ".", "TEXT_HTML", ")", ";", "Map", "<", "String", ",", "Object", ">", "error", "=", "getErrorAttributes", "(", "request", ",", "includeStackTrace", ")", ";", "HttpStatus", "errorStatus", "=", "getHttpStatus", "(", "error", ")", ";", "ServerResponse", ".", "BodyBuilder", "responseBody", "=", "ServerResponse", ".", "status", "(", "errorStatus", ")", ".", "contentType", "(", "MediaType", ".", "TEXT_HTML", ")", ";", "return", "Flux", ".", "just", "(", "\"error/\"", "+", "errorStatus", ".", "value", "(", ")", ",", "\"error/\"", "+", "SERIES_VIEWS", ".", "get", "(", "errorStatus", ".", "series", "(", ")", ")", ",", "\"error/error\"", ")", ".", "flatMap", "(", "(", "viewName", ")", "-", ">", "renderErrorView", "(", "viewName", ",", "responseBody", ",", "error", ")", ")", ".", "switchIfEmpty", "(", "this", ".", "errorProperties", ".", "getWhitelabel", "(", ")", ".", "isEnabled", "(", ")", "?", "renderDefaultErrorView", "(", "responseBody", ",", "error", ")", ":", "Mono", ".", "error", "(", "getError", "(", "request", ")", ")", ")", ".", "next", "(", ")", ";", "}"], "docstring": "Render the error information as an HTML view.\n@param request the current request\n@return a {@code Publisher} of the HTTP response", "docstring_tokens": ["Render", "the", "error", "information", "as", "an", "HTML", "view", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L113-L127", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java", "func_name": "DefaultErrorWebExceptionHandler.renderErrorResponse", "original_string": "protected Mono<ServerResponse> renderErrorResponse(ServerRequest request) {\n\t\tboolean includeStackTrace = isIncludeStackTrace(request, MediaType.ALL);\n\t\tMap<String, Object> error = getErrorAttributes(request, includeStackTrace);\n\t\treturn ServerResponse.status(getHttpStatus(error))\n\t\t\t\t.contentType(MediaType.APPLICATION_JSON_UTF8)\n\t\t\t\t.body(BodyInserters.fromObject(error));\n\t}", "language": "java", "code": "protected Mono<ServerResponse> renderErrorResponse(ServerRequest request) {\n\t\tboolean includeStackTrace = isIncludeStackTrace(request, MediaType.ALL);\n\t\tMap<String, Object> error = getErrorAttributes(request, includeStackTrace);\n\t\treturn ServerResponse.status(getHttpStatus(error))\n\t\t\t\t.contentType(MediaType.APPLICATION_JSON_UTF8)\n\t\t\t\t.body(BodyInserters.fromObject(error));\n\t}", "code_tokens": ["protected", "Mono", "<", "ServerResponse", ">", "renderErrorResponse", "(", "ServerRequest", "request", ")", "{", "boolean", "includeStackTrace", "=", "isIncludeStackTrace", "(", "request", ",", "MediaType", ".", "ALL", ")", ";", "Map", "<", "String", ",", "Object", ">", "error", "=", "getErrorAttributes", "(", "request", ",", "includeStackTrace", ")", ";", "return", "ServerResponse", ".", "status", "(", "getHttpStatus", "(", "error", ")", ")", ".", "contentType", "(", "MediaType", ".", "APPLICATION_JSON_UTF8", ")", ".", "body", "(", "BodyInserters", ".", "fromObject", "(", "error", ")", ")", ";", "}"], "docstring": "Render the error information as a JSON payload.\n@param request the current request\n@return a {@code Publisher} of the HTTP response", "docstring_tokens": ["Render", "the", "error", "information", "as", "a", "JSON", "payload", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L134-L140", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java", "func_name": "DefaultErrorWebExceptionHandler.isIncludeStackTrace", "original_string": "protected boolean isIncludeStackTrace(ServerRequest request, MediaType produces) {\n\t\tErrorProperties.IncludeStacktrace include = this.errorProperties\n\t\t\t\t.getIncludeStacktrace();\n\t\tif (include == ErrorProperties.IncludeStacktrace.ALWAYS) {\n\t\t\treturn true;\n\t\t}\n\t\tif (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {\n\t\t\treturn isTraceEnabled(request);\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "protected boolean isIncludeStackTrace(ServerRequest request, MediaType produces) {\n\t\tErrorProperties.IncludeStacktrace include = this.errorProperties\n\t\t\t\t.getIncludeStacktrace();\n\t\tif (include == ErrorProperties.IncludeStacktrace.ALWAYS) {\n\t\t\treturn true;\n\t\t}\n\t\tif (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {\n\t\t\treturn isTraceEnabled(request);\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["protected", "boolean", "isIncludeStackTrace", "(", "ServerRequest", "request", ",", "MediaType", "produces", ")", "{", "ErrorProperties", ".", "IncludeStacktrace", "include", "=", "this", ".", "errorProperties", ".", "getIncludeStacktrace", "(", ")", ";", "if", "(", "include", "==", "ErrorProperties", ".", "IncludeStacktrace", ".", "ALWAYS", ")", "{", "return", "true", ";", "}", "if", "(", "include", "==", "ErrorProperties", ".", "IncludeStacktrace", ".", "ON_TRACE_PARAM", ")", "{", "return", "isTraceEnabled", "(", "request", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the stacktrace attribute should be included.\n@param request the source request\n@param produces the media type produced (or {@code MediaType.ALL})\n@return if the stacktrace attribute should be included", "docstring_tokens": ["Determine", "if", "the", "stacktrace", "attribute", "should", "be", "included", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L148-L158", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java", "func_name": "DefaultErrorWebExceptionHandler.getHttpStatus", "original_string": "protected HttpStatus getHttpStatus(Map<String, Object> errorAttributes) {\n\t\tint statusCode = (int) errorAttributes.get(\"status\");\n\t\treturn HttpStatus.valueOf(statusCode);\n\t}", "language": "java", "code": "protected HttpStatus getHttpStatus(Map<String, Object> errorAttributes) {\n\t\tint statusCode = (int) errorAttributes.get(\"status\");\n\t\treturn HttpStatus.valueOf(statusCode);\n\t}", "code_tokens": ["protected", "HttpStatus", "getHttpStatus", "(", "Map", "<", "String", ",", "Object", ">", "errorAttributes", ")", "{", "int", "statusCode", "=", "(", "int", ")", "errorAttributes", ".", "get", "(", "\"status\"", ")", ";", "return", "HttpStatus", ".", "valueOf", "(", "statusCode", ")", ";", "}"], "docstring": "Get the HTTP error status information from the error map.\n@param errorAttributes the current error information\n@return the error HTTP status", "docstring_tokens": ["Get", "the", "HTTP", "error", "status", "information", "from", "the", "error", "map", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L165-L168", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java", "func_name": "DefaultErrorWebExceptionHandler.acceptsTextHtml", "original_string": "protected RequestPredicate acceptsTextHtml() {\n\t\treturn (serverRequest) -> {\n\t\t\ttry {\n\t\t\t\tList<MediaType> acceptedMediaTypes = serverRequest.headers().accept();\n\t\t\t\tacceptedMediaTypes.remove(MediaType.ALL);\n\t\t\t\tMediaType.sortBySpecificityAndQuality(acceptedMediaTypes);\n\t\t\t\treturn acceptedMediaTypes.stream()\n\t\t\t\t\t\t.anyMatch(MediaType.TEXT_HTML::isCompatibleWith);\n\t\t\t}", "language": "java", "code": "protected RequestPredicate acceptsTextHtml() {\n\t\treturn (serverRequest) -> {\n\t\t\ttry {\n\t\t\t\tList<MediaType> acceptedMediaTypes = serverRequest.headers().accept();\n\t\t\t\tacceptedMediaTypes.remove(MediaType.ALL);\n\t\t\t\tMediaType.sortBySpecificityAndQuality(acceptedMediaTypes);\n\t\t\t\treturn acceptedMediaTypes.stream()\n\t\t\t\t\t\t.anyMatch(MediaType.TEXT_HTML::isCompatibleWith);\n\t\t\t}", "code_tokens": ["protected", "RequestPredicate", "acceptsTextHtml", "(", ")", "{", "return", "(", "serverRequest", ")", "-", ">", "{", "try", "{", "List", "<", "MediaType", ">", "acceptedMediaTypes", "=", "serverRequest", ".", "headers", "(", ")", ".", "accept", "(", ")", ";", "acceptedMediaTypes", ".", "remove", "(", "MediaType", ".", "ALL", ")", ";", "MediaType", ".", "sortBySpecificityAndQuality", "(", "acceptedMediaTypes", ")", ";", "return", "acceptedMediaTypes", ".", "stream", "(", ")", ".", "anyMatch", "(", "MediaType", ".", "TEXT_HTML", "::", "isCompatibleWith", ")", ";", "}"], "docstring": "Predicate that checks whether the current request explicitly support\n{@code \"text/html\"} media type.\n<p>\nThe \"match-all\" media type is not considered here.\n@return the request predicate", "docstring_tokens": ["Predicate", "that", "checks", "whether", "the", "current", "request", "explicitly", "support", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L177-L185", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java", "func_name": "ProjectGenerator.shouldExtract", "original_string": "private boolean shouldExtract(ProjectGenerationRequest request,\n\t\t\tProjectGenerationResponse response) {\n\t\tif (request.isExtract()) {\n\t\t\treturn true;\n\t\t}\n\t\t// explicit name hasn't been provided for an archive and there is no extension\n\t\tif (isZipArchive(response) && request.getOutput() != null\n\t\t\t\t&& !request.getOutput().contains(\".\")) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "private boolean shouldExtract(ProjectGenerationRequest request,\n\t\t\tProjectGenerationResponse response) {\n\t\tif (request.isExtract()) {\n\t\t\treturn true;\n\t\t}\n\t\t// explicit name hasn't been provided for an archive and there is no extension\n\t\tif (isZipArchive(response) && request.getOutput() != null\n\t\t\t\t&& !request.getOutput().contains(\".\")) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["private", "boolean", "shouldExtract", "(", "ProjectGenerationRequest", "request", ",", "ProjectGenerationResponse", "response", ")", "{", "if", "(", "request", ".", "isExtract", "(", ")", ")", "{", "return", "true", ";", "}", "// explicit name hasn't been provided for an archive and there is no extension", "if", "(", "isZipArchive", "(", "response", ")", "&&", "request", ".", "getOutput", "(", ")", "!=", "null", "&&", "!", "request", ".", "getOutput", "(", ")", ".", "contains", "(", "\".\"", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Detect if the project should be extracted.\n@param request the generation request\n@param response the generation response\n@return if the project should be extracted", "docstring_tokens": ["Detect", "if", "the", "project", "should", "be", "extracted", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java#L76-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowCompressionConfigurer.java", "func_name": "UndertowCompressionConfigurer.configureCompression", "original_string": "public static HttpHandler configureCompression(Compression compression,\n\t\t\tHttpHandler httpHandler) {\n\t\tif (compression == null || !compression.getEnabled()) {\n\t\t\treturn httpHandler;\n\t\t}\n\t\tContentEncodingRepository repository = new ContentEncodingRepository();\n\t\trepository.addEncodingHandler(\"gzip\", new GzipEncodingProvider(), 50,\n\t\t\t\tPredicates.and(getCompressionPredicates(compression)));\n\t\treturn new EncodingHandler(repository).setNext(httpHandler);\n\t}", "language": "java", "code": "public static HttpHandler configureCompression(Compression compression,\n\t\t\tHttpHandler httpHandler) {\n\t\tif (compression == null || !compression.getEnabled()) {\n\t\t\treturn httpHandler;\n\t\t}\n\t\tContentEncodingRepository repository = new ContentEncodingRepository();\n\t\trepository.addEncodingHandler(\"gzip\", new GzipEncodingProvider(), 50,\n\t\t\t\tPredicates.and(getCompressionPredicates(compression)));\n\t\treturn new EncodingHandler(repository).setNext(httpHandler);\n\t}", "code_tokens": ["public", "static", "HttpHandler", "configureCompression", "(", "Compression", "compression", ",", "HttpHandler", "httpHandler", ")", "{", "if", "(", "compression", "==", "null", "||", "!", "compression", ".", "getEnabled", "(", ")", ")", "{", "return", "httpHandler", ";", "}", "ContentEncodingRepository", "repository", "=", "new", "ContentEncodingRepository", "(", ")", ";", "repository", ".", "addEncodingHandler", "(", "\"gzip\"", ",", "new", "GzipEncodingProvider", "(", ")", ",", "50", ",", "Predicates", ".", "and", "(", "getCompressionPredicates", "(", "compression", ")", ")", ")", ";", "return", "new", "EncodingHandler", "(", "repository", ")", ".", "setNext", "(", "httpHandler", ")", ";", "}"], "docstring": "Optionally wrap the given {@link HttpHandler} for HTTP compression support.\n@param compression the HTTP compression configuration\n@param httpHandler the HTTP handler to wrap\n@return the wrapped HTTP handler if compression is enabled, or the handler itself", "docstring_tokens": ["Optionally", "wrap", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowCompressionConfigurer.java#L55-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanner.java", "func_name": "EntityScanner.scan", "original_string": "@SafeVarargs\n\tpublic final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)\n\t\t\tthrows ClassNotFoundException {\n\t\tList<String> packages = getPackages();\n\t\tif (packages.isEmpty()) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(\n\t\t\t\tfalse);\n\t\tscanner.setEnvironment(this.context.getEnvironment());\n\t\tscanner.setResourceLoader(this.context);\n\t\tfor (Class<? extends Annotation> annotationType : annotationTypes) {\n\t\t\tscanner.addIncludeFilter(new AnnotationTypeFilter(annotationType));\n\t\t}\n\t\tSet<Class<?>> entitySet = new HashSet<>();\n\t\tfor (String basePackage : packages) {\n\t\t\tif (StringUtils.hasText(basePackage)) {\n\t\t\t\tfor (BeanDefinition candidate : scanner\n\t\t\t\t\t\t.findCandidateComponents(basePackage)) {\n\t\t\t\t\tentitySet.add(ClassUtils.forName(candidate.getBeanClassName(),\n\t\t\t\t\t\t\tthis.context.getClassLoader()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn entitySet;\n\t}", "language": "java", "code": "@SafeVarargs\n\tpublic final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)\n\t\t\tthrows ClassNotFoundException {\n\t\tList<String> packages = getPackages();\n\t\tif (packages.isEmpty()) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\t\tClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(\n\t\t\t\tfalse);\n\t\tscanner.setEnvironment(this.context.getEnvironment());\n\t\tscanner.setResourceLoader(this.context);\n\t\tfor (Class<? extends Annotation> annotationType : annotationTypes) {\n\t\t\tscanner.addIncludeFilter(new AnnotationTypeFilter(annotationType));\n\t\t}\n\t\tSet<Class<?>> entitySet = new HashSet<>();\n\t\tfor (String basePackage : packages) {\n\t\t\tif (StringUtils.hasText(basePackage)) {\n\t\t\t\tfor (BeanDefinition candidate : scanner\n\t\t\t\t\t\t.findCandidateComponents(basePackage)) {\n\t\t\t\t\tentitySet.add(ClassUtils.forName(candidate.getBeanClassName(),\n\t\t\t\t\t\t\tthis.context.getClassLoader()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn entitySet;\n\t}", "code_tokens": ["@", "SafeVarargs", "public", "final", "Set", "<", "Class", "<", "?", ">", ">", "scan", "(", "Class", "<", "?", "extends", "Annotation", ">", "...", "annotationTypes", ")", "throws", "ClassNotFoundException", "{", "List", "<", "String", ">", "packages", "=", "getPackages", "(", ")", ";", "if", "(", "packages", ".", "isEmpty", "(", ")", ")", "{", "return", "Collections", ".", "emptySet", "(", ")", ";", "}", "ClassPathScanningCandidateComponentProvider", "scanner", "=", "new", "ClassPathScanningCandidateComponentProvider", "(", "false", ")", ";", "scanner", ".", "setEnvironment", "(", "this", ".", "context", ".", "getEnvironment", "(", ")", ")", ";", "scanner", ".", "setResourceLoader", "(", "this", ".", "context", ")", ";", "for", "(", "Class", "<", "?", "extends", "Annotation", ">", "annotationType", ":", "annotationTypes", ")", "{", "scanner", ".", "addIncludeFilter", "(", "new", "AnnotationTypeFilter", "(", "annotationType", ")", ")", ";", "}", "Set", "<", "Class", "<", "?", ">", ">", "entitySet", "=", "new", "HashSet", "<>", "(", ")", ";", "for", "(", "String", "basePackage", ":", "packages", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "basePackage", ")", ")", "{", "for", "(", "BeanDefinition", "candidate", ":", "scanner", ".", "findCandidateComponents", "(", "basePackage", ")", ")", "{", "entitySet", ".", "add", "(", "ClassUtils", ".", "forName", "(", "candidate", ".", "getBeanClassName", "(", ")", ",", "this", ".", "context", ".", "getClassLoader", "(", ")", ")", ")", ";", "}", "}", "}", "return", "entitySet", ";", "}"], "docstring": "Scan for entities with the specified annotations.\n@param annotationTypes the annotation types used on the entities\n@return a set of entity classes\n@throws ClassNotFoundException if an entity class cannot be loaded", "docstring_tokens": ["Scan", "for", "entities", "with", "the", "specified", "annotations", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanner.java#L60-L85", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java", "func_name": "WebFluxTags.status", "original_string": "public static Tag status(ServerWebExchange exchange) {\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status == null) {\n\t\t\tstatus = HttpStatus.OK;\n\t\t}\n\t\treturn Tag.of(\"status\", String.valueOf(status.value()));\n\t}", "language": "java", "code": "public static Tag status(ServerWebExchange exchange) {\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status == null) {\n\t\t\tstatus = HttpStatus.OK;\n\t\t}\n\t\treturn Tag.of(\"status\", String.valueOf(status.value()));\n\t}", "code_tokens": ["public", "static", "Tag", "status", "(", "ServerWebExchange", "exchange", ")", "{", "HttpStatus", "status", "=", "exchange", ".", "getResponse", "(", ")", ".", "getStatusCode", "(", ")", ";", "if", "(", "status", "==", "null", ")", "{", "status", "=", "HttpStatus", ".", "OK", ";", "}", "return", "Tag", ".", "of", "(", "\"status\"", ",", "String", ".", "valueOf", "(", "status", ".", "value", "(", ")", ")", ")", ";", "}"], "docstring": "Creates a {@code status} tag based on the response status of the given\n{@code exchange}.\n@param exchange the exchange\n@return the status tag derived from the response status", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java#L81-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java", "func_name": "WebFluxTags.uri", "original_string": "public static Tag uri(ServerWebExchange exchange) {\n\t\tPathPattern pathPattern = exchange\n\t\t\t\t.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n\t\tif (pathPattern != null) {\n\t\t\treturn Tag.of(\"uri\", pathPattern.getPatternString());\n\t\t}\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status != null) {\n\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\treturn URI_REDIRECTION;\n\t\t\t}\n\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t}\n\t\t}\n\t\tString path = getPathInfo(exchange);\n\t\tif (path.isEmpty()) {\n\t\t\treturn URI_ROOT;\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}", "language": "java", "code": "public static Tag uri(ServerWebExchange exchange) {\n\t\tPathPattern pathPattern = exchange\n\t\t\t\t.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n\t\tif (pathPattern != null) {\n\t\t\treturn Tag.of(\"uri\", pathPattern.getPatternString());\n\t\t}\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status != null) {\n\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\treturn URI_REDIRECTION;\n\t\t\t}\n\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t}\n\t\t}\n\t\tString path = getPathInfo(exchange);\n\t\tif (path.isEmpty()) {\n\t\t\treturn URI_ROOT;\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}", "code_tokens": ["public", "static", "Tag", "uri", "(", "ServerWebExchange", "exchange", ")", "{", "PathPattern", "pathPattern", "=", "exchange", ".", "getAttribute", "(", "HandlerMapping", ".", "BEST_MATCHING_PATTERN_ATTRIBUTE", ")", ";", "if", "(", "pathPattern", "!=", "null", ")", "{", "return", "Tag", ".", "of", "(", "\"uri\"", ",", "pathPattern", ".", "getPatternString", "(", ")", ")", ";", "}", "HttpStatus", "status", "=", "exchange", ".", "getResponse", "(", ")", ".", "getStatusCode", "(", ")", ";", "if", "(", "status", "!=", "null", ")", "{", "if", "(", "status", ".", "is3xxRedirection", "(", ")", ")", "{", "return", "URI_REDIRECTION", ";", "}", "if", "(", "status", "==", "HttpStatus", ".", "NOT_FOUND", ")", "{", "return", "URI_NOT_FOUND", ";", "}", "}", "String", "path", "=", "getPathInfo", "(", "exchange", ")", ";", "if", "(", "path", ".", "isEmpty", "(", ")", ")", "{", "return", "URI_ROOT", ";", "}", "return", "URI_UNKNOWN", ";", "}"], "docstring": "Creates a {@code uri} tag based on the URI of the given {@code exchange}. Uses the\n{@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if\navailable. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}\nfor 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}\nfor all other requests.\n@param exchange the exchange\n@return the uri tag derived from the exchange", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java#L98-L118", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java", "func_name": "WebFluxTags.exception", "original_string": "public static Tag exception(Throwable exception) {\n\t\tif (exception != null) {\n\t\t\tString simpleName = exception.getClass().getSimpleName();\n\t\t\treturn Tag.of(\"exception\", StringUtils.hasText(simpleName) ? simpleName\n\t\t\t\t\t: exception.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}", "language": "java", "code": "public static Tag exception(Throwable exception) {\n\t\tif (exception != null) {\n\t\t\tString simpleName = exception.getClass().getSimpleName();\n\t\t\treturn Tag.of(\"exception\", StringUtils.hasText(simpleName) ? simpleName\n\t\t\t\t\t: exception.getClass().getName());\n\t\t}\n\t\treturn EXCEPTION_NONE;\n\t}", "code_tokens": ["public", "static", "Tag", "exception", "(", "Throwable", "exception", ")", "{", "if", "(", "exception", "!=", "null", ")", "{", "String", "simpleName", "=", "exception", ".", "getClass", "(", ")", ".", "getSimpleName", "(", ")", ";", "return", "Tag", ".", "of", "(", "\"exception\"", ",", "StringUtils", ".", "hasText", "(", "simpleName", ")", "?", "simpleName", ":", "exception", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "}", "return", "EXCEPTION_NONE", ";", "}"], "docstring": "Creates an {@code exception} tag based on the {@link Class#getSimpleName() simple\nname} of the class of the given {@code exception}.\n@param exception the exception, may be {@code null}\n@return the exception tag derived from the exception", "docstring_tokens": ["Creates", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java#L132-L139", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java", "func_name": "WebFluxTags.outcome", "original_string": "public static Tag outcome(ServerWebExchange exchange) {\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status != null) {\n\t\t\tif (status.is1xxInformational()) {\n\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t}\n\t\t\tif (status.is2xxSuccessful()) {\n\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t}\n\t\t\tif (status.is4xxClientError()) {\n\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t}\n\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t}\n\t\treturn OUTCOME_UNKNOWN;\n\t}", "language": "java", "code": "public static Tag outcome(ServerWebExchange exchange) {\n\t\tHttpStatus status = exchange.getResponse().getStatusCode();\n\t\tif (status != null) {\n\t\t\tif (status.is1xxInformational()) {\n\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t}\n\t\t\tif (status.is2xxSuccessful()) {\n\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t}\n\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t}\n\t\t\tif (status.is4xxClientError()) {\n\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t}\n\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t}\n\t\treturn OUTCOME_UNKNOWN;\n\t}", "code_tokens": ["public", "static", "Tag", "outcome", "(", "ServerWebExchange", "exchange", ")", "{", "HttpStatus", "status", "=", "exchange", ".", "getResponse", "(", ")", ".", "getStatusCode", "(", ")", ";", "if", "(", "status", "!=", "null", ")", "{", "if", "(", "status", ".", "is1xxInformational", "(", ")", ")", "{", "return", "OUTCOME_INFORMATIONAL", ";", "}", "if", "(", "status", ".", "is2xxSuccessful", "(", ")", ")", "{", "return", "OUTCOME_SUCCESS", ";", "}", "if", "(", "status", ".", "is3xxRedirection", "(", ")", ")", "{", "return", "OUTCOME_REDIRECTION", ";", "}", "if", "(", "status", ".", "is4xxClientError", "(", ")", ")", "{", "return", "OUTCOME_CLIENT_ERROR", ";", "}", "return", "OUTCOME_SERVER_ERROR", ";", "}", "return", "OUTCOME_UNKNOWN", ";", "}"], "docstring": "Creates an {@code outcome} tag based on the response status of the given\n{@code exchange}.\n@param exchange the exchange\n@return the outcome tag derived from the response status\n@since 2.1.0", "docstring_tokens": ["Creates", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java#L148-L166", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicatorRegistryFactory.java", "func_name": "HealthIndicatorRegistryFactory.createHealthIndicatorRegistry", "original_string": "public HealthIndicatorRegistry createHealthIndicatorRegistry(\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(healthIndicators, \"HealthIndicators must not be null\");\n\t\treturn initialize(new DefaultHealthIndicatorRegistry(), healthIndicators);\n\t}", "language": "java", "code": "public HealthIndicatorRegistry createHealthIndicatorRegistry(\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(healthIndicators, \"HealthIndicators must not be null\");\n\t\treturn initialize(new DefaultHealthIndicatorRegistry(), healthIndicators);\n\t}", "code_tokens": ["public", "HealthIndicatorRegistry", "createHealthIndicatorRegistry", "(", "Map", "<", "String", ",", "HealthIndicator", ">", "healthIndicators", ")", "{", "Assert", ".", "notNull", "(", "healthIndicators", ",", "\"HealthIndicators must not be null\"", ")", ";", "return", "initialize", "(", "new", "DefaultHealthIndicatorRegistry", "(", ")", ",", "healthIndicators", ")", ";", "}"], "docstring": "Create a {@link HealthIndicatorRegistry} based on the specified health indicators.\n@param healthIndicators the {@link HealthIndicator} instances mapped by name\n@return a {@link HealthIndicator} that delegates to the specified\n{@code healthIndicators}.", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicatorRegistryFactory.java#L49-L53", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java", "func_name": "BasicErrorController.isIncludeStackTrace", "original_string": "protected boolean isIncludeStackTrace(HttpServletRequest request,\n\t\t\tMediaType produces) {\n\t\tIncludeStacktrace include = getErrorProperties().getIncludeStacktrace();\n\t\tif (include == IncludeStacktrace.ALWAYS) {\n\t\t\treturn true;\n\t\t}\n\t\tif (include == IncludeStacktrace.ON_TRACE_PARAM) {\n\t\t\treturn getTraceParameter(request);\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "protected boolean isIncludeStackTrace(HttpServletRequest request,\n\t\t\tMediaType produces) {\n\t\tIncludeStacktrace include = getErrorProperties().getIncludeStacktrace();\n\t\tif (include == IncludeStacktrace.ALWAYS) {\n\t\t\treturn true;\n\t\t}\n\t\tif (include == IncludeStacktrace.ON_TRACE_PARAM) {\n\t\t\treturn getTraceParameter(request);\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["protected", "boolean", "isIncludeStackTrace", "(", "HttpServletRequest", "request", ",", "MediaType", "produces", ")", "{", "IncludeStacktrace", "include", "=", "getErrorProperties", "(", ")", ".", "getIncludeStacktrace", "(", ")", ";", "if", "(", "include", "==", "IncludeStacktrace", ".", "ALWAYS", ")", "{", "return", "true", ";", "}", "if", "(", "include", "==", "IncludeStacktrace", ".", "ON_TRACE_PARAM", ")", "{", "return", "getTraceParameter", "(", "request", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the stacktrace attribute should be included.\n@param request the source request\n@param produces the media type produced (or {@code MediaType.ALL})\n@return if the stacktrace attribute should be included", "docstring_tokens": ["Determine", "if", "the", "stacktrace", "attribute", "should", "be", "included", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java#L110-L120", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java", "func_name": "RawConfigurationMetadata.resolveName", "original_string": "private void resolveName(ConfigurationMetadataItem item) {\n\t\titem.setName(item.getId()); // fallback\n\t\tConfigurationMetadataSource source = getSource(item);\n\t\tif (source != null) {\n\t\t\tString groupId = source.getGroupId();\n\t\t\tString dottedPrefix = groupId + \".\";\n\t\t\tString id = item.getId();\n\t\t\tif (hasLength(groupId) && id.startsWith(dottedPrefix)) {\n\t\t\t\tString name = id.substring(dottedPrefix.length());\n\t\t\t\titem.setName(name);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void resolveName(ConfigurationMetadataItem item) {\n\t\titem.setName(item.getId()); // fallback\n\t\tConfigurationMetadataSource source = getSource(item);\n\t\tif (source != null) {\n\t\t\tString groupId = source.getGroupId();\n\t\t\tString dottedPrefix = groupId + \".\";\n\t\t\tString id = item.getId();\n\t\t\tif (hasLength(groupId) && id.startsWith(dottedPrefix)) {\n\t\t\t\tString name = id.substring(dottedPrefix.length());\n\t\t\t\titem.setName(name);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "resolveName", "(", "ConfigurationMetadataItem", "item", ")", "{", "item", ".", "setName", "(", "item", ".", "getId", "(", ")", ")", ";", "// fallback", "ConfigurationMetadataSource", "source", "=", "getSource", "(", "item", ")", ";", "if", "(", "source", "!=", "null", ")", "{", "String", "groupId", "=", "source", ".", "getGroupId", "(", ")", ";", "String", "dottedPrefix", "=", "groupId", "+", "\".\"", ";", "String", "id", "=", "item", ".", "getId", "(", ")", ";", "if", "(", "hasLength", "(", "groupId", ")", "&&", "id", ".", "startsWith", "(", "dottedPrefix", ")", ")", "{", "String", "name", "=", "id", ".", "substring", "(", "dottedPrefix", ".", "length", "(", ")", ")", ";", "item", ".", "setName", "(", "name", ")", ";", "}", "}", "}"], "docstring": "Resolve the name of an item against this instance.\n@param item the item to resolve\n@see ConfigurationMetadataProperty#setName(String)", "docstring_tokens": ["Resolve", "the", "name", "of", "an", "item", "against", "this", "instance", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java#L77-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/RestartServer.java", "func_name": "RestartServer.updateAndRestart", "original_string": "public void updateAndRestart(ClassLoaderFiles files) {\n\t\tSet<URL> urls = new LinkedHashSet<>();\n\t\tSet<URL> classLoaderUrls = getClassLoaderUrls();\n\t\tfor (SourceFolder folder : files.getSourceFolders()) {\n\t\t\tfor (Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {\n\t\t\t\tfor (URL url : classLoaderUrls) {\n\t\t\t\t\tif (updateFileSystem(url, entry.getKey(), entry.getValue())) {\n\t\t\t\t\t\turls.add(url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\turls.addAll(getMatchingUrls(classLoaderUrls, folder.getName()));\n\t\t}\n\t\tupdateTimeStamp(urls);\n\t\trestart(urls, files);\n\t}", "language": "java", "code": "public void updateAndRestart(ClassLoaderFiles files) {\n\t\tSet<URL> urls = new LinkedHashSet<>();\n\t\tSet<URL> classLoaderUrls = getClassLoaderUrls();\n\t\tfor (SourceFolder folder : files.getSourceFolders()) {\n\t\t\tfor (Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {\n\t\t\t\tfor (URL url : classLoaderUrls) {\n\t\t\t\t\tif (updateFileSystem(url, entry.getKey(), entry.getValue())) {\n\t\t\t\t\t\turls.add(url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\turls.addAll(getMatchingUrls(classLoaderUrls, folder.getName()));\n\t\t}\n\t\tupdateTimeStamp(urls);\n\t\trestart(urls, files);\n\t}", "code_tokens": ["public", "void", "updateAndRestart", "(", "ClassLoaderFiles", "files", ")", "{", "Set", "<", "URL", ">", "urls", "=", "new", "LinkedHashSet", "<>", "(", ")", ";", "Set", "<", "URL", ">", "classLoaderUrls", "=", "getClassLoaderUrls", "(", ")", ";", "for", "(", "SourceFolder", "folder", ":", "files", ".", "getSourceFolders", "(", ")", ")", "{", "for", "(", "Entry", "<", "String", ",", "ClassLoaderFile", ">", "entry", ":", "folder", ".", "getFilesEntrySet", "(", ")", ")", "{", "for", "(", "URL", "url", ":", "classLoaderUrls", ")", "{", "if", "(", "updateFileSystem", "(", "url", ",", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getValue", "(", ")", ")", ")", "{", "urls", ".", "add", "(", "url", ")", ";", "}", "}", "}", "urls", ".", "addAll", "(", "getMatchingUrls", "(", "classLoaderUrls", ",", "folder", ".", "getName", "(", ")", ")", ")", ";", "}", "updateTimeStamp", "(", "urls", ")", ";", "restart", "(", "urls", ",", "files", ")", ";", "}"], "docstring": "Update the current running application with the specified {@link ClassLoaderFiles}\nand trigger a reload.\n@param files updated class loader files", "docstring_tokens": ["Update", "the", "current", "running", "application", "with", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/RestartServer.java#L83-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/RestartServer.java", "func_name": "RestartServer.restart", "original_string": "protected void restart(Set<URL> urls, ClassLoaderFiles files) {\n\t\tRestarter restarter = Restarter.getInstance();\n\t\trestarter.addUrls(urls);\n\t\trestarter.addClassLoaderFiles(files);\n\t\trestarter.restart();\n\t}", "language": "java", "code": "protected void restart(Set<URL> urls, ClassLoaderFiles files) {\n\t\tRestarter restarter = Restarter.getInstance();\n\t\trestarter.addUrls(urls);\n\t\trestarter.addClassLoaderFiles(files);\n\t\trestarter.restart();\n\t}", "code_tokens": ["protected", "void", "restart", "(", "Set", "<", "URL", ">", "urls", ",", "ClassLoaderFiles", "files", ")", "{", "Restarter", "restarter", "=", "Restarter", ".", "getInstance", "(", ")", ";", "restarter", ".", "addUrls", "(", "urls", ")", ";", "restarter", ".", "addClassLoaderFiles", "(", "files", ")", ";", "restarter", ".", "restart", "(", ")", ";", "}"], "docstring": "Called to restart the application.\n@param urls the updated URLs\n@param files the updated files", "docstring_tokens": ["Called", "to", "restart", "the", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/RestartServer.java#L175-L180", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastClientFactory.java", "func_name": "HazelcastClientFactory.getHazelcastInstance", "original_string": "public HazelcastInstance getHazelcastInstance() {\n\t\tif (StringUtils.hasText(this.clientConfig.getInstanceName())) {\n\t\t\treturn HazelcastClient\n\t\t\t\t\t.getHazelcastClientByName(this.clientConfig.getInstanceName());\n\t\t}\n\t\treturn HazelcastClient.newHazelcastClient(this.clientConfig);\n\t}", "language": "java", "code": "public HazelcastInstance getHazelcastInstance() {\n\t\tif (StringUtils.hasText(this.clientConfig.getInstanceName())) {\n\t\t\treturn HazelcastClient\n\t\t\t\t\t.getHazelcastClientByName(this.clientConfig.getInstanceName());\n\t\t}\n\t\treturn HazelcastClient.newHazelcastClient(this.clientConfig);\n\t}", "code_tokens": ["public", "HazelcastInstance", "getHazelcastInstance", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "clientConfig", ".", "getInstanceName", "(", ")", ")", ")", "{", "return", "HazelcastClient", ".", "getHazelcastClientByName", "(", "this", ".", "clientConfig", ".", "getInstanceName", "(", ")", ")", ";", "}", "return", "HazelcastClient", ".", "newHazelcastClient", "(", "this", ".", "clientConfig", ")", ";", "}"], "docstring": "Get the {@link HazelcastInstance}.\n@return the {@link HazelcastInstance}", "docstring_tokens": ["Get", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastClientFactory.java#L74-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/XmlServletWebServerApplicationContext.java", "func_name": "XmlServletWebServerApplicationContext.load", "original_string": "public final void load(Class<?> relativeClass, String... resourceNames) {\n\t\tResource[] resources = new Resource[resourceNames.length];\n\t\tfor (int i = 0; i < resourceNames.length; i++) {\n\t\t\tresources[i] = new ClassPathResource(resourceNames[i], relativeClass);\n\t\t}\n\t\tthis.reader.loadBeanDefinitions(resources);\n\t}", "language": "java", "code": "public final void load(Class<?> relativeClass, String... resourceNames) {\n\t\tResource[] resources = new Resource[resourceNames.length];\n\t\tfor (int i = 0; i < resourceNames.length; i++) {\n\t\t\tresources[i] = new ClassPathResource(resourceNames[i], relativeClass);\n\t\t}\n\t\tthis.reader.loadBeanDefinitions(resources);\n\t}", "code_tokens": ["public", "final", "void", "load", "(", "Class", "<", "?", ">", "relativeClass", ",", "String", "...", "resourceNames", ")", "{", "Resource", "[", "]", "resources", "=", "new", "Resource", "[", "resourceNames", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "resourceNames", ".", "length", ";", "i", "++", ")", "{", "resources", "[", "i", "]", "=", "new", "ClassPathResource", "(", "resourceNames", "[", "i", "]", ",", "relativeClass", ")", ";", "}", "this", ".", "reader", ".", "loadBeanDefinitions", "(", "resources", ")", ";", "}"], "docstring": "Load bean definitions from the given XML resources.\n@param relativeClass class whose package will be used as a prefix when loading each\nspecified resource name\n@param resourceNames relatively-qualified names of resources to load", "docstring_tokens": ["Load", "bean", "definitions", "from", "the", "given", "XML", "resources", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/XmlServletWebServerApplicationContext.java#L130-L136", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.put", "original_string": "public JSONArray put(int index, Object value) throws JSONException {\n\t\tif (value instanceof Number) {\n\t\t\t// deviate from the original by checking all Numbers, not just floats &\n\t\t\t// doubles\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\t\twhile (this.values.size() <= index) {\n\t\t\tthis.values.add(null);\n\t\t}\n\t\tthis.values.set(index, value);\n\t\treturn this;\n\t}", "language": "java", "code": "public JSONArray put(int index, Object value) throws JSONException {\n\t\tif (value instanceof Number) {\n\t\t\t// deviate from the original by checking all Numbers, not just floats &\n\t\t\t// doubles\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\t\twhile (this.values.size() <= index) {\n\t\t\tthis.values.add(null);\n\t\t}\n\t\tthis.values.set(index, value);\n\t\treturn this;\n\t}", "code_tokens": ["public", "JSONArray", "put", "(", "int", "index", ",", "Object", "value", ")", "throws", "JSONException", "{", "if", "(", "value", "instanceof", "Number", ")", "{", "// deviate from the original by checking all Numbers, not just floats &", "// doubles", "JSON", ".", "checkDouble", "(", "(", "(", "Number", ")", "value", ")", ".", "doubleValue", "(", ")", ")", ";", "}", "while", "(", "this", ".", "values", ".", "size", "(", ")", "<=", "index", ")", "{", "this", ".", "values", ".", "add", "(", "null", ")", ";", "}", "this", ".", "values", ".", "set", "(", "index", ",", "value", ")", ";", "return", "this", ";", "}"], "docstring": "Sets the value at {@code index} to {@code value}, null padding this array to the\nrequired length if necessary. If a value already exists at {@code\nindex}, it will be replaced.\n@param index the index to set the value to\n@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,\nLong, Double, {@link JSONObject#NULL}, or {@code null}. May not be\n{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}.\n@return this array.\n@throws JSONException if processing of json failed", "docstring_tokens": ["Sets", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L250-L261", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.isNull", "original_string": "public boolean isNull(int index) {\n\t\tObject value = opt(index);\n\t\treturn value == null || value == JSONObject.NULL;\n\t}", "language": "java", "code": "public boolean isNull(int index) {\n\t\tObject value = opt(index);\n\t\treturn value == null || value == JSONObject.NULL;\n\t}", "code_tokens": ["public", "boolean", "isNull", "(", "int", "index", ")", "{", "Object", "value", "=", "opt", "(", "index", ")", ";", "return", "value", "==", "null", "||", "value", "==", "JSONObject", ".", "NULL", ";", "}"], "docstring": "Returns true if this array has no value at {@code index}, or if its value is the\n{@code null} reference or {@link JSONObject#NULL}.\n@param index the index to set the value to\n@return true if this array has no value at {@code index}", "docstring_tokens": ["Returns", "true", "if", "this", "array", "has", "no", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L269-L272", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getBoolean", "original_string": "public boolean getBoolean(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public boolean getBoolean(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "boolean", "getBoolean", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "Boolean", "result", "=", "JSON", ".", "toBoolean", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"boolean\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a boolean or can be coerced\nto a boolean.\n@param index the index to get the value from\n@return the value at {@code index}\n@throws JSONException if the value at {@code index} doesn't exist or cannot be\ncoerced to a boolean.", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L330-L337", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optBoolean", "original_string": "public boolean optBoolean(int index, boolean fallback) {\n\t\tObject object = opt(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public boolean optBoolean(int index, boolean fallback) {\n\t\tObject object = opt(index);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "boolean", "optBoolean", "(", "int", "index", ",", "boolean", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "Boolean", "result", "=", "JSON", ".", "toBoolean", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a boolean or can be coerced\nto a boolean. Returns {@code fallback} otherwise.\n@param index the index to get the value from\n@param fallback the fallback value\n@return the value at {@code index} of {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L356-L360", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getDouble", "original_string": "public double getDouble(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public double getDouble(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "double", "getDouble", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "Double", "result", "=", "JSON", ".", "toDouble", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"double\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a double or can be coerced\nto a double.\n@param index the index to get the value from\n@return the {@code value}\n@throws JSONException if the value at {@code index} doesn't exist or cannot be\ncoerced to a double.", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L370-L377", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optDouble", "original_string": "public double optDouble(int index, double fallback) {\n\t\tObject object = opt(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public double optDouble(int index, double fallback) {\n\t\tObject object = opt(index);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "double", "optDouble", "(", "int", "index", ",", "double", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "Double", "result", "=", "JSON", ".", "toDouble", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a double or can be coerced\nto a double. Returns {@code fallback} otherwise.\n@param index the index to get the value from\n@param fallback the fallback value\n@return the value at {@code index} of {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L396-L400", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getInt", "original_string": "public int getInt(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public int getInt(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "int", "getInt", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "Integer", "result", "=", "JSON", ".", "toInteger", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"int\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is an int or can be coerced to\nan int.\n@param index the index to get the value from\n@return the {@code value}\n@throws JSONException if the value at {@code index} doesn't exist or cannot be\ncoerced to an int.", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L410-L417", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optInt", "original_string": "public int optInt(int index, int fallback) {\n\t\tObject object = opt(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public int optInt(int index, int fallback) {\n\t\tObject object = opt(index);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "int", "optInt", "(", "int", "index", ",", "int", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "Integer", "result", "=", "JSON", ".", "toInteger", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is an int or can be coerced to\nan int. Returns {@code fallback} otherwise.\n@param index the index to get the value from\n@param fallback the fallback value\n@return the value at {@code index} of {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L436-L440", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getLong", "original_string": "public long getLong(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public long getLong(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(index, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "long", "getLong", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "Long", "result", "=", "JSON", ".", "toLong", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"long\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a long or can be coerced to\na long.\n@param index the index to get the value from\n@return the {@code value}\n\n@throws JSONException if the value at {@code index} doesn't exist or cannot be\ncoerced to a long.", "docstring_tokens": ["Returns", "the", "value", "at", "{", "@code", "index", "}", "if", "it", "exists", "and", "is", "a", "long", "or", "can", "be", "coerced", "to", "a", "long", ".", "@param", "index", "the", "index", "to", "get", "the", "value", "from", "@return", "the", "{", "@code", "value", "}"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L451-L458", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optLong", "original_string": "public long optLong(int index, long fallback) {\n\t\tObject object = opt(index);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public long optLong(int index, long fallback) {\n\t\tObject object = opt(index);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "long", "optLong", "(", "int", "index", ",", "long", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "Long", "result", "=", "JSON", ".", "toLong", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a long or can be coerced to\na long. Returns {@code fallback} otherwise.\n@param index the index to get the value from\n@param fallback the fallback value\n@return the value at {@code index} of {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L477-L481", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getJSONArray", "original_string": "public JSONArray getJSONArray(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONArray\");\n\t\t}\n\t}", "language": "java", "code": "public JSONArray getJSONArray(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONArray\");\n\t\t}\n\t}", "code_tokens": ["public", "JSONArray", "getJSONArray", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "if", "(", "object", "instanceof", "JSONArray", ")", "{", "return", "(", "JSONArray", ")", "object", ";", "}", "else", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"JSONArray\"", ")", ";", "}", "}"], "docstring": "Returns the value at {@code index} if it exists and is a {@code\nJSONArray}.\n@param index the index to get the value from\n@return the array at {@code index}\n@throws JSONException if the value doesn't exist or is not a {@code\nJSONArray}.", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L529-L537", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optJSONArray", "original_string": "public JSONArray optJSONArray(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}", "language": "java", "code": "public JSONArray optJSONArray(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}", "code_tokens": ["public", "JSONArray", "optJSONArray", "(", "int", "index", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "return", "object", "instanceof", "JSONArray", "?", "(", "JSONArray", ")", "object", ":", "null", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a {@code\nJSONArray}. Returns null otherwise.\n@param index the index to get the value from\n@return the array at {@code index} or {@code null}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L545-L548", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.getJSONObject", "original_string": "public JSONObject getJSONObject(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONObject\");\n\t\t}\n\t}", "language": "java", "code": "public JSONObject getJSONObject(int index) throws JSONException {\n\t\tObject object = get(index);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(index, object, \"JSONObject\");\n\t\t}\n\t}", "code_tokens": ["public", "JSONObject", "getJSONObject", "(", "int", "index", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "index", ")", ";", "if", "(", "object", "instanceof", "JSONObject", ")", "{", "return", "(", "JSONObject", ")", "object", ";", "}", "else", "{", "throw", "JSON", ".", "typeMismatch", "(", "index", ",", "object", ",", "\"JSONObject\"", ")", ";", "}", "}"], "docstring": "Returns the value at {@code index} if it exists and is a {@code\nJSONObject}.\n@param index the index to get the value from\n@return the object at {@code index}\n@throws JSONException if the value doesn't exist or is not a {@code\nJSONObject}.", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L558-L566", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java", "func_name": "JSONArray.optJSONObject", "original_string": "public JSONObject optJSONObject(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}", "language": "java", "code": "public JSONObject optJSONObject(int index) {\n\t\tObject object = opt(index);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}", "code_tokens": ["public", "JSONObject", "optJSONObject", "(", "int", "index", ")", "{", "Object", "object", "=", "opt", "(", "index", ")", ";", "return", "object", "instanceof", "JSONObject", "?", "(", "JSONObject", ")", "object", ":", "null", ";", "}"], "docstring": "Returns the value at {@code index} if it exists and is a {@code\nJSONObject}. Returns null otherwise.\n@param index the index to get the value from\n@return the object at {@code index} or {@code null}", "docstring_tokens": ["Returns", "the", "value", "at", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java#L574-L577", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java", "func_name": "BindResult.ifBound", "original_string": "public void ifBound(Consumer<? super T> consumer) {\n\t\tAssert.notNull(consumer, \"Consumer must not be null\");\n\t\tif (this.value != null) {\n\t\t\tconsumer.accept(this.value);\n\t\t}\n\t}", "language": "java", "code": "public void ifBound(Consumer<? super T> consumer) {\n\t\tAssert.notNull(consumer, \"Consumer must not be null\");\n\t\tif (this.value != null) {\n\t\t\tconsumer.accept(this.value);\n\t\t}\n\t}", "code_tokens": ["public", "void", "ifBound", "(", "Consumer", "<", "?", "super", "T", ">", "consumer", ")", "{", "Assert", ".", "notNull", "(", "consumer", ",", "\"Consumer must not be null\"", ")", ";", "if", "(", "this", ".", "value", "!=", "null", ")", "{", "consumer", ".", "accept", "(", "this", ".", "value", ")", ";", "}", "}"], "docstring": "Invoke the specified consumer with the bound value, or do nothing if no value has\nbeen bound.\n@param consumer block to execute if a value has been bound", "docstring_tokens": ["Invoke", "the", "specified", "consumer", "with", "the", "bound", "value", "or", "do", "nothing", "if", "no", "value", "has", "been", "bound", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java#L74-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java", "func_name": "BindResult.map", "original_string": "public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {\n\t\tAssert.notNull(mapper, \"Mapper must not be null\");\n\t\treturn of((this.value != null) ? mapper.apply(this.value) : null);\n\t}", "language": "java", "code": "public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {\n\t\tAssert.notNull(mapper, \"Mapper must not be null\");\n\t\treturn of((this.value != null) ? mapper.apply(this.value) : null);\n\t}", "code_tokens": ["public", "<", "U", ">", "BindResult", "<", "U", ">", "map", "(", "Function", "<", "?", "super", "T", ",", "?", "extends", "U", ">", "mapper", ")", "{", "Assert", ".", "notNull", "(", "mapper", ",", "\"Mapper must not be null\"", ")", ";", "return", "of", "(", "(", "this", ".", "value", "!=", "null", ")", "?", "mapper", ".", "apply", "(", "this", ".", "value", ")", ":", "null", ")", ";", "}"], "docstring": "Apply the provided mapping function to the bound value, or return an updated\nunbound result if no value has been bound.\n@param <U> the type of the result of the mapping function\n@param mapper a mapping function to apply to the bound value. The mapper will not\nbe invoked if no value has been bound.\n@return an {@code BindResult} describing the result of applying a mapping function\nto the value of this {@code BindResult}.", "docstring_tokens": ["Apply", "the", "provided", "mapping", "function", "to", "the", "bound", "value", "or", "return", "an", "updated", "unbound", "result", "if", "no", "value", "has", "been", "bound", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java#L90-L93", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java", "func_name": "BindResult.orElseCreate", "original_string": "public T orElseCreate(Class<? extends T> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn (this.value != null) ? this.value : BeanUtils.instantiateClass(type);\n\t}", "language": "java", "code": "public T orElseCreate(Class<? extends T> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn (this.value != null) ? this.value : BeanUtils.instantiateClass(type);\n\t}", "code_tokens": ["public", "T", "orElseCreate", "(", "Class", "<", "?", "extends", "T", ">", "type", ")", "{", "Assert", ".", "notNull", "(", "type", ",", "\"Type must not be null\"", ")", ";", "return", "(", "this", ".", "value", "!=", "null", ")", "?", "this", ".", "value", ":", "BeanUtils", ".", "instantiateClass", "(", "type", ")", ";", "}"], "docstring": "Return the object that was bound, or a new instance of the specified class if no\nvalue has been bound.\n@param type the type to create if no value was bound\n@return the value, if bound, otherwise a new instance of {@code type}", "docstring_tokens": ["Return", "the", "object", "that", "was", "bound", "or", "a", "new", "instance", "of", "the", "specified", "class", "if", "no", "value", "has", "been", "bound", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindResult.java#L122-L125", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java", "func_name": "CentralDirectoryFileHeader.decodeMsDosFormatDateTime", "original_string": "private long decodeMsDosFormatDateTime(long datetime) {\n\t\tLocalDateTime localDateTime = LocalDateTime.of(\n\t\t\t\t(int) (((datetime >> 25) & 0x7f) + 1980), (int) ((datetime >> 21) & 0x0f),\n\t\t\t\t(int) ((datetime >> 16) & 0x1f), (int) ((datetime >> 11) & 0x1f),\n\t\t\t\t(int) ((datetime >> 5) & 0x3f), (int) ((datetime << 1) & 0x3e));\n\t\treturn localDateTime.toEpochSecond(\n\t\t\t\tZoneId.systemDefault().getRules().getOffset(localDateTime)) * 1000;\n\t}", "language": "java", "code": "private long decodeMsDosFormatDateTime(long datetime) {\n\t\tLocalDateTime localDateTime = LocalDateTime.of(\n\t\t\t\t(int) (((datetime >> 25) & 0x7f) + 1980), (int) ((datetime >> 21) & 0x0f),\n\t\t\t\t(int) ((datetime >> 16) & 0x1f), (int) ((datetime >> 11) & 0x1f),\n\t\t\t\t(int) ((datetime >> 5) & 0x3f), (int) ((datetime << 1) & 0x3e));\n\t\treturn localDateTime.toEpochSecond(\n\t\t\t\tZoneId.systemDefault().getRules().getOffset(localDateTime)) * 1000;\n\t}", "code_tokens": ["private", "long", "decodeMsDosFormatDateTime", "(", "long", "datetime", ")", "{", "LocalDateTime", "localDateTime", "=", "LocalDateTime", ".", "of", "(", "(", "int", ")", "(", "(", "(", "datetime", ">>", "25", ")", "&", "0x7f", ")", "+", "1980", ")", ",", "(", "int", ")", "(", "(", "datetime", ">>", "21", ")", "&", "0x0f", ")", ",", "(", "int", ")", "(", "(", "datetime", ">>", "16", ")", "&", "0x1f", ")", ",", "(", "int", ")", "(", "(", "datetime", ">>", "11", ")", "&", "0x1f", ")", ",", "(", "int", ")", "(", "(", "datetime", ">>", "5", ")", "&", "0x3f", ")", ",", "(", "int", ")", "(", "(", "datetime", "<<", "1", ")", "&", "0x3e", ")", ")", ";", "return", "localDateTime", ".", "toEpochSecond", "(", "ZoneId", ".", "systemDefault", "(", ")", ".", "getRules", "(", ")", ".", "getOffset", "(", "localDateTime", ")", ")", "*", "1000", ";", "}"], "docstring": "Decode MS-DOS Date Time details. See <a href=\n\"https://docs.microsoft.com/en-gb/windows/desktop/api/winbase/nf-winbase-dosdatetimetofiletime\">\nMicrosoft's documentation</a> for more details of the format.\n@param datetime the date and time\n@return the date and time as milliseconds since the epoch", "docstring_tokens": ["Decode", "MS", "-", "DOS", "Date", "Time", "details", ".", "See", "<a", "href", "=", "https", ":", "//", "docs", ".", "microsoft", ".", "com", "/", "en", "-", "gb", "/", "windows", "/", "desktop", "/", "api", "/", "winbase", "/", "nf", "-", "winbase", "-", "dosdatetimetofiletime", ">", "Microsoft", "s", "documentation<", "/", "a", ">", "for", "more", "details", "of", "the", "format", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java#L129-L136", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java", "func_name": "Launcher.launch", "original_string": "protected void launch(String[] args) throws Exception {\n\t\tJarFile.registerUrlProtocolHandler();\n\t\tClassLoader classLoader = createClassLoader(getClassPathArchives());\n\t\tlaunch(args, getMainClass(), classLoader);\n\t}", "language": "java", "code": "protected void launch(String[] args) throws Exception {\n\t\tJarFile.registerUrlProtocolHandler();\n\t\tClassLoader classLoader = createClassLoader(getClassPathArchives());\n\t\tlaunch(args, getMainClass(), classLoader);\n\t}", "code_tokens": ["protected", "void", "launch", "(", "String", "[", "]", "args", ")", "throws", "Exception", "{", "JarFile", ".", "registerUrlProtocolHandler", "(", ")", ";", "ClassLoader", "classLoader", "=", "createClassLoader", "(", "getClassPathArchives", "(", ")", ")", ";", "launch", "(", "args", ",", "getMainClass", "(", ")", ",", "classLoader", ")", ";", "}"], "docstring": "Launch the application. This method is the initial entry point that should be\ncalled by a subclass {@code public static void main(String[] args)} method.\n@param args the incoming arguments\n@throws Exception if the application fails to launch", "docstring_tokens": ["Launch", "the", "application", ".", "This", "method", "is", "the", "initial", "entry", "point", "that", "should", "be", "called", "by", "a", "subclass", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java#L47-L51", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java", "func_name": "Launcher.createClassLoader", "original_string": "protected ClassLoader createClassLoader(List<Archive> archives) throws Exception {\n\t\tList<URL> urls = new ArrayList<>(archives.size());\n\t\tfor (Archive archive : archives) {\n\t\t\turls.add(archive.getUrl());\n\t\t}\n\t\treturn createClassLoader(urls.toArray(new URL[0]));\n\t}", "language": "java", "code": "protected ClassLoader createClassLoader(List<Archive> archives) throws Exception {\n\t\tList<URL> urls = new ArrayList<>(archives.size());\n\t\tfor (Archive archive : archives) {\n\t\t\turls.add(archive.getUrl());\n\t\t}\n\t\treturn createClassLoader(urls.toArray(new URL[0]));\n\t}", "code_tokens": ["protected", "ClassLoader", "createClassLoader", "(", "List", "<", "Archive", ">", "archives", ")", "throws", "Exception", "{", "List", "<", "URL", ">", "urls", "=", "new", "ArrayList", "<>", "(", "archives", ".", "size", "(", ")", ")", ";", "for", "(", "Archive", "archive", ":", "archives", ")", "{", "urls", ".", "add", "(", "archive", ".", "getUrl", "(", ")", ")", ";", "}", "return", "createClassLoader", "(", "urls", ".", "toArray", "(", "new", "URL", "[", "0", "]", ")", ")", ";", "}"], "docstring": "Create a classloader for the specified archives.\n@param archives the archives\n@return the classloader\n@throws Exception if the classloader cannot be created", "docstring_tokens": ["Create", "a", "classloader", "for", "the", "specified", "archives", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java#L59-L65", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java", "func_name": "Launcher.createMainMethodRunner", "original_string": "protected MainMethodRunner createMainMethodRunner(String mainClass, String[] args,\n\t\t\tClassLoader classLoader) {\n\t\treturn new MainMethodRunner(mainClass, args);\n\t}", "language": "java", "code": "protected MainMethodRunner createMainMethodRunner(String mainClass, String[] args,\n\t\t\tClassLoader classLoader) {\n\t\treturn new MainMethodRunner(mainClass, args);\n\t}", "code_tokens": ["protected", "MainMethodRunner", "createMainMethodRunner", "(", "String", "mainClass", ",", "String", "[", "]", "args", ",", "ClassLoader", "classLoader", ")", "{", "return", "new", "MainMethodRunner", "(", "mainClass", ",", "args", ")", ";", "}"], "docstring": "Create the {@code MainMethodRunner} used to launch the application.\n@param mainClass the main class\n@param args the incoming arguments\n@param classLoader the classloader\n@return the main method runner", "docstring_tokens": ["Create", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java#L97-L100", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceUnwrapper.java", "func_name": "DataSourceUnwrapper.unwrap", "original_string": "public static <T> T unwrap(DataSource dataSource, Class<T> target) {\n\t\tif (target.isInstance(dataSource)) {\n\t\t\treturn target.cast(dataSource);\n\t\t}\n\t\tT unwrapped = safeUnwrap(dataSource, target);\n\t\tif (unwrapped != null) {\n\t\t\treturn unwrapped;\n\t\t}\n\t\tif (DELEGATING_DATA_SOURCE_PRESENT) {\n\t\t\tDataSource targetDataSource = DelegatingDataSourceUnwrapper\n\t\t\t\t\t.getTargetDataSource(dataSource);\n\t\t\tif (targetDataSource != null) {\n\t\t\t\treturn unwrap(targetDataSource, target);\n\t\t\t}\n\t\t}\n\t\tif (AopUtils.isAopProxy(dataSource)) {\n\t\t\tObject proxyTarget = AopProxyUtils.getSingletonTarget(dataSource);\n\t\t\tif (proxyTarget instanceof DataSource) {\n\t\t\t\treturn unwrap((DataSource) proxyTarget, target);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public static <T> T unwrap(DataSource dataSource, Class<T> target) {\n\t\tif (target.isInstance(dataSource)) {\n\t\t\treturn target.cast(dataSource);\n\t\t}\n\t\tT unwrapped = safeUnwrap(dataSource, target);\n\t\tif (unwrapped != null) {\n\t\t\treturn unwrapped;\n\t\t}\n\t\tif (DELEGATING_DATA_SOURCE_PRESENT) {\n\t\t\tDataSource targetDataSource = DelegatingDataSourceUnwrapper\n\t\t\t\t\t.getTargetDataSource(dataSource);\n\t\t\tif (targetDataSource != null) {\n\t\t\t\treturn unwrap(targetDataSource, target);\n\t\t\t}\n\t\t}\n\t\tif (AopUtils.isAopProxy(dataSource)) {\n\t\t\tObject proxyTarget = AopProxyUtils.getSingletonTarget(dataSource);\n\t\t\tif (proxyTarget instanceof DataSource) {\n\t\t\t\treturn unwrap((DataSource) proxyTarget, target);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "static", "<", "T", ">", "T", "unwrap", "(", "DataSource", "dataSource", ",", "Class", "<", "T", ">", "target", ")", "{", "if", "(", "target", ".", "isInstance", "(", "dataSource", ")", ")", "{", "return", "target", ".", "cast", "(", "dataSource", ")", ";", "}", "T", "unwrapped", "=", "safeUnwrap", "(", "dataSource", ",", "target", ")", ";", "if", "(", "unwrapped", "!=", "null", ")", "{", "return", "unwrapped", ";", "}", "if", "(", "DELEGATING_DATA_SOURCE_PRESENT", ")", "{", "DataSource", "targetDataSource", "=", "DelegatingDataSourceUnwrapper", ".", "getTargetDataSource", "(", "dataSource", ")", ";", "if", "(", "targetDataSource", "!=", "null", ")", "{", "return", "unwrap", "(", "targetDataSource", ",", "target", ")", ";", "}", "}", "if", "(", "AopUtils", ".", "isAopProxy", "(", "dataSource", ")", ")", "{", "Object", "proxyTarget", "=", "AopProxyUtils", ".", "getSingletonTarget", "(", "dataSource", ")", ";", "if", "(", "proxyTarget", "instanceof", "DataSource", ")", "{", "return", "unwrap", "(", "(", "DataSource", ")", "proxyTarget", ",", "target", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Return an object that implements the given {@code target} type, unwrapping delegate\nor proxy if necessary.\n@param dataSource the datasource to handle\n@param target the type that the result must implement\n@param <T> the target type\n@return an object that implements the target type or {@code null}", "docstring_tokens": ["Return", "an", "object", "that", "implements", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DataSourceUnwrapper.java#L53-L75", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizer.java", "func_name": "SslConnectorCustomizer.configureSsl", "original_string": "protected void configureSsl(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl,\n\t\t\tSslStoreProvider sslStoreProvider) {\n\t\tprotocol.setSSLEnabled(true);\n\t\tprotocol.setSslProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(protocol, ssl);\n\t\tprotocol.setKeystorePass(ssl.getKeyStorePassword());\n\t\tprotocol.setKeyPass(ssl.getKeyPassword());\n\t\tprotocol.setKeyAlias(ssl.getKeyAlias());\n\t\tString ciphers = StringUtils.arrayToCommaDelimitedString(ssl.getCiphers());\n\t\tif (StringUtils.hasText(ciphers)) {\n\t\t\tprotocol.setCiphers(ciphers);\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfor (SSLHostConfig sslHostConfig : protocol.findSslHostConfigs()) {\n\t\t\t\tsslHostConfig.setProtocols(StringUtils\n\t\t\t\t\t\t.arrayToCommaDelimitedString(ssl.getEnabledProtocols()));\n\t\t\t}\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\tconfigureSslStoreProvider(protocol, sslStoreProvider);\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(protocol, ssl);\n\t\t\tconfigureSslTrustStore(protocol, ssl);\n\t\t}\n\t}", "language": "java", "code": "protected void configureSsl(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl,\n\t\t\tSslStoreProvider sslStoreProvider) {\n\t\tprotocol.setSSLEnabled(true);\n\t\tprotocol.setSslProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(protocol, ssl);\n\t\tprotocol.setKeystorePass(ssl.getKeyStorePassword());\n\t\tprotocol.setKeyPass(ssl.getKeyPassword());\n\t\tprotocol.setKeyAlias(ssl.getKeyAlias());\n\t\tString ciphers = StringUtils.arrayToCommaDelimitedString(ssl.getCiphers());\n\t\tif (StringUtils.hasText(ciphers)) {\n\t\t\tprotocol.setCiphers(ciphers);\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfor (SSLHostConfig sslHostConfig : protocol.findSslHostConfigs()) {\n\t\t\t\tsslHostConfig.setProtocols(StringUtils\n\t\t\t\t\t\t.arrayToCommaDelimitedString(ssl.getEnabledProtocols()));\n\t\t\t}\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\tconfigureSslStoreProvider(protocol, sslStoreProvider);\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(protocol, ssl);\n\t\t\tconfigureSslTrustStore(protocol, ssl);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "configureSsl", "(", "AbstractHttp11JsseProtocol", "<", "?", ">", "protocol", ",", "Ssl", "ssl", ",", "SslStoreProvider", "sslStoreProvider", ")", "{", "protocol", ".", "setSSLEnabled", "(", "true", ")", ";", "protocol", ".", "setSslProtocol", "(", "ssl", ".", "getProtocol", "(", ")", ")", ";", "configureSslClientAuth", "(", "protocol", ",", "ssl", ")", ";", "protocol", ".", "setKeystorePass", "(", "ssl", ".", "getKeyStorePassword", "(", ")", ")", ";", "protocol", ".", "setKeyPass", "(", "ssl", ".", "getKeyPassword", "(", ")", ")", ";", "protocol", ".", "setKeyAlias", "(", "ssl", ".", "getKeyAlias", "(", ")", ")", ";", "String", "ciphers", "=", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "ssl", ".", "getCiphers", "(", ")", ")", ";", "if", "(", "StringUtils", ".", "hasText", "(", "ciphers", ")", ")", "{", "protocol", ".", "setCiphers", "(", "ciphers", ")", ";", "}", "if", "(", "ssl", ".", "getEnabledProtocols", "(", ")", "!=", "null", ")", "{", "for", "(", "SSLHostConfig", "sslHostConfig", ":", "protocol", ".", "findSslHostConfigs", "(", ")", ")", "{", "sslHostConfig", ".", "setProtocols", "(", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "ssl", ".", "getEnabledProtocols", "(", ")", ")", ")", ";", "}", "}", "if", "(", "sslStoreProvider", "!=", "null", ")", "{", "configureSslStoreProvider", "(", "protocol", ",", "sslStoreProvider", ")", ";", "}", "else", "{", "configureSslKeyStore", "(", "protocol", ",", "ssl", ")", ";", "configureSslTrustStore", "(", "protocol", ",", "ssl", ")", ";", "}", "}"], "docstring": "Configure Tomcat's {@link AbstractHttp11JsseProtocol} for SSL.\n@param protocol the protocol\n@param ssl the ssl details\n@param sslStoreProvider the ssl store provider", "docstring_tokens": ["Configure", "Tomcat", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/SslConnectorCustomizer.java#L70-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java", "func_name": "BeanPropertyName.toDashedForm", "original_string": "public static String toDashedForm(String name, int start) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tString replaced = name.replace('_', '-');\n\t\tfor (int i = start; i < replaced.length(); i++) {\n\t\t\tchar ch = replaced.charAt(i);\n\t\t\tif (Character.isUpperCase(ch) && result.length() > 0\n\t\t\t\t\t&& result.charAt(result.length() - 1) != '-') {\n\t\t\t\tresult.append('-');\n\t\t\t}\n\t\t\tresult.append(Character.toLowerCase(ch));\n\t\t}\n\t\treturn result.toString();\n\t}", "language": "java", "code": "public static String toDashedForm(String name, int start) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tString replaced = name.replace('_', '-');\n\t\tfor (int i = start; i < replaced.length(); i++) {\n\t\t\tchar ch = replaced.charAt(i);\n\t\t\tif (Character.isUpperCase(ch) && result.length() > 0\n\t\t\t\t\t&& result.charAt(result.length() - 1) != '-') {\n\t\t\t\tresult.append('-');\n\t\t\t}\n\t\t\tresult.append(Character.toLowerCase(ch));\n\t\t}\n\t\treturn result.toString();\n\t}", "code_tokens": ["public", "static", "String", "toDashedForm", "(", "String", "name", ",", "int", "start", ")", "{", "StringBuilder", "result", "=", "new", "StringBuilder", "(", ")", ";", "String", "replaced", "=", "name", ".", "replace", "(", "'", "'", ",", "'", "'", ")", ";", "for", "(", "int", "i", "=", "start", ";", "i", "<", "replaced", ".", "length", "(", ")", ";", "i", "++", ")", "{", "char", "ch", "=", "replaced", ".", "charAt", "(", "i", ")", ";", "if", "(", "Character", ".", "isUpperCase", "(", "ch", ")", "&&", "result", ".", "length", "(", ")", ">", "0", "&&", "result", ".", "charAt", "(", "result", ".", "length", "(", ")", "-", "1", ")", "!=", "'", "'", ")", "{", "result", ".", "append", "(", "'", "'", ")", ";", "}", "result", ".", "append", "(", "Character", ".", "toLowerCase", "(", "ch", ")", ")", ";", "}", "return", "result", ".", "toString", "(", ")", ";", "}"], "docstring": "Return the specified Java Bean property name in dashed form.\n@param name the source name\n@param start the starting char\n@return the dashed from", "docstring_tokens": ["Return", "the", "specified", "Java", "Bean", "property", "name", "in", "dashed", "form", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java#L45-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java", "func_name": "DeferredLog.replayTo", "original_string": "public void replayTo(Log destination) {\n\t\tsynchronized (this.lines) {\n\t\t\tfor (Line line : this.lines) {\n\t\t\t\tlogTo(destination, line.getLevel(), line.getMessage(),\n\t\t\t\t\t\tline.getThrowable());\n\t\t\t}\n\t\t\tthis.lines.clear();\n\t\t}\n\t}", "language": "java", "code": "public void replayTo(Log destination) {\n\t\tsynchronized (this.lines) {\n\t\t\tfor (Line line : this.lines) {\n\t\t\t\tlogTo(destination, line.getLevel(), line.getMessage(),\n\t\t\t\t\t\tline.getThrowable());\n\t\t\t}\n\t\t\tthis.lines.clear();\n\t\t}\n\t}", "code_tokens": ["public", "void", "replayTo", "(", "Log", "destination", ")", "{", "synchronized", "(", "this", ".", "lines", ")", "{", "for", "(", "Line", "line", ":", "this", ".", "lines", ")", "{", "logTo", "(", "destination", ",", "line", ".", "getLevel", "(", ")", ",", "line", ".", "getMessage", "(", ")", ",", "line", ".", "getThrowable", "(", ")", ")", ";", "}", "this", ".", "lines", ".", "clear", "(", ")", ";", "}", "}"], "docstring": "Replay deferred logging to the specified destination.\n@param destination the destination for the deferred log messages", "docstring_tokens": ["Replay", "deferred", "logging", "to", "the", "specified", "destination", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L184-L192", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java", "func_name": "DeferredLog.replay", "original_string": "public static Log replay(Log source, Class<?> destination) {\n\t\treturn replay(source, LogFactory.getLog(destination));\n\t}", "language": "java", "code": "public static Log replay(Log source, Class<?> destination) {\n\t\treturn replay(source, LogFactory.getLog(destination));\n\t}", "code_tokens": ["public", "static", "Log", "replay", "(", "Log", "source", ",", "Class", "<", "?", ">", "destination", ")", "{", "return", "replay", "(", "source", ",", "LogFactory", ".", "getLog", "(", "destination", ")", ")", ";", "}"], "docstring": "Replay from a source log to a destination log when the source is deferred.\n@param source the source logger\n@param destination the destination logger class\n@return the destination", "docstring_tokens": ["Replay", "from", "a", "source", "log", "to", "a", "destination", "log", "when", "the", "source", "is", "deferred", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L200-L202", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java", "func_name": "DeferredLog.replay", "original_string": "public static Log replay(Log source, Log destination) {\n\t\tif (source instanceof DeferredLog) {\n\t\t\t((DeferredLog) source).replayTo(destination);\n\t\t}\n\t\treturn destination;\n\t}", "language": "java", "code": "public static Log replay(Log source, Log destination) {\n\t\tif (source instanceof DeferredLog) {\n\t\t\t((DeferredLog) source).replayTo(destination);\n\t\t}\n\t\treturn destination;\n\t}", "code_tokens": ["public", "static", "Log", "replay", "(", "Log", "source", ",", "Log", "destination", ")", "{", "if", "(", "source", "instanceof", "DeferredLog", ")", "{", "(", "(", "DeferredLog", ")", "source", ")", ".", "replayTo", "(", "destination", ")", ";", "}", "return", "destination", ";", "}"], "docstring": "Replay from a source log to a destination log when the source is deferred.\n@param source the source logger\n@param destination the destination logger\n@return the destination", "docstring_tokens": ["Replay", "from", "a", "source", "log", "to", "a", "destination", "log", "when", "the", "source", "is", "deferred", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java#L210-L215", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java", "func_name": "ReactiveMongoClientFactory.createMongoClient", "original_string": "public MongoClient createMongoClient(MongoClientSettings settings) {\n\t\tInteger embeddedPort = getEmbeddedPort();\n\t\tif (embeddedPort != null) {\n\t\t\treturn createEmbeddedMongoClient(settings, embeddedPort);\n\t\t}\n\t\treturn createNetworkMongoClient(settings);\n\t}", "language": "java", "code": "public MongoClient createMongoClient(MongoClientSettings settings) {\n\t\tInteger embeddedPort = getEmbeddedPort();\n\t\tif (embeddedPort != null) {\n\t\t\treturn createEmbeddedMongoClient(settings, embeddedPort);\n\t\t}\n\t\treturn createNetworkMongoClient(settings);\n\t}", "code_tokens": ["public", "MongoClient", "createMongoClient", "(", "MongoClientSettings", "settings", ")", "{", "Integer", "embeddedPort", "=", "getEmbeddedPort", "(", ")", ";", "if", "(", "embeddedPort", "!=", "null", ")", "{", "return", "createEmbeddedMongoClient", "(", "settings", ",", "embeddedPort", ")", ";", "}", "return", "createNetworkMongoClient", "(", "settings", ")", ";", "}"], "docstring": "Creates a {@link MongoClient} using the given {@code settings}. If the environment\ncontains a {@code local.mongo.port} property, it is used to configure a client to\nan embedded MongoDB instance.\n@param settings the settings\n@return the Mongo client", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java#L63-L69", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java", "func_name": "ColorConverter.newInstance", "original_string": "public static ColorConverter newInstance(Configuration config, String[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. \"\n\t\t\t\t\t+ \"Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tif (options[0] == null) {\n\t\t\tLOGGER.error(\"No pattern supplied on style\");\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\tAnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null;\n\t\treturn new ColorConverter(formatters, element);\n\t}", "language": "java", "code": "public static ColorConverter newInstance(Configuration config, String[] options) {\n\t\tif (options.length < 1) {\n\t\t\tLOGGER.error(\"Incorrect number of options on style. \"\n\t\t\t\t\t+ \"Expected at least 1, received {}\", options.length);\n\t\t\treturn null;\n\t\t}\n\t\tif (options[0] == null) {\n\t\t\tLOGGER.error(\"No pattern supplied on style\");\n\t\t\treturn null;\n\t\t}\n\t\tPatternParser parser = PatternLayout.createPatternParser(config);\n\t\tList<PatternFormatter> formatters = parser.parse(options[0]);\n\t\tAnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null;\n\t\treturn new ColorConverter(formatters, element);\n\t}", "code_tokens": ["public", "static", "ColorConverter", "newInstance", "(", "Configuration", "config", ",", "String", "[", "]", "options", ")", "{", "if", "(", "options", ".", "length", "<", "1", ")", "{", "LOGGER", ".", "error", "(", "\"Incorrect number of options on style. \"", "+", "\"Expected at least 1, received {}\"", ",", "options", ".", "length", ")", ";", "return", "null", ";", "}", "if", "(", "options", "[", "0", "]", "==", "null", ")", "{", "LOGGER", ".", "error", "(", "\"No pattern supplied on style\"", ")", ";", "return", "null", ";", "}", "PatternParser", "parser", "=", "PatternLayout", ".", "createPatternParser", "(", "config", ")", ";", "List", "<", "PatternFormatter", ">", "formatters", "=", "parser", ".", "parse", "(", "options", "[", "0", "]", ")", ";", "AnsiElement", "element", "=", "(", "options", ".", "length", "!=", "1", ")", "?", "ELEMENTS", ".", "get", "(", "options", "[", "1", "]", ")", ":", "null", ";", "return", "new", "ColorConverter", "(", "formatters", ",", "element", ")", ";", "}"], "docstring": "Creates a new instance of the class. Required by Log4J2.\n@param config the configuration\n@param options the options\n@return a new instance, or {@code null} if the options are invalid", "docstring_tokens": ["Creates", "a", "new", "instance", "of", "the", "class", ".", "Required", "by", "Log4J2", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ColorConverter.java#L92-L106", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/Connection.java", "func_name": "Connection.run", "original_string": "public void run() throws Exception {\n\t\tif (this.header.contains(\"Upgrade: websocket\")\n\t\t\t\t&& this.header.contains(\"Sec-WebSocket-Version: 13\")) {\n\t\t\trunWebSocket();\n\t\t}\n\t\tif (this.header.contains(\"GET /livereload.js\")) {\n\t\t\tthis.outputStream.writeHttp(getClass().getResourceAsStream(\"livereload.js\"),\n\t\t\t\t\t\"text/javascript\");\n\t\t}\n\t}", "language": "java", "code": "public void run() throws Exception {\n\t\tif (this.header.contains(\"Upgrade: websocket\")\n\t\t\t\t&& this.header.contains(\"Sec-WebSocket-Version: 13\")) {\n\t\t\trunWebSocket();\n\t\t}\n\t\tif (this.header.contains(\"GET /livereload.js\")) {\n\t\t\tthis.outputStream.writeHttp(getClass().getResourceAsStream(\"livereload.js\"),\n\t\t\t\t\t\"text/javascript\");\n\t\t}\n\t}", "code_tokens": ["public", "void", "run", "(", ")", "throws", "Exception", "{", "if", "(", "this", ".", "header", ".", "contains", "(", "\"Upgrade: websocket\"", ")", "&&", "this", ".", "header", ".", "contains", "(", "\"Sec-WebSocket-Version: 13\"", ")", ")", "{", "runWebSocket", "(", ")", ";", "}", "if", "(", "this", ".", "header", ".", "contains", "(", "\"GET /livereload.js\"", ")", ")", "{", "this", ".", "outputStream", ".", "writeHttp", "(", "getClass", "(", ")", ".", "getResourceAsStream", "(", "\"livereload.js\"", ")", ",", "\"text/javascript\"", ")", ";", "}", "}"], "docstring": "Run the connection.\n@throws Exception in case of errors", "docstring_tokens": ["Run", "the", "connection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/Connection.java#L80-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java", "func_name": "JpaProperties.determineDatabase", "original_string": "@Deprecated\n\tpublic Database determineDatabase(DataSource dataSource) {\n\t\tif (this.database != null) {\n\t\t\treturn this.database;\n\t\t}\n\t\treturn DatabaseLookup.getDatabase(dataSource);\n\t}", "language": "java", "code": "@Deprecated\n\tpublic Database determineDatabase(DataSource dataSource) {\n\t\tif (this.database != null) {\n\t\t\treturn this.database;\n\t\t}\n\t\treturn DatabaseLookup.getDatabase(dataSource);\n\t}", "code_tokens": ["@", "Deprecated", "public", "Database", "determineDatabase", "(", "DataSource", "dataSource", ")", "{", "if", "(", "this", ".", "database", "!=", "null", ")", "{", "return", "this", ".", "database", ";", "}", "return", "DatabaseLookup", ".", "getDatabase", "(", "dataSource", ")", ";", "}"], "docstring": "Determine the {@link Database} to use based on this configuration and the primary\n{@link DataSource}.\n@param dataSource the auto-configured data source\n@return {@code Database}\n@deprecated since 2.2.0 in favor of letting the JPA container detect the database\nto use.", "docstring_tokens": ["Determine", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java#L140-L146", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java", "func_name": "AggregateBinder.bind", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic final Object bind(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder) {\n\t\tObject result = bindAggregate(name, target, elementBinder);\n\t\tSupplier<?> value = target.getValue();\n\t\tif (result == null || value == null) {\n\t\t\treturn result;\n\t\t}\n\t\treturn merge((Supplier<T>) value, (T) result);\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic final Object bind(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder) {\n\t\tObject result = bindAggregate(name, target, elementBinder);\n\t\tSupplier<?> value = target.getValue();\n\t\tif (result == null || value == null) {\n\t\t\treturn result;\n\t\t}\n\t\treturn merge((Supplier<T>) value, (T) result);\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "final", "Object", "bind", "(", "ConfigurationPropertyName", "name", ",", "Bindable", "<", "?", ">", "target", ",", "AggregateElementBinder", "elementBinder", ")", "{", "Object", "result", "=", "bindAggregate", "(", "name", ",", "target", ",", "elementBinder", ")", ";", "Supplier", "<", "?", ">", "value", "=", "target", ".", "getValue", "(", ")", ";", "if", "(", "result", "==", "null", "||", "value", "==", "null", ")", "{", "return", "result", ";", "}", "return", "merge", "(", "(", "Supplier", "<", "T", ">", ")", "value", ",", "(", "T", ")", "result", ")", ";", "}"], "docstring": "Perform binding for the aggregate.\n@param name the configuration property name to bind\n@param target the target to bind\n@param elementBinder an element binder\n@return the bound aggregate or null", "docstring_tokens": ["Perform", "binding", "for", "the", "aggregate", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java#L55-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java", "func_name": "SystemPropertyUtils.getProperty", "original_string": "public static String getProperty(String key, String defaultValue, String text) {\n\t\ttry {\n\t\t\tString propVal = System.getProperty(key);\n\t\t\tif (propVal == null) {\n\t\t\t\t// Fall back to searching the system environment.\n\t\t\t\tpropVal = System.getenv(key);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t// Try with underscores.\n\t\t\t\tString name = key.replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t// Try uppercase with underscores as well.\n\t\t\t\tString name = key.toUpperCase(Locale.ENGLISH).replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal != null) {\n\t\t\t\treturn propVal;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tSystem.err.println(\"Could not resolve key '\" + key + \"' in '\" + text\n\t\t\t\t\t+ \"' as system property or in environment: \" + ex);\n\t\t}\n\t\treturn defaultValue;\n\t}", "language": "java", "code": "public static String getProperty(String key, String defaultValue, String text) {\n\t\ttry {\n\t\t\tString propVal = System.getProperty(key);\n\t\t\tif (propVal == null) {\n\t\t\t\t// Fall back to searching the system environment.\n\t\t\t\tpropVal = System.getenv(key);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t// Try with underscores.\n\t\t\t\tString name = key.replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal == null) {\n\t\t\t\t// Try uppercase with underscores as well.\n\t\t\t\tString name = key.toUpperCase(Locale.ENGLISH).replace('.', '_');\n\t\t\t\tpropVal = System.getenv(name);\n\t\t\t}\n\t\t\tif (propVal != null) {\n\t\t\t\treturn propVal;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tSystem.err.println(\"Could not resolve key '\" + key + \"' in '\" + text\n\t\t\t\t\t+ \"' as system property or in environment: \" + ex);\n\t\t}\n\t\treturn defaultValue;\n\t}", "code_tokens": ["public", "static", "String", "getProperty", "(", "String", "key", ",", "String", "defaultValue", ",", "String", "text", ")", "{", "try", "{", "String", "propVal", "=", "System", ".", "getProperty", "(", "key", ")", ";", "if", "(", "propVal", "==", "null", ")", "{", "// Fall back to searching the system environment.", "propVal", "=", "System", ".", "getenv", "(", "key", ")", ";", "}", "if", "(", "propVal", "==", "null", ")", "{", "// Try with underscores.", "String", "name", "=", "key", ".", "replace", "(", "'", "'", ",", "'", "'", ")", ";", "propVal", "=", "System", ".", "getenv", "(", "name", ")", ";", "}", "if", "(", "propVal", "==", "null", ")", "{", "// Try uppercase with underscores as well.", "String", "name", "=", "key", ".", "toUpperCase", "(", "Locale", ".", "ENGLISH", ")", ".", "replace", "(", "'", "'", ",", "'", "'", ")", ";", "propVal", "=", "System", ".", "getenv", "(", "name", ")", ";", "}", "if", "(", "propVal", "!=", "null", ")", "{", "return", "propVal", ";", "}", "}", "catch", "(", "Throwable", "ex", ")", "{", "System", ".", "err", ".", "println", "(", "\"Could not resolve key '\"", "+", "key", "+", "\"' in '\"", "+", "text", "+", "\"' as system property or in environment: \"", "+", "ex", ")", ";", "}", "return", "defaultValue", ";", "}"], "docstring": "Search the System properties and environment variables for a value with the\nprovided key. Environment variables in {@code UPPER_CASE} style are allowed where\nSystem properties would normally be {@code lower.case}.\n@param key the key to resolve\n@param defaultValue the default value\n@param text optional extra context for an error message if the key resolution fails\n(e.g. if System properties are not accessible)\n@return a static property value or null of not found", "docstring_tokens": ["Search", "the", "System", "properties", "and", "environment", "variables", "for", "a", "value", "with", "the", "provided", "key", ".", "Environment", "variables", "in", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java#L179-L205", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.configureContext", "original_string": "protected void configureContext(Context context) {\n\t\tthis.contextLifecycleListeners.forEach(context::addLifecycleListener);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tthis.tomcatContextCustomizers\n\t\t\t\t.forEach((customizer) -> customizer.customize(context));\n\t}", "language": "java", "code": "protected void configureContext(Context context) {\n\t\tthis.contextLifecycleListeners.forEach(context::addLifecycleListener);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tthis.tomcatContextCustomizers\n\t\t\t\t.forEach((customizer) -> customizer.customize(context));\n\t}", "code_tokens": ["protected", "void", "configureContext", "(", "Context", "context", ")", "{", "this", ".", "contextLifecycleListeners", ".", "forEach", "(", "context", "::", "addLifecycleListener", ")", ";", "new", "DisableReferenceClearingContextCustomizer", "(", ")", ".", "customize", "(", "context", ")", ";", "this", ".", "tomcatContextCustomizers", ".", "forEach", "(", "(", "customizer", ")", "-", ">", "customizer", ".", "customize", "(", "context", ")", ")", ";", "}"], "docstring": "Configure the Tomcat {@link Context}.\n@param context the Tomcat context", "docstring_tokens": ["Configure", "the", "Tomcat", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L159-L164", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.setTomcatContextCustomizers", "original_string": "public void setTomcatContextCustomizers(\n\t\t\tCollection<? extends TomcatContextCustomizer> tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers,\n\t\t\t\t\"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers = new ArrayList<>(tomcatContextCustomizers);\n\t}", "language": "java", "code": "public void setTomcatContextCustomizers(\n\t\t\tCollection<? extends TomcatContextCustomizer> tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers,\n\t\t\t\t\"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers = new ArrayList<>(tomcatContextCustomizers);\n\t}", "code_tokens": ["public", "void", "setTomcatContextCustomizers", "(", "Collection", "<", "?", "extends", "TomcatContextCustomizer", ">", "tomcatContextCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatContextCustomizers", ",", "\"TomcatContextCustomizers must not be null\"", ")", ";", "this", ".", "tomcatContextCustomizers", "=", "new", "ArrayList", "<>", "(", "tomcatContextCustomizers", ")", ";", "}"], "docstring": "Set {@link TomcatContextCustomizer}s that should be applied to the Tomcat\n{@link Context}. Calling this method will replace any existing customizers.\n@param tomcatContextCustomizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L228-L233", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.addContextCustomizers", "original_string": "@Override\n\tpublic void addContextCustomizers(\n\t\t\tTomcatContextCustomizer... tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers,\n\t\t\t\t\"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers.addAll(Arrays.asList(tomcatContextCustomizers));\n\t}", "language": "java", "code": "@Override\n\tpublic void addContextCustomizers(\n\t\t\tTomcatContextCustomizer... tomcatContextCustomizers) {\n\t\tAssert.notNull(tomcatContextCustomizers,\n\t\t\t\t\"TomcatContextCustomizers must not be null\");\n\t\tthis.tomcatContextCustomizers.addAll(Arrays.asList(tomcatContextCustomizers));\n\t}", "code_tokens": ["@", "Override", "public", "void", "addContextCustomizers", "(", "TomcatContextCustomizer", "...", "tomcatContextCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatContextCustomizers", ",", "\"TomcatContextCustomizers must not be null\"", ")", ";", "this", ".", "tomcatContextCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "tomcatContextCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link TomcatContextCustomizer}s that should be added to the Tomcat\n{@link Context}.\n@param tomcatContextCustomizers the customizers to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L249-L255", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.setTomcatConnectorCustomizers", "original_string": "public void setTomcatConnectorCustomizers(\n\t\t\tCollection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers,\n\t\t\t\t\"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers = new ArrayList<>(tomcatConnectorCustomizers);\n\t}", "language": "java", "code": "public void setTomcatConnectorCustomizers(\n\t\t\tCollection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers,\n\t\t\t\t\"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers = new ArrayList<>(tomcatConnectorCustomizers);\n\t}", "code_tokens": ["public", "void", "setTomcatConnectorCustomizers", "(", "Collection", "<", "?", "extends", "TomcatConnectorCustomizer", ">", "tomcatConnectorCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatConnectorCustomizers", ",", "\"TomcatConnectorCustomizers must not be null\"", ")", ";", "this", ".", "tomcatConnectorCustomizers", "=", "new", "ArrayList", "<>", "(", "tomcatConnectorCustomizers", ")", ";", "}"], "docstring": "Set {@link TomcatConnectorCustomizer}s that should be applied to the Tomcat\n{@link Connector}. Calling this method will replace any existing customizers.\n@param tomcatConnectorCustomizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L262-L267", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.addConnectorCustomizers", "original_string": "@Override\n\tpublic void addConnectorCustomizers(\n\t\t\tTomcatConnectorCustomizer... tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers,\n\t\t\t\t\"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers.addAll(Arrays.asList(tomcatConnectorCustomizers));\n\t}", "language": "java", "code": "@Override\n\tpublic void addConnectorCustomizers(\n\t\t\tTomcatConnectorCustomizer... tomcatConnectorCustomizers) {\n\t\tAssert.notNull(tomcatConnectorCustomizers,\n\t\t\t\t\"TomcatConnectorCustomizers must not be null\");\n\t\tthis.tomcatConnectorCustomizers.addAll(Arrays.asList(tomcatConnectorCustomizers));\n\t}", "code_tokens": ["@", "Override", "public", "void", "addConnectorCustomizers", "(", "TomcatConnectorCustomizer", "...", "tomcatConnectorCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatConnectorCustomizers", ",", "\"TomcatConnectorCustomizers must not be null\"", ")", ";", "this", ".", "tomcatConnectorCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "tomcatConnectorCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link TomcatConnectorCustomizer}s that should be added to the Tomcat\n{@link Connector}.\n@param tomcatConnectorCustomizers the customizers to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L274-L280", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.setTomcatProtocolHandlerCustomizers", "original_string": "public void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new ArrayList<>(\n\t\t\t\ttomcatProtocolHandlerCustomizers);\n\t}", "language": "java", "code": "public void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new ArrayList<>(\n\t\t\t\ttomcatProtocolHandlerCustomizers);\n\t}", "code_tokens": ["public", "void", "setTomcatProtocolHandlerCustomizers", "(", "Collection", "<", "?", "extends", "TomcatProtocolHandlerCustomizer", "<", "?", ">", ">", "tomcatProtocolHandlerCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatProtocolHandlerCustomizers", ",", "\"TomcatProtocolHandlerCustomizers must not be null\"", ")", ";", "this", ".", "tomcatProtocolHandlerCustomizers", "=", "new", "ArrayList", "<>", "(", "tomcatProtocolHandlerCustomizers", ")", ";", "}"], "docstring": "Set {@link TomcatProtocolHandlerCustomizer}s that should be applied to the Tomcat\n{@link Connector}. Calling this method will replace any existing customizers.\n@param tomcatProtocolHandlerCustomizers the customizers to set\n@since 2.2.0", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L297-L303", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.addProtocolHandlerCustomizers", "original_string": "@Override\n\tpublic void addProtocolHandlerCustomizers(\n\t\t\tTomcatProtocolHandlerCustomizer<?>... tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers\n\t\t\t\t.addAll(Arrays.asList(tomcatProtocolHandlerCustomizers));\n\t}", "language": "java", "code": "@Override\n\tpublic void addProtocolHandlerCustomizers(\n\t\t\tTomcatProtocolHandlerCustomizer<?>... tomcatProtocolHandlerCustomizers) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizers,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers\n\t\t\t\t.addAll(Arrays.asList(tomcatProtocolHandlerCustomizers));\n\t}", "code_tokens": ["@", "Override", "public", "void", "addProtocolHandlerCustomizers", "(", "TomcatProtocolHandlerCustomizer", "<", "?", ">", "...", "tomcatProtocolHandlerCustomizers", ")", "{", "Assert", ".", "notNull", "(", "tomcatProtocolHandlerCustomizers", ",", "\"TomcatProtocolHandlerCustomizers must not be null\"", ")", ";", "this", ".", "tomcatProtocolHandlerCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "tomcatProtocolHandlerCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link TomcatProtocolHandlerCustomizer}s that should be added to the Tomcat\n{@link Connector}.\n@param tomcatProtocolHandlerCustomizers the customizers to add\n@since 2.2.0", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L311-L318", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.setContextLifecycleListeners", "original_string": "public void setContextLifecycleListeners(\n\t\t\tCollection<? extends LifecycleListener> contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners,\n\t\t\t\t\"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners = new ArrayList<>(contextLifecycleListeners);\n\t}", "language": "java", "code": "public void setContextLifecycleListeners(\n\t\t\tCollection<? extends LifecycleListener> contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners,\n\t\t\t\t\"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners = new ArrayList<>(contextLifecycleListeners);\n\t}", "code_tokens": ["public", "void", "setContextLifecycleListeners", "(", "Collection", "<", "?", "extends", "LifecycleListener", ">", "contextLifecycleListeners", ")", "{", "Assert", ".", "notNull", "(", "contextLifecycleListeners", ",", "\"ContextLifecycleListeners must not be null\"", ")", ";", "this", ".", "contextLifecycleListeners", "=", "new", "ArrayList", "<>", "(", "contextLifecycleListeners", ")", ";", "}"], "docstring": "Set {@link LifecycleListener}s that should be applied to the Tomcat\n{@link Context}. Calling this method will replace any existing listeners.\n@param contextLifecycleListeners the listeners to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L368-L373", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java", "func_name": "TomcatReactiveWebServerFactory.addContextLifecycleListeners", "original_string": "public void addContextLifecycleListeners(\n\t\t\tLifecycleListener... contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners,\n\t\t\t\t\"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners.addAll(Arrays.asList(contextLifecycleListeners));\n\t}", "language": "java", "code": "public void addContextLifecycleListeners(\n\t\t\tLifecycleListener... contextLifecycleListeners) {\n\t\tAssert.notNull(contextLifecycleListeners,\n\t\t\t\t\"ContextLifecycleListeners must not be null\");\n\t\tthis.contextLifecycleListeners.addAll(Arrays.asList(contextLifecycleListeners));\n\t}", "code_tokens": ["public", "void", "addContextLifecycleListeners", "(", "LifecycleListener", "...", "contextLifecycleListeners", ")", "{", "Assert", ".", "notNull", "(", "contextLifecycleListeners", ",", "\"ContextLifecycleListeners must not be null\"", ")", ";", "this", ".", "contextLifecycleListeners", ".", "addAll", "(", "Arrays", ".", "asList", "(", "contextLifecycleListeners", ")", ")", ";", "}"], "docstring": "Add {@link LifecycleListener}s that should be added to the Tomcat {@link Context}.\n@param contextLifecycleListeners the listeners to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java#L388-L393", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java", "func_name": "ConfigFileApplicationListener.addPropertySources", "original_string": "protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}", "language": "java", "code": "protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}", "code_tokens": ["protected", "void", "addPropertySources", "(", "ConfigurableEnvironment", "environment", ",", "ResourceLoader", "resourceLoader", ")", "{", "RandomValuePropertySource", ".", "addToEnvironment", "(", "environment", ")", ";", "new", "Loader", "(", "environment", ",", "resourceLoader", ")", ".", "load", "(", ")", ";", "}"], "docstring": "Add config file property sources to the specified environment.\n@param environment the environment to add source to\n@param resourceLoader the resource loader\n@see #addPostProcessors(ConfigurableApplicationContext)", "docstring_tokens": ["Add", "config", "file", "property", "sources", "to", "the", "specified", "environment", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L210-L214", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java", "func_name": "Shell.handleSigInt", "original_string": "protected void handleSigInt() {\n\t\tif (this.commandRunner.handleSigInt()) {\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(String.format(\"%nThanks for using Spring Boot\"));\n\t\tSystem.exit(1);\n\t}", "language": "java", "code": "protected void handleSigInt() {\n\t\tif (this.commandRunner.handleSigInt()) {\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(String.format(\"%nThanks for using Spring Boot\"));\n\t\tSystem.exit(1);\n\t}", "code_tokens": ["protected", "void", "handleSigInt", "(", ")", "{", "if", "(", "this", ".", "commandRunner", ".", "handleSigInt", "(", ")", ")", "{", "return", ";", "}", "System", ".", "out", ".", "println", "(", "String", ".", "format", "(", "\"%nThanks for using Spring Boot\"", ")", ")", ";", "System", ".", "exit", "(", "1", ")", ";", "}"], "docstring": "Final handle an interrupt signal (CTRL-C).", "docstring_tokens": ["Final", "handle", "an", "interrupt", "signal", "(", "CTRL", "-", "C", ")", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java#L175-L181", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java", "func_name": "HealthStatusHttpMapper.setStatusMapping", "original_string": "public void setStatusMapping(Map<String, Integer> statusMapping) {\n\t\tAssert.notNull(statusMapping, \"StatusMapping must not be null\");\n\t\tthis.statusMapping = new HashMap<>(statusMapping);\n\t}", "language": "java", "code": "public void setStatusMapping(Map<String, Integer> statusMapping) {\n\t\tAssert.notNull(statusMapping, \"StatusMapping must not be null\");\n\t\tthis.statusMapping = new HashMap<>(statusMapping);\n\t}", "code_tokens": ["public", "void", "setStatusMapping", "(", "Map", "<", "String", ",", "Integer", ">", "statusMapping", ")", "{", "Assert", ".", "notNull", "(", "statusMapping", ",", "\"StatusMapping must not be null\"", ")", ";", "this", ".", "statusMapping", "=", "new", "HashMap", "<>", "(", "statusMapping", ")", ";", "}"], "docstring": "Set specific status mappings.\n@param statusMapping a map of health status code to HTTP status code", "docstring_tokens": ["Set", "specific", "status", "mappings", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java#L53-L56", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java", "func_name": "HealthStatusHttpMapper.addStatusMapping", "original_string": "public void addStatusMapping(Map<String, Integer> statusMapping) {\n\t\tAssert.notNull(statusMapping, \"StatusMapping must not be null\");\n\t\tthis.statusMapping.putAll(statusMapping);\n\t}", "language": "java", "code": "public void addStatusMapping(Map<String, Integer> statusMapping) {\n\t\tAssert.notNull(statusMapping, \"StatusMapping must not be null\");\n\t\tthis.statusMapping.putAll(statusMapping);\n\t}", "code_tokens": ["public", "void", "addStatusMapping", "(", "Map", "<", "String", ",", "Integer", ">", "statusMapping", ")", "{", "Assert", ".", "notNull", "(", "statusMapping", ",", "\"StatusMapping must not be null\"", ")", ";", "this", ".", "statusMapping", ".", "putAll", "(", "statusMapping", ")", ";", "}"], "docstring": "Add specific status mappings to the existing set.\n@param statusMapping a map of health status code to HTTP status code", "docstring_tokens": ["Add", "specific", "status", "mappings", "to", "the", "existing", "set", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java#L62-L65", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java", "func_name": "HealthStatusHttpMapper.addStatusMapping", "original_string": "public void addStatusMapping(Status status, Integer httpStatus) {\n\t\tAssert.notNull(status, \"Status must not be null\");\n\t\tAssert.notNull(httpStatus, \"HttpStatus must not be null\");\n\t\taddStatusMapping(status.getCode(), httpStatus);\n\t}", "language": "java", "code": "public void addStatusMapping(Status status, Integer httpStatus) {\n\t\tAssert.notNull(status, \"Status must not be null\");\n\t\tAssert.notNull(httpStatus, \"HttpStatus must not be null\");\n\t\taddStatusMapping(status.getCode(), httpStatus);\n\t}", "code_tokens": ["public", "void", "addStatusMapping", "(", "Status", "status", ",", "Integer", "httpStatus", ")", "{", "Assert", ".", "notNull", "(", "status", ",", "\"Status must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "httpStatus", ",", "\"HttpStatus must not be null\"", ")", ";", "addStatusMapping", "(", "status", ".", "getCode", "(", ")", ",", "httpStatus", ")", ";", "}"], "docstring": "Add a status mapping to the existing set.\n@param status the status to map\n@param httpStatus the http status", "docstring_tokens": ["Add", "a", "status", "mapping", "to", "the", "existing", "set", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java#L72-L76", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java", "func_name": "HealthStatusHttpMapper.addStatusMapping", "original_string": "public void addStatusMapping(String statusCode, Integer httpStatus) {\n\t\tAssert.notNull(statusCode, \"StatusCode must not be null\");\n\t\tAssert.notNull(httpStatus, \"HttpStatus must not be null\");\n\t\tthis.statusMapping.put(statusCode, httpStatus);\n\t}", "language": "java", "code": "public void addStatusMapping(String statusCode, Integer httpStatus) {\n\t\tAssert.notNull(statusCode, \"StatusCode must not be null\");\n\t\tAssert.notNull(httpStatus, \"HttpStatus must not be null\");\n\t\tthis.statusMapping.put(statusCode, httpStatus);\n\t}", "code_tokens": ["public", "void", "addStatusMapping", "(", "String", "statusCode", ",", "Integer", "httpStatus", ")", "{", "Assert", ".", "notNull", "(", "statusCode", ",", "\"StatusCode must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "httpStatus", ",", "\"HttpStatus must not be null\"", ")", ";", "this", ".", "statusMapping", ".", "put", "(", "statusCode", ",", "httpStatus", ")", ";", "}"], "docstring": "Add a status mapping to the existing set.\n@param statusCode the status code to map\n@param httpStatus the http status", "docstring_tokens": ["Add", "a", "status", "mapping", "to", "the", "existing", "set", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java#L83-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java", "func_name": "HealthStatusHttpMapper.mapStatus", "original_string": "public int mapStatus(Status status) {\n\t\tString code = getUniformValue(status.getCode());\n\t\tif (code != null) {\n\t\t\treturn this.statusMapping.entrySet().stream()\n\t\t\t\t\t.filter((entry) -> code.equals(getUniformValue(entry.getKey())))\n\t\t\t\t\t.map(Map.Entry::getValue).findFirst()\n\t\t\t\t\t.orElse(WebEndpointResponse.STATUS_OK);\n\t\t}\n\t\treturn WebEndpointResponse.STATUS_OK;\n\t}", "language": "java", "code": "public int mapStatus(Status status) {\n\t\tString code = getUniformValue(status.getCode());\n\t\tif (code != null) {\n\t\t\treturn this.statusMapping.entrySet().stream()\n\t\t\t\t\t.filter((entry) -> code.equals(getUniformValue(entry.getKey())))\n\t\t\t\t\t.map(Map.Entry::getValue).findFirst()\n\t\t\t\t\t.orElse(WebEndpointResponse.STATUS_OK);\n\t\t}\n\t\treturn WebEndpointResponse.STATUS_OK;\n\t}", "code_tokens": ["public", "int", "mapStatus", "(", "Status", "status", ")", "{", "String", "code", "=", "getUniformValue", "(", "status", ".", "getCode", "(", ")", ")", ";", "if", "(", "code", "!=", "null", ")", "{", "return", "this", ".", "statusMapping", ".", "entrySet", "(", ")", ".", "stream", "(", ")", ".", "filter", "(", "(", "entry", ")", "-", ">", "code", ".", "equals", "(", "getUniformValue", "(", "entry", ".", "getKey", "(", ")", ")", ")", ")", ".", "map", "(", "Map", ".", "Entry", "::", "getValue", ")", ".", "findFirst", "(", ")", ".", "orElse", "(", "WebEndpointResponse", ".", "STATUS_OK", ")", ";", "}", "return", "WebEndpointResponse", ".", "STATUS_OK", ";", "}"], "docstring": "Map the specified {@link Status} to an HTTP status code.\n@param status the health {@link Status}\n@return the corresponding HTTP status code", "docstring_tokens": ["Map", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthStatusHttpMapper.java#L102-L111", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java", "func_name": "PropertyMapper.from", "original_string": "public <T> Source<T> from(Supplier<T> supplier) {\n\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\tSource<T> source = getSource(supplier);\n\t\tif (this.sourceOperator != null) {\n\t\t\tsource = this.sourceOperator.apply(source);\n\t\t}\n\t\treturn source;\n\t}", "language": "java", "code": "public <T> Source<T> from(Supplier<T> supplier) {\n\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\tSource<T> source = getSource(supplier);\n\t\tif (this.sourceOperator != null) {\n\t\t\tsource = this.sourceOperator.apply(source);\n\t\t}\n\t\treturn source;\n\t}", "code_tokens": ["public", "<", "T", ">", "Source", "<", "T", ">", "from", "(", "Supplier", "<", "T", ">", "supplier", ")", "{", "Assert", ".", "notNull", "(", "supplier", ",", "\"Supplier must not be null\"", ")", ";", "Source", "<", "T", ">", "source", "=", "getSource", "(", "supplier", ")", ";", "if", "(", "this", ".", "sourceOperator", "!=", "null", ")", "{", "source", "=", "this", ".", "sourceOperator", ".", "apply", "(", "source", ")", ";", "}", "return", "source", ";", "}"], "docstring": "Return a new {@link Source} from the specified value supplier that can be used to\nperform the mapping.\n@param <T> the source type\n@param supplier the value supplier\n@return a {@link Source} that can be used to complete the mapping\n@see #from(Object)", "docstring_tokens": ["Return", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java#L102-L109", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/ChangedFile.java", "func_name": "ChangedFile.getRelativeName", "original_string": "public String getRelativeName() {\n\t\tFile folder = this.sourceFolder.getAbsoluteFile();\n\t\tFile file = this.file.getAbsoluteFile();\n\t\tString folderName = StringUtils.cleanPath(folder.getPath());\n\t\tString fileName = StringUtils.cleanPath(file.getPath());\n\t\tAssert.state(fileName.startsWith(folderName), () -> \"The file \" + fileName\n\t\t\t\t+ \" is not contained in the source folder \" + folderName);\n\t\treturn fileName.substring(folderName.length() + 1);\n\t}", "language": "java", "code": "public String getRelativeName() {\n\t\tFile folder = this.sourceFolder.getAbsoluteFile();\n\t\tFile file = this.file.getAbsoluteFile();\n\t\tString folderName = StringUtils.cleanPath(folder.getPath());\n\t\tString fileName = StringUtils.cleanPath(file.getPath());\n\t\tAssert.state(fileName.startsWith(folderName), () -> \"The file \" + fileName\n\t\t\t\t+ \" is not contained in the source folder \" + folderName);\n\t\treturn fileName.substring(folderName.length() + 1);\n\t}", "code_tokens": ["public", "String", "getRelativeName", "(", ")", "{", "File", "folder", "=", "this", ".", "sourceFolder", ".", "getAbsoluteFile", "(", ")", ";", "File", "file", "=", "this", ".", "file", ".", "getAbsoluteFile", "(", ")", ";", "String", "folderName", "=", "StringUtils", ".", "cleanPath", "(", "folder", ".", "getPath", "(", ")", ")", ";", "String", "fileName", "=", "StringUtils", ".", "cleanPath", "(", "file", ".", "getPath", "(", ")", ")", ";", "Assert", ".", "state", "(", "fileName", ".", "startsWith", "(", "folderName", ")", ",", "(", ")", "->", "\"The file \"", "+", "fileName", "+", "\" is not contained in the source folder \"", "+", "folderName", ")", ";", "return", "fileName", ".", "substring", "(", "folderName", ".", "length", "(", ")", "+", "1", ")", ";", "}"], "docstring": "Return the name of the file relative to the source folder.\n@return the relative name", "docstring_tokens": ["Return", "the", "name", "of", "the", "file", "relative", "to", "the", "source", "folder", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/ChangedFile.java#L74-L82", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java", "func_name": "GitInfoContributor.postProcessContent", "original_string": "@Override\n\tprotected void postProcessContent(Map<String, Object> content) {\n\t\treplaceValue(getNestedMap(content, \"commit\"), \"time\",\n\t\t\t\tgetProperties().getCommitTime());\n\t\treplaceValue(getNestedMap(content, \"build\"), \"time\",\n\t\t\t\tgetProperties().getInstant(\"build.time\"));\n\t}", "language": "java", "code": "@Override\n\tprotected void postProcessContent(Map<String, Object> content) {\n\t\treplaceValue(getNestedMap(content, \"commit\"), \"time\",\n\t\t\t\tgetProperties().getCommitTime());\n\t\treplaceValue(getNestedMap(content, \"build\"), \"time\",\n\t\t\t\tgetProperties().getInstant(\"build.time\"));\n\t}", "code_tokens": ["@", "Override", "protected", "void", "postProcessContent", "(", "Map", "<", "String", ",", "Object", ">", "content", ")", "{", "replaceValue", "(", "getNestedMap", "(", "content", ",", "\"commit\"", ")", ",", "\"time\"", ",", "getProperties", "(", ")", ".", "getCommitTime", "(", ")", ")", ";", "replaceValue", "(", "getNestedMap", "(", "content", ",", "\"build\"", ")", ",", "\"time\"", ",", "getProperties", "(", ")", ".", "getInstant", "(", "\"build.time\"", ")", ")", ";", "}"], "docstring": "Post-process the content to expose. By default, well known keys representing dates\nare converted to {@link Instant} instances.\n@param content the content to expose", "docstring_tokens": ["Post", "-", "process", "the", "content", "to", "expose", ".", "By", "default", "well", "known", "keys", "representing", "dates", "are", "converted", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java#L65-L71", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java", "func_name": "AnsiString.append", "original_string": "AnsiString append(String text, Code... codes) {\n\t\tif (codes.length == 0 || !isAnsiSupported()) {\n\t\t\tthis.value.append(text);\n\t\t\treturn this;\n\t\t}\n\t\tAnsi ansi = Ansi.ansi();\n\t\tfor (Code code : codes) {\n\t\t\tansi = applyCode(ansi, code);\n\t\t}\n\t\tthis.value.append(ansi.a(text).reset().toString());\n\t\treturn this;\n\t}", "language": "java", "code": "AnsiString append(String text, Code... codes) {\n\t\tif (codes.length == 0 || !isAnsiSupported()) {\n\t\t\tthis.value.append(text);\n\t\t\treturn this;\n\t\t}\n\t\tAnsi ansi = Ansi.ansi();\n\t\tfor (Code code : codes) {\n\t\t\tansi = applyCode(ansi, code);\n\t\t}\n\t\tthis.value.append(ansi.a(text).reset().toString());\n\t\treturn this;\n\t}", "code_tokens": ["AnsiString", "append", "(", "String", "text", ",", "Code", "...", "codes", ")", "{", "if", "(", "codes", ".", "length", "==", "0", "||", "!", "isAnsiSupported", "(", ")", ")", "{", "this", ".", "value", ".", "append", "(", "text", ")", ";", "return", "this", ";", "}", "Ansi", "ansi", "=", "Ansi", ".", "ansi", "(", ")", ";", "for", "(", "Code", "code", ":", "codes", ")", "{", "ansi", "=", "applyCode", "(", "ansi", ",", "code", ")", ";", "}", "this", ".", "value", ".", "append", "(", "ansi", ".", "a", "(", "text", ")", ".", "reset", "(", ")", ".", "toString", "(", ")", ")", ";", "return", "this", ";", "}"], "docstring": "Append text with the given ANSI codes.\n@param text the text to append\n@param codes the ANSI codes\n@return this string", "docstring_tokens": ["Append", "text", "with", "the", "given", "ANSI", "codes", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java#L49-L60", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java", "func_name": "AbstractRunMojo.logDisabledFork", "original_string": "protected void logDisabledFork() {\n\t\tif (getLog().isWarnEnabled()) {\n\t\t\tif (hasAgent()) {\n\t\t\t\tgetLog().warn(\"Fork mode disabled, ignoring agent\");\n\t\t\t}\n\t\t\tif (hasJvmArgs()) {\n\t\t\t\tRunArguments runArguments = resolveJvmArguments();\n\t\t\t\tgetLog().warn(\"Fork mode disabled, ignoring JVM argument(s) [\" + Arrays\n\t\t\t\t\t\t.stream(runArguments.asArray()).collect(Collectors.joining(\" \"))\n\t\t\t\t\t\t+ \"]\");\n\t\t\t}\n\t\t\tif (hasWorkingDirectorySet()) {\n\t\t\t\tgetLog().warn(\n\t\t\t\t\t\t\"Fork mode disabled, ignoring working directory configuration\");\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected void logDisabledFork() {\n\t\tif (getLog().isWarnEnabled()) {\n\t\t\tif (hasAgent()) {\n\t\t\t\tgetLog().warn(\"Fork mode disabled, ignoring agent\");\n\t\t\t}\n\t\t\tif (hasJvmArgs()) {\n\t\t\t\tRunArguments runArguments = resolveJvmArguments();\n\t\t\t\tgetLog().warn(\"Fork mode disabled, ignoring JVM argument(s) [\" + Arrays\n\t\t\t\t\t\t.stream(runArguments.asArray()).collect(Collectors.joining(\" \"))\n\t\t\t\t\t\t+ \"]\");\n\t\t\t}\n\t\t\tif (hasWorkingDirectorySet()) {\n\t\t\t\tgetLog().warn(\n\t\t\t\t\t\t\"Fork mode disabled, ignoring working directory configuration\");\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "void", "logDisabledFork", "(", ")", "{", "if", "(", "getLog", "(", ")", ".", "isWarnEnabled", "(", ")", ")", "{", "if", "(", "hasAgent", "(", ")", ")", "{", "getLog", "(", ")", ".", "warn", "(", "\"Fork mode disabled, ignoring agent\"", ")", ";", "}", "if", "(", "hasJvmArgs", "(", ")", ")", "{", "RunArguments", "runArguments", "=", "resolveJvmArguments", "(", ")", ";", "getLog", "(", ")", ".", "warn", "(", "\"Fork mode disabled, ignoring JVM argument(s) [\"", "+", "Arrays", ".", "stream", "(", "runArguments", ".", "asArray", "(", ")", ")", ".", "collect", "(", "Collectors", ".", "joining", "(", "\" \"", ")", ")", "+", "\"]\"", ")", ";", "}", "if", "(", "hasWorkingDirectorySet", "(", ")", ")", "{", "getLog", "(", ")", ".", "warn", "(", "\"Fork mode disabled, ignoring working directory configuration\"", ")", ";", "}", "}", "}"], "docstring": "Log a warning indicating that fork mode has been explicitly disabled while some\nconditions are present that require to enable it.\n@see #enableForkByDefault()", "docstring_tokens": ["Log", "a", "warning", "indicating", "that", "fork", "mode", "has", "been", "explicitly", "disabled", "while", "some", "conditions", "are", "present", "that", "require", "to", "enable", "it", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java#L269-L285", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java", "func_name": "AbstractRunMojo.resolveJvmArguments", "original_string": "protected RunArguments resolveJvmArguments() {\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tif (this.systemPropertyVariables != null) {\n\t\t\tstringBuilder.append(this.systemPropertyVariables.entrySet().stream()\n\t\t\t\t\t.map((e) -> SystemPropertyFormatter.format(e.getKey(), e.getValue()))\n\t\t\t\t\t.collect(Collectors.joining(\" \")));\n\t\t}\n\t\tif (this.jvmArguments != null) {\n\t\t\tstringBuilder.append(\" \").append(this.jvmArguments);\n\t\t}\n\t\treturn new RunArguments(stringBuilder.toString());\n\t}", "language": "java", "code": "protected RunArguments resolveJvmArguments() {\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tif (this.systemPropertyVariables != null) {\n\t\t\tstringBuilder.append(this.systemPropertyVariables.entrySet().stream()\n\t\t\t\t\t.map((e) -> SystemPropertyFormatter.format(e.getKey(), e.getValue()))\n\t\t\t\t\t.collect(Collectors.joining(\" \")));\n\t\t}\n\t\tif (this.jvmArguments != null) {\n\t\t\tstringBuilder.append(\" \").append(this.jvmArguments);\n\t\t}\n\t\treturn new RunArguments(stringBuilder.toString());\n\t}", "code_tokens": ["protected", "RunArguments", "resolveJvmArguments", "(", ")", "{", "StringBuilder", "stringBuilder", "=", "new", "StringBuilder", "(", ")", ";", "if", "(", "this", ".", "systemPropertyVariables", "!=", "null", ")", "{", "stringBuilder", ".", "append", "(", "this", ".", "systemPropertyVariables", ".", "entrySet", "(", ")", ".", "stream", "(", ")", ".", "map", "(", "(", "e", ")", "-", ">", "SystemPropertyFormatter", ".", "format", "(", "e", ".", "getKey", "(", ")", ",", "e", ".", "getValue", "(", ")", ")", ")", ".", "collect", "(", "Collectors", ".", "joining", "(", "\" \"", ")", ")", ")", ";", "}", "if", "(", "this", ".", "jvmArguments", "!=", "null", ")", "{", "stringBuilder", ".", "append", "(", "\" \"", ")", ".", "append", "(", "this", ".", "jvmArguments", ")", ";", "}", "return", "new", "RunArguments", "(", "stringBuilder", ".", "toString", "(", ")", ")", ";", "}"], "docstring": "Resolve the JVM arguments to use.\n@return a {@link RunArguments} defining the JVM arguments", "docstring_tokens": ["Resolve", "the", "JVM", "arguments", "to", "use", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java#L354-L365", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ResourceCondition.java", "func_name": "ResourceCondition.getResourceOutcome", "original_string": "protected ConditionOutcome getResourceOutcome(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata) {\n\t\tList<String> found = new ArrayList<>();\n\t\tfor (String location : this.resourceLocations) {\n\t\t\tResource resource = context.getResourceLoader().getResource(location);\n\t\t\tif (resource != null && resource.exists()) {\n\t\t\t\tfound.add(location);\n\t\t\t}\n\t\t}\n\t\tif (found.isEmpty()) {\n\t\t\tConditionMessage message = startConditionMessage()\n\t\t\t\t\t.didNotFind(\"resource\", \"resources\")\n\t\t\t\t\t.items(Style.QUOTE, Arrays.asList(this.resourceLocations));\n\t\t\treturn ConditionOutcome.noMatch(message);\n\t\t}\n\t\tConditionMessage message = startConditionMessage().found(\"resource\", \"resources\")\n\t\t\t\t.items(Style.QUOTE, found);\n\t\treturn ConditionOutcome.match(message);\n\t}", "language": "java", "code": "protected ConditionOutcome getResourceOutcome(ConditionContext context,\n\t\t\tAnnotatedTypeMetadata metadata) {\n\t\tList<String> found = new ArrayList<>();\n\t\tfor (String location : this.resourceLocations) {\n\t\t\tResource resource = context.getResourceLoader().getResource(location);\n\t\t\tif (resource != null && resource.exists()) {\n\t\t\t\tfound.add(location);\n\t\t\t}\n\t\t}\n\t\tif (found.isEmpty()) {\n\t\t\tConditionMessage message = startConditionMessage()\n\t\t\t\t\t.didNotFind(\"resource\", \"resources\")\n\t\t\t\t\t.items(Style.QUOTE, Arrays.asList(this.resourceLocations));\n\t\t\treturn ConditionOutcome.noMatch(message);\n\t\t}\n\t\tConditionMessage message = startConditionMessage().found(\"resource\", \"resources\")\n\t\t\t\t.items(Style.QUOTE, found);\n\t\treturn ConditionOutcome.match(message);\n\t}", "code_tokens": ["protected", "ConditionOutcome", "getResourceOutcome", "(", "ConditionContext", "context", ",", "AnnotatedTypeMetadata", "metadata", ")", "{", "List", "<", "String", ">", "found", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "String", "location", ":", "this", ".", "resourceLocations", ")", "{", "Resource", "resource", "=", "context", ".", "getResourceLoader", "(", ")", ".", "getResource", "(", "location", ")", ";", "if", "(", "resource", "!=", "null", "&&", "resource", ".", "exists", "(", ")", ")", "{", "found", ".", "add", "(", "location", ")", ";", "}", "}", "if", "(", "found", ".", "isEmpty", "(", ")", ")", "{", "ConditionMessage", "message", "=", "startConditionMessage", "(", ")", ".", "didNotFind", "(", "\"resource\"", ",", "\"resources\"", ")", ".", "items", "(", "Style", ".", "QUOTE", ",", "Arrays", ".", "asList", "(", "this", ".", "resourceLocations", ")", ")", ";", "return", "ConditionOutcome", ".", "noMatch", "(", "message", ")", ";", "}", "ConditionMessage", "message", "=", "startConditionMessage", "(", ")", ".", "found", "(", "\"resource\"", ",", "\"resources\"", ")", ".", "items", "(", "Style", ".", "QUOTE", ",", "found", ")", ";", "return", "ConditionOutcome", ".", "match", "(", "message", ")", ";", "}"], "docstring": "Check if one of the default resource locations actually exists.\n@param context the condition context\n@param metadata the annotation metadata\n@return the condition outcome", "docstring_tokens": ["Check", "if", "one", "of", "the", "default", "resource", "locations", "actually", "exists", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ResourceCondition.java#L77-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.messageSenders", "original_string": "public WebServiceTemplateBuilder messageSenders(\n\t\t\tWebServiceMessageSender... messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn messageSenders(Arrays.asList(messageSenders));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder messageSenders(\n\t\t\tWebServiceMessageSender... messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn messageSenders(Arrays.asList(messageSenders));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "messageSenders", "(", "WebServiceMessageSender", "...", "messageSenders", ")", "{", "Assert", ".", "notNull", "(", "messageSenders", ",", "\"MessageSenders must not be null\"", ")", ";", "return", "messageSenders", "(", "Arrays", ".", "asList", "(", "messageSenders", ")", ")", ";", "}"], "docstring": "Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be\nused with the {@link WebServiceTemplate}. Setting this value will replace any\npreviously defined message senders, including the HTTP-based message sender, if\nany. Consider using {@link #additionalMessageSenders(WebServiceMessageSender...)}\nto keep it with user-defined message senders.\n@param messageSenders the message senders to set\n@return a new builder instance.\n@see #additionalMessageSenders(WebServiceMessageSender...)\n@see #detectHttpMessageSender(boolean)", "docstring_tokens": ["Sets", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L140-L144", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.messageSenders", "original_string": "public WebServiceTemplateBuilder messageSenders(\n\t\t\tCollection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders.set(messageSenders), this.marshaller,\n\t\t\t\tthis.unmarshaller, this.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder messageSenders(\n\t\t\tCollection<? extends WebServiceMessageSender> messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders.set(messageSenders), this.marshaller,\n\t\t\t\tthis.unmarshaller, this.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "messageSenders", "(", "Collection", "<", "?", "extends", "WebServiceMessageSender", ">", "messageSenders", ")", "{", "Assert", ".", "notNull", "(", "messageSenders", ",", "\"MessageSenders must not be null\"", ")", ";", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ".", "set", "(", "messageSenders", ")", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be\nused with the {@link WebServiceTemplate}. Setting this value will replace any\npreviously defined message senders, including the HTTP-based message sender, if\nany. Consider using {@link #additionalMessageSenders(Collection)} to keep it with\nuser-defined message senders.\n@param messageSenders the message senders to set\n@return a new builder instance.\n@see #additionalMessageSenders(Collection)\n@see #detectHttpMessageSender(boolean)", "docstring_tokens": ["Sets", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L157-L165", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.additionalMessageSenders", "original_string": "public WebServiceTemplateBuilder additionalMessageSenders(\n\t\t\tWebServiceMessageSender... messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn additionalMessageSenders(Arrays.asList(messageSenders));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder additionalMessageSenders(\n\t\t\tWebServiceMessageSender... messageSenders) {\n\t\tAssert.notNull(messageSenders, \"MessageSenders must not be null\");\n\t\treturn additionalMessageSenders(Arrays.asList(messageSenders));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "additionalMessageSenders", "(", "WebServiceMessageSender", "...", "messageSenders", ")", "{", "Assert", ".", "notNull", "(", "messageSenders", ",", "\"MessageSenders must not be null\"", ")", ";", "return", "additionalMessageSenders", "(", "Arrays", ".", "asList", "(", "messageSenders", ")", ")", ";", "}"], "docstring": "Add additional {@link WebServiceMessageSender WebServiceMessageSenders} that should\nbe used with the {@link WebServiceTemplate}.\n@param messageSenders the message senders to add\n@return a new builder instance.\n@see #messageSenders(WebServiceMessageSender...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L174-L178", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.interceptors", "original_string": "public WebServiceTemplateBuilder interceptors(ClientInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn interceptors(Arrays.asList(interceptors));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder interceptors(ClientInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn interceptors(Arrays.asList(interceptors));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "interceptors", "(", "ClientInterceptor", "...", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"Interceptors must not be null\"", ")", ";", "return", "interceptors", "(", "Arrays", ".", "asList", "(", "interceptors", ")", ")", ";", "}"], "docstring": "Set the {@link ClientInterceptor ClientInterceptors} that should be used with the\n{@link WebServiceTemplate}. Setting this value will replace any previously defined\ninterceptors.\n@param interceptors the interceptors to set\n@return a new builder instance\n@see #additionalInterceptors(ClientInterceptor...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L205-L208", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.interceptors", "original_string": "public WebServiceTemplateBuilder interceptors(\n\t\t\tCollection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tappend(Collections.<ClientInterceptor>emptySet(), interceptors),\n\t\t\t\tthis.internalCustomizers, this.customizers, this.messageSenders,\n\t\t\t\tthis.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder interceptors(\n\t\t\tCollection<? extends ClientInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tappend(Collections.<ClientInterceptor>emptySet(), interceptors),\n\t\t\t\tthis.internalCustomizers, this.customizers, this.messageSenders,\n\t\t\t\tthis.marshaller, this.unmarshaller, this.destinationProvider,\n\t\t\t\tthis.transformerFactoryClass, this.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "interceptors", "(", "Collection", "<", "?", "extends", "ClientInterceptor", ">", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"Interceptors must not be null\"", ")", ";", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "append", "(", "Collections", ".", "<", "ClientInterceptor", ">", "emptySet", "(", ")", ",", "interceptors", ")", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set the {@link ClientInterceptor ClientInterceptors} that should be used with the\n{@link WebServiceTemplate}. Setting this value will replace any previously defined\ninterceptors.\n@param interceptors the interceptors to set\n@return a new builder instance\n@see #additionalInterceptors(Collection)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L218-L226", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.additionalInterceptors", "original_string": "public WebServiceTemplateBuilder additionalInterceptors(\n\t\t\tClientInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn additionalInterceptors(Arrays.asList(interceptors));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder additionalInterceptors(\n\t\t\tClientInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"Interceptors must not be null\");\n\t\treturn additionalInterceptors(Arrays.asList(interceptors));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "additionalInterceptors", "(", "ClientInterceptor", "...", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"Interceptors must not be null\"", ")", ";", "return", "additionalInterceptors", "(", "Arrays", ".", "asList", "(", "interceptors", ")", ")", ";", "}"], "docstring": "Add additional {@link ClientInterceptor ClientInterceptors} that should be used\nwith the {@link WebServiceTemplate}.\n@param interceptors the interceptors to add\n@return a new builder instance\n@see #interceptors(ClientInterceptor...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L235-L239", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.customizers", "original_string": "public WebServiceTemplateBuilder customizers(\n\t\t\tWebServiceTemplateCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder customizers(\n\t\t\tWebServiceTemplateCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "customizers", "(", "WebServiceTemplateCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "customizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should\nbe applied to the {@link WebServiceTemplate}. Customizers are applied in the order\nthat they were added after builder configuration has been applied. Setting this\nvalue will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(WebServiceTemplateCustomizer...)", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L267-L271", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.customizers", "original_string": "public WebServiceTemplateBuilder customizers(\n\t\t\tCollection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers,\n\t\t\t\tappend(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers),\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder customizers(\n\t\t\tCollection<? extends WebServiceTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers,\n\t\t\t\tappend(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers),\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "customizers", "(", "Collection", "<", "?", "extends", "WebServiceTemplateCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "append", "(", "Collections", ".", "<", "WebServiceTemplateCustomizer", ">", "emptySet", "(", ")", ",", "customizers", ")", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should\nbe applied to the {@link WebServiceTemplate}. Customizers are applied in the order\nthat they were added after builder configuration has been applied. Setting this\nvalue will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(Collection)", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L282-L291", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.additionalCustomizers", "original_string": "public WebServiceTemplateBuilder additionalCustomizers(\n\t\t\tWebServiceTemplateCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder additionalCustomizers(\n\t\t\tWebServiceTemplateCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "additionalCustomizers", "(", "WebServiceTemplateCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "additionalCustomizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Add additional {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers}\nthat should be applied to the {@link WebServiceTemplate}. Customizers are applied\nin the order that they were added after builder configuration has been applied.\n@param customizers the customizers to add\n@return a new builder instance\n@see #customizers(WebServiceTemplateCustomizer...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L301-L305", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setCheckConnectionForFault", "original_string": "public WebServiceTemplateBuilder setCheckConnectionForFault(\n\t\t\tboolean checkConnectionForFault) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew CheckConnectionFaultCustomizer(checkConnectionForFault)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setCheckConnectionForFault(\n\t\t\tboolean checkConnectionForFault) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew CheckConnectionFaultCustomizer(checkConnectionForFault)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setCheckConnectionForFault", "(", "boolean", "checkConnectionForFault", ")", "{", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "append", "(", "this", ".", "internalCustomizers", ",", "new", "CheckConnectionFaultCustomizer", "(", "checkConnectionForFault", ")", ")", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Indicates whether the connection should be checked for fault indicators\n({@code true}), or whether we should rely on the message only ({@code false}).\n@param checkConnectionForFault whether to check for fault indicators\n@return a new builder instance.\n@see WebServiceTemplate#setCheckConnectionForFault(boolean)", "docstring_tokens": ["Indicates", "whether", "the", "connection", "should", "be", "checked", "for", "fault", "indicators", "(", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L332-L341", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setCheckConnectionForError", "original_string": "public WebServiceTemplateBuilder setCheckConnectionForError(\n\t\t\tboolean checkConnectionForError) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew CheckConnectionForErrorCustomizer(checkConnectionForError)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setCheckConnectionForError(\n\t\t\tboolean checkConnectionForError) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew CheckConnectionForErrorCustomizer(checkConnectionForError)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setCheckConnectionForError", "(", "boolean", "checkConnectionForError", ")", "{", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "append", "(", "this", ".", "internalCustomizers", ",", "new", "CheckConnectionForErrorCustomizer", "(", "checkConnectionForError", ")", ")", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Indicates whether the connection should be checked for error indicators\n({@code true}), or whether these should be ignored ({@code false}).\n@param checkConnectionForError whether to check for error indicators\n@return a new builder instance.\n@see WebServiceTemplate#setCheckConnectionForError(boolean)", "docstring_tokens": ["Indicates", "whether", "the", "connection", "should", "be", "checked", "for", "error", "indicators", "(", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L350-L359", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setWebServiceMessageFactory", "original_string": "public WebServiceTemplateBuilder setWebServiceMessageFactory(\n\t\t\tWebServiceMessageFactory messageFactory) {\n\t\tAssert.notNull(messageFactory, \"MessageFactory must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setWebServiceMessageFactory(\n\t\t\tWebServiceMessageFactory messageFactory) {\n\t\tAssert.notNull(messageFactory, \"MessageFactory must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass, messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setWebServiceMessageFactory", "(", "WebServiceMessageFactory", "messageFactory", ")", "{", "Assert", ".", "notNull", "(", "messageFactory", ",", "\"MessageFactory must not be null\"", ")", ";", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "messageFactory", ")", ";", "}"], "docstring": "Sets the {@link WebServiceMessageFactory} to use for creating messages.\n@param messageFactory the message factory to use for creating messages\n@return a new builder instance.\n@see WebServiceTemplate#setMessageFactory(WebServiceMessageFactory)", "docstring_tokens": ["Sets", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L367-L374", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setMarshaller", "original_string": "public WebServiceTemplateBuilder setMarshaller(Marshaller marshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setMarshaller(Marshaller marshaller) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setMarshaller", "(", "Marshaller", "marshaller", ")", "{", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set the {@link Marshaller} to use to serialize messages.\n@param marshaller the message marshaller\n@return a new builder instance.\n@see WebServiceTemplate#setMarshaller(Marshaller)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L396-L402", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setFaultMessageResolver", "original_string": "public WebServiceTemplateBuilder setFaultMessageResolver(\n\t\t\tFaultMessageResolver faultMessageResolver) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew FaultMessageResolverCustomizer(faultMessageResolver)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setFaultMessageResolver(\n\t\t\tFaultMessageResolver faultMessageResolver) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors,\n\t\t\t\tappend(this.internalCustomizers,\n\t\t\t\t\t\tnew FaultMessageResolverCustomizer(faultMessageResolver)),\n\t\t\t\tthis.customizers, this.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, this.transformerFactoryClass,\n\t\t\t\tthis.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setFaultMessageResolver", "(", "FaultMessageResolver", "faultMessageResolver", ")", "{", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "append", "(", "this", ".", "internalCustomizers", ",", "new", "FaultMessageResolverCustomizer", "(", "faultMessageResolver", ")", ")", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set the {@link FaultMessageResolver} to use.\n@param faultMessageResolver the fault message resolver to use\n@return a new builder instance.\n@see WebServiceTemplate#setFaultMessageResolver(FaultMessageResolver)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L410-L419", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setTransformerFactoryClass", "original_string": "public WebServiceTemplateBuilder setTransformerFactoryClass(\n\t\t\tClass<? extends TransformerFactory> transformerFactoryClass) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, transformerFactoryClass, this.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setTransformerFactoryClass(\n\t\t\tClass<? extends TransformerFactory> transformerFactoryClass) {\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tthis.destinationProvider, transformerFactoryClass, this.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setTransformerFactoryClass", "(", "Class", "<", "?", "extends", "TransformerFactory", ">", "transformerFactoryClass", ")", "{", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "this", ".", "destinationProvider", ",", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set the {@link TransformerFactory} implementation to use.\n@param transformerFactoryClass the transformer factory implementation to use\n@return a new builder instance.\n@see WebServiceTemplate#setTransformerFactoryClass(Class)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L427-L433", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setDefaultUri", "original_string": "public WebServiceTemplateBuilder setDefaultUri(String defaultUri) {\n\t\tAssert.hasText(defaultUri, \"DefaultUri must not be empty\");\n\t\treturn setDestinationProvider(() -> URI.create(defaultUri));\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setDefaultUri(String defaultUri) {\n\t\tAssert.hasText(defaultUri, \"DefaultUri must not be empty\");\n\t\treturn setDestinationProvider(() -> URI.create(defaultUri));\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setDefaultUri", "(", "String", "defaultUri", ")", "{", "Assert", ".", "hasText", "(", "defaultUri", ",", "\"DefaultUri must not be empty\"", ")", ";", "return", "setDestinationProvider", "(", "(", ")", "->", "URI", ".", "create", "(", "defaultUri", ")", ")", ";", "}"], "docstring": "Set the default URI to be used on operations that do not have a URI parameter.\nTypically, either this property is set, or\n{@link #setDestinationProvider(DestinationProvider)}, but not both.\n@param defaultUri the destination provider URI to be used on operations that do not\nhave a URI parameter.\n@return a new builder instance.\n@see #setDestinationProvider(DestinationProvider)", "docstring_tokens": ["Set", "the", "default", "URI", "to", "be", "used", "on", "operations", "that", "do", "not", "have", "a", "URI", "parameter", ".", "Typically", "either", "this", "property", "is", "set", "or", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L444-L447", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.setDestinationProvider", "original_string": "public WebServiceTemplateBuilder setDestinationProvider(\n\t\t\tDestinationProvider destinationProvider) {\n\t\tAssert.notNull(destinationProvider, \"DestinationProvider must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tdestinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "language": "java", "code": "public WebServiceTemplateBuilder setDestinationProvider(\n\t\t\tDestinationProvider destinationProvider) {\n\t\tAssert.notNull(destinationProvider, \"DestinationProvider must not be null\");\n\t\treturn new WebServiceTemplateBuilder(this.detectHttpMessageSender,\n\t\t\t\tthis.interceptors, this.internalCustomizers, this.customizers,\n\t\t\t\tthis.messageSenders, this.marshaller, this.unmarshaller,\n\t\t\t\tdestinationProvider, this.transformerFactoryClass, this.messageFactory);\n\t}", "code_tokens": ["public", "WebServiceTemplateBuilder", "setDestinationProvider", "(", "DestinationProvider", "destinationProvider", ")", "{", "Assert", ".", "notNull", "(", "destinationProvider", ",", "\"DestinationProvider must not be null\"", ")", ";", "return", "new", "WebServiceTemplateBuilder", "(", "this", ".", "detectHttpMessageSender", ",", "this", ".", "interceptors", ",", "this", ".", "internalCustomizers", ",", "this", ".", "customizers", ",", "this", ".", "messageSenders", ",", "this", ".", "marshaller", ",", "this", ".", "unmarshaller", ",", "destinationProvider", ",", "this", ".", "transformerFactoryClass", ",", "this", ".", "messageFactory", ")", ";", "}"], "docstring": "Set the {@link DestinationProvider} to use. Typically, either this property is set,\nor {@link #setDefaultUri(String)}, but not both.\n@param destinationProvider the destination provider to be used on operations that\ndo not have a URI parameter.\n@return a new builder instance.\n@see WebServiceTemplate#setDestinationProvider(DestinationProvider)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L457-L464", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.build", "original_string": "public <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass) {\n\t\tAssert.notNull(webServiceTemplateClass,\n\t\t\t\t\"WebServiceTemplateClass must not be null\");\n\t\treturn configure(BeanUtils.instantiateClass(webServiceTemplateClass));\n\t}", "language": "java", "code": "public <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass) {\n\t\tAssert.notNull(webServiceTemplateClass,\n\t\t\t\t\"WebServiceTemplateClass must not be null\");\n\t\treturn configure(BeanUtils.instantiateClass(webServiceTemplateClass));\n\t}", "code_tokens": ["public", "<", "T", "extends", "WebServiceTemplate", ">", "T", "build", "(", "Class", "<", "T", ">", "webServiceTemplateClass", ")", "{", "Assert", ".", "notNull", "(", "webServiceTemplateClass", ",", "\"WebServiceTemplateClass must not be null\"", ")", ";", "return", "configure", "(", "BeanUtils", ".", "instantiateClass", "(", "webServiceTemplateClass", ")", ")", ";", "}"], "docstring": "Build a new {@link WebServiceTemplate} instance of the specified type and configure\nit using this builder.\n@param <T> the type of web service template\n@param webServiceTemplateClass the template type to create\n@return a configured {@link WebServiceTemplate} instance.\n@see WebServiceTemplateBuilder#build()\n@see #configure(WebServiceTemplate)", "docstring_tokens": ["Build", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L486-L490", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java", "func_name": "WebServiceTemplateBuilder.configure", "original_string": "public <T extends WebServiceTemplate> T configure(T webServiceTemplate) {\n\t\tAssert.notNull(webServiceTemplate, \"WebServiceTemplate must not be null\");\n\t\tconfigureMessageSenders(webServiceTemplate);\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tapplyCustomizers(webServiceTemplate, this.internalCustomizers);\n\t\tmap.from(this.marshaller).to(webServiceTemplate::setMarshaller);\n\t\tmap.from(this.unmarshaller).to(webServiceTemplate::setUnmarshaller);\n\t\tmap.from(this.destinationProvider).to(webServiceTemplate::setDestinationProvider);\n\t\tmap.from(this.transformerFactoryClass)\n\t\t\t\t.to(webServiceTemplate::setTransformerFactoryClass);\n\t\tmap.from(this.messageFactory).to(webServiceTemplate::setMessageFactory);\n\t\tif (!CollectionUtils.isEmpty(this.interceptors)) {\n\t\t\tSet<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors);\n\t\t\tif (webServiceTemplate.getInterceptors() != null) {\n\t\t\t\tmerged.addAll(Arrays.asList(webServiceTemplate.getInterceptors()));\n\t\t\t}\n\t\t\twebServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0]));\n\t\t}\n\t\tapplyCustomizers(webServiceTemplate, this.customizers);\n\t\treturn webServiceTemplate;\n\t}", "language": "java", "code": "public <T extends WebServiceTemplate> T configure(T webServiceTemplate) {\n\t\tAssert.notNull(webServiceTemplate, \"WebServiceTemplate must not be null\");\n\t\tconfigureMessageSenders(webServiceTemplate);\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tapplyCustomizers(webServiceTemplate, this.internalCustomizers);\n\t\tmap.from(this.marshaller).to(webServiceTemplate::setMarshaller);\n\t\tmap.from(this.unmarshaller).to(webServiceTemplate::setUnmarshaller);\n\t\tmap.from(this.destinationProvider).to(webServiceTemplate::setDestinationProvider);\n\t\tmap.from(this.transformerFactoryClass)\n\t\t\t\t.to(webServiceTemplate::setTransformerFactoryClass);\n\t\tmap.from(this.messageFactory).to(webServiceTemplate::setMessageFactory);\n\t\tif (!CollectionUtils.isEmpty(this.interceptors)) {\n\t\t\tSet<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors);\n\t\t\tif (webServiceTemplate.getInterceptors() != null) {\n\t\t\t\tmerged.addAll(Arrays.asList(webServiceTemplate.getInterceptors()));\n\t\t\t}\n\t\t\twebServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0]));\n\t\t}\n\t\tapplyCustomizers(webServiceTemplate, this.customizers);\n\t\treturn webServiceTemplate;\n\t}", "code_tokens": ["public", "<", "T", "extends", "WebServiceTemplate", ">", "T", "configure", "(", "T", "webServiceTemplate", ")", "{", "Assert", ".", "notNull", "(", "webServiceTemplate", ",", "\"WebServiceTemplate must not be null\"", ")", ";", "configureMessageSenders", "(", "webServiceTemplate", ")", ";", "PropertyMapper", "map", "=", "PropertyMapper", ".", "get", "(", ")", ".", "alwaysApplyingWhenNonNull", "(", ")", ";", "applyCustomizers", "(", "webServiceTemplate", ",", "this", ".", "internalCustomizers", ")", ";", "map", ".", "from", "(", "this", ".", "marshaller", ")", ".", "to", "(", "webServiceTemplate", "::", "setMarshaller", ")", ";", "map", ".", "from", "(", "this", ".", "unmarshaller", ")", ".", "to", "(", "webServiceTemplate", "::", "setUnmarshaller", ")", ";", "map", ".", "from", "(", "this", ".", "destinationProvider", ")", ".", "to", "(", "webServiceTemplate", "::", "setDestinationProvider", ")", ";", "map", ".", "from", "(", "this", ".", "transformerFactoryClass", ")", ".", "to", "(", "webServiceTemplate", "::", "setTransformerFactoryClass", ")", ";", "map", ".", "from", "(", "this", ".", "messageFactory", ")", ".", "to", "(", "webServiceTemplate", "::", "setMessageFactory", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "interceptors", ")", ")", "{", "Set", "<", "ClientInterceptor", ">", "merged", "=", "new", "LinkedHashSet", "<>", "(", "this", ".", "interceptors", ")", ";", "if", "(", "webServiceTemplate", ".", "getInterceptors", "(", ")", "!=", "null", ")", "{", "merged", ".", "addAll", "(", "Arrays", ".", "asList", "(", "webServiceTemplate", ".", "getInterceptors", "(", ")", ")", ")", ";", "}", "webServiceTemplate", ".", "setInterceptors", "(", "merged", ".", "toArray", "(", "new", "ClientInterceptor", "[", "0", "]", ")", ")", ";", "}", "applyCustomizers", "(", "webServiceTemplate", ",", "this", ".", "customizers", ")", ";", "return", "webServiceTemplate", ";", "}"], "docstring": "Configure the provided {@link WebServiceTemplate} instance using this builder.\n@param <T> the type of web service template\n@param webServiceTemplate the {@link WebServiceTemplate} to configure\n@return the web service template instance\n@see #build()\n@see #build(Class)", "docstring_tokens": ["Configure", "the", "provided", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/WebServiceTemplateBuilder.java#L500-L520", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java", "func_name": "AutoConfigurationPackages.get", "original_string": "public static List<String> get(BeanFactory beanFactory) {\n\t\ttry {\n\t\t\treturn beanFactory.getBean(BEAN, BasePackages.class).get();\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Unable to retrieve @EnableAutoConfiguration base packages\");\n\t\t}\n\t}", "language": "java", "code": "public static List<String> get(BeanFactory beanFactory) {\n\t\ttry {\n\t\t\treturn beanFactory.getBean(BEAN, BasePackages.class).get();\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Unable to retrieve @EnableAutoConfiguration base packages\");\n\t\t}\n\t}", "code_tokens": ["public", "static", "List", "<", "String", ">", "get", "(", "BeanFactory", "beanFactory", ")", "{", "try", "{", "return", "beanFactory", ".", "getBean", "(", "BEAN", ",", "BasePackages", ".", "class", ")", ".", "get", "(", ")", ";", "}", "catch", "(", "NoSuchBeanDefinitionException", "ex", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Unable to retrieve @EnableAutoConfiguration base packages\"", ")", ";", "}", "}"], "docstring": "Return the auto-configuration base packages for the given bean factory.\n@param beanFactory the source bean factory\n@return a list of auto-configuration packages\n@throws IllegalStateException if auto-configuration is not enabled", "docstring_tokens": ["Return", "the", "auto", "-", "configuration", "base", "packages", "for", "the", "given", "bean", "factory", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java#L71-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java", "func_name": "AutoConfigurationPackages.register", "original_string": "public static void register(BeanDefinitionRegistry registry, String... packageNames) {\n\t\tif (registry.containsBeanDefinition(BEAN)) {\n\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);\n\t\t\tConstructorArgumentValues constructorArguments = beanDefinition\n\t\t\t\t\t.getConstructorArgumentValues();\n\t\t\tconstructorArguments.addIndexedArgumentValue(0,\n\t\t\t\t\taddBasePackages(constructorArguments, packageNames));\n\t\t}\n\t\telse {\n\t\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\t\tbeanDefinition.setBeanClass(BasePackages.class);\n\t\t\tbeanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,\n\t\t\t\t\tpackageNames);\n\t\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tregistry.registerBeanDefinition(BEAN, beanDefinition);\n\t\t}\n\t}", "language": "java", "code": "public static void register(BeanDefinitionRegistry registry, String... packageNames) {\n\t\tif (registry.containsBeanDefinition(BEAN)) {\n\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);\n\t\t\tConstructorArgumentValues constructorArguments = beanDefinition\n\t\t\t\t\t.getConstructorArgumentValues();\n\t\t\tconstructorArguments.addIndexedArgumentValue(0,\n\t\t\t\t\taddBasePackages(constructorArguments, packageNames));\n\t\t}\n\t\telse {\n\t\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\t\tbeanDefinition.setBeanClass(BasePackages.class);\n\t\t\tbeanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,\n\t\t\t\t\tpackageNames);\n\t\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tregistry.registerBeanDefinition(BEAN, beanDefinition);\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "register", "(", "BeanDefinitionRegistry", "registry", ",", "String", "...", "packageNames", ")", "{", "if", "(", "registry", ".", "containsBeanDefinition", "(", "BEAN", ")", ")", "{", "BeanDefinition", "beanDefinition", "=", "registry", ".", "getBeanDefinition", "(", "BEAN", ")", ";", "ConstructorArgumentValues", "constructorArguments", "=", "beanDefinition", ".", "getConstructorArgumentValues", "(", ")", ";", "constructorArguments", ".", "addIndexedArgumentValue", "(", "0", ",", "addBasePackages", "(", "constructorArguments", ",", "packageNames", ")", ")", ";", "}", "else", "{", "GenericBeanDefinition", "beanDefinition", "=", "new", "GenericBeanDefinition", "(", ")", ";", "beanDefinition", ".", "setBeanClass", "(", "BasePackages", ".", "class", ")", ";", "beanDefinition", ".", "getConstructorArgumentValues", "(", ")", ".", "addIndexedArgumentValue", "(", "0", ",", "packageNames", ")", ";", "beanDefinition", ".", "setRole", "(", "BeanDefinition", ".", "ROLE_INFRASTRUCTURE", ")", ";", "registry", ".", "registerBeanDefinition", "(", "BEAN", ",", "beanDefinition", ")", ";", "}", "}"], "docstring": "Programmatically registers the auto-configuration package names. Subsequent\ninvocations will add the given package names to those that have already been\nregistered. You can use this method to manually define the base packages that will\nbe used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that\nyou don't call this method directly, but instead rely on the default convention\nwhere the package name is set from your {@code @EnableAutoConfiguration}\nconfiguration class or classes.\n@param registry the bean definition registry\n@param packageNames the package names to set", "docstring_tokens": ["Programmatically", "registers", "the", "auto", "-", "configuration", "package", "names", ".", "Subsequent", "invocations", "will", "add", "the", "given", "package", "names", "to", "those", "that", "have", "already", "been", "registered", ".", "You", "can", "use", "this", "method", "to", "manually", "define", "the", "base", "packages", "that", "will", "be", "used", "for", "a", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java#L92-L108", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java", "func_name": "UndertowReactiveWebServerFactory.setDeploymentInfoCustomizers", "original_string": "public void setDeploymentInfoCustomizers(\n\t\t\tCollection<? extends UndertowDeploymentInfoCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.deploymentInfoCustomizers = new ArrayList<>(customizers);\n\t}", "language": "java", "code": "public void setDeploymentInfoCustomizers(\n\t\t\tCollection<? extends UndertowDeploymentInfoCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.deploymentInfoCustomizers = new ArrayList<>(customizers);\n\t}", "code_tokens": ["public", "void", "setDeploymentInfoCustomizers", "(", "Collection", "<", "?", "extends", "UndertowDeploymentInfoCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "this", ".", "deploymentInfoCustomizers", "=", "new", "ArrayList", "<>", "(", "customizers", ")", ";", "}"], "docstring": "Set {@link UndertowDeploymentInfoCustomizer}s that should be applied to the\nUndertow {@link DeploymentInfo}. Calling this method will replace any existing\ncustomizers.\n@param customizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java#L211-L215", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java", "func_name": "UndertowReactiveWebServerFactory.setBuilderCustomizers", "original_string": "public void setBuilderCustomizers(\n\t\t\tCollection<? extends UndertowBuilderCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.builderCustomizers = new ArrayList<>(customizers);\n\t}", "language": "java", "code": "public void setBuilderCustomizers(\n\t\t\tCollection<? extends UndertowBuilderCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.builderCustomizers = new ArrayList<>(customizers);\n\t}", "code_tokens": ["public", "void", "setBuilderCustomizers", "(", "Collection", "<", "?", "extends", "UndertowBuilderCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "this", ".", "builderCustomizers", "=", "new", "ArrayList", "<>", "(", "customizers", ")", ";", "}"], "docstring": "Set {@link UndertowBuilderCustomizer}s that should be applied to the Undertow\n{@link io.undertow.Undertow.Builder Builder}. Calling this method will replace any\nexisting customizers.\n@param customizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java#L302-L306", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java", "func_name": "UndertowReactiveWebServerFactory.addBuilderCustomizers", "original_string": "@Override\n\tpublic void addBuilderCustomizers(UndertowBuilderCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.builderCustomizers.addAll(Arrays.asList(customizers));\n\t}", "language": "java", "code": "@Override\n\tpublic void addBuilderCustomizers(UndertowBuilderCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\tthis.builderCustomizers.addAll(Arrays.asList(customizers));\n\t}", "code_tokens": ["@", "Override", "public", "void", "addBuilderCustomizers", "(", "UndertowBuilderCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "this", ".", "builderCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Add {@link UndertowBuilderCustomizer}s that should be used to customize the\nUndertow {@link io.undertow.Undertow.Builder Builder}.\n@param customizers the customizers to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowReactiveWebServerFactory.java#L322-L326", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java", "func_name": "LaunchedURLClassLoader.definePackageIfNecessary", "original_string": "private void definePackageIfNecessary(String className) {\n\t\tint lastDot = className.lastIndexOf('.');\n\t\tif (lastDot >= 0) {\n\t\t\tString packageName = className.substring(0, lastDot);\n\t\t\tif (getPackage(packageName) == null) {\n\t\t\t\ttry {\n\t\t\t\t\tdefinePackage(className, packageName);\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\t\t// Tolerate race condition due to being parallel capable\n\t\t\t\t\tif (getPackage(packageName) == null) {\n\t\t\t\t\t\t// This should never happen as the IllegalArgumentException\n\t\t\t\t\t\t// indicates that the package has already been defined and,\n\t\t\t\t\t\t// therefore, getPackage(name) should not have returned null.\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Package \" + packageName + \" has already been defined \"\n\t\t\t\t\t\t\t\t\t\t+ \"but it could not be found\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void definePackageIfNecessary(String className) {\n\t\tint lastDot = className.lastIndexOf('.');\n\t\tif (lastDot >= 0) {\n\t\t\tString packageName = className.substring(0, lastDot);\n\t\t\tif (getPackage(packageName) == null) {\n\t\t\t\ttry {\n\t\t\t\t\tdefinePackage(className, packageName);\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\t\t// Tolerate race condition due to being parallel capable\n\t\t\t\t\tif (getPackage(packageName) == null) {\n\t\t\t\t\t\t// This should never happen as the IllegalArgumentException\n\t\t\t\t\t\t// indicates that the package has already been defined and,\n\t\t\t\t\t\t// therefore, getPackage(name) should not have returned null.\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Package \" + packageName + \" has already been defined \"\n\t\t\t\t\t\t\t\t\t\t+ \"but it could not be found\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "definePackageIfNecessary", "(", "String", "className", ")", "{", "int", "lastDot", "=", "className", ".", "lastIndexOf", "(", "'", "'", ")", ";", "if", "(", "lastDot", ">=", "0", ")", "{", "String", "packageName", "=", "className", ".", "substring", "(", "0", ",", "lastDot", ")", ";", "if", "(", "getPackage", "(", "packageName", ")", "==", "null", ")", "{", "try", "{", "definePackage", "(", "className", ",", "packageName", ")", ";", "}", "catch", "(", "IllegalArgumentException", "ex", ")", "{", "// Tolerate race condition due to being parallel capable", "if", "(", "getPackage", "(", "packageName", ")", "==", "null", ")", "{", "// This should never happen as the IllegalArgumentException", "// indicates that the package has already been defined and,", "// therefore, getPackage(name) should not have returned null.", "throw", "new", "AssertionError", "(", "\"Package \"", "+", "packageName", "+", "\" has already been defined \"", "+", "\"but it could not be found\"", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Define a package before a {@code findClass} call is made. This is necessary to\nensure that the appropriate manifest for nested JARs is associated with the\npackage.\n@param className the class name being found", "docstring_tokens": ["Define", "a", "package", "before", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java#L106-L127", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java", "func_name": "LaunchedURLClassLoader.clearCache", "original_string": "public void clearCache() {\n\t\tfor (URL url : getURLs()) {\n\t\t\ttry {\n\t\t\t\tURLConnection connection = url.openConnection();\n\t\t\t\tif (connection instanceof JarURLConnection) {\n\t\t\t\t\tclearCache(connection);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t}", "language": "java", "code": "public void clearCache() {\n\t\tfor (URL url : getURLs()) {\n\t\t\ttry {\n\t\t\t\tURLConnection connection = url.openConnection();\n\t\t\t\tif (connection instanceof JarURLConnection) {\n\t\t\t\t\tclearCache(connection);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t}", "code_tokens": ["public", "void", "clearCache", "(", ")", "{", "for", "(", "URL", "url", ":", "getURLs", "(", ")", ")", "{", "try", "{", "URLConnection", "connection", "=", "url", ".", "openConnection", "(", ")", ";", "if", "(", "connection", "instanceof", "JarURLConnection", ")", "{", "clearCache", "(", "connection", ")", ";", "}", "}", "catch", "(", "IOException", "ex", ")", "{", "// Ignore", "}", "}", "}"], "docstring": "Clear URL caches.", "docstring_tokens": ["Clear", "URL", "caches", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java#L163-L176", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/client/TunnelClient.java", "func_name": "TunnelClient.start", "original_string": "public int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(this.serverThread == null, \"Server already started\");\n\t\t\tServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\t\t\tserverSocketChannel.socket().bind(new InetSocketAddress(this.listenPort));\n\t\t\tint port = serverSocketChannel.socket().getLocalPort();\n\t\t\tlogger.trace(\"Listening for TCP traffic to tunnel on port \" + port);\n\t\t\tthis.serverThread = new ServerThread(serverSocketChannel);\n\t\t\tthis.serverThread.start();\n\t\t\treturn port;\n\t\t}\n\t}", "language": "java", "code": "public int start() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tAssert.state(this.serverThread == null, \"Server already started\");\n\t\t\tServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\t\t\tserverSocketChannel.socket().bind(new InetSocketAddress(this.listenPort));\n\t\t\tint port = serverSocketChannel.socket().getLocalPort();\n\t\t\tlogger.trace(\"Listening for TCP traffic to tunnel on port \" + port);\n\t\t\tthis.serverThread = new ServerThread(serverSocketChannel);\n\t\t\tthis.serverThread.start();\n\t\t\treturn port;\n\t\t}\n\t}", "code_tokens": ["public", "int", "start", "(", ")", "throws", "IOException", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "Assert", ".", "state", "(", "this", ".", "serverThread", "==", "null", ",", "\"Server already started\"", ")", ";", "ServerSocketChannel", "serverSocketChannel", "=", "ServerSocketChannel", ".", "open", "(", ")", ";", "serverSocketChannel", ".", "socket", "(", ")", ".", "bind", "(", "new", "InetSocketAddress", "(", "this", ".", "listenPort", ")", ")", ";", "int", "port", "=", "serverSocketChannel", ".", "socket", "(", ")", ".", "getLocalPort", "(", ")", ";", "logger", ".", "trace", "(", "\"Listening for TCP traffic to tunnel on port \"", "+", "port", ")", ";", "this", ".", "serverThread", "=", "new", "ServerThread", "(", "serverSocketChannel", ")", ";", "this", ".", "serverThread", ".", "start", "(", ")", ";", "return", "port", ";", "}", "}"], "docstring": "Start the client and accept incoming connections.\n@return the port on which the client is listening\n@throws IOException in case of I/O errors", "docstring_tokens": ["Start", "the", "client", "and", "accept", "incoming", "connections", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/client/TunnelClient.java#L85-L96", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/client/TunnelClient.java", "func_name": "TunnelClient.stop", "original_string": "public void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.serverThread != null) {\n\t\t\t\tthis.serverThread.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.serverThread.join(2000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverThread = null;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void stop() throws IOException {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (this.serverThread != null) {\n\t\t\t\tthis.serverThread.close();\n\t\t\t\ttry {\n\t\t\t\t\tthis.serverThread.join(2000);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t\tthis.serverThread = null;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "stop", "(", ")", "throws", "IOException", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "if", "(", "this", ".", "serverThread", "!=", "null", ")", "{", "this", ".", "serverThread", ".", "close", "(", ")", ";", "try", "{", "this", ".", "serverThread", ".", "join", "(", "2000", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "}", "this", ".", "serverThread", "=", "null", ";", "}", "}", "}"], "docstring": "Stop the client, disconnecting any servers.\n@throws IOException in case of I/O errors", "docstring_tokens": ["Stop", "the", "client", "disconnecting", "any", "servers", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/client/TunnelClient.java#L102-L115", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/AbstractConfigurableWebServerFactory.java", "func_name": "AbstractConfigurableWebServerFactory.createTempDir", "original_string": "protected final File createTempDir(String prefix) {\n\t\ttry {\n\t\t\tFile tempDir = File.createTempFile(prefix + \".\", \".\" + getPort());\n\t\t\ttempDir.delete();\n\t\t\ttempDir.mkdir();\n\t\t\ttempDir.deleteOnExit();\n\t\t\treturn tempDir;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new WebServerException(\n\t\t\t\t\t\"Unable to create tempDir. java.io.tmpdir is set to \"\n\t\t\t\t\t\t\t+ System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\t\tex);\n\t\t}\n\t}", "language": "java", "code": "protected final File createTempDir(String prefix) {\n\t\ttry {\n\t\t\tFile tempDir = File.createTempFile(prefix + \".\", \".\" + getPort());\n\t\t\ttempDir.delete();\n\t\t\ttempDir.mkdir();\n\t\t\ttempDir.deleteOnExit();\n\t\t\treturn tempDir;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new WebServerException(\n\t\t\t\t\t\"Unable to create tempDir. java.io.tmpdir is set to \"\n\t\t\t\t\t\t\t+ System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\t\tex);\n\t\t}\n\t}", "code_tokens": ["protected", "final", "File", "createTempDir", "(", "String", "prefix", ")", "{", "try", "{", "File", "tempDir", "=", "File", ".", "createTempFile", "(", "prefix", "+", "\".\"", ",", "\".\"", "+", "getPort", "(", ")", ")", ";", "tempDir", ".", "delete", "(", ")", ";", "tempDir", ".", "mkdir", "(", ")", ";", "tempDir", ".", "deleteOnExit", "(", ")", ";", "return", "tempDir", ";", "}", "catch", "(", "IOException", "ex", ")", "{", "throw", "new", "WebServerException", "(", "\"Unable to create tempDir. java.io.tmpdir is set to \"", "+", "System", ".", "getProperty", "(", "\"java.io.tmpdir\"", ")", ",", "ex", ")", ";", "}", "}"], "docstring": "Return the absolute temp dir for given web server.\n@param prefix server name\n@return the temp dir for given server.", "docstring_tokens": ["Return", "the", "absolute", "temp", "dir", "for", "given", "web", "server", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/AbstractConfigurableWebServerFactory.java#L171-L185", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java", "func_name": "JarWriter.writeManifest", "original_string": "public void writeManifest(Manifest manifest) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(\"META-INF/MANIFEST.MF\");\n\t\twriteEntry(entry, manifest::write);\n\t}", "language": "java", "code": "public void writeManifest(Manifest manifest) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(\"META-INF/MANIFEST.MF\");\n\t\twriteEntry(entry, manifest::write);\n\t}", "code_tokens": ["public", "void", "writeManifest", "(", "Manifest", "manifest", ")", "throws", "IOException", "{", "JarArchiveEntry", "entry", "=", "new", "JarArchiveEntry", "(", "\"META-INF/MANIFEST.MF\"", ")", ";", "writeEntry", "(", "entry", ",", "manifest", "::", "write", ")", ";", "}"], "docstring": "Write the specified manifest.\n@param manifest the manifest to write\n@throws IOException of the manifest cannot be written", "docstring_tokens": ["Write", "the", "specified", "manifest", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java#L114-L117", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java", "func_name": "JarWriter.writeEntry", "original_string": "@Override\n\tpublic void writeEntry(String entryName, InputStream inputStream) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(entryName);\n\t\twriteEntry(entry, new InputStreamEntryWriter(inputStream, true));\n\t}", "language": "java", "code": "@Override\n\tpublic void writeEntry(String entryName, InputStream inputStream) throws IOException {\n\t\tJarArchiveEntry entry = new JarArchiveEntry(entryName);\n\t\twriteEntry(entry, new InputStreamEntryWriter(inputStream, true));\n\t}", "code_tokens": ["@", "Override", "public", "void", "writeEntry", "(", "String", "entryName", ",", "InputStream", "inputStream", ")", "throws", "IOException", "{", "JarArchiveEntry", "entry", "=", "new", "JarArchiveEntry", "(", "entryName", ")", ";", "writeEntry", "(", "entry", ",", "new", "InputStreamEntryWriter", "(", "inputStream", ",", "true", ")", ")", ";", "}"], "docstring": "Writes an entry. The {@code inputStream} is closed once the entry has been written\n@param entryName the name of the entry\n@param inputStream the stream from which the entry's data can be read\n@throws IOException if the write fails", "docstring_tokens": ["Writes", "an", "entry", ".", "The", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java#L167-L171", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java", "func_name": "JarWriter.writeNestedLibrary", "original_string": "public void writeNestedLibrary(String destination, Library library)\n\t\t\tthrows IOException {\n\t\tFile file = library.getFile();\n\t\tJarArchiveEntry entry = new JarArchiveEntry(destination + library.getName());\n\t\tentry.setTime(getNestedLibraryTime(file));\n\t\tnew CrcAndSize(file).setupStoredEntry(entry);\n\t\twriteEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),\n\t\t\t\tnew LibraryUnpackHandler(library));\n\t}", "language": "java", "code": "public void writeNestedLibrary(String destination, Library library)\n\t\t\tthrows IOException {\n\t\tFile file = library.getFile();\n\t\tJarArchiveEntry entry = new JarArchiveEntry(destination + library.getName());\n\t\tentry.setTime(getNestedLibraryTime(file));\n\t\tnew CrcAndSize(file).setupStoredEntry(entry);\n\t\twriteEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),\n\t\t\t\tnew LibraryUnpackHandler(library));\n\t}", "code_tokens": ["public", "void", "writeNestedLibrary", "(", "String", "destination", ",", "Library", "library", ")", "throws", "IOException", "{", "File", "file", "=", "library", ".", "getFile", "(", ")", ";", "JarArchiveEntry", "entry", "=", "new", "JarArchiveEntry", "(", "destination", "+", "library", ".", "getName", "(", ")", ")", ";", "entry", ".", "setTime", "(", "getNestedLibraryTime", "(", "file", ")", ")", ";", "new", "CrcAndSize", "(", "file", ")", ".", "setupStoredEntry", "(", "entry", ")", ";", "writeEntry", "(", "entry", ",", "new", "InputStreamEntryWriter", "(", "new", "FileInputStream", "(", "file", ")", ",", "true", ")", ",", "new", "LibraryUnpackHandler", "(", "library", ")", ")", ";", "}"], "docstring": "Write a nested library.\n@param destination the destination of the library\n@param library the library\n@throws IOException if the write fails", "docstring_tokens": ["Write", "a", "nested", "library", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java#L179-L187", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java", "func_name": "JarWriter.writeLoaderClasses", "original_string": "@Override\n\tpublic void writeLoaderClasses(String loaderJarResourceName) throws IOException {\n\t\tURL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName);\n\t\ttry (JarInputStream inputStream = new JarInputStream(\n\t\t\t\tnew BufferedInputStream(loaderJar.openStream()))) {\n\t\t\tJarEntry entry;\n\t\t\twhile ((entry = inputStream.getNextJarEntry()) != null) {\n\t\t\t\tif (entry.getName().endsWith(\".class\")) {\n\t\t\t\t\twriteEntry(new JarArchiveEntry(entry),\n\t\t\t\t\t\t\tnew InputStreamEntryWriter(inputStream, false));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "@Override\n\tpublic void writeLoaderClasses(String loaderJarResourceName) throws IOException {\n\t\tURL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName);\n\t\ttry (JarInputStream inputStream = new JarInputStream(\n\t\t\t\tnew BufferedInputStream(loaderJar.openStream()))) {\n\t\t\tJarEntry entry;\n\t\t\twhile ((entry = inputStream.getNextJarEntry()) != null) {\n\t\t\t\tif (entry.getName().endsWith(\".class\")) {\n\t\t\t\t\twriteEntry(new JarArchiveEntry(entry),\n\t\t\t\t\t\t\tnew InputStreamEntryWriter(inputStream, false));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["@", "Override", "public", "void", "writeLoaderClasses", "(", "String", "loaderJarResourceName", ")", "throws", "IOException", "{", "URL", "loaderJar", "=", "getClass", "(", ")", ".", "getClassLoader", "(", ")", ".", "getResource", "(", "loaderJarResourceName", ")", ";", "try", "(", "JarInputStream", "inputStream", "=", "new", "JarInputStream", "(", "new", "BufferedInputStream", "(", "loaderJar", ".", "openStream", "(", ")", ")", ")", ")", "{", "JarEntry", "entry", ";", "while", "(", "(", "entry", "=", "inputStream", ".", "getNextJarEntry", "(", ")", ")", "!=", "null", ")", "{", "if", "(", "entry", ".", "getName", "(", ")", ".", "endsWith", "(", "\".class\"", ")", ")", "{", "writeEntry", "(", "new", "JarArchiveEntry", "(", "entry", ")", ",", "new", "InputStreamEntryWriter", "(", "inputStream", ",", "false", ")", ")", ";", "}", "}", "}", "}"], "docstring": "Write the required spring-boot-loader classes to the JAR.\n@param loaderJarResourceName the name of the resource containing the loader classes\nto be written\n@throws IOException if the classes cannot be written", "docstring_tokens": ["Write", "the", "required", "spring", "-", "boot", "-", "loader", "classes", "to", "the", "JAR", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java#L222-L235", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java", "func_name": "JarWriter.writeEntry", "original_string": "private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,\n\t\t\tUnpackHandler unpackHandler) throws IOException {\n\t\tString parent = entry.getName();\n\t\tif (parent.endsWith(\"/\")) {\n\t\t\tparent = parent.substring(0, parent.length() - 1);\n\t\t\tentry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);\n\t\t}\n\t\telse {\n\t\t\tentry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);\n\t\t}\n\t\tif (parent.lastIndexOf('/') != -1) {\n\t\t\tparent = parent.substring(0, parent.lastIndexOf('/') + 1);\n\t\t\tif (!parent.isEmpty()) {\n\t\t\t\twriteEntry(new JarArchiveEntry(parent), null, unpackHandler);\n\t\t\t}\n\t\t}\n\n\t\tif (this.writtenEntries.add(entry.getName())) {\n\t\t\tentryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler);\n\t\t\tthis.jarOutput.putArchiveEntry(entry);\n\t\t\tif (entryWriter != null) {\n\t\t\t\tentryWriter.write(this.jarOutput);\n\t\t\t}\n\t\t\tthis.jarOutput.closeArchiveEntry();\n\t\t}\n\t}", "language": "java", "code": "private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,\n\t\t\tUnpackHandler unpackHandler) throws IOException {\n\t\tString parent = entry.getName();\n\t\tif (parent.endsWith(\"/\")) {\n\t\t\tparent = parent.substring(0, parent.length() - 1);\n\t\t\tentry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);\n\t\t}\n\t\telse {\n\t\t\tentry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);\n\t\t}\n\t\tif (parent.lastIndexOf('/') != -1) {\n\t\t\tparent = parent.substring(0, parent.lastIndexOf('/') + 1);\n\t\t\tif (!parent.isEmpty()) {\n\t\t\t\twriteEntry(new JarArchiveEntry(parent), null, unpackHandler);\n\t\t\t}\n\t\t}\n\n\t\tif (this.writtenEntries.add(entry.getName())) {\n\t\t\tentryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler);\n\t\t\tthis.jarOutput.putArchiveEntry(entry);\n\t\t\tif (entryWriter != null) {\n\t\t\t\tentryWriter.write(this.jarOutput);\n\t\t\t}\n\t\t\tthis.jarOutput.closeArchiveEntry();\n\t\t}\n\t}", "code_tokens": ["private", "void", "writeEntry", "(", "JarArchiveEntry", "entry", ",", "EntryWriter", "entryWriter", ",", "UnpackHandler", "unpackHandler", ")", "throws", "IOException", "{", "String", "parent", "=", "entry", ".", "getName", "(", ")", ";", "if", "(", "parent", ".", "endsWith", "(", "\"/\"", ")", ")", "{", "parent", "=", "parent", ".", "substring", "(", "0", ",", "parent", ".", "length", "(", ")", "-", "1", ")", ";", "entry", ".", "setUnixMode", "(", "UnixStat", ".", "DIR_FLAG", "|", "UnixStat", ".", "DEFAULT_DIR_PERM", ")", ";", "}", "else", "{", "entry", ".", "setUnixMode", "(", "UnixStat", ".", "FILE_FLAG", "|", "UnixStat", ".", "DEFAULT_FILE_PERM", ")", ";", "}", "if", "(", "parent", ".", "lastIndexOf", "(", "'", "'", ")", "!=", "-", "1", ")", "{", "parent", "=", "parent", ".", "substring", "(", "0", ",", "parent", ".", "lastIndexOf", "(", "'", "'", ")", "+", "1", ")", ";", "if", "(", "!", "parent", ".", "isEmpty", "(", ")", ")", "{", "writeEntry", "(", "new", "JarArchiveEntry", "(", "parent", ")", ",", "null", ",", "unpackHandler", ")", ";", "}", "}", "if", "(", "this", ".", "writtenEntries", ".", "add", "(", "entry", ".", "getName", "(", ")", ")", ")", "{", "entryWriter", "=", "addUnpackCommentIfNecessary", "(", "entry", ",", "entryWriter", ",", "unpackHandler", ")", ";", "this", ".", "jarOutput", ".", "putArchiveEntry", "(", "entry", ")", ";", "if", "(", "entryWriter", "!=", "null", ")", "{", "entryWriter", ".", "write", "(", "this", ".", "jarOutput", ")", ";", "}", "this", ".", "jarOutput", ".", "closeArchiveEntry", "(", ")", ";", "}", "}"], "docstring": "Perform the actual write of a {@link JarEntry}. All other write methods delegate to\nthis one.\n@param entry the entry to write\n@param entryWriter the entry writer or {@code null} if there is no content\n@param unpackHandler handles possible unpacking for the entry\n@throws IOException in case of I/O errors", "docstring_tokens": ["Perform", "the", "actual", "write", "of", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java#L259-L284", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.open", "original_string": "JSONStringer open(Scope empty, String openBracket) throws JSONException {\n\t\tif (this.stack.isEmpty() && this.out.length() > 0) {\n\t\t\tthrow new JSONException(\"Nesting problem: multiple top-level roots\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.stack.add(empty);\n\t\tthis.out.append(openBracket);\n\t\treturn this;\n\t}", "language": "java", "code": "JSONStringer open(Scope empty, String openBracket) throws JSONException {\n\t\tif (this.stack.isEmpty() && this.out.length() > 0) {\n\t\t\tthrow new JSONException(\"Nesting problem: multiple top-level roots\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.stack.add(empty);\n\t\tthis.out.append(openBracket);\n\t\treturn this;\n\t}", "code_tokens": ["JSONStringer", "open", "(", "Scope", "empty", ",", "String", "openBracket", ")", "throws", "JSONException", "{", "if", "(", "this", ".", "stack", ".", "isEmpty", "(", ")", "&&", "this", ".", "out", ".", "length", "(", ")", ">", "0", ")", "{", "throw", "new", "JSONException", "(", "\"Nesting problem: multiple top-level roots\"", ")", ";", "}", "beforeValue", "(", ")", ";", "this", ".", "stack", ".", "add", "(", "empty", ")", ";", "this", ".", "out", ".", "append", "(", "openBracket", ")", ";", "return", "this", ";", "}"], "docstring": "Enters a new scope by appending any necessary whitespace and the given bracket.\n@param empty any necessary whitespace\n@param openBracket the open bracket\n@return this object\n@throws JSONException if processing of json failed", "docstring_tokens": ["Enters", "a", "new", "scope", "by", "appending", "any", "necessary", "whitespace", "and", "the", "given", "bracket", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L175-L183", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.close", "original_string": "JSONStringer close(Scope empty, Scope nonempty, String closeBracket)\n\t\t\tthrows JSONException {\n\t\tScope context = peek();\n\t\tif (context != nonempty && context != empty) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tthis.stack.remove(this.stack.size() - 1);\n\t\tif (context == nonempty) {\n\t\t\tnewline();\n\t\t}\n\t\tthis.out.append(closeBracket);\n\t\treturn this;\n\t}", "language": "java", "code": "JSONStringer close(Scope empty, Scope nonempty, String closeBracket)\n\t\t\tthrows JSONException {\n\t\tScope context = peek();\n\t\tif (context != nonempty && context != empty) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tthis.stack.remove(this.stack.size() - 1);\n\t\tif (context == nonempty) {\n\t\t\tnewline();\n\t\t}\n\t\tthis.out.append(closeBracket);\n\t\treturn this;\n\t}", "code_tokens": ["JSONStringer", "close", "(", "Scope", "empty", ",", "Scope", "nonempty", ",", "String", "closeBracket", ")", "throws", "JSONException", "{", "Scope", "context", "=", "peek", "(", ")", ";", "if", "(", "context", "!=", "nonempty", "&&", "context", "!=", "empty", ")", "{", "throw", "new", "JSONException", "(", "\"Nesting problem\"", ")", ";", "}", "this", ".", "stack", ".", "remove", "(", "this", ".", "stack", ".", "size", "(", ")", "-", "1", ")", ";", "if", "(", "context", "==", "nonempty", ")", "{", "newline", "(", ")", ";", "}", "this", ".", "out", ".", "append", "(", "closeBracket", ")", ";", "return", "this", ";", "}"], "docstring": "Closes the current scope by appending any necessary whitespace and the given\nbracket.\n@param empty any necessary whitespace\n@param nonempty the current scope\n@param closeBracket the close bracket\n@return the JSON stringer\n@throws JSONException if processing of json failed", "docstring_tokens": ["Closes", "the", "current", "scope", "by", "appending", "any", "necessary", "whitespace", "and", "the", "given", "bracket", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L194-L207", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.peek", "original_string": "private Scope peek() throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\treturn this.stack.get(this.stack.size() - 1);\n\t}", "language": "java", "code": "private Scope peek() throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\treturn this.stack.get(this.stack.size() - 1);\n\t}", "code_tokens": ["private", "Scope", "peek", "(", ")", "throws", "JSONException", "{", "if", "(", "this", ".", "stack", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "JSONException", "(", "\"Nesting problem\"", ")", ";", "}", "return", "this", ".", "stack", ".", "get", "(", "this", ".", "stack", ".", "size", "(", ")", "-", "1", ")", ";", "}"], "docstring": "Returns the value on the top of the stack.\n@return the scope\n@throws JSONException if processing of json failed", "docstring_tokens": ["Returns", "the", "value", "on", "the", "top", "of", "the", "stack", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L214-L219", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.value", "original_string": "public JSONStringer value(Object value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tif (value instanceof JSONArray) {\n\t\t\t((JSONArray) value).writeTo(this);\n\t\t\treturn this;\n\n\t\t}\n\t\telse if (value instanceof JSONObject) {\n\t\t\t((JSONObject) value).writeTo(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tbeforeValue();\n\n\t\tif (value == null || value instanceof Boolean || value == JSONObject.NULL) {\n\t\t\tthis.out.append(value);\n\n\t\t}\n\t\telse if (value instanceof Number) {\n\t\t\tthis.out.append(JSONObject.numberToString((Number) value));\n\n\t\t}\n\t\telse {\n\t\t\tstring(value.toString());\n\t\t}\n\n\t\treturn this;\n\t}", "language": "java", "code": "public JSONStringer value(Object value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\n\t\tif (value instanceof JSONArray) {\n\t\t\t((JSONArray) value).writeTo(this);\n\t\t\treturn this;\n\n\t\t}\n\t\telse if (value instanceof JSONObject) {\n\t\t\t((JSONObject) value).writeTo(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tbeforeValue();\n\n\t\tif (value == null || value instanceof Boolean || value == JSONObject.NULL) {\n\t\t\tthis.out.append(value);\n\n\t\t}\n\t\telse if (value instanceof Number) {\n\t\t\tthis.out.append(JSONObject.numberToString((Number) value));\n\n\t\t}\n\t\telse {\n\t\t\tstring(value.toString());\n\t\t}\n\n\t\treturn this;\n\t}", "code_tokens": ["public", "JSONStringer", "value", "(", "Object", "value", ")", "throws", "JSONException", "{", "if", "(", "this", ".", "stack", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "JSONException", "(", "\"Nesting problem\"", ")", ";", "}", "if", "(", "value", "instanceof", "JSONArray", ")", "{", "(", "(", "JSONArray", ")", "value", ")", ".", "writeTo", "(", "this", ")", ";", "return", "this", ";", "}", "else", "if", "(", "value", "instanceof", "JSONObject", ")", "{", "(", "(", "JSONObject", ")", "value", ")", ".", "writeTo", "(", "this", ")", ";", "return", "this", ";", "}", "beforeValue", "(", ")", ";", "if", "(", "value", "==", "null", "||", "value", "instanceof", "Boolean", "||", "value", "==", "JSONObject", ".", "NULL", ")", "{", "this", ".", "out", ".", "append", "(", "value", ")", ";", "}", "else", "if", "(", "value", "instanceof", "Number", ")", "{", "this", ".", "out", ".", "append", "(", "JSONObject", ".", "numberToString", "(", "(", "Number", ")", "value", ")", ")", ";", "}", "else", "{", "string", "(", "value", ".", "toString", "(", ")", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Encodes {@code value}.\n@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,\nLong, Double or null. May not be {@link Double#isNaN() NaNs} or\n{@link Double#isInfinite() infinities}.\n@return this stringer.\n@throws JSONException if processing of json failed", "docstring_tokens": ["Encodes", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L237-L267", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.value", "original_string": "public JSONStringer value(boolean value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.out.append(value);\n\t\treturn this;\n\t}", "language": "java", "code": "public JSONStringer value(boolean value) throws JSONException {\n\t\tif (this.stack.isEmpty()) {\n\t\t\tthrow new JSONException(\"Nesting problem\");\n\t\t}\n\t\tbeforeValue();\n\t\tthis.out.append(value);\n\t\treturn this;\n\t}", "code_tokens": ["public", "JSONStringer", "value", "(", "boolean", "value", ")", "throws", "JSONException", "{", "if", "(", "this", ".", "stack", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "JSONException", "(", "\"Nesting problem\"", ")", ";", "}", "beforeValue", "(", ")", ";", "this", ".", "out", ".", "append", "(", "value", ")", ";", "return", "this", ";", "}"], "docstring": "Encodes {@code value} to this stringer.\n@param value the value to encode\n@return this stringer.\n@throws JSONException if processing of json failed", "docstring_tokens": ["Encodes", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L275-L282", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java", "func_name": "JSONStringer.key", "original_string": "public JSONStringer key(String name) throws JSONException {\n\t\tif (name == null) {\n\t\t\tthrow new JSONException(\"Names must be non-null\");\n\t\t}\n\t\tbeforeKey();\n\t\tstring(name);\n\t\treturn this;\n\t}", "language": "java", "code": "public JSONStringer key(String name) throws JSONException {\n\t\tif (name == null) {\n\t\t\tthrow new JSONException(\"Names must be non-null\");\n\t\t}\n\t\tbeforeKey();\n\t\tstring(name);\n\t\treturn this;\n\t}", "code_tokens": ["public", "JSONStringer", "key", "(", "String", "name", ")", "throws", "JSONException", "{", "if", "(", "name", "==", "null", ")", "{", "throw", "new", "JSONException", "(", "\"Names must be non-null\"", ")", ";", "}", "beforeKey", "(", ")", ";", "string", "(", "name", ")", ";", "return", "this", ";", "}"], "docstring": "Encodes the key (property name) to this stringer.\n@param name the name of the forthcoming value. May not be null.\n@return this stringer.\n@throws JSONException if processing of json failed", "docstring_tokens": ["Encodes", "the", "key", "(", "property", "name", ")", "to", "this", "stringer", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONStringer.java#L383-L390", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseConfiguration.java", "func_name": "CouchbaseConfiguration.initializeEnvironmentBuilder", "original_string": "protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(\n\t\t\tCouchbaseProperties properties) {\n\t\tCouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();\n\t\tCouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();\n\t\tDefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment\n\t\t\t\t.builder();\n\t\tif (timeouts.getConnect() != null) {\n\t\t\tbuilder = builder.connectTimeout(timeouts.getConnect().toMillis());\n\t\t}\n\t\tbuilder = builder.keyValueServiceConfig(\n\t\t\t\tKeyValueServiceConfig.create(endpoints.getKeyValue()));\n\t\tif (timeouts.getKeyValue() != null) {\n\t\t\tbuilder = builder.kvTimeout(timeouts.getKeyValue().toMillis());\n\t\t}\n\t\tif (timeouts.getQuery() != null) {\n\t\t\tbuilder = builder.queryTimeout(timeouts.getQuery().toMillis());\n\t\t\tbuilder = builder.queryServiceConfig(getQueryServiceConfig(endpoints));\n\t\t\tbuilder = builder.viewServiceConfig(getViewServiceConfig(endpoints));\n\t\t}\n\t\tif (timeouts.getSocketConnect() != null) {\n\t\t\tbuilder = builder\n\t\t\t\t\t.socketConnectTimeout((int) timeouts.getSocketConnect().toMillis());\n\t\t}\n\t\tif (timeouts.getView() != null) {\n\t\t\tbuilder = builder.viewTimeout(timeouts.getView().toMillis());\n\t\t}\n\t\tCouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();\n\t\tif (ssl.getEnabled()) {\n\t\t\tbuilder = builder.sslEnabled(true);\n\t\t\tif (ssl.getKeyStore() != null) {\n\t\t\t\tbuilder = builder.sslKeystoreFile(ssl.getKeyStore());\n\t\t\t}\n\t\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\t\tbuilder = builder.sslKeystorePassword(ssl.getKeyStorePassword());\n\t\t\t}\n\t\t}\n\t\treturn builder;\n\t}", "language": "java", "code": "protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(\n\t\t\tCouchbaseProperties properties) {\n\t\tCouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();\n\t\tCouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();\n\t\tDefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment\n\t\t\t\t.builder();\n\t\tif (timeouts.getConnect() != null) {\n\t\t\tbuilder = builder.connectTimeout(timeouts.getConnect().toMillis());\n\t\t}\n\t\tbuilder = builder.keyValueServiceConfig(\n\t\t\t\tKeyValueServiceConfig.create(endpoints.getKeyValue()));\n\t\tif (timeouts.getKeyValue() != null) {\n\t\t\tbuilder = builder.kvTimeout(timeouts.getKeyValue().toMillis());\n\t\t}\n\t\tif (timeouts.getQuery() != null) {\n\t\t\tbuilder = builder.queryTimeout(timeouts.getQuery().toMillis());\n\t\t\tbuilder = builder.queryServiceConfig(getQueryServiceConfig(endpoints));\n\t\t\tbuilder = builder.viewServiceConfig(getViewServiceConfig(endpoints));\n\t\t}\n\t\tif (timeouts.getSocketConnect() != null) {\n\t\t\tbuilder = builder\n\t\t\t\t\t.socketConnectTimeout((int) timeouts.getSocketConnect().toMillis());\n\t\t}\n\t\tif (timeouts.getView() != null) {\n\t\t\tbuilder = builder.viewTimeout(timeouts.getView().toMillis());\n\t\t}\n\t\tCouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();\n\t\tif (ssl.getEnabled()) {\n\t\t\tbuilder = builder.sslEnabled(true);\n\t\t\tif (ssl.getKeyStore() != null) {\n\t\t\t\tbuilder = builder.sslKeystoreFile(ssl.getKeyStore());\n\t\t\t}\n\t\t\tif (ssl.getKeyStorePassword() != null) {\n\t\t\t\tbuilder = builder.sslKeystorePassword(ssl.getKeyStorePassword());\n\t\t\t}\n\t\t}\n\t\treturn builder;\n\t}", "code_tokens": ["protected", "DefaultCouchbaseEnvironment", ".", "Builder", "initializeEnvironmentBuilder", "(", "CouchbaseProperties", "properties", ")", "{", "CouchbaseProperties", ".", "Endpoints", "endpoints", "=", "properties", ".", "getEnv", "(", ")", ".", "getEndpoints", "(", ")", ";", "CouchbaseProperties", ".", "Timeouts", "timeouts", "=", "properties", ".", "getEnv", "(", ")", ".", "getTimeouts", "(", ")", ";", "DefaultCouchbaseEnvironment", ".", "Builder", "builder", "=", "DefaultCouchbaseEnvironment", ".", "builder", "(", ")", ";", "if", "(", "timeouts", ".", "getConnect", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "connectTimeout", "(", "timeouts", ".", "getConnect", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "builder", "=", "builder", ".", "keyValueServiceConfig", "(", "KeyValueServiceConfig", ".", "create", "(", "endpoints", ".", "getKeyValue", "(", ")", ")", ")", ";", "if", "(", "timeouts", ".", "getKeyValue", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "kvTimeout", "(", "timeouts", ".", "getKeyValue", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "if", "(", "timeouts", ".", "getQuery", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "queryTimeout", "(", "timeouts", ".", "getQuery", "(", ")", ".", "toMillis", "(", ")", ")", ";", "builder", "=", "builder", ".", "queryServiceConfig", "(", "getQueryServiceConfig", "(", "endpoints", ")", ")", ";", "builder", "=", "builder", ".", "viewServiceConfig", "(", "getViewServiceConfig", "(", "endpoints", ")", ")", ";", "}", "if", "(", "timeouts", ".", "getSocketConnect", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "socketConnectTimeout", "(", "(", "int", ")", "timeouts", ".", "getSocketConnect", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "if", "(", "timeouts", ".", "getView", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "viewTimeout", "(", "timeouts", ".", "getView", "(", ")", ".", "toMillis", "(", ")", ")", ";", "}", "CouchbaseProperties", ".", "Ssl", "ssl", "=", "properties", ".", "getEnv", "(", ")", ".", "getSsl", "(", ")", ";", "if", "(", "ssl", ".", "getEnabled", "(", ")", ")", "{", "builder", "=", "builder", ".", "sslEnabled", "(", "true", ")", ";", "if", "(", "ssl", ".", "getKeyStore", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "sslKeystoreFile", "(", "ssl", ".", "getKeyStore", "(", ")", ")", ";", "}", "if", "(", "ssl", ".", "getKeyStorePassword", "(", ")", "!=", "null", ")", "{", "builder", "=", "builder", ".", "sslKeystorePassword", "(", "ssl", ".", "getKeyStorePassword", "(", ")", ")", ";", "}", "}", "return", "builder", ";", "}"], "docstring": "Initialize an environment builder based on the specified settings.\n@param properties the couchbase properties to use\n@return the {@link DefaultCouchbaseEnvironment} builder.", "docstring_tokens": ["Initialize", "an", "environment", "builder", "based", "on", "the", "specified", "settings", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseConfiguration.java#L91-L128", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.findSingleMainClass", "original_string": "public static String findSingleMainClass(File rootFolder, String annotationName)\n\t\t\tthrows IOException {\n\t\tSingleMainClassCallback callback = new SingleMainClassCallback(annotationName);\n\t\tMainClassFinder.doWithMainClasses(rootFolder, callback);\n\t\treturn callback.getMainClassName();\n\t}", "language": "java", "code": "public static String findSingleMainClass(File rootFolder, String annotationName)\n\t\t\tthrows IOException {\n\t\tSingleMainClassCallback callback = new SingleMainClassCallback(annotationName);\n\t\tMainClassFinder.doWithMainClasses(rootFolder, callback);\n\t\treturn callback.getMainClassName();\n\t}", "code_tokens": ["public", "static", "String", "findSingleMainClass", "(", "File", "rootFolder", ",", "String", "annotationName", ")", "throws", "IOException", "{", "SingleMainClassCallback", "callback", "=", "new", "SingleMainClassCallback", "(", "annotationName", ")", ";", "MainClassFinder", ".", "doWithMainClasses", "(", "rootFolder", ",", "callback", ")", ";", "return", "callback", ".", "getMainClassName", "(", ")", ";", "}"], "docstring": "Find a single main class from the given {@code rootFolder}. A main class annotated\nwith an annotation with the given {@code annotationName} will be preferred over a\nmain class with no such annotation.\n@param rootFolder the root folder to search\n@param annotationName the name of the annotation that may be present on the main\nclass\n@return the main class or {@code null}\n@throws IOException if the folder cannot be read", "docstring_tokens": ["Find", "a", "single", "main", "class", "from", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L107-L112", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.doWithMainClasses", "original_string": "static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)\n\t\t\tthrows IOException {\n\t\tif (!rootFolder.exists()) {\n\t\t\treturn null; // nothing to do\n\t\t}\n\t\tif (!rootFolder.isDirectory()) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Invalid root folder '\" + rootFolder + \"'\");\n\t\t}\n\t\tString prefix = rootFolder.getAbsolutePath() + \"/\";\n\t\tDeque<File> stack = new ArrayDeque<>();\n\t\tstack.push(rootFolder);\n\t\twhile (!stack.isEmpty()) {\n\t\t\tFile file = stack.pop();\n\t\t\tif (file.isFile()) {\n\t\t\t\ttry (InputStream inputStream = new FileInputStream(file)) {\n\t\t\t\t\tClassDescriptor classDescriptor = createClassDescriptor(inputStream);\n\t\t\t\t\tif (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n\t\t\t\t\t\tString className = convertToClassName(file.getAbsolutePath(),\n\t\t\t\t\t\t\t\tprefix);\n\t\t\t\t\t\tT result = callback.doWith(new MainClass(className,\n\t\t\t\t\t\t\t\tclassDescriptor.getAnnotationNames()));\n\t\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (file.isDirectory()) {\n\t\t\t\tpushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER));\n\t\t\t\tpushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER));\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)\n\t\t\tthrows IOException {\n\t\tif (!rootFolder.exists()) {\n\t\t\treturn null; // nothing to do\n\t\t}\n\t\tif (!rootFolder.isDirectory()) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Invalid root folder '\" + rootFolder + \"'\");\n\t\t}\n\t\tString prefix = rootFolder.getAbsolutePath() + \"/\";\n\t\tDeque<File> stack = new ArrayDeque<>();\n\t\tstack.push(rootFolder);\n\t\twhile (!stack.isEmpty()) {\n\t\t\tFile file = stack.pop();\n\t\t\tif (file.isFile()) {\n\t\t\t\ttry (InputStream inputStream = new FileInputStream(file)) {\n\t\t\t\t\tClassDescriptor classDescriptor = createClassDescriptor(inputStream);\n\t\t\t\t\tif (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n\t\t\t\t\t\tString className = convertToClassName(file.getAbsolutePath(),\n\t\t\t\t\t\t\t\tprefix);\n\t\t\t\t\t\tT result = callback.doWith(new MainClass(className,\n\t\t\t\t\t\t\t\tclassDescriptor.getAnnotationNames()));\n\t\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (file.isDirectory()) {\n\t\t\t\tpushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER));\n\t\t\t\tpushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER));\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["static", "<", "T", ">", "T", "doWithMainClasses", "(", "File", "rootFolder", ",", "MainClassCallback", "<", "T", ">", "callback", ")", "throws", "IOException", "{", "if", "(", "!", "rootFolder", ".", "exists", "(", ")", ")", "{", "return", "null", ";", "// nothing to do", "}", "if", "(", "!", "rootFolder", ".", "isDirectory", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Invalid root folder '\"", "+", "rootFolder", "+", "\"'\"", ")", ";", "}", "String", "prefix", "=", "rootFolder", ".", "getAbsolutePath", "(", ")", "+", "\"/\"", ";", "Deque", "<", "File", ">", "stack", "=", "new", "ArrayDeque", "<>", "(", ")", ";", "stack", ".", "push", "(", "rootFolder", ")", ";", "while", "(", "!", "stack", ".", "isEmpty", "(", ")", ")", "{", "File", "file", "=", "stack", ".", "pop", "(", ")", ";", "if", "(", "file", ".", "isFile", "(", ")", ")", "{", "try", "(", "InputStream", "inputStream", "=", "new", "FileInputStream", "(", "file", ")", ")", "{", "ClassDescriptor", "classDescriptor", "=", "createClassDescriptor", "(", "inputStream", ")", ";", "if", "(", "classDescriptor", "!=", "null", "&&", "classDescriptor", ".", "isMainMethodFound", "(", ")", ")", "{", "String", "className", "=", "convertToClassName", "(", "file", ".", "getAbsolutePath", "(", ")", ",", "prefix", ")", ";", "T", "result", "=", "callback", ".", "doWith", "(", "new", "MainClass", "(", "className", ",", "classDescriptor", ".", "getAnnotationNames", "(", ")", ")", ")", ";", "if", "(", "result", "!=", "null", ")", "{", "return", "result", ";", "}", "}", "}", "}", "if", "(", "file", ".", "isDirectory", "(", ")", ")", "{", "pushAllSorted", "(", "stack", ",", "file", ".", "listFiles", "(", "PACKAGE_FOLDER_FILTER", ")", ")", ";", "pushAllSorted", "(", "stack", ",", "file", ".", "listFiles", "(", "CLASS_FILE_FILTER", ")", ")", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Perform the given callback operation on all main classes from the given root\nfolder.\n@param <T> the result type\n@param rootFolder the root folder\n@param callback the callback\n@return the first callback result or {@code null}\n@throws IOException in case of I/O errors", "docstring_tokens": ["Perform", "the", "given", "callback", "operation", "on", "all", "main", "classes", "from", "the", "given", "root", "folder", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L123-L157", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.findMainClass", "original_string": "public static String findMainClass(JarFile jarFile, String classesLocation)\n\t\t\tthrows IOException {\n\t\treturn doWithMainClasses(jarFile, classesLocation, MainClass::getName);\n\t}", "language": "java", "code": "public static String findMainClass(JarFile jarFile, String classesLocation)\n\t\t\tthrows IOException {\n\t\treturn doWithMainClasses(jarFile, classesLocation, MainClass::getName);\n\t}", "code_tokens": ["public", "static", "String", "findMainClass", "(", "JarFile", "jarFile", ",", "String", "classesLocation", ")", "throws", "IOException", "{", "return", "doWithMainClasses", "(", "jarFile", ",", "classesLocation", ",", "MainClass", "::", "getName", ")", ";", "}"], "docstring": "Find the main class in a given jar file.\n@param jarFile the jar file to search\n@param classesLocation the location within the jar containing classes\n@return the main class or {@code null}\n@throws IOException if the jar file cannot be read", "docstring_tokens": ["Find", "the", "main", "class", "in", "a", "given", "jar", "file", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L173-L176", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.findSingleMainClass", "original_string": "public static String findSingleMainClass(JarFile jarFile, String classesLocation)\n\t\t\tthrows IOException {\n\t\treturn findSingleMainClass(jarFile, classesLocation, null);\n\t}", "language": "java", "code": "public static String findSingleMainClass(JarFile jarFile, String classesLocation)\n\t\t\tthrows IOException {\n\t\treturn findSingleMainClass(jarFile, classesLocation, null);\n\t}", "code_tokens": ["public", "static", "String", "findSingleMainClass", "(", "JarFile", "jarFile", ",", "String", "classesLocation", ")", "throws", "IOException", "{", "return", "findSingleMainClass", "(", "jarFile", ",", "classesLocation", ",", "null", ")", ";", "}"], "docstring": "Find a single main class in a given jar file.\n@param jarFile the jar file to search\n@param classesLocation the location within the jar containing classes\n@return the main class or {@code null}\n@throws IOException if the jar file cannot be read", "docstring_tokens": ["Find", "a", "single", "main", "class", "in", "a", "given", "jar", "file", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L185-L188", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.findSingleMainClass", "original_string": "public static String findSingleMainClass(JarFile jarFile, String classesLocation,\n\t\t\tString annotationName) throws IOException {\n\t\tSingleMainClassCallback callback = new SingleMainClassCallback(annotationName);\n\t\tMainClassFinder.doWithMainClasses(jarFile, classesLocation, callback);\n\t\treturn callback.getMainClassName();\n\t}", "language": "java", "code": "public static String findSingleMainClass(JarFile jarFile, String classesLocation,\n\t\t\tString annotationName) throws IOException {\n\t\tSingleMainClassCallback callback = new SingleMainClassCallback(annotationName);\n\t\tMainClassFinder.doWithMainClasses(jarFile, classesLocation, callback);\n\t\treturn callback.getMainClassName();\n\t}", "code_tokens": ["public", "static", "String", "findSingleMainClass", "(", "JarFile", "jarFile", ",", "String", "classesLocation", ",", "String", "annotationName", ")", "throws", "IOException", "{", "SingleMainClassCallback", "callback", "=", "new", "SingleMainClassCallback", "(", "annotationName", ")", ";", "MainClassFinder", ".", "doWithMainClasses", "(", "jarFile", ",", "classesLocation", ",", "callback", ")", ";", "return", "callback", ".", "getMainClassName", "(", ")", ";", "}"], "docstring": "Find a single main class in a given jar file. A main class annotated with an\nannotation with the given {@code annotationName} will be preferred over a main\nclass with no such annotation.\n@param jarFile the jar file to search\n@param classesLocation the location within the jar containing classes\n@param annotationName the name of the annotation that may be present on the main\nclass\n@return the main class or {@code null}\n@throws IOException if the jar file cannot be read", "docstring_tokens": ["Find", "a", "single", "main", "class", "in", "a", "given", "jar", "file", ".", "A", "main", "class", "annotated", "with", "an", "annotation", "with", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L201-L206", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java", "func_name": "MainClassFinder.doWithMainClasses", "original_string": "static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,\n\t\t\tMainClassCallback<T> callback) throws IOException {\n\t\tList<JarEntry> classEntries = getClassEntries(jarFile, classesLocation);\n\t\tclassEntries.sort(new ClassEntryComparator());\n\t\tfor (JarEntry entry : classEntries) {\n\t\t\ttry (InputStream inputStream = new BufferedInputStream(\n\t\t\t\t\tjarFile.getInputStream(entry))) {\n\t\t\t\tClassDescriptor classDescriptor = createClassDescriptor(inputStream);\n\t\t\t\tif (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n\t\t\t\t\tString className = convertToClassName(entry.getName(),\n\t\t\t\t\t\t\tclassesLocation);\n\t\t\t\t\tT result = callback.doWith(new MainClass(className,\n\t\t\t\t\t\t\tclassDescriptor.getAnnotationNames()));\n\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,\n\t\t\tMainClassCallback<T> callback) throws IOException {\n\t\tList<JarEntry> classEntries = getClassEntries(jarFile, classesLocation);\n\t\tclassEntries.sort(new ClassEntryComparator());\n\t\tfor (JarEntry entry : classEntries) {\n\t\t\ttry (InputStream inputStream = new BufferedInputStream(\n\t\t\t\t\tjarFile.getInputStream(entry))) {\n\t\t\t\tClassDescriptor classDescriptor = createClassDescriptor(inputStream);\n\t\t\t\tif (classDescriptor != null && classDescriptor.isMainMethodFound()) {\n\t\t\t\t\tString className = convertToClassName(entry.getName(),\n\t\t\t\t\t\t\tclassesLocation);\n\t\t\t\t\tT result = callback.doWith(new MainClass(className,\n\t\t\t\t\t\t\tclassDescriptor.getAnnotationNames()));\n\t\t\t\t\tif (result != null) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["static", "<", "T", ">", "T", "doWithMainClasses", "(", "JarFile", "jarFile", ",", "String", "classesLocation", ",", "MainClassCallback", "<", "T", ">", "callback", ")", "throws", "IOException", "{", "List", "<", "JarEntry", ">", "classEntries", "=", "getClassEntries", "(", "jarFile", ",", "classesLocation", ")", ";", "classEntries", ".", "sort", "(", "new", "ClassEntryComparator", "(", ")", ")", ";", "for", "(", "JarEntry", "entry", ":", "classEntries", ")", "{", "try", "(", "InputStream", "inputStream", "=", "new", "BufferedInputStream", "(", "jarFile", ".", "getInputStream", "(", "entry", ")", ")", ")", "{", "ClassDescriptor", "classDescriptor", "=", "createClassDescriptor", "(", "inputStream", ")", ";", "if", "(", "classDescriptor", "!=", "null", "&&", "classDescriptor", ".", "isMainMethodFound", "(", ")", ")", "{", "String", "className", "=", "convertToClassName", "(", "entry", ".", "getName", "(", ")", ",", "classesLocation", ")", ";", "T", "result", "=", "callback", ".", "doWith", "(", "new", "MainClass", "(", "className", ",", "classDescriptor", ".", "getAnnotationNames", "(", ")", ")", ")", ";", "if", "(", "result", "!=", "null", ")", "{", "return", "result", ";", "}", "}", "}", "}", "return", "null", ";", "}"], "docstring": "Perform the given callback operation on all main classes from the given jar.\n@param <T> the result type\n@param jarFile the jar file to search\n@param classesLocation the location within the jar containing classes\n@param callback the callback\n@return the first callback result or {@code null}\n@throws IOException in case of I/O errors", "docstring_tokens": ["Perform", "the", "given", "callback", "operation", "on", "all", "main", "classes", "from", "the", "given", "jar", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L217-L237", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java", "func_name": "ConfigurationPropertySources.attach", "original_string": "public static void attach(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tPropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached != null && attached.getSource() != sources) {\n\t\t\tsources.remove(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\t\tattached = null;\n\t\t}\n\t\tif (attached == null) {\n\t\t\tsources.addFirst(new ConfigurationPropertySourcesPropertySource(\n\t\t\t\t\tATTACHED_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew SpringConfigurationPropertySources(sources)));\n\t\t}\n\t}", "language": "java", "code": "public static void attach(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tPropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached != null && attached.getSource() != sources) {\n\t\t\tsources.remove(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\t\tattached = null;\n\t\t}\n\t\tif (attached == null) {\n\t\t\tsources.addFirst(new ConfigurationPropertySourcesPropertySource(\n\t\t\t\t\tATTACHED_PROPERTY_SOURCE_NAME,\n\t\t\t\t\tnew SpringConfigurationPropertySources(sources)));\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "attach", "(", "Environment", "environment", ")", "{", "Assert", ".", "isInstanceOf", "(", "ConfigurableEnvironment", ".", "class", ",", "environment", ")", ";", "MutablePropertySources", "sources", "=", "(", "(", "ConfigurableEnvironment", ")", "environment", ")", ".", "getPropertySources", "(", ")", ";", "PropertySource", "<", "?", ">", "attached", "=", "sources", ".", "get", "(", "ATTACHED_PROPERTY_SOURCE_NAME", ")", ";", "if", "(", "attached", "!=", "null", "&&", "attached", ".", "getSource", "(", ")", "!=", "sources", ")", "{", "sources", ".", "remove", "(", "ATTACHED_PROPERTY_SOURCE_NAME", ")", ";", "attached", "=", "null", ";", "}", "if", "(", "attached", "==", "null", ")", "{", "sources", ".", "addFirst", "(", "new", "ConfigurationPropertySourcesPropertySource", "(", "ATTACHED_PROPERTY_SOURCE_NAME", ",", "new", "SpringConfigurationPropertySources", "(", "sources", ")", ")", ")", ";", "}", "}"], "docstring": "Attach a {@link ConfigurationPropertySource} support to the specified\n{@link Environment}. Adapts each {@link PropertySource} managed by the environment\nto a {@link ConfigurationPropertySource} and allows classic\n{@link PropertySourcesPropertyResolver} calls to resolve using\n{@link ConfigurationPropertyName configuration property names}.\n<p>\nThe attached resolver will dynamically track any additions or removals from the\nunderlying {@link Environment} property sources.\n@param environment the source environment (must be an instance of\n{@link ConfigurableEnvironment})\n@see #get(Environment)", "docstring_tokens": ["Attach", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java#L72-L86", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java", "func_name": "ConfigurationPropertySources.get", "original_string": "public static Iterable<ConfigurationPropertySource> get(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources\n\t\t\t\t.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached == null) {\n\t\t\treturn from(sources);\n\t\t}\n\t\treturn attached.getSource();\n\t}", "language": "java", "code": "public static Iterable<ConfigurationPropertySource> get(Environment environment) {\n\t\tAssert.isInstanceOf(ConfigurableEnvironment.class, environment);\n\t\tMutablePropertySources sources = ((ConfigurableEnvironment) environment)\n\t\t\t\t.getPropertySources();\n\t\tConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources\n\t\t\t\t.get(ATTACHED_PROPERTY_SOURCE_NAME);\n\t\tif (attached == null) {\n\t\t\treturn from(sources);\n\t\t}\n\t\treturn attached.getSource();\n\t}", "code_tokens": ["public", "static", "Iterable", "<", "ConfigurationPropertySource", ">", "get", "(", "Environment", "environment", ")", "{", "Assert", ".", "isInstanceOf", "(", "ConfigurableEnvironment", ".", "class", ",", "environment", ")", ";", "MutablePropertySources", "sources", "=", "(", "(", "ConfigurableEnvironment", ")", "environment", ")", ".", "getPropertySources", "(", ")", ";", "ConfigurationPropertySourcesPropertySource", "attached", "=", "(", "ConfigurationPropertySourcesPropertySource", ")", "sources", ".", "get", "(", "ATTACHED_PROPERTY_SOURCE_NAME", ")", ";", "if", "(", "attached", "==", "null", ")", "{", "return", "from", "(", "sources", ")", ";", "}", "return", "attached", ".", "getSource", "(", ")", ";", "}"], "docstring": "Return a set of {@link ConfigurationPropertySource} instances that have previously\nbeen {@link #attach(Environment) attached} to the {@link Environment}.\n@param environment the source environment (must be an instance of\n{@link ConfigurableEnvironment})\n@return an iterable set of configuration property sources\n@throws IllegalStateException if not configuration property sources have been\nattached", "docstring_tokens": ["Return", "a", "set", "of", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java#L97-L107", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java", "func_name": "ConfigurationPropertySources.from", "original_string": "public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {\n\t\treturn Collections.singleton(SpringConfigurationPropertySource.from(source));\n\t}", "language": "java", "code": "public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {\n\t\treturn Collections.singleton(SpringConfigurationPropertySource.from(source));\n\t}", "code_tokens": ["public", "static", "Iterable", "<", "ConfigurationPropertySource", ">", "from", "(", "PropertySource", "<", "?", ">", "source", ")", "{", "return", "Collections", ".", "singleton", "(", "SpringConfigurationPropertySource", ".", "from", "(", "source", ")", ")", ";", "}"], "docstring": "Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}\nadapted from the given Spring {@link PropertySource}.\n@param source the Spring property source to adapt\n@return an {@link Iterable} containing a single newly adapted\n{@link SpringConfigurationPropertySource}", "docstring_tokens": ["Return", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java#L116-L118", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java", "func_name": "TypeUtils.getType", "original_string": "public String getType(TypeElement element, TypeMirror type) {\n\t\tif (type == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn type.accept(this.typeExtractor, createTypeDescriptor(element));\n\t}", "language": "java", "code": "public String getType(TypeElement element, TypeMirror type) {\n\t\tif (type == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn type.accept(this.typeExtractor, createTypeDescriptor(element));\n\t}", "code_tokens": ["public", "String", "getType", "(", "TypeElement", "element", ",", "TypeMirror", "type", ")", "{", "if", "(", "type", "==", "null", ")", "{", "return", "null", ";", "}", "return", "type", ".", "accept", "(", "this", ".", "typeExtractor", ",", "createTypeDescriptor", "(", "element", ")", ")", ";", "}"], "docstring": "Return the type of the specified {@link TypeMirror} including all its generic\ninformation.\n@param element the {@link TypeElement} in which this {@code type} is declared\n@param type the type to handle\n@return a representation of the type including all its generic information", "docstring_tokens": ["Return", "the", "type", "of", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java#L138-L143", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java", "func_name": "TypeUtils.extractElementType", "original_string": "public TypeMirror extractElementType(TypeMirror type) {\n\t\tif (!this.env.getTypeUtils().isAssignable(type, this.collectionType)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn getCollectionElementType(type);\n\t}", "language": "java", "code": "public TypeMirror extractElementType(TypeMirror type) {\n\t\tif (!this.env.getTypeUtils().isAssignable(type, this.collectionType)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn getCollectionElementType(type);\n\t}", "code_tokens": ["public", "TypeMirror", "extractElementType", "(", "TypeMirror", "type", ")", "{", "if", "(", "!", "this", ".", "env", ".", "getTypeUtils", "(", ")", ".", "isAssignable", "(", "type", ",", "this", ".", "collectionType", ")", ")", "{", "return", "null", ";", "}", "return", "getCollectionElementType", "(", "type", ")", ";", "}"], "docstring": "Extract the target element type from the specified container type or {@code null}\nif no element type was found.\n@param type a type, potentially wrapping an element type\n@return the element type or {@code null} if no specific type was found", "docstring_tokens": ["Extract", "the", "target", "element", "type", "from", "the", "specified", "container", "type", "or", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java#L151-L156", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java", "func_name": "TypeUtils.getPrimitiveType", "original_string": "public PrimitiveType getPrimitiveType(TypeMirror typeMirror) {\n\t\tif (getPrimitiveFor(typeMirror) != null) {\n\t\t\treturn this.types.unboxedType(typeMirror);\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public PrimitiveType getPrimitiveType(TypeMirror typeMirror) {\n\t\tif (getPrimitiveFor(typeMirror) != null) {\n\t\t\treturn this.types.unboxedType(typeMirror);\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "PrimitiveType", "getPrimitiveType", "(", "TypeMirror", "typeMirror", ")", "{", "if", "(", "getPrimitiveFor", "(", "typeMirror", ")", "!=", "null", ")", "{", "return", "this", ".", "types", ".", "unboxedType", "(", "typeMirror", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Return the {@link PrimitiveType} of the specified type or {@code null} if the type\ndoes not represent a valid wrapper type.\n@param typeMirror a type\n@return the primitive type or {@code null} if the type is not a wrapper type", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java#L200-L205", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/util/ResourceUtils.java", "func_name": "ResourceUtils.getUrls", "original_string": "public static List<String> getUrls(String path, ClassLoader classLoader) {\n\t\tif (classLoader == null) {\n\t\t\tclassLoader = ClassUtils.getDefaultClassLoader();\n\t\t}\n\t\tpath = StringUtils.cleanPath(path);\n\t\ttry {\n\t\t\treturn getUrlsFromWildcardPath(path, classLoader);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Cannot create URL from path [\" + path + \"]\", ex);\n\t\t}\n\t}", "language": "java", "code": "public static List<String> getUrls(String path, ClassLoader classLoader) {\n\t\tif (classLoader == null) {\n\t\t\tclassLoader = ClassUtils.getDefaultClassLoader();\n\t\t}\n\t\tpath = StringUtils.cleanPath(path);\n\t\ttry {\n\t\t\treturn getUrlsFromWildcardPath(path, classLoader);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Cannot create URL from path [\" + path + \"]\", ex);\n\t\t}\n\t}", "code_tokens": ["public", "static", "List", "<", "String", ">", "getUrls", "(", "String", "path", ",", "ClassLoader", "classLoader", ")", "{", "if", "(", "classLoader", "==", "null", ")", "{", "classLoader", "=", "ClassUtils", ".", "getDefaultClassLoader", "(", ")", ";", "}", "path", "=", "StringUtils", ".", "cleanPath", "(", "path", ")", ";", "try", "{", "return", "getUrlsFromWildcardPath", "(", "path", ",", "classLoader", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Cannot create URL from path [\"", "+", "path", "+", "\"]\"", ",", "ex", ")", ";", "}", "}"], "docstring": "Return URLs from a given source path. Source paths can be simple file locations\n(/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes\n\"file:\", \"classpath:\" and \"classpath*:\" can be used for specific path types.\n@param path the source path\n@param classLoader the class loader or {@code null} to use the default\n@return a list of URLs", "docstring_tokens": ["Return", "URLs", "from", "a", "given", "source", "path", ".", "Source", "paths", "can", "be", "simple", "file", "locations", "(", "/", "some", "/", "file", ".", "java", ")", "or", "wildcard", "patterns", "(", "/", "some", "/", "**", ")", ".", "Additionally", "the", "prefixes", "file", ":", "classpath", ":", "and", "classpath", "*", ":", "can", "be", "used", "for", "specific", "path", "types", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/util/ResourceUtils.java#L68-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java", "func_name": "ReactiveWebServerApplicationContext.getHttpHandler", "original_string": "protected HttpHandler getHttpHandler() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(HttpHandler.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to multiple HttpHandler beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], HttpHandler.class);\n\t}", "language": "java", "code": "protected HttpHandler getHttpHandler() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(HttpHandler.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ReactiveWebApplicationContext due to multiple HttpHandler beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], HttpHandler.class);\n\t}", "code_tokens": ["protected", "HttpHandler", "getHttpHandler", "(", ")", "{", "// Use bean names so that we don't consider the hierarchy", "String", "[", "]", "beanNames", "=", "getBeanFactory", "(", ")", ".", "getBeanNamesForType", "(", "HttpHandler", ".", "class", ")", ";", "if", "(", "beanNames", ".", "length", "==", "0", ")", "{", "throw", "new", "ApplicationContextException", "(", "\"Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.\"", ")", ";", "}", "if", "(", "beanNames", ".", "length", ">", "1", ")", "{", "throw", "new", "ApplicationContextException", "(", "\"Unable to start ReactiveWebApplicationContext due to multiple HttpHandler beans : \"", "+", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "beanNames", ")", ")", ";", "}", "return", "getBeanFactory", "(", ")", ".", "getBean", "(", "beanNames", "[", "0", "]", ",", "HttpHandler", ".", "class", ")", ";", "}"], "docstring": "Return the {@link HttpHandler} that should be used to process the reactive web\nserver. By default this method searches for a suitable bean in the context itself.\n@return a {@link HttpHandler} (never {@code null}", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java#L155-L168", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java", "func_name": "AbstractHealthAggregator.aggregateDetails", "original_string": "protected Map<String, Object> aggregateDetails(Map<String, Health> healths) {\n\t\treturn new LinkedHashMap<>(healths);\n\t}", "language": "java", "code": "protected Map<String, Object> aggregateDetails(Map<String, Health> healths) {\n\t\treturn new LinkedHashMap<>(healths);\n\t}", "code_tokens": ["protected", "Map", "<", "String", ",", "Object", ">", "aggregateDetails", "(", "Map", "<", "String", ",", "Health", ">", "healths", ")", "{", "return", "new", "LinkedHashMap", "<>", "(", "healths", ")", ";", "}"], "docstring": "Return the map of 'aggregate' details that should be used from the specified\nhealths.\n@param healths the health instances to aggregate\n@return a map of details\n@since 1.3.1", "docstring_tokens": ["Return", "the", "map", "of", "aggregate", "details", "that", "should", "be", "used", "from", "the", "specified", "healths", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java#L58-L60", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java", "func_name": "Repackager.repackage", "original_string": "public void repackage(File destination, Libraries libraries) throws IOException {\n\t\trepackage(destination, libraries, null);\n\t}", "language": "java", "code": "public void repackage(File destination, Libraries libraries) throws IOException {\n\t\trepackage(destination, libraries, null);\n\t}", "code_tokens": ["public", "void", "repackage", "(", "File", "destination", ",", "Libraries", "libraries", ")", "throws", "IOException", "{", "repackage", "(", "destination", ",", "libraries", ",", "null", ")", ";", "}"], "docstring": "Repackage to the given destination so that it can be launched using '\n{@literal java -jar}'.\n@param destination the destination file (may be the same as the source)\n@param libraries the libraries required to run the archive\n@throws IOException if the file cannot be repackaged", "docstring_tokens": ["Repackage", "to", "the", "given", "destination", "so", "that", "it", "can", "be", "launched", "using", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java#L158-L160", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java", "func_name": "Repackager.repackage", "original_string": "public void repackage(File destination, Libraries libraries,\n\t\t\tLaunchScript launchScript) throws IOException {\n\t\tif (destination == null || destination.isDirectory()) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid destination\");\n\t\t}\n\t\tif (libraries == null) {\n\t\t\tthrow new IllegalArgumentException(\"Libraries must not be null\");\n\t\t}\n\t\tif (this.layout == null) {\n\t\t\tthis.layout = getLayoutFactory().getLayout(this.source);\n\t\t}\n\t\tdestination = destination.getAbsoluteFile();\n\t\tFile workingSource = this.source;\n\t\tif (alreadyRepackaged() && this.source.equals(destination)) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.source.equals(destination)) {\n\t\t\tworkingSource = getBackupFile();\n\t\t\tworkingSource.delete();\n\t\t\trenameFile(this.source, workingSource);\n\t\t}\n\t\tdestination.delete();\n\t\ttry {\n\t\t\ttry (JarFile jarFileSource = new JarFile(workingSource)) {\n\t\t\t\trepackage(jarFileSource, destination, libraries, launchScript);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (!this.backupSource && !this.source.equals(workingSource)) {\n\t\t\t\tdeleteFile(workingSource);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void repackage(File destination, Libraries libraries,\n\t\t\tLaunchScript launchScript) throws IOException {\n\t\tif (destination == null || destination.isDirectory()) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid destination\");\n\t\t}\n\t\tif (libraries == null) {\n\t\t\tthrow new IllegalArgumentException(\"Libraries must not be null\");\n\t\t}\n\t\tif (this.layout == null) {\n\t\t\tthis.layout = getLayoutFactory().getLayout(this.source);\n\t\t}\n\t\tdestination = destination.getAbsoluteFile();\n\t\tFile workingSource = this.source;\n\t\tif (alreadyRepackaged() && this.source.equals(destination)) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.source.equals(destination)) {\n\t\t\tworkingSource = getBackupFile();\n\t\t\tworkingSource.delete();\n\t\t\trenameFile(this.source, workingSource);\n\t\t}\n\t\tdestination.delete();\n\t\ttry {\n\t\t\ttry (JarFile jarFileSource = new JarFile(workingSource)) {\n\t\t\t\trepackage(jarFileSource, destination, libraries, launchScript);\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (!this.backupSource && !this.source.equals(workingSource)) {\n\t\t\t\tdeleteFile(workingSource);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "repackage", "(", "File", "destination", ",", "Libraries", "libraries", ",", "LaunchScript", "launchScript", ")", "throws", "IOException", "{", "if", "(", "destination", "==", "null", "||", "destination", ".", "isDirectory", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Invalid destination\"", ")", ";", "}", "if", "(", "libraries", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Libraries must not be null\"", ")", ";", "}", "if", "(", "this", ".", "layout", "==", "null", ")", "{", "this", ".", "layout", "=", "getLayoutFactory", "(", ")", ".", "getLayout", "(", "this", ".", "source", ")", ";", "}", "destination", "=", "destination", ".", "getAbsoluteFile", "(", ")", ";", "File", "workingSource", "=", "this", ".", "source", ";", "if", "(", "alreadyRepackaged", "(", ")", "&&", "this", ".", "source", ".", "equals", "(", "destination", ")", ")", "{", "return", ";", "}", "if", "(", "this", ".", "source", ".", "equals", "(", "destination", ")", ")", "{", "workingSource", "=", "getBackupFile", "(", ")", ";", "workingSource", ".", "delete", "(", ")", ";", "renameFile", "(", "this", ".", "source", ",", "workingSource", ")", ";", "}", "destination", ".", "delete", "(", ")", ";", "try", "{", "try", "(", "JarFile", "jarFileSource", "=", "new", "JarFile", "(", "workingSource", ")", ")", "{", "repackage", "(", "jarFileSource", ",", "destination", ",", "libraries", ",", "launchScript", ")", ";", "}", "}", "finally", "{", "if", "(", "!", "this", ".", "backupSource", "&&", "!", "this", ".", "source", ".", "equals", "(", "workingSource", ")", ")", "{", "deleteFile", "(", "workingSource", ")", ";", "}", "}", "}"], "docstring": "Repackage to the given destination so that it can be launched using '\n{@literal java -jar}'.\n@param destination the destination file (may be the same as the source)\n@param libraries the libraries required to run the archive\n@param launchScript an optional launch script prepended to the front of the jar\n@throws IOException if the file cannot be repackaged\n@since 1.3.0", "docstring_tokens": ["Repackage", "to", "the", "given", "destination", "so", "that", "it", "can", "be", "launched", "using", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java#L171-L203", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java", "func_name": "RestTemplateExchangeTags.uri", "original_string": "public static Tag uri(HttpRequest request) {\n\t\treturn Tag.of(\"uri\", ensureLeadingSlash(stripUri(request.getURI().toString())));\n\t}", "language": "java", "code": "public static Tag uri(HttpRequest request) {\n\t\treturn Tag.of(\"uri\", ensureLeadingSlash(stripUri(request.getURI().toString())));\n\t}", "code_tokens": ["public", "static", "Tag", "uri", "(", "HttpRequest", "request", ")", "{", "return", "Tag", ".", "of", "(", "\"uri\"", ",", "ensureLeadingSlash", "(", "stripUri", "(", "request", ".", "getURI", "(", ")", ".", "toString", "(", ")", ")", ")", ")", ";", "}"], "docstring": "Creates a {@code uri} {@code Tag} for the URI of the given {@code request}.\n@param request the request\n@return the uri tag", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java#L75-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java", "func_name": "RestTemplateExchangeTags.clientName", "original_string": "public static Tag clientName(HttpRequest request) {\n\t\tString host = request.getURI().getHost();\n\t\tif (host == null) {\n\t\t\thost = \"none\";\n\t\t}\n\t\treturn Tag.of(\"clientName\", host);\n\t}", "language": "java", "code": "public static Tag clientName(HttpRequest request) {\n\t\tString host = request.getURI().getHost();\n\t\tif (host == null) {\n\t\t\thost = \"none\";\n\t\t}\n\t\treturn Tag.of(\"clientName\", host);\n\t}", "code_tokens": ["public", "static", "Tag", "clientName", "(", "HttpRequest", "request", ")", "{", "String", "host", "=", "request", ".", "getURI", "(", ")", ".", "getHost", "(", ")", ";", "if", "(", "host", "==", "null", ")", "{", "host", "=", "\"none\"", ";", "}", "return", "Tag", ".", "of", "(", "\"clientName\"", ",", "host", ")", ";", "}"], "docstring": "Create a {@code clientName} {@code Tag} derived from the {@link URI#getHost host}\nof the {@link HttpRequest#getURI() URI} of the given {@code request}.\n@param request the request\n@return the clientName tag", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java#L125-L131", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java", "func_name": "RestTemplateExchangeTags.outcome", "original_string": "public static Tag outcome(ClientHttpResponse response) {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus statusCode = response.getStatusCode();\n\t\t\t\tif (statusCode.is1xxInformational()) {\n\t\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is3xxRedirection()) {\n\t\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is4xxClientError()) {\n\t\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is5xxServerError()) {\n\t\t\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t\tcatch (IOException | IllegalArgumentException ex) {\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t}", "language": "java", "code": "public static Tag outcome(ClientHttpResponse response) {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus statusCode = response.getStatusCode();\n\t\t\t\tif (statusCode.is1xxInformational()) {\n\t\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is2xxSuccessful()) {\n\t\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is3xxRedirection()) {\n\t\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is4xxClientError()) {\n\t\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t\t}\n\t\t\t\tif (statusCode.is5xxServerError()) {\n\t\t\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t\tcatch (IOException | IllegalArgumentException ex) {\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t}", "code_tokens": ["public", "static", "Tag", "outcome", "(", "ClientHttpResponse", "response", ")", "{", "try", "{", "if", "(", "response", "!=", "null", ")", "{", "HttpStatus", "statusCode", "=", "response", ".", "getStatusCode", "(", ")", ";", "if", "(", "statusCode", ".", "is1xxInformational", "(", ")", ")", "{", "return", "OUTCOME_INFORMATIONAL", ";", "}", "if", "(", "statusCode", ".", "is2xxSuccessful", "(", ")", ")", "{", "return", "OUTCOME_SUCCESS", ";", "}", "if", "(", "statusCode", ".", "is3xxRedirection", "(", ")", ")", "{", "return", "OUTCOME_REDIRECTION", ";", "}", "if", "(", "statusCode", ".", "is4xxClientError", "(", ")", ")", "{", "return", "OUTCOME_CLIENT_ERROR", ";", "}", "if", "(", "statusCode", ".", "is5xxServerError", "(", ")", ")", "{", "return", "OUTCOME_SERVER_ERROR", ";", "}", "}", "return", "OUTCOME_UNKNOWN", ";", "}", "catch", "(", "IOException", "|", "IllegalArgumentException", "ex", ")", "{", "return", "OUTCOME_UNKNOWN", ";", "}", "}"], "docstring": "Creates an {@code outcome} {@code Tag} derived from the\n{@link ClientHttpResponse#getStatusCode() status} of the given {@code response}.\n@param response the response\n@return the outcome tag\n@since 2.2.0", "docstring_tokens": ["Creates", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java#L140-L165", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/AbstractTemplateViewResolverProperties.java", "func_name": "AbstractTemplateViewResolverProperties.applyToMvcViewResolver", "original_string": "public void applyToMvcViewResolver(Object viewResolver) {\n\t\tAssert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,\n\t\t\t\t\"ViewResolver is not an instance of AbstractTemplateViewResolver :\"\n\t\t\t\t\t\t+ viewResolver);\n\t\tAbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver;\n\t\tresolver.setPrefix(getPrefix());\n\t\tresolver.setSuffix(getSuffix());\n\t\tresolver.setCache(isCache());\n\t\tif (getContentType() != null) {\n\t\t\tresolver.setContentType(getContentType().toString());\n\t\t}\n\t\tresolver.setViewNames(getViewNames());\n\t\tresolver.setExposeRequestAttributes(isExposeRequestAttributes());\n\t\tresolver.setAllowRequestOverride(isAllowRequestOverride());\n\t\tresolver.setAllowSessionOverride(isAllowSessionOverride());\n\t\tresolver.setExposeSessionAttributes(isExposeSessionAttributes());\n\t\tresolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers());\n\t\tresolver.setRequestContextAttribute(getRequestContextAttribute());\n\t\t// The resolver usually acts as a fallback resolver (e.g. like a\n\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t}", "language": "java", "code": "public void applyToMvcViewResolver(Object viewResolver) {\n\t\tAssert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,\n\t\t\t\t\"ViewResolver is not an instance of AbstractTemplateViewResolver :\"\n\t\t\t\t\t\t+ viewResolver);\n\t\tAbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver;\n\t\tresolver.setPrefix(getPrefix());\n\t\tresolver.setSuffix(getSuffix());\n\t\tresolver.setCache(isCache());\n\t\tif (getContentType() != null) {\n\t\t\tresolver.setContentType(getContentType().toString());\n\t\t}\n\t\tresolver.setViewNames(getViewNames());\n\t\tresolver.setExposeRequestAttributes(isExposeRequestAttributes());\n\t\tresolver.setAllowRequestOverride(isAllowRequestOverride());\n\t\tresolver.setAllowSessionOverride(isAllowSessionOverride());\n\t\tresolver.setExposeSessionAttributes(isExposeSessionAttributes());\n\t\tresolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers());\n\t\tresolver.setRequestContextAttribute(getRequestContextAttribute());\n\t\t// The resolver usually acts as a fallback resolver (e.g. like a\n\t\t// InternalResourceViewResolver) so it needs to have low precedence\n\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);\n\t}", "code_tokens": ["public", "void", "applyToMvcViewResolver", "(", "Object", "viewResolver", ")", "{", "Assert", ".", "isInstanceOf", "(", "AbstractTemplateViewResolver", ".", "class", ",", "viewResolver", ",", "\"ViewResolver is not an instance of AbstractTemplateViewResolver :\"", "+", "viewResolver", ")", ";", "AbstractTemplateViewResolver", "resolver", "=", "(", "AbstractTemplateViewResolver", ")", "viewResolver", ";", "resolver", ".", "setPrefix", "(", "getPrefix", "(", ")", ")", ";", "resolver", ".", "setSuffix", "(", "getSuffix", "(", ")", ")", ";", "resolver", ".", "setCache", "(", "isCache", "(", ")", ")", ";", "if", "(", "getContentType", "(", ")", "!=", "null", ")", "{", "resolver", ".", "setContentType", "(", "getContentType", "(", ")", ".", "toString", "(", ")", ")", ";", "}", "resolver", ".", "setViewNames", "(", "getViewNames", "(", ")", ")", ";", "resolver", ".", "setExposeRequestAttributes", "(", "isExposeRequestAttributes", "(", ")", ")", ";", "resolver", ".", "setAllowRequestOverride", "(", "isAllowRequestOverride", "(", ")", ")", ";", "resolver", ".", "setAllowSessionOverride", "(", "isAllowSessionOverride", "(", ")", ")", ";", "resolver", ".", "setExposeSessionAttributes", "(", "isExposeSessionAttributes", "(", ")", ")", ";", "resolver", ".", "setExposeSpringMacroHelpers", "(", "isExposeSpringMacroHelpers", "(", ")", ")", ";", "resolver", ".", "setRequestContextAttribute", "(", "getRequestContextAttribute", "(", ")", ")", ";", "// The resolver usually acts as a fallback resolver (e.g. like a", "// InternalResourceViewResolver) so it needs to have low precedence", "resolver", ".", "setOrder", "(", "Ordered", ".", "LOWEST_PRECEDENCE", "-", "5", ")", ";", "}"], "docstring": "Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in\nsignature to avoid runtime dependency on MVC, which means that the template engine\ncan be used in a non-web application.\n@param viewResolver the resolver to apply the properties to.", "docstring_tokens": ["Apply", "the", "given", "properties", "to", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/AbstractTemplateViewResolverProperties.java#L155-L176", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletListenerRegistrationBean.java", "func_name": "ServletListenerRegistrationBean.setListener", "original_string": "public void setListener(T listener) {\n\t\tAssert.notNull(listener, \"Listener must not be null\");\n\t\tAssert.isTrue(isSupportedType(listener), \"Listener is not of a supported type\");\n\t\tthis.listener = listener;\n\t}", "language": "java", "code": "public void setListener(T listener) {\n\t\tAssert.notNull(listener, \"Listener must not be null\");\n\t\tAssert.isTrue(isSupportedType(listener), \"Listener is not of a supported type\");\n\t\tthis.listener = listener;\n\t}", "code_tokens": ["public", "void", "setListener", "(", "T", "listener", ")", "{", "Assert", ".", "notNull", "(", "listener", ",", "\"Listener must not be null\"", ")", ";", "Assert", ".", "isTrue", "(", "isSupportedType", "(", "listener", ")", ",", "\"Listener is not of a supported type\"", ")", ";", "this", ".", "listener", "=", "listener", ";", "}"], "docstring": "Set the listener that will be registered.\n@param listener the listener to register", "docstring_tokens": ["Set", "the", "listener", "that", "will", "be", "registered", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletListenerRegistrationBean.java#L94-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletListenerRegistrationBean.java", "func_name": "ServletListenerRegistrationBean.isSupportedType", "original_string": "public static boolean isSupportedType(EventListener listener) {\n\t\tfor (Class<?> type : SUPPORTED_TYPES) {\n\t\t\tif (ClassUtils.isAssignableValue(type, listener)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean isSupportedType(EventListener listener) {\n\t\tfor (Class<?> type : SUPPORTED_TYPES) {\n\t\t\tif (ClassUtils.isAssignableValue(type, listener)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "isSupportedType", "(", "EventListener", "listener", ")", "{", "for", "(", "Class", "<", "?", ">", "type", ":", "SUPPORTED_TYPES", ")", "{", "if", "(", "ClassUtils", ".", "isAssignableValue", "(", "type", ",", "listener", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Returns {@code true} if the specified listener is one of the supported types.\n@param listener the listener to test\n@return if the listener is of a supported type", "docstring_tokens": ["Returns", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletListenerRegistrationBean.java#L131-L138", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java", "func_name": "RabbitProperties.determinePort", "original_string": "public int determinePort() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getPort();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn address.port;\n\t}", "language": "java", "code": "public int determinePort() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getPort();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn address.port;\n\t}", "code_tokens": ["public", "int", "determinePort", "(", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "parsedAddresses", ")", ")", "{", "return", "getPort", "(", ")", ";", "}", "Address", "address", "=", "this", ".", "parsedAddresses", ".", "get", "(", "0", ")", ";", "return", "address", ".", "port", ";", "}"], "docstring": "Returns the port from the first address, or the configured port if no addresses\nhave been set.\n@return the port\n@see #setAddresses(String)\n@see #getPort()", "docstring_tokens": ["Returns", "the", "port", "from", "the", "first", "address", "or", "the", "configured", "port", "if", "no", "addresses", "have", "been", "set", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java#L149-L155", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java", "func_name": "RabbitProperties.determineAddresses", "original_string": "public String determineAddresses() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.host + \":\" + this.port;\n\t\t}\n\t\tList<String> addressStrings = new ArrayList<>();\n\t\tfor (Address parsedAddress : this.parsedAddresses) {\n\t\t\taddressStrings.add(parsedAddress.host + \":\" + parsedAddress.port);\n\t\t}\n\t\treturn StringUtils.collectionToCommaDelimitedString(addressStrings);\n\t}", "language": "java", "code": "public String determineAddresses() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.host + \":\" + this.port;\n\t\t}\n\t\tList<String> addressStrings = new ArrayList<>();\n\t\tfor (Address parsedAddress : this.parsedAddresses) {\n\t\t\taddressStrings.add(parsedAddress.host + \":\" + parsedAddress.port);\n\t\t}\n\t\treturn StringUtils.collectionToCommaDelimitedString(addressStrings);\n\t}", "code_tokens": ["public", "String", "determineAddresses", "(", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "parsedAddresses", ")", ")", "{", "return", "this", ".", "host", "+", "\":\"", "+", "this", ".", "port", ";", "}", "List", "<", "String", ">", "addressStrings", "=", "new", "ArrayList", "<>", "(", ")", ";", "for", "(", "Address", "parsedAddress", ":", "this", ".", "parsedAddresses", ")", "{", "addressStrings", ".", "add", "(", "parsedAddress", ".", "host", "+", "\":\"", "+", "parsedAddress", ".", "port", ")", ";", "}", "return", "StringUtils", ".", "collectionToCommaDelimitedString", "(", "addressStrings", ")", ";", "}"], "docstring": "Returns the comma-separated addresses or a single address ({@code host:port})\ncreated from the configured host and port if no addresses have been set.\n@return the addresses", "docstring_tokens": ["Returns", "the", "comma", "-", "separated", "addresses", "or", "a", "single", "address", "(", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java#L170-L179", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java", "func_name": "RabbitProperties.determineUsername", "original_string": "public String determineUsername() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.username != null) ? address.username : this.username;\n\t}", "language": "java", "code": "public String determineUsername() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn this.username;\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.username != null) ? address.username : this.username;\n\t}", "code_tokens": ["public", "String", "determineUsername", "(", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "parsedAddresses", ")", ")", "{", "return", "this", ".", "username", ";", "}", "Address", "address", "=", "this", ".", "parsedAddresses", ".", "get", "(", "0", ")", ";", "return", "(", "address", ".", "username", "!=", "null", ")", "?", "address", ".", "username", ":", "this", ".", "username", ";", "}"], "docstring": "If addresses have been set and the first address has a username it is returned.\nOtherwise returns the result of calling {@code getUsername()}.\n@return the username\n@see #setAddresses(String)\n@see #getUsername()", "docstring_tokens": ["If", "addresses", "have", "been", "set", "and", "the", "first", "address", "has", "a", "username", "it", "is", "returned", ".", "Otherwise", "returns", "the", "result", "of", "calling", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java#L205-L211", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java", "func_name": "RabbitProperties.determinePassword", "original_string": "public String determinePassword() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getPassword();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.password != null) ? address.password : getPassword();\n\t}", "language": "java", "code": "public String determinePassword() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getPassword();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.password != null) ? address.password : getPassword();\n\t}", "code_tokens": ["public", "String", "determinePassword", "(", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "parsedAddresses", ")", ")", "{", "return", "getPassword", "(", ")", ";", "}", "Address", "address", "=", "this", ".", "parsedAddresses", ".", "get", "(", "0", ")", ";", "return", "(", "address", ".", "password", "!=", "null", ")", "?", "address", ".", "password", ":", "getPassword", "(", ")", ";", "}"], "docstring": "If addresses have been set and the first address has a password it is returned.\nOtherwise returns the result of calling {@code getPassword()}.\n@return the password or {@code null}\n@see #setAddresses(String)\n@see #getPassword()", "docstring_tokens": ["If", "addresses", "have", "been", "set", "and", "the", "first", "address", "has", "a", "password", "it", "is", "returned", ".", "Otherwise", "returns", "the", "result", "of", "calling", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java#L228-L234", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java", "func_name": "RabbitProperties.determineVirtualHost", "original_string": "public String determineVirtualHost() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getVirtualHost();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.virtualHost != null) ? address.virtualHost : getVirtualHost();\n\t}", "language": "java", "code": "public String determineVirtualHost() {\n\t\tif (CollectionUtils.isEmpty(this.parsedAddresses)) {\n\t\t\treturn getVirtualHost();\n\t\t}\n\t\tAddress address = this.parsedAddresses.get(0);\n\t\treturn (address.virtualHost != null) ? address.virtualHost : getVirtualHost();\n\t}", "code_tokens": ["public", "String", "determineVirtualHost", "(", ")", "{", "if", "(", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "parsedAddresses", ")", ")", "{", "return", "getVirtualHost", "(", ")", ";", "}", "Address", "address", "=", "this", ".", "parsedAddresses", ".", "get", "(", "0", ")", ";", "return", "(", "address", ".", "virtualHost", "!=", "null", ")", "?", "address", ".", "virtualHost", ":", "getVirtualHost", "(", ")", ";", "}"], "docstring": "If addresses have been set and the first address has a virtual host it is returned.\nOtherwise returns the result of calling {@code getVirtualHost()}.\n@return the virtual host or {@code null}\n@see #setAddresses(String)\n@see #getVirtualHost()", "docstring_tokens": ["If", "addresses", "have", "been", "set", "and", "the", "first", "address", "has", "a", "virtual", "host", "it", "is", "returned", ".", "Otherwise", "returns", "the", "result", "of", "calling", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java#L255-L261", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java", "func_name": "OrderedHealthAggregator.setStatusOrder", "original_string": "public void setStatusOrder(Status... statusOrder) {\n\t\tString[] order = new String[statusOrder.length];\n\t\tfor (int i = 0; i < statusOrder.length; i++) {\n\t\t\torder[i] = statusOrder[i].getCode();\n\t\t}\n\t\tsetStatusOrder(Arrays.asList(order));\n\t}", "language": "java", "code": "public void setStatusOrder(Status... statusOrder) {\n\t\tString[] order = new String[statusOrder.length];\n\t\tfor (int i = 0; i < statusOrder.length; i++) {\n\t\t\torder[i] = statusOrder[i].getCode();\n\t\t}\n\t\tsetStatusOrder(Arrays.asList(order));\n\t}", "code_tokens": ["public", "void", "setStatusOrder", "(", "Status", "...", "statusOrder", ")", "{", "String", "[", "]", "order", "=", "new", "String", "[", "statusOrder", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "statusOrder", ".", "length", ";", "i", "++", ")", "{", "order", "[", "i", "]", "=", "statusOrder", "[", "i", "]", ".", "getCode", "(", ")", ";", "}", "setStatusOrder", "(", "Arrays", ".", "asList", "(", "order", ")", ")", ";", "}"], "docstring": "Set the ordering of the status.\n@param statusOrder an ordered list of the status", "docstring_tokens": ["Set", "the", "ordering", "of", "the", "status", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java#L51-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java", "func_name": "WebMvcTags.uri", "original_string": "public static Tag uri(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (request != null) {\n\t\t\tString pattern = getMatchingPattern(request);\n\t\t\tif (pattern != null) {\n\t\t\t\treturn Tag.of(\"uri\", pattern);\n\t\t\t}\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus status = extractStatus(response);\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString pathInfo = getPathInfo(request);\n\t\t\tif (pathInfo.isEmpty()) {\n\t\t\t\treturn URI_ROOT;\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}", "language": "java", "code": "public static Tag uri(HttpServletRequest request, HttpServletResponse response) {\n\t\tif (request != null) {\n\t\t\tString pattern = getMatchingPattern(request);\n\t\t\tif (pattern != null) {\n\t\t\t\treturn Tag.of(\"uri\", pattern);\n\t\t\t}\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus status = extractStatus(response);\n\t\t\t\tif (status != null) {\n\t\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\t\treturn URI_REDIRECTION;\n\t\t\t\t\t}\n\t\t\t\t\tif (status == HttpStatus.NOT_FOUND) {\n\t\t\t\t\t\treturn URI_NOT_FOUND;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString pathInfo = getPathInfo(request);\n\t\t\tif (pathInfo.isEmpty()) {\n\t\t\t\treturn URI_ROOT;\n\t\t\t}\n\t\t}\n\t\treturn URI_UNKNOWN;\n\t}", "code_tokens": ["public", "static", "Tag", "uri", "(", "HttpServletRequest", "request", ",", "HttpServletResponse", "response", ")", "{", "if", "(", "request", "!=", "null", ")", "{", "String", "pattern", "=", "getMatchingPattern", "(", "request", ")", ";", "if", "(", "pattern", "!=", "null", ")", "{", "return", "Tag", ".", "of", "(", "\"uri\"", ",", "pattern", ")", ";", "}", "if", "(", "response", "!=", "null", ")", "{", "HttpStatus", "status", "=", "extractStatus", "(", "response", ")", ";", "if", "(", "status", "!=", "null", ")", "{", "if", "(", "status", ".", "is3xxRedirection", "(", ")", ")", "{", "return", "URI_REDIRECTION", ";", "}", "if", "(", "status", "==", "HttpStatus", ".", "NOT_FOUND", ")", "{", "return", "URI_NOT_FOUND", ";", "}", "}", "}", "String", "pathInfo", "=", "getPathInfo", "(", "request", ")", ";", "if", "(", "pathInfo", ".", "isEmpty", "(", ")", ")", "{", "return", "URI_ROOT", ";", "}", "}", "return", "URI_UNKNOWN", ";", "}"], "docstring": "Creates a {@code uri} tag based on the URI of the given {@code request}. Uses the\n{@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if\navailable. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}\nfor 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}\nfor all other requests.\n@param request the request\n@param response the response\n@return the uri tag derived from the request", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java#L109-L132", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactory.java", "func_name": "AbstractServletWebServerFactory.mergeInitializers", "original_string": "protected final ServletContextInitializer[] mergeInitializers(\n\t\t\tServletContextInitializer... initializers) {\n\t\tList<ServletContextInitializer> mergedInitializers = new ArrayList<>();\n\t\tmergedInitializers.add((servletContext) -> this.initParameters\n\t\t\t\t.forEach(servletContext::setInitParameter));\n\t\tmergedInitializers.add(new SessionConfiguringInitializer(this.session));\n\t\tmergedInitializers.addAll(Arrays.asList(initializers));\n\t\tmergedInitializers.addAll(this.initializers);\n\t\treturn mergedInitializers.toArray(new ServletContextInitializer[0]);\n\t}", "language": "java", "code": "protected final ServletContextInitializer[] mergeInitializers(\n\t\t\tServletContextInitializer... initializers) {\n\t\tList<ServletContextInitializer> mergedInitializers = new ArrayList<>();\n\t\tmergedInitializers.add((servletContext) -> this.initParameters\n\t\t\t\t.forEach(servletContext::setInitParameter));\n\t\tmergedInitializers.add(new SessionConfiguringInitializer(this.session));\n\t\tmergedInitializers.addAll(Arrays.asList(initializers));\n\t\tmergedInitializers.addAll(this.initializers);\n\t\treturn mergedInitializers.toArray(new ServletContextInitializer[0]);\n\t}", "code_tokens": ["protected", "final", "ServletContextInitializer", "[", "]", "mergeInitializers", "(", "ServletContextInitializer", "...", "initializers", ")", "{", "List", "<", "ServletContextInitializer", ">", "mergedInitializers", "=", "new", "ArrayList", "<>", "(", ")", ";", "mergedInitializers", ".", "add", "(", "(", "servletContext", ")", "-", ">", "this", ".", "initParameters", ".", "forEach", "(", "servletContext", "::", "setInitParameter", ")", ")", ";", "mergedInitializers", ".", "add", "(", "new", "SessionConfiguringInitializer", "(", "this", ".", "session", ")", ")", ";", "mergedInitializers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "initializers", ")", ")", ";", "mergedInitializers", ".", "addAll", "(", "this", ".", "initializers", ")", ";", "return", "mergedInitializers", ".", "toArray", "(", "new", "ServletContextInitializer", "[", "0", "]", ")", ";", "}"], "docstring": "Utility method that can be used by subclasses wishing to combine the specified\n{@link ServletContextInitializer} parameters with those defined in this instance.\n@param initializers the initializers to merge\n@return a complete set of merged initializers (with the specified parameters\nappearing first)", "docstring_tokens": ["Utility", "method", "that", "can", "be", "used", "by", "subclasses", "wishing", "to", "combine", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactory.java#L250-L259", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactory.java", "func_name": "AbstractServletWebServerFactory.shouldRegisterJspServlet", "original_string": "protected boolean shouldRegisterJspServlet() {\n\t\treturn this.jsp != null && this.jsp.getRegistered() && ClassUtils\n\t\t\t\t.isPresent(this.jsp.getClassName(), getClass().getClassLoader());\n\t}", "language": "java", "code": "protected boolean shouldRegisterJspServlet() {\n\t\treturn this.jsp != null && this.jsp.getRegistered() && ClassUtils\n\t\t\t\t.isPresent(this.jsp.getClassName(), getClass().getClassLoader());\n\t}", "code_tokens": ["protected", "boolean", "shouldRegisterJspServlet", "(", ")", "{", "return", "this", ".", "jsp", "!=", "null", "&&", "this", ".", "jsp", ".", "getRegistered", "(", ")", "&&", "ClassUtils", ".", "isPresent", "(", "this", ".", "jsp", ".", "getClassName", "(", ")", ",", "getClass", "(", ")", ".", "getClassLoader", "(", ")", ")", ";", "}"], "docstring": "Returns whether or not the JSP servlet should be registered with the web server.\n@return {@code true} if the servlet should be registered, otherwise {@code false}", "docstring_tokens": ["Returns", "whether", "or", "not", "the", "JSP", "servlet", "should", "be", "registered", "with", "the", "web", "server", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactory.java#L265-L268", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java", "func_name": "NettyReactiveWebServerFactory.setServerCustomizers", "original_string": "public void setServerCustomizers(\n\t\t\tCollection<? extends NettyServerCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new ArrayList<>(serverCustomizers);\n\t}", "language": "java", "code": "public void setServerCustomizers(\n\t\t\tCollection<? extends NettyServerCustomizer> serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizers must not be null\");\n\t\tthis.serverCustomizers = new ArrayList<>(serverCustomizers);\n\t}", "code_tokens": ["public", "void", "setServerCustomizers", "(", "Collection", "<", "?", "extends", "NettyServerCustomizer", ">", "serverCustomizers", ")", "{", "Assert", ".", "notNull", "(", "serverCustomizers", ",", "\"ServerCustomizers must not be null\"", ")", ";", "this", ".", "serverCustomizers", "=", "new", "ArrayList", "<>", "(", "serverCustomizers", ")", ";", "}"], "docstring": "Set {@link NettyServerCustomizer}s that should be applied to the Netty server\nbuilder. Calling this method will replace any existing customizers.\n@param serverCustomizers the customizers to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java#L83-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java", "func_name": "NettyReactiveWebServerFactory.addServerCustomizers", "original_string": "public void addServerCustomizers(NettyServerCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}", "language": "java", "code": "public void addServerCustomizers(NettyServerCustomizer... serverCustomizers) {\n\t\tAssert.notNull(serverCustomizers, \"ServerCustomizer must not be null\");\n\t\tthis.serverCustomizers.addAll(Arrays.asList(serverCustomizers));\n\t}", "code_tokens": ["public", "void", "addServerCustomizers", "(", "NettyServerCustomizer", "...", "serverCustomizers", ")", "{", "Assert", ".", "notNull", "(", "serverCustomizers", ",", "\"ServerCustomizer must not be null\"", ")", ";", "this", ".", "serverCustomizers", ".", "addAll", "(", "Arrays", ".", "asList", "(", "serverCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link NettyServerCustomizer}s that should applied while building the server.\n@param serverCustomizers the customizers to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java#L93-L96", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.run", "original_string": "public ConfigurableApplicationContext run(String... args) {\n\t\tStopWatch stopWatch = new StopWatch();\n\t\tstopWatch.start();\n\t\tConfigurableApplicationContext context = null;\n\t\tCollection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n\t\tconfigureHeadlessProperty();\n\t\tSpringApplicationRunListeners listeners = getRunListeners(args);\n\t\tlisteners.starting();\n\t\ttry {\n\t\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(\n\t\t\t\t\targs);\n\t\t\tConfigurableEnvironment environment = prepareEnvironment(listeners,\n\t\t\t\t\tapplicationArguments);\n\t\t\tconfigureIgnoreBeanInfo(environment);\n\t\t\tBanner printedBanner = printBanner(environment);\n\t\t\tcontext = createApplicationContext();\n\t\t\texceptionReporters = getSpringFactoriesInstances(\n\t\t\t\t\tSpringBootExceptionReporter.class,\n\t\t\t\t\tnew Class[] { ConfigurableApplicationContext.class }, context);\n\t\t\tprepareContext(context, environment, listeners, applicationArguments,\n\t\t\t\t\tprintedBanner);\n\t\t\trefreshContext(context);\n\t\t\tafterRefresh(context, applicationArguments);\n\t\t\tstopWatch.stop();\n\t\t\tif (this.logStartupInfo) {\n\t\t\t\tnew StartupInfoLogger(this.mainApplicationClass)\n\t\t\t\t\t\t.logStarted(getApplicationLog(), stopWatch);\n\t\t\t}\n\t\t\tlisteners.started(context);\n\t\t\tcallRunners(context, applicationArguments);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, listeners);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\n\t\ttry {\n\t\t\tlisteners.running(context);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, null);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn context;\n\t}", "language": "java", "code": "public ConfigurableApplicationContext run(String... args) {\n\t\tStopWatch stopWatch = new StopWatch();\n\t\tstopWatch.start();\n\t\tConfigurableApplicationContext context = null;\n\t\tCollection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n\t\tconfigureHeadlessProperty();\n\t\tSpringApplicationRunListeners listeners = getRunListeners(args);\n\t\tlisteners.starting();\n\t\ttry {\n\t\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(\n\t\t\t\t\targs);\n\t\t\tConfigurableEnvironment environment = prepareEnvironment(listeners,\n\t\t\t\t\tapplicationArguments);\n\t\t\tconfigureIgnoreBeanInfo(environment);\n\t\t\tBanner printedBanner = printBanner(environment);\n\t\t\tcontext = createApplicationContext();\n\t\t\texceptionReporters = getSpringFactoriesInstances(\n\t\t\t\t\tSpringBootExceptionReporter.class,\n\t\t\t\t\tnew Class[] { ConfigurableApplicationContext.class }, context);\n\t\t\tprepareContext(context, environment, listeners, applicationArguments,\n\t\t\t\t\tprintedBanner);\n\t\t\trefreshContext(context);\n\t\t\tafterRefresh(context, applicationArguments);\n\t\t\tstopWatch.stop();\n\t\t\tif (this.logStartupInfo) {\n\t\t\t\tnew StartupInfoLogger(this.mainApplicationClass)\n\t\t\t\t\t\t.logStarted(getApplicationLog(), stopWatch);\n\t\t\t}\n\t\t\tlisteners.started(context);\n\t\t\tcallRunners(context, applicationArguments);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, listeners);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\n\t\ttry {\n\t\t\tlisteners.running(context);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, null);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn context;\n\t}", "code_tokens": ["public", "ConfigurableApplicationContext", "run", "(", "String", "...", "args", ")", "{", "StopWatch", "stopWatch", "=", "new", "StopWatch", "(", ")", ";", "stopWatch", ".", "start", "(", ")", ";", "ConfigurableApplicationContext", "context", "=", "null", ";", "Collection", "<", "SpringBootExceptionReporter", ">", "exceptionReporters", "=", "new", "ArrayList", "<>", "(", ")", ";", "configureHeadlessProperty", "(", ")", ";", "SpringApplicationRunListeners", "listeners", "=", "getRunListeners", "(", "args", ")", ";", "listeners", ".", "starting", "(", ")", ";", "try", "{", "ApplicationArguments", "applicationArguments", "=", "new", "DefaultApplicationArguments", "(", "args", ")", ";", "ConfigurableEnvironment", "environment", "=", "prepareEnvironment", "(", "listeners", ",", "applicationArguments", ")", ";", "configureIgnoreBeanInfo", "(", "environment", ")", ";", "Banner", "printedBanner", "=", "printBanner", "(", "environment", ")", ";", "context", "=", "createApplicationContext", "(", ")", ";", "exceptionReporters", "=", "getSpringFactoriesInstances", "(", "SpringBootExceptionReporter", ".", "class", ",", "new", "Class", "[", "]", "{", "ConfigurableApplicationContext", ".", "class", "}", ",", "context", ")", ";", "prepareContext", "(", "context", ",", "environment", ",", "listeners", ",", "applicationArguments", ",", "printedBanner", ")", ";", "refreshContext", "(", "context", ")", ";", "afterRefresh", "(", "context", ",", "applicationArguments", ")", ";", "stopWatch", ".", "stop", "(", ")", ";", "if", "(", "this", ".", "logStartupInfo", ")", "{", "new", "StartupInfoLogger", "(", "this", ".", "mainApplicationClass", ")", ".", "logStarted", "(", "getApplicationLog", "(", ")", ",", "stopWatch", ")", ";", "}", "listeners", ".", "started", "(", "context", ")", ";", "callRunners", "(", "context", ",", "applicationArguments", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "handleRunFailure", "(", "context", ",", "ex", ",", "exceptionReporters", ",", "listeners", ")", ";", "throw", "new", "IllegalStateException", "(", "ex", ")", ";", "}", "try", "{", "listeners", ".", "running", "(", "context", ")", ";", "}", "catch", "(", "Throwable", "ex", ")", "{", "handleRunFailure", "(", "context", ",", "ex", ",", "exceptionReporters", ",", "null", ")", ";", "throw", "new", "IllegalStateException", "(", "ex", ")", ";", "}", "return", "context", ";", "}"], "docstring": "Run the Spring application, creating and refreshing a new\n{@link ApplicationContext}.\n@param args the application arguments (usually passed from a Java main method)\n@return a running {@link ApplicationContext}", "docstring_tokens": ["Run", "the", "Spring", "application", "creating", "and", "refreshing", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L298-L342", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.configureEnvironment", "original_string": "protected void configureEnvironment(ConfigurableEnvironment environment,\n\t\t\tString[] args) {\n\t\tif (this.addConversionService) {\n\t\t\tConversionService conversionService = ApplicationConversionService\n\t\t\t\t\t.getSharedInstance();\n\t\t\tenvironment.setConversionService(\n\t\t\t\t\t(ConfigurableConversionService) conversionService);\n\t\t}\n\t\tconfigurePropertySources(environment, args);\n\t\tconfigureProfiles(environment, args);\n\t}", "language": "java", "code": "protected void configureEnvironment(ConfigurableEnvironment environment,\n\t\t\tString[] args) {\n\t\tif (this.addConversionService) {\n\t\t\tConversionService conversionService = ApplicationConversionService\n\t\t\t\t\t.getSharedInstance();\n\t\t\tenvironment.setConversionService(\n\t\t\t\t\t(ConfigurableConversionService) conversionService);\n\t\t}\n\t\tconfigurePropertySources(environment, args);\n\t\tconfigureProfiles(environment, args);\n\t}", "code_tokens": ["protected", "void", "configureEnvironment", "(", "ConfigurableEnvironment", "environment", ",", "String", "[", "]", "args", ")", "{", "if", "(", "this", ".", "addConversionService", ")", "{", "ConversionService", "conversionService", "=", "ApplicationConversionService", ".", "getSharedInstance", "(", ")", ";", "environment", ".", "setConversionService", "(", "(", "ConfigurableConversionService", ")", "conversionService", ")", ";", "}", "configurePropertySources", "(", "environment", ",", "args", ")", ";", "configureProfiles", "(", "environment", ",", "args", ")", ";", "}"], "docstring": "Template method delegating to\n{@link #configurePropertySources(ConfigurableEnvironment, String[])} and\n{@link #configureProfiles(ConfigurableEnvironment, String[])} in that order.\nOverride this method for complete control over Environment customization, or one of\nthe above for fine-grained control over property sources or profiles, respectively.\n@param environment this application's environment\n@param args arguments passed to the {@code run} method\n@see #configureProfiles(ConfigurableEnvironment, String[])\n@see #configurePropertySources(ConfigurableEnvironment, String[])", "docstring_tokens": ["Template", "method", "delegating", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L489-L499", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.configurePropertySources", "original_string": "protected void configurePropertySources(ConfigurableEnvironment environment,\n\t\t\tString[] args) {\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tif (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n\t\t\tsources.addLast(\n\t\t\t\t\tnew MapPropertySource(\"defaultProperties\", this.defaultProperties));\n\t\t}\n\t\tif (this.addCommandLineProperties && args.length > 0) {\n\t\t\tString name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n\t\t\tif (sources.contains(name)) {\n\t\t\t\tPropertySource<?> source = sources.get(name);\n\t\t\t\tCompositePropertySource composite = new CompositePropertySource(name);\n\t\t\t\tcomposite.addPropertySource(new SimpleCommandLinePropertySource(\n\t\t\t\t\t\t\"springApplicationCommandLineArgs\", args));\n\t\t\t\tcomposite.addPropertySource(source);\n\t\t\t\tsources.replace(name, composite);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsources.addFirst(new SimpleCommandLinePropertySource(args));\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected void configurePropertySources(ConfigurableEnvironment environment,\n\t\t\tString[] args) {\n\t\tMutablePropertySources sources = environment.getPropertySources();\n\t\tif (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n\t\t\tsources.addLast(\n\t\t\t\t\tnew MapPropertySource(\"defaultProperties\", this.defaultProperties));\n\t\t}\n\t\tif (this.addCommandLineProperties && args.length > 0) {\n\t\t\tString name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n\t\t\tif (sources.contains(name)) {\n\t\t\t\tPropertySource<?> source = sources.get(name);\n\t\t\t\tCompositePropertySource composite = new CompositePropertySource(name);\n\t\t\t\tcomposite.addPropertySource(new SimpleCommandLinePropertySource(\n\t\t\t\t\t\t\"springApplicationCommandLineArgs\", args));\n\t\t\t\tcomposite.addPropertySource(source);\n\t\t\t\tsources.replace(name, composite);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsources.addFirst(new SimpleCommandLinePropertySource(args));\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "void", "configurePropertySources", "(", "ConfigurableEnvironment", "environment", ",", "String", "[", "]", "args", ")", "{", "MutablePropertySources", "sources", "=", "environment", ".", "getPropertySources", "(", ")", ";", "if", "(", "this", ".", "defaultProperties", "!=", "null", "&&", "!", "this", ".", "defaultProperties", ".", "isEmpty", "(", ")", ")", "{", "sources", ".", "addLast", "(", "new", "MapPropertySource", "(", "\"defaultProperties\"", ",", "this", ".", "defaultProperties", ")", ")", ";", "}", "if", "(", "this", ".", "addCommandLineProperties", "&&", "args", ".", "length", ">", "0", ")", "{", "String", "name", "=", "CommandLinePropertySource", ".", "COMMAND_LINE_PROPERTY_SOURCE_NAME", ";", "if", "(", "sources", ".", "contains", "(", "name", ")", ")", "{", "PropertySource", "<", "?", ">", "source", "=", "sources", ".", "get", "(", "name", ")", ";", "CompositePropertySource", "composite", "=", "new", "CompositePropertySource", "(", "name", ")", ";", "composite", ".", "addPropertySource", "(", "new", "SimpleCommandLinePropertySource", "(", "\"springApplicationCommandLineArgs\"", ",", "args", ")", ")", ";", "composite", ".", "addPropertySource", "(", "source", ")", ";", "sources", ".", "replace", "(", "name", ",", "composite", ")", ";", "}", "else", "{", "sources", ".", "addFirst", "(", "new", "SimpleCommandLinePropertySource", "(", "args", ")", ")", ";", "}", "}", "}"], "docstring": "Add, remove or re-order any {@link PropertySource}s in this application's\nenvironment.\n@param environment this application's environment\n@param args arguments passed to the {@code run} method\n@see #configureEnvironment(ConfigurableEnvironment, String[])", "docstring_tokens": ["Add", "remove", "or", "re", "-", "order", "any", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L508-L529", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.configureProfiles", "original_string": "protected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n\t\tenvironment.getActiveProfiles(); // ensure they are initialized\n\t\t// But these ones should go first (last wins in a property key clash)\n\t\tSet<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n\t\tprofiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n\t\tenvironment.setActiveProfiles(StringUtils.toStringArray(profiles));\n\t}", "language": "java", "code": "protected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n\t\tenvironment.getActiveProfiles(); // ensure they are initialized\n\t\t// But these ones should go first (last wins in a property key clash)\n\t\tSet<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n\t\tprofiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n\t\tenvironment.setActiveProfiles(StringUtils.toStringArray(profiles));\n\t}", "code_tokens": ["protected", "void", "configureProfiles", "(", "ConfigurableEnvironment", "environment", ",", "String", "[", "]", "args", ")", "{", "environment", ".", "getActiveProfiles", "(", ")", ";", "// ensure they are initialized", "// But these ones should go first (last wins in a property key clash)", "Set", "<", "String", ">", "profiles", "=", "new", "LinkedHashSet", "<>", "(", "this", ".", "additionalProfiles", ")", ";", "profiles", ".", "addAll", "(", "Arrays", ".", "asList", "(", "environment", ".", "getActiveProfiles", "(", ")", ")", ")", ";", "environment", ".", "setActiveProfiles", "(", "StringUtils", ".", "toStringArray", "(", "profiles", ")", ")", ";", "}"], "docstring": "Configure which profiles are active (or active by default) for this application\nenvironment. Additional profiles may be activated during configuration file\nprocessing via the {@code spring.profiles.active} property.\n@param environment this application's environment\n@param args arguments passed to the {@code run} method\n@see #configureEnvironment(ConfigurableEnvironment, String[])\n@see org.springframework.boot.context.config.ConfigFileApplicationListener", "docstring_tokens": ["Configure", "which", "profiles", "are", "active", "(", "or", "active", "by", "default", ")", "for", "this", "application", "environment", ".", "Additional", "profiles", "may", "be", "activated", "during", "configuration", "file", "processing", "via", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L540-L546", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.bindToSpringApplication", "original_string": "protected void bindToSpringApplication(ConfigurableEnvironment environment) {\n\t\ttry {\n\t\t\tBinder.get(environment).bind(\"spring.main\", Bindable.ofInstance(this));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Cannot bind to SpringApplication\", ex);\n\t\t}\n\t}", "language": "java", "code": "protected void bindToSpringApplication(ConfigurableEnvironment environment) {\n\t\ttry {\n\t\t\tBinder.get(environment).bind(\"spring.main\", Bindable.ofInstance(this));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Cannot bind to SpringApplication\", ex);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "bindToSpringApplication", "(", "ConfigurableEnvironment", "environment", ")", "{", "try", "{", "Binder", ".", "get", "(", "environment", ")", ".", "bind", "(", "\"spring.main\"", ",", "Bindable", ".", "ofInstance", "(", "this", ")", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Cannot bind to SpringApplication\"", ",", "ex", ")", ";", "}", "}"], "docstring": "Bind the environment to the {@link SpringApplication}.\n@param environment the environment to bind", "docstring_tokens": ["Bind", "the", "environment", "to", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L562-L569", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.createApplicationContext", "original_string": "protected ConfigurableApplicationContext createApplicationContext() {\n\t\tClass<?> contextClass = this.applicationContextClass;\n\t\tif (contextClass == null) {\n\t\t\ttry {\n\t\t\t\tswitch (this.webApplicationType) {\n\t\t\t\tcase SERVLET:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tcase REACTIVE:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Unable create a default ApplicationContext, \"\n\t\t\t\t\t\t\t\t+ \"please specify an ApplicationContextClass\",\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\t\treturn (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n\t}", "language": "java", "code": "protected ConfigurableApplicationContext createApplicationContext() {\n\t\tClass<?> contextClass = this.applicationContextClass;\n\t\tif (contextClass == null) {\n\t\t\ttry {\n\t\t\t\tswitch (this.webApplicationType) {\n\t\t\t\tcase SERVLET:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tcase REACTIVE:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcontextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Unable create a default ApplicationContext, \"\n\t\t\t\t\t\t\t\t+ \"please specify an ApplicationContextClass\",\n\t\t\t\t\t\tex);\n\t\t\t}\n\t\t}\n\t\treturn (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n\t}", "code_tokens": ["protected", "ConfigurableApplicationContext", "createApplicationContext", "(", ")", "{", "Class", "<", "?", ">", "contextClass", "=", "this", ".", "applicationContextClass", ";", "if", "(", "contextClass", "==", "null", ")", "{", "try", "{", "switch", "(", "this", ".", "webApplicationType", ")", "{", "case", "SERVLET", ":", "contextClass", "=", "Class", ".", "forName", "(", "DEFAULT_SERVLET_WEB_CONTEXT_CLASS", ")", ";", "break", ";", "case", "REACTIVE", ":", "contextClass", "=", "Class", ".", "forName", "(", "DEFAULT_REACTIVE_WEB_CONTEXT_CLASS", ")", ";", "break", ";", "default", ":", "contextClass", "=", "Class", ".", "forName", "(", "DEFAULT_CONTEXT_CLASS", ")", ";", "}", "}", "catch", "(", "ClassNotFoundException", "ex", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Unable create a default ApplicationContext, \"", "+", "\"please specify an ApplicationContextClass\"", ",", "ex", ")", ";", "}", "}", "return", "(", "ConfigurableApplicationContext", ")", "BeanUtils", ".", "instantiateClass", "(", "contextClass", ")", ";", "}"], "docstring": "Strategy method used to create the {@link ApplicationContext}. By default this\nmethod will respect any explicitly set application context or application context\nclass before falling back to a suitable default.\n@return the application context (not yet refreshed)\n@see #setApplicationContextClass(Class)", "docstring_tokens": ["Strategy", "method", "used", "to", "create", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L592-L615", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.postProcessApplicationContext", "original_string": "protected void postProcessApplicationContext(ConfigurableApplicationContext context) {\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tcontext.getBeanFactory().registerSingleton(\n\t\t\t\t\tAnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,\n\t\t\t\t\tthis.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tif (context instanceof GenericApplicationContext) {\n\t\t\t\t((GenericApplicationContext) context)\n\t\t\t\t\t\t.setResourceLoader(this.resourceLoader);\n\t\t\t}\n\t\t\tif (context instanceof DefaultResourceLoader) {\n\t\t\t\t((DefaultResourceLoader) context)\n\t\t\t\t\t\t.setClassLoader(this.resourceLoader.getClassLoader());\n\t\t\t}\n\t\t}\n\t\tif (this.addConversionService) {\n\t\t\tcontext.getBeanFactory().setConversionService(\n\t\t\t\t\tApplicationConversionService.getSharedInstance());\n\t\t}\n\t}", "language": "java", "code": "protected void postProcessApplicationContext(ConfigurableApplicationContext context) {\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tcontext.getBeanFactory().registerSingleton(\n\t\t\t\t\tAnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,\n\t\t\t\t\tthis.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tif (context instanceof GenericApplicationContext) {\n\t\t\t\t((GenericApplicationContext) context)\n\t\t\t\t\t\t.setResourceLoader(this.resourceLoader);\n\t\t\t}\n\t\t\tif (context instanceof DefaultResourceLoader) {\n\t\t\t\t((DefaultResourceLoader) context)\n\t\t\t\t\t\t.setClassLoader(this.resourceLoader.getClassLoader());\n\t\t\t}\n\t\t}\n\t\tif (this.addConversionService) {\n\t\t\tcontext.getBeanFactory().setConversionService(\n\t\t\t\t\tApplicationConversionService.getSharedInstance());\n\t\t}\n\t}", "code_tokens": ["protected", "void", "postProcessApplicationContext", "(", "ConfigurableApplicationContext", "context", ")", "{", "if", "(", "this", ".", "beanNameGenerator", "!=", "null", ")", "{", "context", ".", "getBeanFactory", "(", ")", ".", "registerSingleton", "(", "AnnotationConfigUtils", ".", "CONFIGURATION_BEAN_NAME_GENERATOR", ",", "this", ".", "beanNameGenerator", ")", ";", "}", "if", "(", "this", ".", "resourceLoader", "!=", "null", ")", "{", "if", "(", "context", "instanceof", "GenericApplicationContext", ")", "{", "(", "(", "GenericApplicationContext", ")", "context", ")", ".", "setResourceLoader", "(", "this", ".", "resourceLoader", ")", ";", "}", "if", "(", "context", "instanceof", "DefaultResourceLoader", ")", "{", "(", "(", "DefaultResourceLoader", ")", "context", ")", ".", "setClassLoader", "(", "this", ".", "resourceLoader", ".", "getClassLoader", "(", ")", ")", ";", "}", "}", "if", "(", "this", ".", "addConversionService", ")", "{", "context", ".", "getBeanFactory", "(", ")", ".", "setConversionService", "(", "ApplicationConversionService", ".", "getSharedInstance", "(", ")", ")", ";", "}", "}"], "docstring": "Apply any relevant post processing the {@link ApplicationContext}. Subclasses can\napply additional processing as required.\n@param context the application context", "docstring_tokens": ["Apply", "any", "relevant", "post", "processing", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L622-L642", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.applyInitializers", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprotected void applyInitializers(ConfigurableApplicationContext context) {\n\t\tfor (ApplicationContextInitializer initializer : getInitializers()) {\n\t\t\tClass<?> requiredType = GenericTypeResolver.resolveTypeArgument(\n\t\t\t\t\tinitializer.getClass(), ApplicationContextInitializer.class);\n\t\t\tAssert.isInstanceOf(requiredType, context, \"Unable to call initializer.\");\n\t\t\tinitializer.initialize(context);\n\t\t}\n\t}", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprotected void applyInitializers(ConfigurableApplicationContext context) {\n\t\tfor (ApplicationContextInitializer initializer : getInitializers()) {\n\t\t\tClass<?> requiredType = GenericTypeResolver.resolveTypeArgument(\n\t\t\t\t\tinitializer.getClass(), ApplicationContextInitializer.class);\n\t\t\tAssert.isInstanceOf(requiredType, context, \"Unable to call initializer.\");\n\t\t\tinitializer.initialize(context);\n\t\t}\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "protected", "void", "applyInitializers", "(", "ConfigurableApplicationContext", "context", ")", "{", "for", "(", "ApplicationContextInitializer", "initializer", ":", "getInitializers", "(", ")", ")", "{", "Class", "<", "?", ">", "requiredType", "=", "GenericTypeResolver", ".", "resolveTypeArgument", "(", "initializer", ".", "getClass", "(", ")", ",", "ApplicationContextInitializer", ".", "class", ")", ";", "Assert", ".", "isInstanceOf", "(", "requiredType", ",", "context", ",", "\"Unable to call initializer.\"", ")", ";", "initializer", ".", "initialize", "(", "context", ")", ";", "}", "}"], "docstring": "Apply any {@link ApplicationContextInitializer}s to the context before it is\nrefreshed.\n@param context the configured ApplicationContext (not refreshed yet)\n@see ConfigurableApplicationContext#refresh()", "docstring_tokens": ["Apply", "any", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L650-L658", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.logStartupProfileInfo", "original_string": "protected void logStartupProfileInfo(ConfigurableApplicationContext context) {\n\t\tLog log = getApplicationLog();\n\t\tif (log.isInfoEnabled()) {\n\t\t\tString[] activeProfiles = context.getEnvironment().getActiveProfiles();\n\t\t\tif (ObjectUtils.isEmpty(activeProfiles)) {\n\t\t\t\tString[] defaultProfiles = context.getEnvironment().getDefaultProfiles();\n\t\t\t\tlog.info(\"No active profile set, falling back to default profiles: \"\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(defaultProfiles));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.info(\"The following profiles are active: \"\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(activeProfiles));\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected void logStartupProfileInfo(ConfigurableApplicationContext context) {\n\t\tLog log = getApplicationLog();\n\t\tif (log.isInfoEnabled()) {\n\t\t\tString[] activeProfiles = context.getEnvironment().getActiveProfiles();\n\t\t\tif (ObjectUtils.isEmpty(activeProfiles)) {\n\t\t\t\tString[] defaultProfiles = context.getEnvironment().getDefaultProfiles();\n\t\t\t\tlog.info(\"No active profile set, falling back to default profiles: \"\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(defaultProfiles));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.info(\"The following profiles are active: \"\n\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(activeProfiles));\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "void", "logStartupProfileInfo", "(", "ConfigurableApplicationContext", "context", ")", "{", "Log", "log", "=", "getApplicationLog", "(", ")", ";", "if", "(", "log", ".", "isInfoEnabled", "(", ")", ")", "{", "String", "[", "]", "activeProfiles", "=", "context", ".", "getEnvironment", "(", ")", ".", "getActiveProfiles", "(", ")", ";", "if", "(", "ObjectUtils", ".", "isEmpty", "(", "activeProfiles", ")", ")", "{", "String", "[", "]", "defaultProfiles", "=", "context", ".", "getEnvironment", "(", ")", ".", "getDefaultProfiles", "(", ")", ";", "log", ".", "info", "(", "\"No active profile set, falling back to default profiles: \"", "+", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "defaultProfiles", ")", ")", ";", "}", "else", "{", "log", ".", "info", "(", "\"The following profiles are active: \"", "+", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "activeProfiles", ")", ")", ";", "}", "}", "}"], "docstring": "Called to log active profile information.\n@param context the application context", "docstring_tokens": ["Called", "to", "log", "active", "profile", "information", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L676-L690", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.load", "original_string": "protected void load(ApplicationContext context, Object[] sources) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\n\t\t\t\t\t\"Loading source \" + StringUtils.arrayToCommaDelimitedString(sources));\n\t\t}\n\t\tBeanDefinitionLoader loader = createBeanDefinitionLoader(\n\t\t\t\tgetBeanDefinitionRegistry(context), sources);\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tloader.setBeanNameGenerator(this.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tloader.setResourceLoader(this.resourceLoader);\n\t\t}\n\t\tif (this.environment != null) {\n\t\t\tloader.setEnvironment(this.environment);\n\t\t}\n\t\tloader.load();\n\t}", "language": "java", "code": "protected void load(ApplicationContext context, Object[] sources) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\n\t\t\t\t\t\"Loading source \" + StringUtils.arrayToCommaDelimitedString(sources));\n\t\t}\n\t\tBeanDefinitionLoader loader = createBeanDefinitionLoader(\n\t\t\t\tgetBeanDefinitionRegistry(context), sources);\n\t\tif (this.beanNameGenerator != null) {\n\t\t\tloader.setBeanNameGenerator(this.beanNameGenerator);\n\t\t}\n\t\tif (this.resourceLoader != null) {\n\t\t\tloader.setResourceLoader(this.resourceLoader);\n\t\t}\n\t\tif (this.environment != null) {\n\t\t\tloader.setEnvironment(this.environment);\n\t\t}\n\t\tloader.load();\n\t}", "code_tokens": ["protected", "void", "load", "(", "ApplicationContext", "context", ",", "Object", "[", "]", "sources", ")", "{", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Loading source \"", "+", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "sources", ")", ")", ";", "}", "BeanDefinitionLoader", "loader", "=", "createBeanDefinitionLoader", "(", "getBeanDefinitionRegistry", "(", "context", ")", ",", "sources", ")", ";", "if", "(", "this", ".", "beanNameGenerator", "!=", "null", ")", "{", "loader", ".", "setBeanNameGenerator", "(", "this", ".", "beanNameGenerator", ")", ";", "}", "if", "(", "this", ".", "resourceLoader", "!=", "null", ")", "{", "loader", ".", "setResourceLoader", "(", "this", ".", "resourceLoader", ")", ";", "}", "if", "(", "this", ".", "environment", "!=", "null", ")", "{", "loader", ".", "setEnvironment", "(", "this", ".", "environment", ")", ";", "}", "loader", ".", "load", "(", ")", ";", "}"], "docstring": "Load beans into the application context.\n@param context the context to load beans into\n@param sources the sources to load", "docstring_tokens": ["Load", "beans", "into", "the", "application", "context", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L708-L725", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.getBeanDefinitionRegistry", "original_string": "private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {\n\t\tif (context instanceof BeanDefinitionRegistry) {\n\t\t\treturn (BeanDefinitionRegistry) context;\n\t\t}\n\t\tif (context instanceof AbstractApplicationContext) {\n\t\t\treturn (BeanDefinitionRegistry) ((AbstractApplicationContext) context)\n\t\t\t\t\t.getBeanFactory();\n\t\t}\n\t\tthrow new IllegalStateException(\"Could not locate BeanDefinitionRegistry\");\n\t}", "language": "java", "code": "private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {\n\t\tif (context instanceof BeanDefinitionRegistry) {\n\t\t\treturn (BeanDefinitionRegistry) context;\n\t\t}\n\t\tif (context instanceof AbstractApplicationContext) {\n\t\t\treturn (BeanDefinitionRegistry) ((AbstractApplicationContext) context)\n\t\t\t\t\t.getBeanFactory();\n\t\t}\n\t\tthrow new IllegalStateException(\"Could not locate BeanDefinitionRegistry\");\n\t}", "code_tokens": ["private", "BeanDefinitionRegistry", "getBeanDefinitionRegistry", "(", "ApplicationContext", "context", ")", "{", "if", "(", "context", "instanceof", "BeanDefinitionRegistry", ")", "{", "return", "(", "BeanDefinitionRegistry", ")", "context", ";", "}", "if", "(", "context", "instanceof", "AbstractApplicationContext", ")", "{", "return", "(", "BeanDefinitionRegistry", ")", "(", "(", "AbstractApplicationContext", ")", "context", ")", ".", "getBeanFactory", "(", ")", ";", "}", "throw", "new", "IllegalStateException", "(", "\"Could not locate BeanDefinitionRegistry\"", ")", ";", "}"], "docstring": "Get the bean definition registry.\n@param context the application context\n@return the BeanDefinitionRegistry if it can be determined", "docstring_tokens": ["Get", "the", "bean", "definition", "registry", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L754-L763", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.refresh", "original_string": "protected void refresh(ApplicationContext applicationContext) {\n\t\tAssert.isInstanceOf(AbstractApplicationContext.class, applicationContext);\n\t\t((AbstractApplicationContext) applicationContext).refresh();\n\t}", "language": "java", "code": "protected void refresh(ApplicationContext applicationContext) {\n\t\tAssert.isInstanceOf(AbstractApplicationContext.class, applicationContext);\n\t\t((AbstractApplicationContext) applicationContext).refresh();\n\t}", "code_tokens": ["protected", "void", "refresh", "(", "ApplicationContext", "applicationContext", ")", "{", "Assert", ".", "isInstanceOf", "(", "AbstractApplicationContext", ".", "class", ",", "applicationContext", ")", ";", "(", "(", "AbstractApplicationContext", ")", "applicationContext", ")", ".", "refresh", "(", ")", ";", "}"], "docstring": "Refresh the underlying {@link ApplicationContext}.\n@param applicationContext the application context to refresh", "docstring_tokens": ["Refresh", "the", "underlying", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L780-L783", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.registerLoggedException", "original_string": "protected void registerLoggedException(Throwable exception) {\n\t\tSpringBootExceptionHandler handler = getSpringBootExceptionHandler();\n\t\tif (handler != null) {\n\t\t\thandler.registerLoggedException(exception);\n\t\t}\n\t}", "language": "java", "code": "protected void registerLoggedException(Throwable exception) {\n\t\tSpringBootExceptionHandler handler = getSpringBootExceptionHandler();\n\t\tif (handler != null) {\n\t\t\thandler.registerLoggedException(exception);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "registerLoggedException", "(", "Throwable", "exception", ")", "{", "SpringBootExceptionHandler", "handler", "=", "getSpringBootExceptionHandler", "(", ")", ";", "if", "(", "handler", "!=", "null", ")", "{", "handler", ".", "registerLoggedException", "(", "exception", ")", ";", "}", "}"], "docstring": "Register that the given exception has been logged. By default, if the running in\nthe main thread, this method will suppress additional printing of the stacktrace.\n@param exception the exception that was logged", "docstring_tokens": ["Register", "that", "the", "given", "exception", "has", "been", "logged", ".", "By", "default", "if", "the", "running", "in", "the", "main", "thread", "this", "method", "will", "suppress", "additional", "printing", "of", "the", "stacktrace", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L875-L880", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.setDefaultProperties", "original_string": "public void setDefaultProperties(Properties defaultProperties) {\n\t\tthis.defaultProperties = new HashMap<>();\n\t\tfor (Object key : Collections.list(defaultProperties.propertyNames())) {\n\t\t\tthis.defaultProperties.put((String) key, defaultProperties.get(key));\n\t\t}\n\t}", "language": "java", "code": "public void setDefaultProperties(Properties defaultProperties) {\n\t\tthis.defaultProperties = new HashMap<>();\n\t\tfor (Object key : Collections.list(defaultProperties.propertyNames())) {\n\t\t\tthis.defaultProperties.put((String) key, defaultProperties.get(key));\n\t\t}\n\t}", "code_tokens": ["public", "void", "setDefaultProperties", "(", "Properties", "defaultProperties", ")", "{", "this", ".", "defaultProperties", "=", "new", "HashMap", "<>", "(", ")", ";", "for", "(", "Object", "key", ":", "Collections", ".", "list", "(", "defaultProperties", ".", "propertyNames", "(", ")", ")", ")", "{", "this", ".", "defaultProperties", ".", "put", "(", "(", "String", ")", "key", ",", "defaultProperties", ".", "get", "(", "key", ")", ")", ";", "}", "}"], "docstring": "Convenient alternative to {@link #setDefaultProperties(Map)}.\n@param defaultProperties some {@link Properties}", "docstring_tokens": ["Convenient", "alternative", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1077-L1082", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.setSources", "original_string": "public void setSources(Set<String> sources) {\n\t\tAssert.notNull(sources, \"Sources must not be null\");\n\t\tthis.sources = new LinkedHashSet<>(sources);\n\t}", "language": "java", "code": "public void setSources(Set<String> sources) {\n\t\tAssert.notNull(sources, \"Sources must not be null\");\n\t\tthis.sources = new LinkedHashSet<>(sources);\n\t}", "code_tokens": ["public", "void", "setSources", "(", "Set", "<", "String", ">", "sources", ")", "{", "Assert", ".", "notNull", "(", "sources", ",", "\"Sources must not be null\"", ")", ";", "this", ".", "sources", "=", "new", "LinkedHashSet", "<>", "(", "sources", ")", ";", "}"], "docstring": "Set additional sources that will be used to create an ApplicationContext. A source\ncan be: a class name, package name, or an XML resource location.\n<p>\nSources set here will be used in addition to any primary sources set in the\nconstructor.\n@param sources the application sources to set\n@see #SpringApplication(Class...)\n@see #getAllSources()", "docstring_tokens": ["Set", "additional", "sources", "that", "will", "be", "used", "to", "create", "an", "ApplicationContext", ".", "A", "source", "can", "be", ":", "a", "class", "name", "package", "name", "or", "an", "XML", "resource", "location", ".", "<p", ">", "Sources", "set", "here", "will", "be", "used", "in", "addition", "to", "any", "primary", "sources", "set", "in", "the", "constructor", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1152-L1155", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.getAllSources", "original_string": "public Set<Object> getAllSources() {\n\t\tSet<Object> allSources = new LinkedHashSet<>();\n\t\tif (!CollectionUtils.isEmpty(this.primarySources)) {\n\t\t\tallSources.addAll(this.primarySources);\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(this.sources)) {\n\t\t\tallSources.addAll(this.sources);\n\t\t}\n\t\treturn Collections.unmodifiableSet(allSources);\n\t}", "language": "java", "code": "public Set<Object> getAllSources() {\n\t\tSet<Object> allSources = new LinkedHashSet<>();\n\t\tif (!CollectionUtils.isEmpty(this.primarySources)) {\n\t\t\tallSources.addAll(this.primarySources);\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(this.sources)) {\n\t\t\tallSources.addAll(this.sources);\n\t\t}\n\t\treturn Collections.unmodifiableSet(allSources);\n\t}", "code_tokens": ["public", "Set", "<", "Object", ">", "getAllSources", "(", ")", "{", "Set", "<", "Object", ">", "allSources", "=", "new", "LinkedHashSet", "<>", "(", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "primarySources", ")", ")", "{", "allSources", ".", "addAll", "(", "this", ".", "primarySources", ")", ";", "}", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "sources", ")", ")", "{", "allSources", ".", "addAll", "(", "this", ".", "sources", ")", ";", "}", "return", "Collections", ".", "unmodifiableSet", "(", "allSources", ")", ";", "}"], "docstring": "Return an immutable set of all the sources that will be added to an\nApplicationContext when {@link #run(String...)} is called. This method combines any\nprimary sources specified in the constructor with any additional ones that have\nbeen {@link #setSources(Set) explicitly set}.\n@return an immutable set of all sources", "docstring_tokens": ["Return", "an", "immutable", "set", "of", "all", "the", "sources", "that", "will", "be", "added", "to", "an", "ApplicationContext", "when", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1164-L1173", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.setApplicationContextClass", "original_string": "public void setApplicationContextClass(\n\t\t\tClass<? extends ConfigurableApplicationContext> applicationContextClass) {\n\t\tthis.applicationContextClass = applicationContextClass;\n\t\tthis.webApplicationType = WebApplicationType\n\t\t\t\t.deduceFromApplicationContext(applicationContextClass);\n\t}", "language": "java", "code": "public void setApplicationContextClass(\n\t\t\tClass<? extends ConfigurableApplicationContext> applicationContextClass) {\n\t\tthis.applicationContextClass = applicationContextClass;\n\t\tthis.webApplicationType = WebApplicationType\n\t\t\t\t.deduceFromApplicationContext(applicationContextClass);\n\t}", "code_tokens": ["public", "void", "setApplicationContextClass", "(", "Class", "<", "?", "extends", "ConfigurableApplicationContext", ">", "applicationContextClass", ")", "{", "this", ".", "applicationContextClass", "=", "applicationContextClass", ";", "this", ".", "webApplicationType", "=", "WebApplicationType", ".", "deduceFromApplicationContext", "(", "applicationContextClass", ")", ";", "}"], "docstring": "Sets the type of Spring {@link ApplicationContext} that will be created. If not\nspecified defaults to {@link #DEFAULT_SERVLET_WEB_CONTEXT_CLASS} for web based\napplications or {@link AnnotationConfigApplicationContext} for non web based\napplications.\n@param applicationContextClass the context class to set", "docstring_tokens": ["Sets", "the", "type", "of", "Spring", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1191-L1196", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.run", "original_string": "public static ConfigurableApplicationContext run(Class<?> primarySource,\n\t\t\tString... args) {\n\t\treturn run(new Class<?>[] { primarySource }, args);\n\t}", "language": "java", "code": "public static ConfigurableApplicationContext run(Class<?> primarySource,\n\t\t\tString... args) {\n\t\treturn run(new Class<?>[] { primarySource }, args);\n\t}", "code_tokens": ["public", "static", "ConfigurableApplicationContext", "run", "(", "Class", "<", "?", ">", "primarySource", ",", "String", "...", "args", ")", "{", "return", "run", "(", "new", "Class", "<", "?", ">", "[", "]", "{", "primarySource", "}", ",", "args", ")", ";", "}"], "docstring": "Static helper that can be used to run a {@link SpringApplication} from the\nspecified source using default settings.\n@param primarySource the primary source to load\n@param args the application arguments (usually passed from a Java main method)\n@return the running {@link ApplicationContext}", "docstring_tokens": ["Static", "helper", "that", "can", "be", "used", "to", "run", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1261-L1264", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.run", "original_string": "public static ConfigurableApplicationContext run(Class<?>[] primarySources,\n\t\t\tString[] args) {\n\t\treturn new SpringApplication(primarySources).run(args);\n\t}", "language": "java", "code": "public static ConfigurableApplicationContext run(Class<?>[] primarySources,\n\t\t\tString[] args) {\n\t\treturn new SpringApplication(primarySources).run(args);\n\t}", "code_tokens": ["public", "static", "ConfigurableApplicationContext", "run", "(", "Class", "<", "?", ">", "[", "]", "primarySources", ",", "String", "[", "]", "args", ")", "{", "return", "new", "SpringApplication", "(", "primarySources", ")", ".", "run", "(", "args", ")", ";", "}"], "docstring": "Static helper that can be used to run a {@link SpringApplication} from the\nspecified sources using default settings and user supplied arguments.\n@param primarySources the primary sources to load\n@param args the application arguments (usually passed from a Java main method)\n@return the running {@link ApplicationContext}", "docstring_tokens": ["Static", "helper", "that", "can", "be", "used", "to", "run", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1273-L1276", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java", "func_name": "SpringApplication.exit", "original_string": "public static int exit(ApplicationContext context,\n\t\t\tExitCodeGenerator... exitCodeGenerators) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tint exitCode = 0;\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\t\t\tCollection<ExitCodeGenerator> beans = context\n\t\t\t\t\t\t.getBeansOfType(ExitCodeGenerator.class).values();\n\t\t\t\tgenerators.addAll(exitCodeGenerators);\n\t\t\t\tgenerators.addAll(beans);\n\t\t\t\texitCode = generators.getExitCode();\n\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\tcontext.publishEvent(new ExitCodeEvent(context, exitCode));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tclose(context);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t}\n\t\treturn exitCode;\n\t}", "language": "java", "code": "public static int exit(ApplicationContext context,\n\t\t\tExitCodeGenerator... exitCodeGenerators) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tint exitCode = 0;\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tExitCodeGenerators generators = new ExitCodeGenerators();\n\t\t\t\tCollection<ExitCodeGenerator> beans = context\n\t\t\t\t\t\t.getBeansOfType(ExitCodeGenerator.class).values();\n\t\t\t\tgenerators.addAll(exitCodeGenerators);\n\t\t\t\tgenerators.addAll(beans);\n\t\t\t\texitCode = generators.getExitCode();\n\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\tcontext.publishEvent(new ExitCodeEvent(context, exitCode));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tclose(context);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t}\n\t\treturn exitCode;\n\t}", "code_tokens": ["public", "static", "int", "exit", "(", "ApplicationContext", "context", ",", "ExitCodeGenerator", "...", "exitCodeGenerators", ")", "{", "Assert", ".", "notNull", "(", "context", ",", "\"Context must not be null\"", ")", ";", "int", "exitCode", "=", "0", ";", "try", "{", "try", "{", "ExitCodeGenerators", "generators", "=", "new", "ExitCodeGenerators", "(", ")", ";", "Collection", "<", "ExitCodeGenerator", ">", "beans", "=", "context", ".", "getBeansOfType", "(", "ExitCodeGenerator", ".", "class", ")", ".", "values", "(", ")", ";", "generators", ".", "addAll", "(", "exitCodeGenerators", ")", ";", "generators", ".", "addAll", "(", "beans", ")", ";", "exitCode", "=", "generators", ".", "getExitCode", "(", ")", ";", "if", "(", "exitCode", "!=", "0", ")", "{", "context", ".", "publishEvent", "(", "new", "ExitCodeEvent", "(", "context", ",", "exitCode", ")", ")", ";", "}", "}", "finally", "{", "close", "(", "context", ")", ";", "}", "}", "catch", "(", "Exception", "ex", ")", "{", "ex", ".", "printStackTrace", "(", ")", ";", "exitCode", "=", "(", "exitCode", "!=", "0", ")", "?", "exitCode", ":", "1", ";", "}", "return", "exitCode", ";", "}"], "docstring": "Static helper that can be used to exit a {@link SpringApplication} and obtain a\ncode indicating success (0) or otherwise. Does not throw exceptions but should\nprint stack traces of any encountered. Applies the specified\n{@link ExitCodeGenerator} in addition to any Spring beans that implement\n{@link ExitCodeGenerator}. In the case of multiple exit codes the highest value\nwill be used (or if all values are negative, the lowest value will be used)\n@param context the context to close if possible\n@param exitCodeGenerators exist code generators\n@return the outcome (0 if successful)", "docstring_tokens": ["Static", "helper", "that", "can", "be", "used", "to", "exit", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L1305-L1330", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/cloudfoundry/CloudFoundryCustomContextPathExample.java", "func_name": "CloudFoundryCustomContextPathExample.servletWebServerFactory", "original_string": "@Bean\n\tpublic TomcatServletWebServerFactory servletWebServerFactory() {\n\t\treturn new TomcatServletWebServerFactory() {\n\n\t\t\t@Override\n\t\t\tprotected void prepareContext(Host host,\n\t\t\t\t\tServletContextInitializer[] initializers) {\n\t\t\t\tsuper.prepareContext(host, initializers);\n\t\t\t\tStandardContext child = new StandardContext();\n\t\t\t\tchild.addLifecycleListener(new Tomcat.FixContextListener());\n\t\t\t\tchild.setPath(\"/cloudfoundryapplication\");\n\t\t\t\tServletContainerInitializer initializer = getServletContextInitializer(\n\t\t\t\t\t\tgetContextPath());\n\t\t\t\tchild.addServletContainerInitializer(initializer, Collections.emptySet());\n\t\t\t\tchild.setCrossContext(true);\n\t\t\t\thost.addChild(child);\n\t\t\t}\n\n\t\t};\n\t}", "language": "java", "code": "@Bean\n\tpublic TomcatServletWebServerFactory servletWebServerFactory() {\n\t\treturn new TomcatServletWebServerFactory() {\n\n\t\t\t@Override\n\t\t\tprotected void prepareContext(Host host,\n\t\t\t\t\tServletContextInitializer[] initializers) {\n\t\t\t\tsuper.prepareContext(host, initializers);\n\t\t\t\tStandardContext child = new StandardContext();\n\t\t\t\tchild.addLifecycleListener(new Tomcat.FixContextListener());\n\t\t\t\tchild.setPath(\"/cloudfoundryapplication\");\n\t\t\t\tServletContainerInitializer initializer = getServletContextInitializer(\n\t\t\t\t\t\tgetContextPath());\n\t\t\t\tchild.addServletContainerInitializer(initializer, Collections.emptySet());\n\t\t\t\tchild.setCrossContext(true);\n\t\t\t\thost.addChild(child);\n\t\t\t}\n\n\t\t};\n\t}", "code_tokens": ["@", "Bean", "public", "TomcatServletWebServerFactory", "servletWebServerFactory", "(", ")", "{", "return", "new", "TomcatServletWebServerFactory", "(", ")", "{", "@", "Override", "protected", "void", "prepareContext", "(", "Host", "host", ",", "ServletContextInitializer", "[", "]", "initializers", ")", "{", "super", ".", "prepareContext", "(", "host", ",", "initializers", ")", ";", "StandardContext", "child", "=", "new", "StandardContext", "(", ")", ";", "child", ".", "addLifecycleListener", "(", "new", "Tomcat", ".", "FixContextListener", "(", ")", ")", ";", "child", ".", "setPath", "(", "\"/cloudfoundryapplication\"", ")", ";", "ServletContainerInitializer", "initializer", "=", "getServletContextInitializer", "(", "getContextPath", "(", ")", ")", ";", "child", ".", "addServletContainerInitializer", "(", "initializer", ",", "Collections", ".", "emptySet", "(", ")", ")", ";", "child", ".", "setCrossContext", "(", "true", ")", ";", "host", ".", "addChild", "(", "child", ")", ";", "}", "}", ";", "}"], "docstring": "tag::configuration[]", "docstring_tokens": ["tag", "::", "configuration", "[]"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/cloudfoundry/CloudFoundryCustomContextPathExample.java#L48-L67", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java", "func_name": "CompositeReactiveHealthIndicator.timeoutStrategy", "original_string": "public CompositeReactiveHealthIndicator timeoutStrategy(long timeout,\n\t\t\tHealth timeoutHealth) {\n\t\tthis.timeout = timeout;\n\t\tthis.timeoutHealth = (timeoutHealth != null) ? timeoutHealth\n\t\t\t\t: Health.unknown().build();\n\t\treturn this;\n\t}", "language": "java", "code": "public CompositeReactiveHealthIndicator timeoutStrategy(long timeout,\n\t\t\tHealth timeoutHealth) {\n\t\tthis.timeout = timeout;\n\t\tthis.timeoutHealth = (timeoutHealth != null) ? timeoutHealth\n\t\t\t\t: Health.unknown().build();\n\t\treturn this;\n\t}", "code_tokens": ["public", "CompositeReactiveHealthIndicator", "timeoutStrategy", "(", "long", "timeout", ",", "Health", "timeoutHealth", ")", "{", "this", ".", "timeout", "=", "timeout", ";", "this", ".", "timeoutHealth", "=", "(", "timeoutHealth", "!=", "null", ")", "?", "timeoutHealth", ":", "Health", ".", "unknown", "(", ")", ".", "build", "(", ")", ";", "return", "this", ";", "}"], "docstring": "Specify an alternative timeout {@link Health} if a {@link HealthIndicator} failed\nto reply after specified {@code timeout}.\n@param timeout number of milliseconds to wait before using the\n{@code timeoutHealth}\n@param timeoutHealth the {@link Health} to use if an health indicator reached the\n{@code timeout}\n@return this instance", "docstring_tokens": ["Specify", "an", "alternative", "timeout", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java#L69-L75", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.append", "original_string": "public ConditionMessage append(String message) {\n\t\tif (!StringUtils.hasLength(message)) {\n\t\t\treturn this;\n\t\t}\n\t\tif (!StringUtils.hasLength(this.message)) {\n\t\t\treturn new ConditionMessage(message);\n\t\t}\n\n\t\treturn new ConditionMessage(this.message + \" \" + message);\n\t}", "language": "java", "code": "public ConditionMessage append(String message) {\n\t\tif (!StringUtils.hasLength(message)) {\n\t\t\treturn this;\n\t\t}\n\t\tif (!StringUtils.hasLength(this.message)) {\n\t\t\treturn new ConditionMessage(message);\n\t\t}\n\n\t\treturn new ConditionMessage(this.message + \" \" + message);\n\t}", "code_tokens": ["public", "ConditionMessage", "append", "(", "String", "message", ")", "{", "if", "(", "!", "StringUtils", ".", "hasLength", "(", "message", ")", ")", "{", "return", "this", ";", "}", "if", "(", "!", "StringUtils", ".", "hasLength", "(", "this", ".", "message", ")", ")", "{", "return", "new", "ConditionMessage", "(", "message", ")", ";", "}", "return", "new", "ConditionMessage", "(", "this", ".", "message", "+", "\" \"", "+", "message", ")", ";", "}"], "docstring": "Return a new {@link ConditionMessage} based on the instance and an appended\nmessage.\n@param message the message to append\n@return a new {@link ConditionMessage} instance", "docstring_tokens": ["Return", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L89-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.andCondition", "original_string": "public Builder andCondition(Class<? extends Annotation> condition,\n\t\t\tObject... details) {\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\treturn andCondition(\"@\" + ClassUtils.getShortName(condition), details);\n\t}", "language": "java", "code": "public Builder andCondition(Class<? extends Annotation> condition,\n\t\t\tObject... details) {\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\treturn andCondition(\"@\" + ClassUtils.getShortName(condition), details);\n\t}", "code_tokens": ["public", "Builder", "andCondition", "(", "Class", "<", "?", "extends", "Annotation", ">", "condition", ",", "Object", "...", "details", ")", "{", "Assert", ".", "notNull", "(", "condition", ",", "\"Condition must not be null\"", ")", ";", "return", "andCondition", "(", "\"@\"", "+", "ClassUtils", ".", "getShortName", "(", "condition", ")", ",", "details", ")", ";", "}"], "docstring": "Return a new builder to construct a new {@link ConditionMessage} based on the\ninstance and a new condition outcome.\n@param condition the condition\n@param details details of the condition\n@return a {@link Builder} builder\n@see #andCondition(String, Object...)\n@see #forCondition(Class, Object...)", "docstring_tokens": ["Return", "a", "new", "builder", "to", "construct", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L109-L113", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.andCondition", "original_string": "public Builder andCondition(String condition, Object... details) {\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\tString detail = StringUtils.arrayToDelimitedString(details, \" \");\n\t\tif (StringUtils.hasLength(detail)) {\n\t\t\treturn new Builder(condition + \" \" + detail);\n\t\t}\n\t\treturn new Builder(condition);\n\t}", "language": "java", "code": "public Builder andCondition(String condition, Object... details) {\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\tString detail = StringUtils.arrayToDelimitedString(details, \" \");\n\t\tif (StringUtils.hasLength(detail)) {\n\t\t\treturn new Builder(condition + \" \" + detail);\n\t\t}\n\t\treturn new Builder(condition);\n\t}", "code_tokens": ["public", "Builder", "andCondition", "(", "String", "condition", ",", "Object", "...", "details", ")", "{", "Assert", ".", "notNull", "(", "condition", ",", "\"Condition must not be null\"", ")", ";", "String", "detail", "=", "StringUtils", ".", "arrayToDelimitedString", "(", "details", ",", "\" \"", ")", ";", "if", "(", "StringUtils", ".", "hasLength", "(", "detail", ")", ")", "{", "return", "new", "Builder", "(", "condition", "+", "\" \"", "+", "detail", ")", ";", "}", "return", "new", "Builder", "(", "condition", ")", ";", "}"], "docstring": "Return a new builder to construct a new {@link ConditionMessage} based on the\ninstance and a new condition outcome.\n@param condition the condition\n@param details details of the condition\n@return a {@link Builder} builder\n@see #andCondition(Class, Object...)\n@see #forCondition(String, Object...)", "docstring_tokens": ["Return", "a", "new", "builder", "to", "construct", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L124-L131", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.of", "original_string": "public static ConditionMessage of(String message, Object... args) {\n\t\tif (ObjectUtils.isEmpty(args)) {\n\t\t\treturn new ConditionMessage(message);\n\t\t}\n\t\treturn new ConditionMessage(String.format(message, args));\n\t}", "language": "java", "code": "public static ConditionMessage of(String message, Object... args) {\n\t\tif (ObjectUtils.isEmpty(args)) {\n\t\t\treturn new ConditionMessage(message);\n\t\t}\n\t\treturn new ConditionMessage(String.format(message, args));\n\t}", "code_tokens": ["public", "static", "ConditionMessage", "of", "(", "String", "message", ",", "Object", "...", "args", ")", "{", "if", "(", "ObjectUtils", ".", "isEmpty", "(", "args", ")", ")", "{", "return", "new", "ConditionMessage", "(", "message", ")", ";", "}", "return", "new", "ConditionMessage", "(", "String", ".", "format", "(", "message", ",", "args", ")", ")", ";", "}"], "docstring": "Factory method to create a new {@link ConditionMessage} with a specific message.\n@param message the source message (may be a format string if {@code args} are\nspecified)\n@param args format arguments for the message\n@return a new {@link ConditionMessage} instance", "docstring_tokens": ["Factory", "method", "to", "create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L148-L153", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.of", "original_string": "public static ConditionMessage of(Collection<? extends ConditionMessage> messages) {\n\t\tConditionMessage result = new ConditionMessage();\n\t\tif (messages != null) {\n\t\t\tfor (ConditionMessage message : messages) {\n\t\t\t\tresult = new ConditionMessage(result, message.toString());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public static ConditionMessage of(Collection<? extends ConditionMessage> messages) {\n\t\tConditionMessage result = new ConditionMessage();\n\t\tif (messages != null) {\n\t\t\tfor (ConditionMessage message : messages) {\n\t\t\t\tresult = new ConditionMessage(result, message.toString());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "static", "ConditionMessage", "of", "(", "Collection", "<", "?", "extends", "ConditionMessage", ">", "messages", ")", "{", "ConditionMessage", "result", "=", "new", "ConditionMessage", "(", ")", ";", "if", "(", "messages", "!=", "null", ")", "{", "for", "(", "ConditionMessage", "message", ":", "messages", ")", "{", "result", "=", "new", "ConditionMessage", "(", "result", ",", "message", ".", "toString", "(", ")", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Factory method to create a new {@link ConditionMessage} comprised of the specified\nmessages.\n@param messages the source messages (may be {@code null})\n@return a new {@link ConditionMessage} instance", "docstring_tokens": ["Factory", "method", "to", "create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L161-L169", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.forCondition", "original_string": "public static Builder forCondition(Class<? extends Annotation> condition,\n\t\t\tObject... details) {\n\t\treturn new ConditionMessage().andCondition(condition, details);\n\t}", "language": "java", "code": "public static Builder forCondition(Class<? extends Annotation> condition,\n\t\t\tObject... details) {\n\t\treturn new ConditionMessage().andCondition(condition, details);\n\t}", "code_tokens": ["public", "static", "Builder", "forCondition", "(", "Class", "<", "?", "extends", "Annotation", ">", "condition", ",", "Object", "...", "details", ")", "{", "return", "new", "ConditionMessage", "(", ")", ".", "andCondition", "(", "condition", ",", "details", ")", ";", "}"], "docstring": "Factory method for a builder to construct a new {@link ConditionMessage} for a\ncondition.\n@param condition the condition\n@param details details of the condition\n@return a {@link Builder} builder\n@see #forCondition(String, Object...)\n@see #andCondition(String, Object...)", "docstring_tokens": ["Factory", "method", "for", "a", "builder", "to", "construct", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L180-L183", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java", "func_name": "ConditionMessage.forCondition", "original_string": "public static Builder forCondition(String condition, Object... details) {\n\t\treturn new ConditionMessage().andCondition(condition, details);\n\t}", "language": "java", "code": "public static Builder forCondition(String condition, Object... details) {\n\t\treturn new ConditionMessage().andCondition(condition, details);\n\t}", "code_tokens": ["public", "static", "Builder", "forCondition", "(", "String", "condition", ",", "Object", "...", "details", ")", "{", "return", "new", "ConditionMessage", "(", ")", ".", "andCondition", "(", "condition", ",", "details", ")", ";", "}"], "docstring": "Factory method for a builder to construct a new {@link ConditionMessage} for a\ncondition.\n@param condition the condition\n@param details details of the condition\n@return a {@link Builder} builder\n@see #forCondition(Class, Object...)\n@see #andCondition(String, Object...)", "docstring_tokens": ["Factory", "method", "for", "a", "builder", "to", "construct", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java#L194-L196", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java", "func_name": "MimeMappings.add", "original_string": "public String add(String extension, String mimeType) {\n\t\tMapping previous = this.map.put(extension, new Mapping(extension, mimeType));\n\t\treturn (previous != null) ? previous.getMimeType() : null;\n\t}", "language": "java", "code": "public String add(String extension, String mimeType) {\n\t\tMapping previous = this.map.put(extension, new Mapping(extension, mimeType));\n\t\treturn (previous != null) ? previous.getMimeType() : null;\n\t}", "code_tokens": ["public", "String", "add", "(", "String", "extension", ",", "String", "mimeType", ")", "{", "Mapping", "previous", "=", "this", ".", "map", ".", "put", "(", "extension", ",", "new", "Mapping", "(", "extension", ",", "mimeType", ")", ")", ";", "return", "(", "previous", "!=", "null", ")", "?", "previous", ".", "getMimeType", "(", ")", ":", "null", ";", "}"], "docstring": "Add a new mime mapping.\n@param extension the file extension (excluding '.')\n@param mimeType the mime type to map\n@return any previous mapping or {@code null}", "docstring_tokens": ["Add", "a", "new", "mime", "mapping", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java#L280-L283", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java", "func_name": "MimeMappings.get", "original_string": "public String get(String extension) {\n\t\tMapping mapping = this.map.get(extension);\n\t\treturn (mapping != null) ? mapping.getMimeType() : null;\n\t}", "language": "java", "code": "public String get(String extension) {\n\t\tMapping mapping = this.map.get(extension);\n\t\treturn (mapping != null) ? mapping.getMimeType() : null;\n\t}", "code_tokens": ["public", "String", "get", "(", "String", "extension", ")", "{", "Mapping", "mapping", "=", "this", ".", "map", ".", "get", "(", "extension", ")", ";", "return", "(", "mapping", "!=", "null", ")", "?", "mapping", ".", "getMimeType", "(", ")", ":", "null", ";", "}"], "docstring": "Get a mime mapping for the given extension.\n@param extension the file extension (excluding '.')\n@return a mime mapping or {@code null}", "docstring_tokens": ["Get", "a", "mime", "mapping", "for", "the", "given", "extension", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java#L290-L293", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java", "func_name": "MimeMappings.remove", "original_string": "public String remove(String extension) {\n\t\tMapping previous = this.map.remove(extension);\n\t\treturn (previous != null) ? previous.getMimeType() : null;\n\t}", "language": "java", "code": "public String remove(String extension) {\n\t\tMapping previous = this.map.remove(extension);\n\t\treturn (previous != null) ? previous.getMimeType() : null;\n\t}", "code_tokens": ["public", "String", "remove", "(", "String", "extension", ")", "{", "Mapping", "previous", "=", "this", ".", "map", ".", "remove", "(", "extension", ")", ";", "return", "(", "previous", "!=", "null", ")", "?", "previous", ".", "getMimeType", "(", ")", ":", "null", ";", "}"], "docstring": "Remove an existing mapping.\n@param extension the file extension (excluding '.')\n@return the removed mime mapping or {@code null} if no item was removed", "docstring_tokens": ["Remove", "an", "existing", "mapping", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/MimeMappings.java#L300-L303", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "func_name": "BeanDefinitionLoader.setBeanNameGenerator", "original_string": "public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.annotatedReader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.xmlReader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t}", "language": "java", "code": "public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.annotatedReader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.xmlReader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t}", "code_tokens": ["public", "void", "setBeanNameGenerator", "(", "BeanNameGenerator", "beanNameGenerator", ")", "{", "this", ".", "annotatedReader", ".", "setBeanNameGenerator", "(", "beanNameGenerator", ")", ";", "this", ".", "xmlReader", ".", "setBeanNameGenerator", "(", "beanNameGenerator", ")", ";", "this", ".", "scanner", ".", "setBeanNameGenerator", "(", "beanNameGenerator", ")", ";", "}"], "docstring": "Set the bean name generator to be used by the underlying readers and scanner.\n@param beanNameGenerator the bean name generator", "docstring_tokens": ["Set", "the", "bean", "name", "generator", "to", "be", "used", "by", "the", "underlying", "readers", "and", "scanner", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L95-L99", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "func_name": "BeanDefinitionLoader.setResourceLoader", "original_string": "public void setResourceLoader(ResourceLoader resourceLoader) {\n\t\tthis.resourceLoader = resourceLoader;\n\t\tthis.xmlReader.setResourceLoader(resourceLoader);\n\t\tthis.scanner.setResourceLoader(resourceLoader);\n\t}", "language": "java", "code": "public void setResourceLoader(ResourceLoader resourceLoader) {\n\t\tthis.resourceLoader = resourceLoader;\n\t\tthis.xmlReader.setResourceLoader(resourceLoader);\n\t\tthis.scanner.setResourceLoader(resourceLoader);\n\t}", "code_tokens": ["public", "void", "setResourceLoader", "(", "ResourceLoader", "resourceLoader", ")", "{", "this", ".", "resourceLoader", "=", "resourceLoader", ";", "this", ".", "xmlReader", ".", "setResourceLoader", "(", "resourceLoader", ")", ";", "this", ".", "scanner", ".", "setResourceLoader", "(", "resourceLoader", ")", ";", "}"], "docstring": "Set the resource loader to be used by the underlying readers and scanner.\n@param resourceLoader the resource loader", "docstring_tokens": ["Set", "the", "resource", "loader", "to", "be", "used", "by", "the", "underlying", "readers", "and", "scanner", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L105-L109", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java", "func_name": "BeanDefinitionLoader.setEnvironment", "original_string": "public void setEnvironment(ConfigurableEnvironment environment) {\n\t\tthis.annotatedReader.setEnvironment(environment);\n\t\tthis.xmlReader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "language": "java", "code": "public void setEnvironment(ConfigurableEnvironment environment) {\n\t\tthis.annotatedReader.setEnvironment(environment);\n\t\tthis.xmlReader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "code_tokens": ["public", "void", "setEnvironment", "(", "ConfigurableEnvironment", "environment", ")", "{", "this", ".", "annotatedReader", ".", "setEnvironment", "(", "environment", ")", ";", "this", ".", "xmlReader", ".", "setEnvironment", "(", "environment", ")", ";", "this", ".", "scanner", ".", "setEnvironment", "(", "environment", ")", ";", "}"], "docstring": "Set the environment to be used by the underlying readers and scanner.\n@param environment the environment", "docstring_tokens": ["Set", "the", "environment", "to", "be", "used", "by", "the", "underlying", "readers", "and", "scanner", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L115-L119", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/MapConfigurationPropertySource.java", "func_name": "MapConfigurationPropertySource.putAll", "original_string": "public void putAll(Map<?, ?> map) {\n\t\tAssert.notNull(map, \"Map must not be null\");\n\t\tassertNotReadOnlySystemAttributesMap(map);\n\t\tmap.forEach(this::put);\n\t}", "language": "java", "code": "public void putAll(Map<?, ?> map) {\n\t\tAssert.notNull(map, \"Map must not be null\");\n\t\tassertNotReadOnlySystemAttributesMap(map);\n\t\tmap.forEach(this::put);\n\t}", "code_tokens": ["public", "void", "putAll", "(", "Map", "<", "?", ",", "?", ">", "map", ")", "{", "Assert", ".", "notNull", "(", "map", ",", "\"Map must not be null\"", ")", ";", "assertNotReadOnlySystemAttributesMap", "(", "map", ")", ";", "map", ".", "forEach", "(", "this", "::", "put", ")", ";", "}"], "docstring": "Add all entries from the specified map.\n@param map the source map", "docstring_tokens": ["Add", "all", "entries", "from", "the", "specified", "map", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/MapConfigurationPropertySource.java#L66-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/MapConfigurationPropertySource.java", "func_name": "MapConfigurationPropertySource.put", "original_string": "public void put(Object name, Object value) {\n\t\tthis.source.put((name != null) ? name.toString() : null, value);\n\t}", "language": "java", "code": "public void put(Object name, Object value) {\n\t\tthis.source.put((name != null) ? name.toString() : null, value);\n\t}", "code_tokens": ["public", "void", "put", "(", "Object", "name", ",", "Object", "value", ")", "{", "this", ".", "source", ".", "put", "(", "(", "name", "!=", "null", ")", "?", "name", ".", "toString", "(", ")", ":", "null", ",", "value", ")", ";", "}"], "docstring": "Add an individual entry.\n@param name the name\n@param value the value", "docstring_tokens": ["Add", "an", "individual", "entry", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/MapConfigurationPropertySource.java#L77-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java", "func_name": "AstUtils.hasAtLeastOneAnnotation", "original_string": "public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {\n\t\tif (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (MethodNode method : node.getMethods()) {\n\t\t\tif (hasAtLeastOneAnnotation(method, annotations)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {\n\t\tif (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (MethodNode method : node.getMethods()) {\n\t\t\tif (hasAtLeastOneAnnotation(method, annotations)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "hasAtLeastOneAnnotation", "(", "ClassNode", "node", ",", "String", "...", "annotations", ")", "{", "if", "(", "hasAtLeastOneAnnotation", "(", "(", "AnnotatedNode", ")", "node", ",", "annotations", ")", ")", "{", "return", "true", ";", "}", "for", "(", "MethodNode", "method", ":", "node", ".", "getMethods", "(", ")", ")", "{", "if", "(", "hasAtLeastOneAnnotation", "(", "method", ",", "annotations", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Determine if a {@link ClassNode} has one or more of the specified annotations on\nthe class or any of its methods. N.B. the type names are not normally fully\nqualified.\n@param node the class to examine\n@param annotations the annotations to look for\n@return {@code true} if at least one of the annotations is found, otherwise\n{@code false}", "docstring_tokens": ["Determine", "if", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java#L59-L69", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java", "func_name": "AstUtils.hasAtLeastOneAnnotation", "original_string": "public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,\n\t\t\tString... annotations) {\n\t\tfor (AnnotationNode annotationNode : node.getAnnotations()) {\n\t\t\tfor (String annotation : annotations) {\n\t\t\t\tif (PatternMatchUtils.simpleMatch(annotation,\n\t\t\t\t\t\tannotationNode.getClassNode().getName())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,\n\t\t\tString... annotations) {\n\t\tfor (AnnotationNode annotationNode : node.getAnnotations()) {\n\t\t\tfor (String annotation : annotations) {\n\t\t\t\tif (PatternMatchUtils.simpleMatch(annotation,\n\t\t\t\t\t\tannotationNode.getClassNode().getName())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "hasAtLeastOneAnnotation", "(", "AnnotatedNode", "node", ",", "String", "...", "annotations", ")", "{", "for", "(", "AnnotationNode", "annotationNode", ":", "node", ".", "getAnnotations", "(", ")", ")", "{", "for", "(", "String", "annotation", ":", "annotations", ")", "{", "if", "(", "PatternMatchUtils", ".", "simpleMatch", "(", "annotation", ",", "annotationNode", ".", "getClassNode", "(", ")", ".", "getName", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Determine if an {@link AnnotatedNode} has one or more of the specified annotations.\nN.B. the annotation type names are not normally fully qualified.\n@param node the node to examine\n@param annotations the annotations to look for\n@return {@code true} if at least one of the annotations is found, otherwise\n{@code false}", "docstring_tokens": ["Determine", "if", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java#L79-L90", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java", "func_name": "AstUtils.hasAtLeastOneFieldOrMethod", "original_string": "public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {\n\t\tSet<String> typesSet = new HashSet<>(Arrays.asList(types));\n\t\tfor (FieldNode field : node.getFields()) {\n\t\t\tif (typesSet.contains(field.getType().getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfor (MethodNode method : node.getMethods()) {\n\t\t\tif (typesSet.contains(method.getReturnType().getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {\n\t\tSet<String> typesSet = new HashSet<>(Arrays.asList(types));\n\t\tfor (FieldNode field : node.getFields()) {\n\t\t\tif (typesSet.contains(field.getType().getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tfor (MethodNode method : node.getMethods()) {\n\t\t\tif (typesSet.contains(method.getReturnType().getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "hasAtLeastOneFieldOrMethod", "(", "ClassNode", "node", ",", "String", "...", "types", ")", "{", "Set", "<", "String", ">", "typesSet", "=", "new", "HashSet", "<>", "(", "Arrays", ".", "asList", "(", "types", ")", ")", ";", "for", "(", "FieldNode", "field", ":", "node", ".", "getFields", "(", ")", ")", "{", "if", "(", "typesSet", ".", "contains", "(", "field", ".", "getType", "(", ")", ".", "getName", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "for", "(", "MethodNode", "method", ":", "node", ".", "getMethods", "(", ")", ")", "{", "if", "(", "typesSet", ".", "contains", "(", "method", ".", "getReturnType", "(", ")", ".", "getName", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Determine if a {@link ClassNode} has one or more fields of the specified types or\nmethod returning one or more of the specified types. N.B. the type names are not\nnormally fully qualified.\n@param node the class to examine\n@param types the types to look for\n@return {@code true} if at least one of the types is found, otherwise {@code false}", "docstring_tokens": ["Determine", "if", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java#L100-L113", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java", "func_name": "AstUtils.subclasses", "original_string": "public static boolean subclasses(ClassNode node, String... types) {\n\t\tfor (String type : types) {\n\t\t\tif (node.getSuperClass().getName().equals(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public static boolean subclasses(ClassNode node, String... types) {\n\t\tfor (String type : types) {\n\t\t\tif (node.getSuperClass().getName().equals(type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "static", "boolean", "subclasses", "(", "ClassNode", "node", ",", "String", "...", "types", ")", "{", "for", "(", "String", "type", ":", "types", ")", "{", "if", "(", "node", ".", "getSuperClass", "(", ")", ".", "getName", "(", ")", ".", "equals", "(", "type", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Determine if a {@link ClassNode} subclasses any of the specified types N.B. the\ntype names are not normally fully qualified.\n@param node the class to examine\n@param types the types that may have been sub-classed\n@return {@code true} if the class subclasses any of the specified types, otherwise\n{@code false}", "docstring_tokens": ["Determine", "if", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java#L123-L130", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java", "func_name": "AstUtils.getClosure", "original_string": "public static ClosureExpression getClosure(BlockStatement block, String name,\n\t\t\tboolean remove) {\n\t\tfor (ExpressionStatement statement : getExpressionStatements(block)) {\n\t\t\tExpression expression = statement.getExpression();\n\t\t\tif (expression instanceof MethodCallExpression) {\n\t\t\t\tClosureExpression closure = getClosure(name,\n\t\t\t\t\t\t(MethodCallExpression) expression);\n\t\t\t\tif (closure != null) {\n\t\t\t\t\tif (remove) {\n\t\t\t\t\t\tblock.getStatements().remove(statement);\n\t\t\t\t\t}\n\t\t\t\t\treturn closure;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public static ClosureExpression getClosure(BlockStatement block, String name,\n\t\t\tboolean remove) {\n\t\tfor (ExpressionStatement statement : getExpressionStatements(block)) {\n\t\t\tExpression expression = statement.getExpression();\n\t\t\tif (expression instanceof MethodCallExpression) {\n\t\t\t\tClosureExpression closure = getClosure(name,\n\t\t\t\t\t\t(MethodCallExpression) expression);\n\t\t\t\tif (closure != null) {\n\t\t\t\t\tif (remove) {\n\t\t\t\t\t\tblock.getStatements().remove(statement);\n\t\t\t\t\t}\n\t\t\t\t\treturn closure;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "static", "ClosureExpression", "getClosure", "(", "BlockStatement", "block", ",", "String", "name", ",", "boolean", "remove", ")", "{", "for", "(", "ExpressionStatement", "statement", ":", "getExpressionStatements", "(", "block", ")", ")", "{", "Expression", "expression", "=", "statement", ".", "getExpression", "(", ")", ";", "if", "(", "expression", "instanceof", "MethodCallExpression", ")", "{", "ClosureExpression", "closure", "=", "getClosure", "(", "name", ",", "(", "MethodCallExpression", ")", "expression", ")", ";", "if", "(", "closure", "!=", "null", ")", "{", "if", "(", "remove", ")", "{", "block", ".", "getStatements", "(", ")", ".", "remove", "(", "statement", ")", ";", "}", "return", "closure", ";", "}", "}", "}", "return", "null", ";", "}"], "docstring": "Extract a top-level {@code name} closure from inside this block if there is one,\noptionally removing it from the block at the same time.\n@param block a block statement (class definition)\n@param name the name to look for\n@param remove whether or not the extracted closure should be removed\n@return a beans Closure if one can be found, null otherwise", "docstring_tokens": ["Extract", "a", "top", "-", "level", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/AstUtils.java#L150-L166", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java", "func_name": "ConfigurationMetadata.merge", "original_string": "public void merge(ConfigurationMetadata metadata) {\n\t\tfor (ItemMetadata additionalItem : metadata.getItems()) {\n\t\t\tmergeItemMetadata(additionalItem);\n\t\t}\n\t\tfor (ItemHint itemHint : metadata.getHints()) {\n\t\t\tadd(itemHint);\n\t\t}\n\t}", "language": "java", "code": "public void merge(ConfigurationMetadata metadata) {\n\t\tfor (ItemMetadata additionalItem : metadata.getItems()) {\n\t\t\tmergeItemMetadata(additionalItem);\n\t\t}\n\t\tfor (ItemHint itemHint : metadata.getHints()) {\n\t\t\tadd(itemHint);\n\t\t}\n\t}", "code_tokens": ["public", "void", "merge", "(", "ConfigurationMetadata", "metadata", ")", "{", "for", "(", "ItemMetadata", "additionalItem", ":", "metadata", ".", "getItems", "(", ")", ")", "{", "mergeItemMetadata", "(", "additionalItem", ")", ";", "}", "for", "(", "ItemHint", "itemHint", ":", "metadata", ".", "getHints", "(", ")", ")", "{", "add", "(", "itemHint", ")", ";", "}", "}"], "docstring": "Merge the content from another {@link ConfigurationMetadata}.\n@param metadata the {@link ConfigurationMetadata} instance to merge", "docstring_tokens": ["Merge", "the", "content", "from", "another", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java#L80-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java", "func_name": "HttpTunnelServer.handle", "original_string": "public void handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\thandle(new HttpConnection(request, response));\n\t}", "language": "java", "code": "public void handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\thandle(new HttpConnection(request, response));\n\t}", "code_tokens": ["public", "void", "handle", "(", "ServerHttpRequest", "request", ",", "ServerHttpResponse", "response", ")", "throws", "IOException", "{", "handle", "(", "new", "HttpConnection", "(", "request", ",", "response", ")", ")", ";", "}"], "docstring": "Handle an incoming HTTP connection.\n@param request the HTTP request\n@param response the HTTP response\n@throws IOException in case of I/O errors", "docstring_tokens": ["Handle", "an", "incoming", "HTTP", "connection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java#L143-L146", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java", "func_name": "HttpTunnelServer.handle", "original_string": "protected void handle(HttpConnection httpConnection) throws IOException {\n\t\ttry {\n\t\t\tgetServerThread().handleIncomingHttp(httpConnection);\n\t\t\thttpConnection.waitForResponse();\n\t\t}\n\t\tcatch (ConnectException ex) {\n\t\t\thttpConnection.respond(HttpStatus.GONE);\n\t\t}\n\t}", "language": "java", "code": "protected void handle(HttpConnection httpConnection) throws IOException {\n\t\ttry {\n\t\t\tgetServerThread().handleIncomingHttp(httpConnection);\n\t\t\thttpConnection.waitForResponse();\n\t\t}\n\t\tcatch (ConnectException ex) {\n\t\t\thttpConnection.respond(HttpStatus.GONE);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "handle", "(", "HttpConnection", "httpConnection", ")", "throws", "IOException", "{", "try", "{", "getServerThread", "(", ")", ".", "handleIncomingHttp", "(", "httpConnection", ")", ";", "httpConnection", ".", "waitForResponse", "(", ")", ";", "}", "catch", "(", "ConnectException", "ex", ")", "{", "httpConnection", ".", "respond", "(", "HttpStatus", ".", "GONE", ")", ";", "}", "}"], "docstring": "Handle an incoming HTTP connection.\n@param httpConnection the HTTP connection\n@throws IOException in case of I/O errors", "docstring_tokens": ["Handle", "an", "incoming", "HTTP", "connection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java#L153-L161", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java", "func_name": "HttpTunnelServer.getServerThread", "original_string": "protected ServerThread getServerThread() throws IOException {\n\t\tsynchronized (this) {\n\t\t\tif (this.serverThread == null) {\n\t\t\t\tByteChannel channel = this.serverConnection.open(this.longPollTimeout);\n\t\t\t\tthis.serverThread = new ServerThread(channel);\n\t\t\t\tthis.serverThread.start();\n\t\t\t}\n\t\t\treturn this.serverThread;\n\t\t}\n\t}", "language": "java", "code": "protected ServerThread getServerThread() throws IOException {\n\t\tsynchronized (this) {\n\t\t\tif (this.serverThread == null) {\n\t\t\t\tByteChannel channel = this.serverConnection.open(this.longPollTimeout);\n\t\t\t\tthis.serverThread = new ServerThread(channel);\n\t\t\t\tthis.serverThread.start();\n\t\t\t}\n\t\t\treturn this.serverThread;\n\t\t}\n\t}", "code_tokens": ["protected", "ServerThread", "getServerThread", "(", ")", "throws", "IOException", "{", "synchronized", "(", "this", ")", "{", "if", "(", "this", ".", "serverThread", "==", "null", ")", "{", "ByteChannel", "channel", "=", "this", ".", "serverConnection", ".", "open", "(", "this", ".", "longPollTimeout", ")", ";", "this", ".", "serverThread", "=", "new", "ServerThread", "(", "channel", ")", ";", "this", ".", "serverThread", ".", "start", "(", ")", ";", "}", "return", "this", ".", "serverThread", ";", "}", "}"], "docstring": "Returns the active server thread, creating and starting it if necessary.\n@return the {@code ServerThread} (never {@code null})\n@throws IOException in case of I/O errors", "docstring_tokens": ["Returns", "the", "active", "server", "thread", "creating", "and", "starting", "it", "if", "necessary", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java#L168-L177", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/HttpWebServiceMessageSenderBuilder.java", "func_name": "HttpWebServiceMessageSenderBuilder.requestFactory", "original_string": "public HttpWebServiceMessageSenderBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier,\n\t\t\t\t\"RequestFactory Supplier must not be null\");\n\t\tthis.requestFactorySupplier = requestFactorySupplier;\n\t\treturn this;\n\t}", "language": "java", "code": "public HttpWebServiceMessageSenderBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier,\n\t\t\t\t\"RequestFactory Supplier must not be null\");\n\t\tthis.requestFactorySupplier = requestFactorySupplier;\n\t\treturn this;\n\t}", "code_tokens": ["public", "HttpWebServiceMessageSenderBuilder", "requestFactory", "(", "Supplier", "<", "ClientHttpRequestFactory", ">", "requestFactorySupplier", ")", "{", "Assert", ".", "notNull", "(", "requestFactorySupplier", ",", "\"RequestFactory Supplier must not be null\"", ")", ";", "this", ".", "requestFactorySupplier", "=", "requestFactorySupplier", ";", "return", "this", ";", "}"], "docstring": "Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called\nto create the HTTP-based {@link WebServiceMessageSender}.\n@param requestFactorySupplier the supplier for the request factory\n@return a new builder instance", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/webservices/client/HttpWebServiceMessageSenderBuilder.java#L71-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java", "func_name": "ReactiveCloudFoundrySecurityService.getAccessLevel", "original_string": "public Mono<AccessLevel> getAccessLevel(String token, String applicationId)\n\t\t\tthrows CloudFoundryAuthorizationException {\n\t\tString uri = getPermissionsUri(applicationId);\n\t\treturn this.webClient.get().uri(uri).header(\"Authorization\", \"bearer \" + token)\n\t\t\t\t.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)\n\t\t\t\t.onErrorMap(this::mapError);\n\t}", "language": "java", "code": "public Mono<AccessLevel> getAccessLevel(String token, String applicationId)\n\t\t\tthrows CloudFoundryAuthorizationException {\n\t\tString uri = getPermissionsUri(applicationId);\n\t\treturn this.webClient.get().uri(uri).header(\"Authorization\", \"bearer \" + token)\n\t\t\t\t.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)\n\t\t\t\t.onErrorMap(this::mapError);\n\t}", "code_tokens": ["public", "Mono", "<", "AccessLevel", ">", "getAccessLevel", "(", "String", "token", ",", "String", "applicationId", ")", "throws", "CloudFoundryAuthorizationException", "{", "String", "uri", "=", "getPermissionsUri", "(", "applicationId", ")", ";", "return", "this", ".", "webClient", ".", "get", "(", ")", ".", "uri", "(", "uri", ")", ".", "header", "(", "\"Authorization\"", ",", "\"bearer \"", "+", "token", ")", ".", "retrieve", "(", ")", ".", "bodyToMono", "(", "Map", ".", "class", ")", ".", "map", "(", "this", "::", "getAccessLevel", ")", ".", "onErrorMap", "(", "this", "::", "mapError", ")", ";", "}"], "docstring": "Return a Mono of the access level that should be granted to the given token.\n@param token the token\n@param applicationId the cloud foundry application ID\n@return a Mono of the access level that should be granted\n@throws CloudFoundryAuthorizationException if the token is not authorized", "docstring_tokens": ["Return", "a", "Mono", "of", "the", "access", "level", "that", "should", "be", "granted", "to", "the", "given", "token", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java#L86-L92", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java", "func_name": "ReactiveCloudFoundrySecurityService.getUaaUrl", "original_string": "public Mono<String> getUaaUrl() {\n\t\tthis.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + \"/info\")\n\t\t\t\t.retrieve().bodyToMono(Map.class)\n\t\t\t\t.map((response) -> (String) response.get(\"token_endpoint\")).cache()\n\t\t\t\t.onErrorMap((ex) -> new CloudFoundryAuthorizationException(\n\t\t\t\t\t\tReason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to fetch token keys from UAA.\"));\n\t\treturn this.uaaUrl;\n\t}", "language": "java", "code": "public Mono<String> getUaaUrl() {\n\t\tthis.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + \"/info\")\n\t\t\t\t.retrieve().bodyToMono(Map.class)\n\t\t\t\t.map((response) -> (String) response.get(\"token_endpoint\")).cache()\n\t\t\t\t.onErrorMap((ex) -> new CloudFoundryAuthorizationException(\n\t\t\t\t\t\tReason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to fetch token keys from UAA.\"));\n\t\treturn this.uaaUrl;\n\t}", "code_tokens": ["public", "Mono", "<", "String", ">", "getUaaUrl", "(", ")", "{", "this", ".", "uaaUrl", "=", "this", ".", "webClient", ".", "get", "(", ")", ".", "uri", "(", "this", ".", "cloudControllerUrl", "+", "\"/info\"", ")", ".", "retrieve", "(", ")", ".", "bodyToMono", "(", "Map", ".", "class", ")", ".", "map", "(", "(", "response", ")", "-", ">", "(", "String", ")", "response", ".", "get", "(", "\"token_endpoint\"", ")", ")", ".", "cache", "(", ")", ".", "onErrorMap", "(", "(", "ex", ")", "-", ">", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "SERVICE_UNAVAILABLE", ",", "\"Unable to fetch token keys from UAA.\"", ")", ")", ";", "return", "this", ".", "uaaUrl", ";", "}"], "docstring": "Return a Mono of URL of the UAA.\n@return the UAA url Mono", "docstring_tokens": ["Return", "a", "Mono", "of", "URL", "of", "the", "UAA", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityService.java#L150-L158", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractDependencyFilterMojo.java", "func_name": "AbstractDependencyFilterMojo.getFilters", "original_string": "protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {\n\t\tFilterArtifacts filters = new FilterArtifacts();\n\t\tfor (ArtifactsFilter additionalFilter : additionalFilters) {\n\t\t\tfilters.addFilter(additionalFilter);\n\t\t}\n\t\tfilters.addFilter(\n\t\t\t\tnew MatchingGroupIdFilter(cleanFilterConfig(this.excludeGroupIds)));\n\t\tif (this.includes != null && !this.includes.isEmpty()) {\n\t\t\tfilters.addFilter(new IncludeFilter(this.includes));\n\t\t}\n\t\tif (this.excludes != null && !this.excludes.isEmpty()) {\n\t\t\tfilters.addFilter(new ExcludeFilter(this.excludes));\n\t\t}\n\t\treturn filters;\n\t}", "language": "java", "code": "protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {\n\t\tFilterArtifacts filters = new FilterArtifacts();\n\t\tfor (ArtifactsFilter additionalFilter : additionalFilters) {\n\t\t\tfilters.addFilter(additionalFilter);\n\t\t}\n\t\tfilters.addFilter(\n\t\t\t\tnew MatchingGroupIdFilter(cleanFilterConfig(this.excludeGroupIds)));\n\t\tif (this.includes != null && !this.includes.isEmpty()) {\n\t\t\tfilters.addFilter(new IncludeFilter(this.includes));\n\t\t}\n\t\tif (this.excludes != null && !this.excludes.isEmpty()) {\n\t\t\tfilters.addFilter(new ExcludeFilter(this.excludes));\n\t\t}\n\t\treturn filters;\n\t}", "code_tokens": ["protected", "final", "FilterArtifacts", "getFilters", "(", "ArtifactsFilter", "...", "additionalFilters", ")", "{", "FilterArtifacts", "filters", "=", "new", "FilterArtifacts", "(", ")", ";", "for", "(", "ArtifactsFilter", "additionalFilter", ":", "additionalFilters", ")", "{", "filters", ".", "addFilter", "(", "additionalFilter", ")", ";", "}", "filters", ".", "addFilter", "(", "new", "MatchingGroupIdFilter", "(", "cleanFilterConfig", "(", "this", ".", "excludeGroupIds", ")", ")", ")", ";", "if", "(", "this", ".", "includes", "!=", "null", "&&", "!", "this", ".", "includes", ".", "isEmpty", "(", ")", ")", "{", "filters", ".", "addFilter", "(", "new", "IncludeFilter", "(", "this", ".", "includes", ")", ")", ";", "}", "if", "(", "this", ".", "excludes", "!=", "null", "&&", "!", "this", ".", "excludes", ".", "isEmpty", "(", ")", ")", "{", "filters", ".", "addFilter", "(", "new", "ExcludeFilter", "(", "this", ".", "excludes", ")", ")", ";", "}", "return", "filters", ";", "}"], "docstring": "Return artifact filters configured for this MOJO.\n@param additionalFilters optional additional filters to apply\n@return the filters", "docstring_tokens": ["Return", "artifact", "filters", "configured", "for", "this", "MOJO", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractDependencyFilterMojo.java#L95-L109", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java", "func_name": "Layouts.forFile", "original_string": "public static Layout forFile(File file) {\n\t\tif (file == null) {\n\t\t\tthrow new IllegalArgumentException(\"File must not be null\");\n\t\t}\n\t\tString lowerCaseFileName = file.getName().toLowerCase(Locale.ENGLISH);\n\t\tif (lowerCaseFileName.endsWith(\".jar\")) {\n\t\t\treturn new Jar();\n\t\t}\n\t\tif (lowerCaseFileName.endsWith(\".war\")) {\n\t\t\treturn new War();\n\t\t}\n\t\tif (file.isDirectory() || lowerCaseFileName.endsWith(\".zip\")) {\n\t\t\treturn new Expanded();\n\t\t}\n\t\tthrow new IllegalStateException(\"Unable to deduce layout for '\" + file + \"'\");\n\t}", "language": "java", "code": "public static Layout forFile(File file) {\n\t\tif (file == null) {\n\t\t\tthrow new IllegalArgumentException(\"File must not be null\");\n\t\t}\n\t\tString lowerCaseFileName = file.getName().toLowerCase(Locale.ENGLISH);\n\t\tif (lowerCaseFileName.endsWith(\".jar\")) {\n\t\t\treturn new Jar();\n\t\t}\n\t\tif (lowerCaseFileName.endsWith(\".war\")) {\n\t\t\treturn new War();\n\t\t}\n\t\tif (file.isDirectory() || lowerCaseFileName.endsWith(\".zip\")) {\n\t\t\treturn new Expanded();\n\t\t}\n\t\tthrow new IllegalStateException(\"Unable to deduce layout for '\" + file + \"'\");\n\t}", "code_tokens": ["public", "static", "Layout", "forFile", "(", "File", "file", ")", "{", "if", "(", "file", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"File must not be null\"", ")", ";", "}", "String", "lowerCaseFileName", "=", "file", ".", "getName", "(", ")", ".", "toLowerCase", "(", "Locale", ".", "ENGLISH", ")", ";", "if", "(", "lowerCaseFileName", ".", "endsWith", "(", "\".jar\"", ")", ")", "{", "return", "new", "Jar", "(", ")", ";", "}", "if", "(", "lowerCaseFileName", ".", "endsWith", "(", "\".war\"", ")", ")", "{", "return", "new", "War", "(", ")", ";", "}", "if", "(", "file", ".", "isDirectory", "(", ")", "||", "lowerCaseFileName", ".", "endsWith", "(", "\".zip\"", ")", ")", "{", "return", "new", "Expanded", "(", ")", ";", "}", "throw", "new", "IllegalStateException", "(", "\"Unable to deduce layout for '\"", "+", "file", "+", "\"'\"", ")", ";", "}"], "docstring": "Return a layout for the given source file.\n@param file the source file\n@return a {@link Layout}", "docstring_tokens": ["Return", "a", "layout", "for", "the", "given", "source", "file", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Layouts.java#L42-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonParserFactory.java", "func_name": "JsonParserFactory.getJsonParser", "original_string": "public static JsonParser getJsonParser() {\n\t\tif (ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", null)) {\n\t\t\treturn new JacksonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"com.google.gson.Gson\", null)) {\n\t\t\treturn new GsonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"org.yaml.snakeyaml.Yaml\", null)) {\n\t\t\treturn new YamlJsonParser();\n\t\t}\n\t\treturn new BasicJsonParser();\n\t}", "language": "java", "code": "public static JsonParser getJsonParser() {\n\t\tif (ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", null)) {\n\t\t\treturn new JacksonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"com.google.gson.Gson\", null)) {\n\t\t\treturn new GsonJsonParser();\n\t\t}\n\t\tif (ClassUtils.isPresent(\"org.yaml.snakeyaml.Yaml\", null)) {\n\t\t\treturn new YamlJsonParser();\n\t\t}\n\t\treturn new BasicJsonParser();\n\t}", "code_tokens": ["public", "static", "JsonParser", "getJsonParser", "(", ")", "{", "if", "(", "ClassUtils", ".", "isPresent", "(", "\"com.fasterxml.jackson.databind.ObjectMapper\"", ",", "null", ")", ")", "{", "return", "new", "JacksonJsonParser", "(", ")", ";", "}", "if", "(", "ClassUtils", ".", "isPresent", "(", "\"com.google.gson.Gson\"", ",", "null", ")", ")", "{", "return", "new", "GsonJsonParser", "(", ")", ";", "}", "if", "(", "ClassUtils", ".", "isPresent", "(", "\"org.yaml.snakeyaml.Yaml\"", ",", "null", ")", ")", "{", "return", "new", "YamlJsonParser", "(", ")", ";", "}", "return", "new", "BasicJsonParser", "(", ")", ";", "}"], "docstring": "Static factory for the \"best\" JSON parser available on the classpath. Tries\nJackson, then Gson, Snake YAML, and then falls back to the {@link BasicJsonParser}.\n@return a {@link JsonParser}", "docstring_tokens": ["Static", "factory", "for", "the", "best", "JSON", "parser", "available", "on", "the", "classpath", ".", "Tries", "Jackson", "then", "Gson", "Snake", "YAML", "and", "then", "falls", "back", "to", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonParserFactory.java#L37-L48", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfo.java", "func_name": "BuildInfo.generateBuildProperties", "original_string": "@TaskAction\n\tpublic void generateBuildProperties() {\n\t\ttry {\n\t\t\tnew BuildPropertiesWriter(new File(getDestinationDir(),\n\t\t\t\t\t\"build-info.properties\")).writeBuildProperties(new ProjectDetails(\n\t\t\t\t\t\t\tthis.properties.getGroup(),\n\t\t\t\t\t\t\t(this.properties.getArtifact() != null)\n\t\t\t\t\t\t\t\t\t? this.properties.getArtifact() : \"unspecified\",\n\t\t\t\t\t\t\tthis.properties.getVersion(), this.properties.getName(),\n\t\t\t\t\t\t\tthis.properties.getTime(),\n\t\t\t\t\t\t\tcoerceToStringValues(this.properties.getAdditional())));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new TaskExecutionException(this, ex);\n\t\t}\n\t}", "language": "java", "code": "@TaskAction\n\tpublic void generateBuildProperties() {\n\t\ttry {\n\t\t\tnew BuildPropertiesWriter(new File(getDestinationDir(),\n\t\t\t\t\t\"build-info.properties\")).writeBuildProperties(new ProjectDetails(\n\t\t\t\t\t\t\tthis.properties.getGroup(),\n\t\t\t\t\t\t\t(this.properties.getArtifact() != null)\n\t\t\t\t\t\t\t\t\t? this.properties.getArtifact() : \"unspecified\",\n\t\t\t\t\t\t\tthis.properties.getVersion(), this.properties.getName(),\n\t\t\t\t\t\t\tthis.properties.getTime(),\n\t\t\t\t\t\t\tcoerceToStringValues(this.properties.getAdditional())));\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new TaskExecutionException(this, ex);\n\t\t}\n\t}", "code_tokens": ["@", "TaskAction", "public", "void", "generateBuildProperties", "(", ")", "{", "try", "{", "new", "BuildPropertiesWriter", "(", "new", "File", "(", "getDestinationDir", "(", ")", ",", "\"build-info.properties\"", ")", ")", ".", "writeBuildProperties", "(", "new", "ProjectDetails", "(", "this", ".", "properties", ".", "getGroup", "(", ")", ",", "(", "this", ".", "properties", ".", "getArtifact", "(", ")", "!=", "null", ")", "?", "this", ".", "properties", ".", "getArtifact", "(", ")", ":", "\"unspecified\"", ",", "this", ".", "properties", ".", "getVersion", "(", ")", ",", "this", ".", "properties", ".", "getName", "(", ")", ",", "this", ".", "properties", ".", "getTime", "(", ")", ",", "coerceToStringValues", "(", "this", ".", "properties", ".", "getAdditional", "(", ")", ")", ")", ")", ";", "}", "catch", "(", "IOException", "ex", ")", "{", "throw", "new", "TaskExecutionException", "(", "this", ",", "ex", ")", ";", "}", "}"], "docstring": "Generates the {@code build-info.properties} file in the configured\n{@link #setDestinationDir(File) destination}.", "docstring_tokens": ["Generates", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfo.java#L53-L68", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RootUriTemplateHandler.java", "func_name": "RootUriTemplateHandler.addTo", "original_string": "public static RootUriTemplateHandler addTo(RestTemplate restTemplate,\n\t\t\tString rootUri) {\n\t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n\t\tRootUriTemplateHandler handler = new RootUriTemplateHandler(rootUri,\n\t\t\t\trestTemplate.getUriTemplateHandler());\n\t\trestTemplate.setUriTemplateHandler(handler);\n\t\treturn handler;\n\t}", "language": "java", "code": "public static RootUriTemplateHandler addTo(RestTemplate restTemplate,\n\t\t\tString rootUri) {\n\t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n\t\tRootUriTemplateHandler handler = new RootUriTemplateHandler(rootUri,\n\t\t\t\trestTemplate.getUriTemplateHandler());\n\t\trestTemplate.setUriTemplateHandler(handler);\n\t\treturn handler;\n\t}", "code_tokens": ["public", "static", "RootUriTemplateHandler", "addTo", "(", "RestTemplate", "restTemplate", ",", "String", "rootUri", ")", "{", "Assert", ".", "notNull", "(", "restTemplate", ",", "\"RestTemplate must not be null\"", ")", ";", "RootUriTemplateHandler", "handler", "=", "new", "RootUriTemplateHandler", "(", "rootUri", ",", "restTemplate", ".", "getUriTemplateHandler", "(", ")", ")", ";", "restTemplate", ".", "setUriTemplateHandler", "(", "handler", ")", ";", "return", "handler", ";", "}"], "docstring": "Add a {@link RootUriTemplateHandler} instance to the given {@link RestTemplate}.\n@param restTemplate the {@link RestTemplate} to add the handler to\n@param rootUri the root URI\n@return the added {@link RootUriTemplateHandler}.", "docstring_tokens": ["Add", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RootUriTemplateHandler.java#L93-L100", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/AbstractErrorController.java", "func_name": "AbstractErrorController.resolveErrorView", "original_string": "protected ModelAndView resolveErrorView(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n\t\tfor (ErrorViewResolver resolver : this.errorViewResolvers) {\n\t\t\tModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n\t\t\tif (modelAndView != null) {\n\t\t\t\treturn modelAndView;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "protected ModelAndView resolveErrorView(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n\t\tfor (ErrorViewResolver resolver : this.errorViewResolvers) {\n\t\t\tModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n\t\t\tif (modelAndView != null) {\n\t\t\t\treturn modelAndView;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["protected", "ModelAndView", "resolveErrorView", "(", "HttpServletRequest", "request", ",", "HttpServletResponse", "response", ",", "HttpStatus", "status", ",", "Map", "<", "String", ",", "Object", ">", "model", ")", "{", "for", "(", "ErrorViewResolver", "resolver", ":", "this", ".", "errorViewResolvers", ")", "{", "ModelAndView", "modelAndView", "=", "resolver", ".", "resolveErrorView", "(", "request", ",", "status", ",", "model", ")", ";", "if", "(", "modelAndView", "!=", "null", ")", "{", "return", "modelAndView", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Resolve any specific error views. By default this method delegates to\n{@link ErrorViewResolver ErrorViewResolvers}.\n@param request the request\n@param response the response\n@param status the HTTP status\n@param model the suggested model\n@return a specific {@link ModelAndView} or {@code null} if the default should be\nused\n@since 1.4.0", "docstring_tokens": ["Resolve", "any", "specific", "error", "views", ".", "By", "default", "this", "method", "delegates", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/AbstractErrorController.java#L110-L119", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java", "func_name": "StaticResourceRequest.at", "original_string": "public StaticResourceRequestMatcher at(StaticResourceLocation first,\n\t\t\tStaticResourceLocation... rest) {\n\t\treturn at(EnumSet.of(first, rest));\n\t}", "language": "java", "code": "public StaticResourceRequestMatcher at(StaticResourceLocation first,\n\t\t\tStaticResourceLocation... rest) {\n\t\treturn at(EnumSet.of(first, rest));\n\t}", "code_tokens": ["public", "StaticResourceRequestMatcher", "at", "(", "StaticResourceLocation", "first", ",", "StaticResourceLocation", "...", "rest", ")", "{", "return", "at", "(", "EnumSet", ".", "of", "(", "first", ",", "rest", ")", ")", ";", "}"], "docstring": "Returns a matcher that includes the specified {@link StaticResourceLocation\nLocations}. For example: <pre class=\"code\">\nPathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)\n</pre>\n@param first the first location to include\n@param rest additional locations to include\n@return the configured {@link RequestMatcher}", "docstring_tokens": ["Returns", "a", "matcher", "that", "includes", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java#L76-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java", "func_name": "StaticResourceRequest.at", "original_string": "public StaticResourceRequestMatcher at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceRequestMatcher(new LinkedHashSet<>(locations));\n\t}", "language": "java", "code": "public StaticResourceRequestMatcher at(Set<StaticResourceLocation> locations) {\n\t\tAssert.notNull(locations, \"Locations must not be null\");\n\t\treturn new StaticResourceRequestMatcher(new LinkedHashSet<>(locations));\n\t}", "code_tokens": ["public", "StaticResourceRequestMatcher", "at", "(", "Set", "<", "StaticResourceLocation", ">", "locations", ")", "{", "Assert", ".", "notNull", "(", "locations", ",", "\"Locations must not be null\"", ")", ";", "return", "new", "StaticResourceRequestMatcher", "(", "new", "LinkedHashSet", "<>", "(", "locations", ")", ")", ";", "}"], "docstring": "Returns a matcher that includes the specified {@link StaticResourceLocation\nLocations}. For example: <pre class=\"code\">\nPathRequest.toStaticResources().at(locations)\n</pre>\n@param locations the locations to include\n@return the configured {@link RequestMatcher}", "docstring_tokens": ["Returns", "a", "matcher", "that", "includes", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/StaticResourceRequest.java#L89-L92", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java", "func_name": "ClassLoaderFiles.addAll", "original_string": "public void addAll(ClassLoaderFiles files) {\n\t\tAssert.notNull(files, \"Files must not be null\");\n\t\tfor (SourceFolder folder : files.getSourceFolders()) {\n\t\t\tfor (Map.Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {\n\t\t\t\taddFile(folder.getName(), entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void addAll(ClassLoaderFiles files) {\n\t\tAssert.notNull(files, \"Files must not be null\");\n\t\tfor (SourceFolder folder : files.getSourceFolders()) {\n\t\t\tfor (Map.Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {\n\t\t\t\taddFile(folder.getName(), entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "addAll", "(", "ClassLoaderFiles", "files", ")", "{", "Assert", ".", "notNull", "(", "files", ",", "\"Files must not be null\"", ")", ";", "for", "(", "SourceFolder", "folder", ":", "files", ".", "getSourceFolders", "(", ")", ")", "{", "for", "(", "Map", ".", "Entry", "<", "String", ",", "ClassLoaderFile", ">", "entry", ":", "folder", ".", "getFilesEntrySet", "(", ")", ")", "{", "addFile", "(", "folder", ".", "getName", "(", ")", ",", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getValue", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Add all elements items from the specified {@link ClassLoaderFiles} to this\ninstance.\n@param files the files to add", "docstring_tokens": ["Add", "all", "elements", "items", "from", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java#L67-L74", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java", "func_name": "ClassLoaderFiles.addFile", "original_string": "public void addFile(String sourceFolder, String name, ClassLoaderFile file) {\n\t\tAssert.notNull(sourceFolder, \"SourceFolder must not be null\");\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(file, \"File must not be null\");\n\t\tremoveAll(name);\n\t\tgetOrCreateSourceFolder(sourceFolder).add(name, file);\n\t}", "language": "java", "code": "public void addFile(String sourceFolder, String name, ClassLoaderFile file) {\n\t\tAssert.notNull(sourceFolder, \"SourceFolder must not be null\");\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(file, \"File must not be null\");\n\t\tremoveAll(name);\n\t\tgetOrCreateSourceFolder(sourceFolder).add(name, file);\n\t}", "code_tokens": ["public", "void", "addFile", "(", "String", "sourceFolder", ",", "String", "name", ",", "ClassLoaderFile", "file", ")", "{", "Assert", ".", "notNull", "(", "sourceFolder", ",", "\"SourceFolder must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "file", ",", "\"File must not be null\"", ")", ";", "removeAll", "(", "name", ")", ";", "getOrCreateSourceFolder", "(", "sourceFolder", ")", ".", "add", "(", "name", ",", "file", ")", ";", "}"], "docstring": "Add a single {@link ClassLoaderFile} to the collection.\n@param sourceFolder the source folder of the file\n@param name the name of the file\n@param file the file to add", "docstring_tokens": ["Add", "a", "single", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java#L91-L97", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java", "func_name": "ClassLoaderFiles.getOrCreateSourceFolder", "original_string": "protected final SourceFolder getOrCreateSourceFolder(String name) {\n\t\tSourceFolder sourceFolder = this.sourceFolders.get(name);\n\t\tif (sourceFolder == null) {\n\t\t\tsourceFolder = new SourceFolder(name);\n\t\t\tthis.sourceFolders.put(name, sourceFolder);\n\t\t}\n\t\treturn sourceFolder;\n\t}", "language": "java", "code": "protected final SourceFolder getOrCreateSourceFolder(String name) {\n\t\tSourceFolder sourceFolder = this.sourceFolders.get(name);\n\t\tif (sourceFolder == null) {\n\t\t\tsourceFolder = new SourceFolder(name);\n\t\t\tthis.sourceFolders.put(name, sourceFolder);\n\t\t}\n\t\treturn sourceFolder;\n\t}", "code_tokens": ["protected", "final", "SourceFolder", "getOrCreateSourceFolder", "(", "String", "name", ")", "{", "SourceFolder", "sourceFolder", "=", "this", ".", "sourceFolders", ".", "get", "(", "name", ")", ";", "if", "(", "sourceFolder", "==", "null", ")", "{", "sourceFolder", "=", "new", "SourceFolder", "(", "name", ")", ";", "this", ".", "sourceFolders", ".", "put", "(", "name", ",", "sourceFolder", ")", ";", "}", "return", "sourceFolder", ";", "}"], "docstring": "Get or create a {@link SourceFolder} with the given name.\n@param name the name of the folder\n@return an existing or newly added {@link SourceFolder}", "docstring_tokens": ["Get", "or", "create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java#L110-L117", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java", "func_name": "ClassLoaderFiles.size", "original_string": "public int size() {\n\t\tint size = 0;\n\t\tfor (SourceFolder sourceFolder : this.sourceFolders.values()) {\n\t\t\tsize += sourceFolder.getFiles().size();\n\t\t}\n\t\treturn size;\n\t}", "language": "java", "code": "public int size() {\n\t\tint size = 0;\n\t\tfor (SourceFolder sourceFolder : this.sourceFolders.values()) {\n\t\t\tsize += sourceFolder.getFiles().size();\n\t\t}\n\t\treturn size;\n\t}", "code_tokens": ["public", "int", "size", "(", ")", "{", "int", "size", "=", "0", ";", "for", "(", "SourceFolder", "sourceFolder", ":", "this", ".", "sourceFolders", ".", "values", "(", ")", ")", "{", "size", "+=", "sourceFolder", ".", "getFiles", "(", ")", ".", "size", "(", ")", ";", "}", "return", "size", ";", "}"], "docstring": "Return the size of the collection.\n@return the size of the collection", "docstring_tokens": ["Return", "the", "size", "of", "the", "collection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/classloader/ClassLoaderFiles.java#L132-L138", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java", "func_name": "ExitCodeGenerators.getExitCode", "original_string": "public int getExitCode() {\n\t\tint exitCode = 0;\n\t\tfor (ExitCodeGenerator generator : this.generators) {\n\t\t\ttry {\n\t\t\t\tint value = generator.getExitCode();\n\t\t\t\tif (value > 0 && value > exitCode || value < 0 && value < exitCode) {\n\t\t\t\t\texitCode = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn exitCode;\n\t}", "language": "java", "code": "public int getExitCode() {\n\t\tint exitCode = 0;\n\t\tfor (ExitCodeGenerator generator : this.generators) {\n\t\t\ttry {\n\t\t\t\tint value = generator.getExitCode();\n\t\t\t\tif (value > 0 && value > exitCode || value < 0 && value < exitCode) {\n\t\t\t\t\texitCode = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\texitCode = (exitCode != 0) ? exitCode : 1;\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn exitCode;\n\t}", "code_tokens": ["public", "int", "getExitCode", "(", ")", "{", "int", "exitCode", "=", "0", ";", "for", "(", "ExitCodeGenerator", "generator", ":", "this", ".", "generators", ")", "{", "try", "{", "int", "value", "=", "generator", ".", "getExitCode", "(", ")", ";", "if", "(", "value", ">", "0", "&&", "value", ">", "exitCode", "||", "value", "<", "0", "&&", "value", "<", "exitCode", ")", "{", "exitCode", "=", "value", ";", "}", "}", "catch", "(", "Exception", "ex", ")", "{", "exitCode", "=", "(", "exitCode", "!=", "0", ")", "?", "exitCode", ":", "1", ";", "ex", ".", "printStackTrace", "(", ")", ";", "}", "}", "return", "exitCode", ";", "}"], "docstring": "Get the final exit code that should be returned based on all contained generators.\n@return the final exit code.", "docstring_tokens": ["Get", "the", "final", "exit", "code", "that", "should", "be", "returned", "based", "on", "all", "contained", "generators", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java#L86-L101", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/DocumentRoot.java", "func_name": "DocumentRoot.getValidDirectory", "original_string": "public final File getValidDirectory() {\n\t\tFile file = this.directory;\n\t\tfile = (file != null) ? file : getWarFileDocumentRoot();\n\t\tfile = (file != null) ? file : getExplodedWarFileDocumentRoot();\n\t\tfile = (file != null) ? file : getCommonDocumentRoot();\n\t\tif (file == null && this.logger.isDebugEnabled()) {\n\t\t\tlogNoDocumentRoots();\n\t\t}\n\t\telse if (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(\"Document root: \" + file);\n\t\t}\n\t\treturn file;\n\t}", "language": "java", "code": "public final File getValidDirectory() {\n\t\tFile file = this.directory;\n\t\tfile = (file != null) ? file : getWarFileDocumentRoot();\n\t\tfile = (file != null) ? file : getExplodedWarFileDocumentRoot();\n\t\tfile = (file != null) ? file : getCommonDocumentRoot();\n\t\tif (file == null && this.logger.isDebugEnabled()) {\n\t\t\tlogNoDocumentRoots();\n\t\t}\n\t\telse if (this.logger.isDebugEnabled()) {\n\t\t\tthis.logger.debug(\"Document root: \" + file);\n\t\t}\n\t\treturn file;\n\t}", "code_tokens": ["public", "final", "File", "getValidDirectory", "(", ")", "{", "File", "file", "=", "this", ".", "directory", ";", "file", "=", "(", "file", "!=", "null", ")", "?", "file", ":", "getWarFileDocumentRoot", "(", ")", ";", "file", "=", "(", "file", "!=", "null", ")", "?", "file", ":", "getExplodedWarFileDocumentRoot", "(", ")", ";", "file", "=", "(", "file", "!=", "null", ")", "?", "file", ":", "getCommonDocumentRoot", "(", ")", ";", "if", "(", "file", "==", "null", "&&", "this", ".", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logNoDocumentRoots", "(", ")", ";", "}", "else", "if", "(", "this", ".", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "this", ".", "logger", ".", "debug", "(", "\"Document root: \"", "+", "file", ")", ";", "}", "return", "file", ";", "}"], "docstring": "Returns the absolute document root when it points to a valid directory, logging a\nwarning and returning {@code null} otherwise.\n@return the valid document root", "docstring_tokens": ["Returns", "the", "absolute", "document", "root", "when", "it", "points", "to", "a", "valid", "directory", "logging", "a", "warning", "and", "returning", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/DocumentRoot.java#L61-L73", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/HttpRestartServer.java", "func_name": "HttpRestartServer.handle", "original_string": "public void handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\ttry {\n\t\t\tAssert.state(request.getHeaders().getContentLength() > 0, \"No content\");\n\t\t\tObjectInputStream objectInputStream = new ObjectInputStream(\n\t\t\t\t\trequest.getBody());\n\t\t\tClassLoaderFiles files = (ClassLoaderFiles) objectInputStream.readObject();\n\t\t\tobjectInputStream.close();\n\t\t\tthis.server.updateAndRestart(files);\n\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tlogger.warn(\"Unable to handler restart server HTTP request\", ex);\n\t\t\tresponse.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\t}\n\t}", "language": "java", "code": "public void handle(ServerHttpRequest request, ServerHttpResponse response)\n\t\t\tthrows IOException {\n\t\ttry {\n\t\t\tAssert.state(request.getHeaders().getContentLength() > 0, \"No content\");\n\t\t\tObjectInputStream objectInputStream = new ObjectInputStream(\n\t\t\t\t\trequest.getBody());\n\t\t\tClassLoaderFiles files = (ClassLoaderFiles) objectInputStream.readObject();\n\t\t\tobjectInputStream.close();\n\t\t\tthis.server.updateAndRestart(files);\n\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tlogger.warn(\"Unable to handler restart server HTTP request\", ex);\n\t\t\tresponse.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n\t\t}\n\t}", "code_tokens": ["public", "void", "handle", "(", "ServerHttpRequest", "request", ",", "ServerHttpResponse", "response", ")", "throws", "IOException", "{", "try", "{", "Assert", ".", "state", "(", "request", ".", "getHeaders", "(", ")", ".", "getContentLength", "(", ")", ">", "0", ",", "\"No content\"", ")", ";", "ObjectInputStream", "objectInputStream", "=", "new", "ObjectInputStream", "(", "request", ".", "getBody", "(", ")", ")", ";", "ClassLoaderFiles", "files", "=", "(", "ClassLoaderFiles", ")", "objectInputStream", ".", "readObject", "(", ")", ";", "objectInputStream", ".", "close", "(", ")", ";", "this", ".", "server", ".", "updateAndRestart", "(", "files", ")", ";", "response", ".", "setStatusCode", "(", "HttpStatus", ".", "OK", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "logger", ".", "warn", "(", "\"Unable to handler restart server HTTP request\"", ",", "ex", ")", ";", "response", ".", "setStatusCode", "(", "HttpStatus", ".", "INTERNAL_SERVER_ERROR", ")", ";", "}", "}"], "docstring": "Handle a server request.\n@param request the request\n@param response the response\n@throws IOException in case of I/O errors", "docstring_tokens": ["Handle", "a", "server", "request", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/HttpRestartServer.java#L70-L85", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java", "func_name": "TemplateLocation.exists", "original_string": "public boolean exists(ResourcePatternResolver resolver) {\n\t\tAssert.notNull(resolver, \"Resolver must not be null\");\n\t\tif (resolver.getResource(this.path).exists()) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\treturn anyExists(resolver);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}", "language": "java", "code": "public boolean exists(ResourcePatternResolver resolver) {\n\t\tAssert.notNull(resolver, \"Resolver must not be null\");\n\t\tif (resolver.getResource(this.path).exists()) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\treturn anyExists(resolver);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}", "code_tokens": ["public", "boolean", "exists", "(", "ResourcePatternResolver", "resolver", ")", "{", "Assert", ".", "notNull", "(", "resolver", ",", "\"Resolver must not be null\"", ")", ";", "if", "(", "resolver", ".", "getResource", "(", "this", ".", "path", ")", ".", "exists", "(", ")", ")", "{", "return", "true", ";", "}", "try", "{", "return", "anyExists", "(", "resolver", ")", ";", "}", "catch", "(", "IOException", "ex", ")", "{", "return", "false", ";", "}", "}"], "docstring": "Determine if this template location exists using the specified\n{@link ResourcePatternResolver}.\n@param resolver the resolver used to test if the location exists\n@return {@code true} if the location exists.", "docstring_tokens": ["Determine", "if", "this", "template", "location", "exists", "using", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java#L47-L58", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java", "func_name": "WebServerPortFileWriter.getPortFile", "original_string": "protected File getPortFile(ApplicationContext applicationContext) {\n\t\tString namespace = getServerNamespace(applicationContext);\n\t\tif (StringUtils.isEmpty(namespace)) {\n\t\t\treturn this.file;\n\t\t}\n\t\tString name = this.file.getName();\n\t\tString extension = StringUtils.getFilenameExtension(this.file.getName());\n\t\tname = name.substring(0, name.length() - extension.length() - 1);\n\t\tif (isUpperCase(name)) {\n\t\t\tname = name + \"-\" + namespace.toUpperCase(Locale.ENGLISH);\n\t\t}\n\t\telse {\n\t\t\tname = name + \"-\" + namespace.toLowerCase(Locale.ENGLISH);\n\t\t}\n\t\tif (StringUtils.hasLength(extension)) {\n\t\t\tname = name + \".\" + extension;\n\t\t}\n\t\treturn new File(this.file.getParentFile(), name);\n\t}", "language": "java", "code": "protected File getPortFile(ApplicationContext applicationContext) {\n\t\tString namespace = getServerNamespace(applicationContext);\n\t\tif (StringUtils.isEmpty(namespace)) {\n\t\t\treturn this.file;\n\t\t}\n\t\tString name = this.file.getName();\n\t\tString extension = StringUtils.getFilenameExtension(this.file.getName());\n\t\tname = name.substring(0, name.length() - extension.length() - 1);\n\t\tif (isUpperCase(name)) {\n\t\t\tname = name + \"-\" + namespace.toUpperCase(Locale.ENGLISH);\n\t\t}\n\t\telse {\n\t\t\tname = name + \"-\" + namespace.toLowerCase(Locale.ENGLISH);\n\t\t}\n\t\tif (StringUtils.hasLength(extension)) {\n\t\t\tname = name + \".\" + extension;\n\t\t}\n\t\treturn new File(this.file.getParentFile(), name);\n\t}", "code_tokens": ["protected", "File", "getPortFile", "(", "ApplicationContext", "applicationContext", ")", "{", "String", "namespace", "=", "getServerNamespace", "(", "applicationContext", ")", ";", "if", "(", "StringUtils", ".", "isEmpty", "(", "namespace", ")", ")", "{", "return", "this", ".", "file", ";", "}", "String", "name", "=", "this", ".", "file", ".", "getName", "(", ")", ";", "String", "extension", "=", "StringUtils", ".", "getFilenameExtension", "(", "this", ".", "file", ".", "getName", "(", ")", ")", ";", "name", "=", "name", ".", "substring", "(", "0", ",", "name", ".", "length", "(", ")", "-", "extension", ".", "length", "(", ")", "-", "1", ")", ";", "if", "(", "isUpperCase", "(", "name", ")", ")", "{", "name", "=", "name", "+", "\"-\"", "+", "namespace", ".", "toUpperCase", "(", "Locale", ".", "ENGLISH", ")", ";", "}", "else", "{", "name", "=", "name", "+", "\"-\"", "+", "namespace", ".", "toLowerCase", "(", "Locale", ".", "ENGLISH", ")", ";", "}", "if", "(", "StringUtils", ".", "hasLength", "(", "extension", ")", ")", "{", "name", "=", "name", "+", "\".\"", "+", "extension", ";", "}", "return", "new", "File", "(", "this", ".", "file", ".", "getParentFile", "(", ")", ",", "name", ")", ";", "}"], "docstring": "Return the actual port file that should be written for the given application\ncontext. The default implementation builds a file from the source file and the\napplication context namespace if available.\n@param applicationContext the source application context\n@return the file that should be written", "docstring_tokens": ["Return", "the", "actual", "port", "file", "that", "should", "be", "written", "for", "the", "given", "application", "context", ".", "The", "default", "implementation", "builds", "a", "file", "from", "the", "source", "file", "and", "the", "application", "context", "namespace", "if", "available", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/context/WebServerPortFileWriter.java#L106-L124", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java", "func_name": "CachingOperationInvoker.apply", "original_string": "public static OperationInvoker apply(OperationInvoker invoker, long timeToLive) {\n\t\tif (timeToLive > 0) {\n\t\t\treturn new CachingOperationInvoker(invoker, timeToLive);\n\t\t}\n\t\treturn invoker;\n\t}", "language": "java", "code": "public static OperationInvoker apply(OperationInvoker invoker, long timeToLive) {\n\t\tif (timeToLive > 0) {\n\t\t\treturn new CachingOperationInvoker(invoker, timeToLive);\n\t\t}\n\t\treturn invoker;\n\t}", "code_tokens": ["public", "static", "OperationInvoker", "apply", "(", "OperationInvoker", "invoker", ",", "long", "timeToLive", ")", "{", "if", "(", "timeToLive", ">", "0", ")", "{", "return", "new", "CachingOperationInvoker", "(", "invoker", ",", "timeToLive", ")", ";", "}", "return", "invoker", ";", "}"], "docstring": "Apply caching configuration when appropriate to the given invoker.\n@param invoker the invoker to wrap\n@param timeToLive the maximum time in milliseconds that a response can be cached\n@return a caching version of the invoker or the original instance if caching is not\nrequired", "docstring_tokens": ["Apply", "caching", "configuration", "when", "appropriate", "to", "the", "given", "invoker", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoker/cache/CachingOperationInvoker.java#L95-L100", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java", "func_name": "SpringApplicationLauncher.launch", "original_string": "public Object launch(Class<?>[] sources, String[] args) throws Exception {\n\t\tMap<String, Object> defaultProperties = new HashMap<>();\n\t\tdefaultProperties.put(\"spring.groovy.template.check-template-location\", \"false\");\n\t\tClass<?> applicationClass = this.classLoader\n\t\t\t\t.loadClass(getSpringApplicationClassName());\n\t\tConstructor<?> constructor = applicationClass.getConstructor(Class[].class);\n\t\tObject application = constructor.newInstance((Object) sources);\n\t\tapplicationClass.getMethod(\"setDefaultProperties\", Map.class).invoke(application,\n\t\t\t\tdefaultProperties);\n\t\tMethod method = applicationClass.getMethod(\"run\", String[].class);\n\t\treturn method.invoke(application, (Object) args);\n\t}", "language": "java", "code": "public Object launch(Class<?>[] sources, String[] args) throws Exception {\n\t\tMap<String, Object> defaultProperties = new HashMap<>();\n\t\tdefaultProperties.put(\"spring.groovy.template.check-template-location\", \"false\");\n\t\tClass<?> applicationClass = this.classLoader\n\t\t\t\t.loadClass(getSpringApplicationClassName());\n\t\tConstructor<?> constructor = applicationClass.getConstructor(Class[].class);\n\t\tObject application = constructor.newInstance((Object) sources);\n\t\tapplicationClass.getMethod(\"setDefaultProperties\", Map.class).invoke(application,\n\t\t\t\tdefaultProperties);\n\t\tMethod method = applicationClass.getMethod(\"run\", String[].class);\n\t\treturn method.invoke(application, (Object) args);\n\t}", "code_tokens": ["public", "Object", "launch", "(", "Class", "<", "?", ">", "[", "]", "sources", ",", "String", "[", "]", "args", ")", "throws", "Exception", "{", "Map", "<", "String", ",", "Object", ">", "defaultProperties", "=", "new", "HashMap", "<>", "(", ")", ";", "defaultProperties", ".", "put", "(", "\"spring.groovy.template.check-template-location\"", ",", "\"false\"", ")", ";", "Class", "<", "?", ">", "applicationClass", "=", "this", ".", "classLoader", ".", "loadClass", "(", "getSpringApplicationClassName", "(", ")", ")", ";", "Constructor", "<", "?", ">", "constructor", "=", "applicationClass", ".", "getConstructor", "(", "Class", "[", "]", ".", "class", ")", ";", "Object", "application", "=", "constructor", ".", "newInstance", "(", "(", "Object", ")", "sources", ")", ";", "applicationClass", ".", "getMethod", "(", "\"setDefaultProperties\"", ",", "Map", ".", "class", ")", ".", "invoke", "(", "application", ",", "defaultProperties", ")", ";", "Method", "method", "=", "applicationClass", ".", "getMethod", "(", "\"run\"", ",", "String", "[", "]", ".", "class", ")", ";", "return", "method", ".", "invoke", "(", "application", ",", "(", "Object", ")", "args", ")", ";", "}"], "docstring": "Launches the application created using the given {@code sources}. The application\nis launched with the given {@code args}.\n@param sources the sources for the application\n@param args the args for the application\n@return the application's {@code ApplicationContext}\n@throws Exception if the launch fails", "docstring_tokens": ["Launches", "the", "application", "created", "using", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/app/SpringApplicationLauncher.java#L59-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java", "func_name": "HttpTunnelPayload.assignTo", "original_string": "public void assignTo(HttpOutputMessage message) throws IOException {\n\t\tAssert.notNull(message, \"Message must not be null\");\n\t\tHttpHeaders headers = message.getHeaders();\n\t\theaders.setContentLength(this.data.remaining());\n\t\theaders.add(SEQ_HEADER, Long.toString(getSequence()));\n\t\theaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n\t\tWritableByteChannel body = Channels.newChannel(message.getBody());\n\t\twhile (this.data.hasRemaining()) {\n\t\t\tbody.write(this.data);\n\t\t}\n\t\tbody.close();\n\t}", "language": "java", "code": "public void assignTo(HttpOutputMessage message) throws IOException {\n\t\tAssert.notNull(message, \"Message must not be null\");\n\t\tHttpHeaders headers = message.getHeaders();\n\t\theaders.setContentLength(this.data.remaining());\n\t\theaders.add(SEQ_HEADER, Long.toString(getSequence()));\n\t\theaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n\t\tWritableByteChannel body = Channels.newChannel(message.getBody());\n\t\twhile (this.data.hasRemaining()) {\n\t\t\tbody.write(this.data);\n\t\t}\n\t\tbody.close();\n\t}", "code_tokens": ["public", "void", "assignTo", "(", "HttpOutputMessage", "message", ")", "throws", "IOException", "{", "Assert", ".", "notNull", "(", "message", ",", "\"Message must not be null\"", ")", ";", "HttpHeaders", "headers", "=", "message", ".", "getHeaders", "(", ")", ";", "headers", ".", "setContentLength", "(", "this", ".", "data", ".", "remaining", "(", ")", ")", ";", "headers", ".", "add", "(", "SEQ_HEADER", ",", "Long", ".", "toString", "(", "getSequence", "(", ")", ")", ")", ";", "headers", ".", "setContentType", "(", "MediaType", ".", "APPLICATION_OCTET_STREAM", ")", ";", "WritableByteChannel", "body", "=", "Channels", ".", "newChannel", "(", "message", ".", "getBody", "(", ")", ")", ";", "while", "(", "this", ".", "data", ".", "hasRemaining", "(", ")", ")", "{", "body", ".", "write", "(", "this", ".", "data", ")", ";", "}", "body", ".", "close", "(", ")", ";", "}"], "docstring": "Assign this payload to the given {@link HttpOutputMessage}.\n@param message the message to assign this payload to\n@throws IOException in case of I/O errors", "docstring_tokens": ["Assign", "this", "payload", "to", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java#L81-L92", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java", "func_name": "HttpTunnelPayload.writeTo", "original_string": "public void writeTo(WritableByteChannel channel) throws IOException {\n\t\tAssert.notNull(channel, \"Channel must not be null\");\n\t\twhile (this.data.hasRemaining()) {\n\t\t\tchannel.write(this.data);\n\t\t}\n\t}", "language": "java", "code": "public void writeTo(WritableByteChannel channel) throws IOException {\n\t\tAssert.notNull(channel, \"Channel must not be null\");\n\t\twhile (this.data.hasRemaining()) {\n\t\t\tchannel.write(this.data);\n\t\t}\n\t}", "code_tokens": ["public", "void", "writeTo", "(", "WritableByteChannel", "channel", ")", "throws", "IOException", "{", "Assert", ".", "notNull", "(", "channel", ",", "\"Channel must not be null\"", ")", ";", "while", "(", "this", ".", "data", ".", "hasRemaining", "(", ")", ")", "{", "channel", ".", "write", "(", "this", ".", "data", ")", ";", "}", "}"], "docstring": "Write the content of this payload to the given target channel.\n@param channel the channel to write to\n@throws IOException in case of I/O errors", "docstring_tokens": ["Write", "the", "content", "of", "this", "payload", "to", "the", "given", "target", "channel", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java#L99-L104", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java", "func_name": "HttpTunnelPayload.get", "original_string": "public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {\n\t\tlong length = message.getHeaders().getContentLength();\n\t\tif (length <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString seqHeader = message.getHeaders().getFirst(SEQ_HEADER);\n\t\tAssert.state(StringUtils.hasLength(seqHeader), \"Missing sequence header\");\n\t\tReadableByteChannel body = Channels.newChannel(message.getBody());\n\t\tByteBuffer payload = ByteBuffer.allocate((int) length);\n\t\twhile (payload.hasRemaining()) {\n\t\t\tbody.read(payload);\n\t\t}\n\t\tbody.close();\n\t\tpayload.flip();\n\t\treturn new HttpTunnelPayload(Long.valueOf(seqHeader), payload);\n\t}", "language": "java", "code": "public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {\n\t\tlong length = message.getHeaders().getContentLength();\n\t\tif (length <= 0) {\n\t\t\treturn null;\n\t\t}\n\t\tString seqHeader = message.getHeaders().getFirst(SEQ_HEADER);\n\t\tAssert.state(StringUtils.hasLength(seqHeader), \"Missing sequence header\");\n\t\tReadableByteChannel body = Channels.newChannel(message.getBody());\n\t\tByteBuffer payload = ByteBuffer.allocate((int) length);\n\t\twhile (payload.hasRemaining()) {\n\t\t\tbody.read(payload);\n\t\t}\n\t\tbody.close();\n\t\tpayload.flip();\n\t\treturn new HttpTunnelPayload(Long.valueOf(seqHeader), payload);\n\t}", "code_tokens": ["public", "static", "HttpTunnelPayload", "get", "(", "HttpInputMessage", "message", ")", "throws", "IOException", "{", "long", "length", "=", "message", ".", "getHeaders", "(", ")", ".", "getContentLength", "(", ")", ";", "if", "(", "length", "<=", "0", ")", "{", "return", "null", ";", "}", "String", "seqHeader", "=", "message", ".", "getHeaders", "(", ")", ".", "getFirst", "(", "SEQ_HEADER", ")", ";", "Assert", ".", "state", "(", "StringUtils", ".", "hasLength", "(", "seqHeader", ")", ",", "\"Missing sequence header\"", ")", ";", "ReadableByteChannel", "body", "=", "Channels", ".", "newChannel", "(", "message", ".", "getBody", "(", ")", ")", ";", "ByteBuffer", "payload", "=", "ByteBuffer", ".", "allocate", "(", "(", "int", ")", "length", ")", ";", "while", "(", "payload", ".", "hasRemaining", "(", ")", ")", "{", "body", ".", "read", "(", "payload", ")", ";", "}", "body", ".", "close", "(", ")", ";", "payload", ".", "flip", "(", ")", ";", "return", "new", "HttpTunnelPayload", "(", "Long", ".", "valueOf", "(", "seqHeader", ")", ",", "payload", ")", ";", "}"], "docstring": "Return the {@link HttpTunnelPayload} for the given message or {@code null} if there\nis no payload.\n@param message the HTTP message\n@return the payload or {@code null}\n@throws IOException in case of I/O errors", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java#L113-L128", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java", "func_name": "HttpTunnelPayload.getPayloadData", "original_string": "public static ByteBuffer getPayloadData(ReadableByteChannel channel)\n\t\t\tthrows IOException {\n\t\tByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);\n\t\ttry {\n\t\t\tint amountRead = channel.read(buffer);\n\t\t\tAssert.state(amountRead != -1, \"Target server connection closed\");\n\t\t\tbuffer.flip();\n\t\t\treturn buffer;\n\t\t}\n\t\tcatch (InterruptedIOException ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "language": "java", "code": "public static ByteBuffer getPayloadData(ReadableByteChannel channel)\n\t\t\tthrows IOException {\n\t\tByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);\n\t\ttry {\n\t\t\tint amountRead = channel.read(buffer);\n\t\t\tAssert.state(amountRead != -1, \"Target server connection closed\");\n\t\t\tbuffer.flip();\n\t\t\treturn buffer;\n\t\t}\n\t\tcatch (InterruptedIOException ex) {\n\t\t\treturn null;\n\t\t}\n\t}", "code_tokens": ["public", "static", "ByteBuffer", "getPayloadData", "(", "ReadableByteChannel", "channel", ")", "throws", "IOException", "{", "ByteBuffer", "buffer", "=", "ByteBuffer", ".", "allocate", "(", "BUFFER_SIZE", ")", ";", "try", "{", "int", "amountRead", "=", "channel", ".", "read", "(", "buffer", ")", ";", "Assert", ".", "state", "(", "amountRead", "!=", "-", "1", ",", "\"Target server connection closed\"", ")", ";", "buffer", ".", "flip", "(", ")", ";", "return", "buffer", ";", "}", "catch", "(", "InterruptedIOException", "ex", ")", "{", "return", "null", ";", "}", "}"], "docstring": "Return the payload data for the given source {@link ReadableByteChannel} or null if\nthe channel timed out whilst reading.\n@param channel the source channel\n@return payload data or {@code null}\n@throws IOException in case of I/O errors", "docstring_tokens": ["Return", "the", "payload", "data", "for", "the", "given", "source", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java#L137-L149", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java", "func_name": "HttpTunnelPayload.toHexString", "original_string": "public String toHexString() {\n\t\tbyte[] bytes = this.data.array();\n\t\tchar[] hex = new char[this.data.remaining() * 2];\n\t\tfor (int i = this.data.position(); i < this.data.remaining(); i++) {\n\t\t\tint b = bytes[i] & 0xFF;\n\t\t\thex[i * 2] = HEX_CHARS[b >>> 4];\n\t\t\thex[i * 2 + 1] = HEX_CHARS[b & 0x0F];\n\t\t}\n\t\treturn new String(hex);\n\t}", "language": "java", "code": "public String toHexString() {\n\t\tbyte[] bytes = this.data.array();\n\t\tchar[] hex = new char[this.data.remaining() * 2];\n\t\tfor (int i = this.data.position(); i < this.data.remaining(); i++) {\n\t\t\tint b = bytes[i] & 0xFF;\n\t\t\thex[i * 2] = HEX_CHARS[b >>> 4];\n\t\t\thex[i * 2 + 1] = HEX_CHARS[b & 0x0F];\n\t\t}\n\t\treturn new String(hex);\n\t}", "code_tokens": ["public", "String", "toHexString", "(", ")", "{", "byte", "[", "]", "bytes", "=", "this", ".", "data", ".", "array", "(", ")", ";", "char", "[", "]", "hex", "=", "new", "char", "[", "this", ".", "data", ".", "remaining", "(", ")", "*", "2", "]", ";", "for", "(", "int", "i", "=", "this", ".", "data", ".", "position", "(", ")", ";", "i", "<", "this", ".", "data", ".", "remaining", "(", ")", ";", "i", "++", ")", "{", "int", "b", "=", "bytes", "[", "i", "]", "&", "0xFF", ";", "hex", "[", "i", "*", "2", "]", "=", "HEX_CHARS", "[", "b", ">>>", "4", "]", ";", "hex", "[", "i", "*", "2", "+", "1", "]", "=", "HEX_CHARS", "[", "b", "&", "0x0F", "]", ";", "}", "return", "new", "String", "(", "hex", ")", ";", "}"], "docstring": "Return the payload as a hexadecimal string.\n@return the payload as a hex string", "docstring_tokens": ["Return", "the", "payload", "as", "a", "hexadecimal", "string", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/payload/HttpTunnelPayload.java#L175-L184", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java", "func_name": "DefaultRestartInitializer.isMain", "original_string": "protected boolean isMain(Thread thread) {\n\t\treturn thread.getName().equals(\"main\") && thread.getContextClassLoader()\n\t\t\t\t.getClass().getName().contains(\"AppClassLoader\");\n\t}", "language": "java", "code": "protected boolean isMain(Thread thread) {\n\t\treturn thread.getName().equals(\"main\") && thread.getContextClassLoader()\n\t\t\t\t.getClass().getName().contains(\"AppClassLoader\");\n\t}", "code_tokens": ["protected", "boolean", "isMain", "(", "Thread", "thread", ")", "{", "return", "thread", ".", "getName", "(", ")", ".", "equals", "(", "\"main\"", ")", "&&", "thread", ".", "getContextClassLoader", "(", ")", ".", "getClass", "(", ")", ".", "getName", "(", ")", ".", "contains", "(", "\"AppClassLoader\"", ")", ";", "}"], "docstring": "Returns if the thread is for a main invocation. By default checks the name of the\nthread and the context classloader.\n@param thread the thread to check\n@return {@code true} if the thread is a main invocation", "docstring_tokens": ["Returns", "if", "the", "thread", "is", "for", "a", "main", "invocation", ".", "By", "default", "checks", "the", "name", "of", "the", "thread", "and", "the", "context", "classloader", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java#L51-L54", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java", "func_name": "CacheMetricsRegistrar.bindCacheToRegistry", "original_string": "public boolean bindCacheToRegistry(Cache cache, Tag... tags) {\n\t\tMeterBinder meterBinder = getMeterBinder(unwrapIfNecessary(cache), Tags.of(tags));\n\t\tif (meterBinder != null) {\n\t\t\tmeterBinder.bindTo(this.registry);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "language": "java", "code": "public boolean bindCacheToRegistry(Cache cache, Tag... tags) {\n\t\tMeterBinder meterBinder = getMeterBinder(unwrapIfNecessary(cache), Tags.of(tags));\n\t\tif (meterBinder != null) {\n\t\t\tmeterBinder.bindTo(this.registry);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "code_tokens": ["public", "boolean", "bindCacheToRegistry", "(", "Cache", "cache", ",", "Tag", "...", "tags", ")", "{", "MeterBinder", "meterBinder", "=", "getMeterBinder", "(", "unwrapIfNecessary", "(", "cache", ")", ",", "Tags", ".", "of", "(", "tags", ")", ")", ";", "if", "(", "meterBinder", "!=", "null", ")", "{", "meterBinder", ".", "bindTo", "(", "this", ".", "registry", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Attempt to bind the specified {@link Cache} to the registry. Return {@code true} if\nthe cache is supported and was bound to the registry, {@code false} otherwise.\n@param cache the cache to handle\n@param tags the tags to associate with the metrics of that cache\n@return {@code true} if the {@code cache} is supported and was registered", "docstring_tokens": ["Attempt", "to", "bind", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar.java#L63-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/OriginTrackedValue.java", "func_name": "OriginTrackedValue.of", "original_string": "public static OriginTrackedValue of(Object value, Origin origin) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (value instanceof CharSequence) {\n\t\t\treturn new OriginTrackedCharSequence((CharSequence) value, origin);\n\t\t}\n\t\treturn new OriginTrackedValue(value, origin);\n\t}", "language": "java", "code": "public static OriginTrackedValue of(Object value, Origin origin) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (value instanceof CharSequence) {\n\t\t\treturn new OriginTrackedCharSequence((CharSequence) value, origin);\n\t\t}\n\t\treturn new OriginTrackedValue(value, origin);\n\t}", "code_tokens": ["public", "static", "OriginTrackedValue", "of", "(", "Object", "value", ",", "Origin", "origin", ")", "{", "if", "(", "value", "==", "null", ")", "{", "return", "null", ";", "}", "if", "(", "value", "instanceof", "CharSequence", ")", "{", "return", "new", "OriginTrackedCharSequence", "(", "(", "CharSequence", ")", "value", ",", "origin", ")", ";", "}", "return", "new", "OriginTrackedValue", "(", "value", ",", "origin", ")", ";", "}"], "docstring": "Create an {@link OriginTrackedValue} containing the specified {@code value} and\n{@code origin}. If the source value implements {@link CharSequence} then so will\nthe resulting {@link OriginTrackedValue}.\n@param value the source value\n@param origin the origin\n@return an {@link OriginTrackedValue} or {@code null} if the source value was\n{@code null}.", "docstring_tokens": ["Create", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/OriginTrackedValue.java#L85-L93", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java", "func_name": "CloudFoundrySecurityService.getAccessLevel", "original_string": "public AccessLevel getAccessLevel(String token, String applicationId)\n\t\t\tthrows CloudFoundryAuthorizationException {\n\t\ttry {\n\t\t\tURI uri = getPermissionsUri(applicationId);\n\t\t\tRequestEntity<?> request = RequestEntity.get(uri)\n\t\t\t\t\t.header(\"Authorization\", \"bearer \" + token).build();\n\t\t\tMap<?, ?> body = this.restTemplate.exchange(request, Map.class).getBody();\n\t\t\tif (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n\t\t\t\treturn AccessLevel.FULL;\n\t\t\t}\n\t\t\treturn AccessLevel.RESTRICTED;\n\t\t}\n\t\tcatch (HttpClientErrorException ex) {\n\t\t\tif (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\n\t\t\t\t\t\t\"Access denied\");\n\t\t\t}\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\t\"Invalid token\", ex);\n\t\t}\n\t\tcatch (HttpServerErrorException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\"Cloud controller not reachable\");\n\t\t}\n\t}", "language": "java", "code": "public AccessLevel getAccessLevel(String token, String applicationId)\n\t\t\tthrows CloudFoundryAuthorizationException {\n\t\ttry {\n\t\t\tURI uri = getPermissionsUri(applicationId);\n\t\t\tRequestEntity<?> request = RequestEntity.get(uri)\n\t\t\t\t\t.header(\"Authorization\", \"bearer \" + token).build();\n\t\t\tMap<?, ?> body = this.restTemplate.exchange(request, Map.class).getBody();\n\t\t\tif (Boolean.TRUE.equals(body.get(\"read_sensitive_data\"))) {\n\t\t\t\treturn AccessLevel.FULL;\n\t\t\t}\n\t\t\treturn AccessLevel.RESTRICTED;\n\t\t}\n\t\tcatch (HttpClientErrorException ex) {\n\t\t\tif (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,\n\t\t\t\t\t\t\"Access denied\");\n\t\t\t}\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,\n\t\t\t\t\t\"Invalid token\", ex);\n\t\t}\n\t\tcatch (HttpServerErrorException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\"Cloud controller not reachable\");\n\t\t}\n\t}", "code_tokens": ["public", "AccessLevel", "getAccessLevel", "(", "String", "token", ",", "String", "applicationId", ")", "throws", "CloudFoundryAuthorizationException", "{", "try", "{", "URI", "uri", "=", "getPermissionsUri", "(", "applicationId", ")", ";", "RequestEntity", "<", "?", ">", "request", "=", "RequestEntity", ".", "get", "(", "uri", ")", ".", "header", "(", "\"Authorization\"", ",", "\"bearer \"", "+", "token", ")", ".", "build", "(", ")", ";", "Map", "<", "?", ",", "?", ">", "body", "=", "this", ".", "restTemplate", ".", "exchange", "(", "request", ",", "Map", ".", "class", ")", ".", "getBody", "(", ")", ";", "if", "(", "Boolean", ".", "TRUE", ".", "equals", "(", "body", ".", "get", "(", "\"read_sensitive_data\"", ")", ")", ")", "{", "return", "AccessLevel", ".", "FULL", ";", "}", "return", "AccessLevel", ".", "RESTRICTED", ";", "}", "catch", "(", "HttpClientErrorException", "ex", ")", "{", "if", "(", "ex", ".", "getStatusCode", "(", ")", ".", "equals", "(", "HttpStatus", ".", "FORBIDDEN", ")", ")", "{", "throw", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "ACCESS_DENIED", ",", "\"Access denied\"", ")", ";", "}", "throw", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "INVALID_TOKEN", ",", "\"Invalid token\"", ",", "ex", ")", ";", "}", "catch", "(", "HttpServerErrorException", "ex", ")", "{", "throw", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "SERVICE_UNAVAILABLE", ",", "\"Cloud controller not reachable\"", ")", ";", "}", "}"], "docstring": "Return the access level that should be granted to the given token.\n@param token the token\n@param applicationId the cloud foundry application ID\n@return the access level that should be granted\n@throws CloudFoundryAuthorizationException if the token is not authorized", "docstring_tokens": ["Return", "the", "access", "level", "that", "should", "be", "granted", "to", "the", "given", "token", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java#L69-L93", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java", "func_name": "CloudFoundrySecurityService.fetchTokenKeys", "original_string": "public Map<String, String> fetchTokenKeys() {\n\t\ttry {\n\t\t\treturn extractTokenKeys(this.restTemplate\n\t\t\t\t\t.getForObject(getUaaUrl() + \"/token_keys\", Map.class));\n\t\t}\n\t\tcatch (HttpStatusCodeException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\"UAA not reachable\");\n\t\t}\n\t}", "language": "java", "code": "public Map<String, String> fetchTokenKeys() {\n\t\ttry {\n\t\t\treturn extractTokenKeys(this.restTemplate\n\t\t\t\t\t.getForObject(getUaaUrl() + \"/token_keys\", Map.class));\n\t\t}\n\t\tcatch (HttpStatusCodeException ex) {\n\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\"UAA not reachable\");\n\t\t}\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "String", ">", "fetchTokenKeys", "(", ")", "{", "try", "{", "return", "extractTokenKeys", "(", "this", ".", "restTemplate", ".", "getForObject", "(", "getUaaUrl", "(", ")", "+", "\"/token_keys\"", ",", "Map", ".", "class", ")", ")", ";", "}", "catch", "(", "HttpStatusCodeException", "ex", ")", "{", "throw", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "SERVICE_UNAVAILABLE", ",", "\"UAA not reachable\"", ")", ";", "}", "}"], "docstring": "Return all token keys known by the UAA.\n@return a list of token keys", "docstring_tokens": ["Return", "all", "token", "keys", "known", "by", "the", "UAA", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java#L109-L118", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java", "func_name": "CloudFoundrySecurityService.getUaaUrl", "original_string": "public String getUaaUrl() {\n\t\tif (this.uaaUrl == null) {\n\t\t\ttry {\n\t\t\t\tMap<?, ?> response = this.restTemplate\n\t\t\t\t\t\t.getForObject(this.cloudControllerUrl + \"/info\", Map.class);\n\t\t\t\tthis.uaaUrl = (String) response.get(\"token_endpoint\");\n\t\t\t}\n\t\t\tcatch (HttpStatusCodeException ex) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to fetch token keys from UAA\");\n\t\t\t}\n\t\t}\n\t\treturn this.uaaUrl;\n\t}", "language": "java", "code": "public String getUaaUrl() {\n\t\tif (this.uaaUrl == null) {\n\t\t\ttry {\n\t\t\t\tMap<?, ?> response = this.restTemplate\n\t\t\t\t\t\t.getForObject(this.cloudControllerUrl + \"/info\", Map.class);\n\t\t\t\tthis.uaaUrl = (String) response.get(\"token_endpoint\");\n\t\t\t}\n\t\t\tcatch (HttpStatusCodeException ex) {\n\t\t\t\tthrow new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,\n\t\t\t\t\t\t\"Unable to fetch token keys from UAA\");\n\t\t\t}\n\t\t}\n\t\treturn this.uaaUrl;\n\t}", "code_tokens": ["public", "String", "getUaaUrl", "(", ")", "{", "if", "(", "this", ".", "uaaUrl", "==", "null", ")", "{", "try", "{", "Map", "<", "?", ",", "?", ">", "response", "=", "this", ".", "restTemplate", ".", "getForObject", "(", "this", ".", "cloudControllerUrl", "+", "\"/info\"", ",", "Map", ".", "class", ")", ";", "this", ".", "uaaUrl", "=", "(", "String", ")", "response", ".", "get", "(", "\"token_endpoint\"", ")", ";", "}", "catch", "(", "HttpStatusCodeException", "ex", ")", "{", "throw", "new", "CloudFoundryAuthorizationException", "(", "Reason", ".", "SERVICE_UNAVAILABLE", ",", "\"Unable to fetch token keys from UAA\"", ")", ";", "}", "}", "return", "this", ".", "uaaUrl", ";", "}"], "docstring": "Return the URL of the UAA.\n@return the UAA url", "docstring_tokens": ["Return", "the", "URL", "of", "the", "UAA", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundrySecurityService.java#L133-L146", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/logger/DevToolsLogFactory.java", "func_name": "DevToolsLogFactory.getLog", "original_string": "public static Log getLog(Class<?> source) {\n\t\tsynchronized (logs) {\n\t\t\tLog log = new DeferredLog();\n\t\t\tlogs.put(log, source);\n\t\t\treturn log;\n\t\t}\n\t}", "language": "java", "code": "public static Log getLog(Class<?> source) {\n\t\tsynchronized (logs) {\n\t\t\tLog log = new DeferredLog();\n\t\t\tlogs.put(log, source);\n\t\t\treturn log;\n\t\t}\n\t}", "code_tokens": ["public", "static", "Log", "getLog", "(", "Class", "<", "?", ">", "source", ")", "{", "synchronized", "(", "logs", ")", "{", "Log", "log", "=", "new", "DeferredLog", "(", ")", ";", "logs", ".", "put", "(", "log", ",", "source", ")", ";", "return", "log", ";", "}", "}"], "docstring": "Get a {@link Log} instance for the specified source that will be automatically\n{@link DeferredLog#switchTo(Class) switched} when the\n{@link ApplicationPreparedEvent context is prepared}.\n@param source the source for logging\n@return a {@link DeferredLog} instance", "docstring_tokens": ["Get", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/logger/DevToolsLogFactory.java#L48-L54", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java", "func_name": "ServletRegistrationBean.setUrlMappings", "original_string": "public void setUrlMappings(Collection<String> urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings = new LinkedHashSet<>(urlMappings);\n\t}", "language": "java", "code": "public void setUrlMappings(Collection<String> urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings = new LinkedHashSet<>(urlMappings);\n\t}", "code_tokens": ["public", "void", "setUrlMappings", "(", "Collection", "<", "String", ">", "urlMappings", ")", "{", "Assert", ".", "notNull", "(", "urlMappings", ",", "\"UrlMappings must not be null\"", ")", ";", "this", ".", "urlMappings", "=", "new", "LinkedHashSet", "<>", "(", "urlMappings", ")", ";", "}"], "docstring": "Set the URL mappings for the servlet. If not specified the mapping will default to\n'/'. This will replace any previously specified mappings.\n@param urlMappings the mappings to set\n@see #addUrlMappings(String...)", "docstring_tokens": ["Set", "the", "URL", "mappings", "for", "the", "servlet", ".", "If", "not", "specified", "the", "mapping", "will", "default", "to", "/", ".", "This", "will", "replace", "any", "previously", "specified", "mappings", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java#L121-L124", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java", "func_name": "ServletRegistrationBean.addUrlMappings", "original_string": "public void addUrlMappings(String... urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings.addAll(Arrays.asList(urlMappings));\n\t}", "language": "java", "code": "public void addUrlMappings(String... urlMappings) {\n\t\tAssert.notNull(urlMappings, \"UrlMappings must not be null\");\n\t\tthis.urlMappings.addAll(Arrays.asList(urlMappings));\n\t}", "code_tokens": ["public", "void", "addUrlMappings", "(", "String", "...", "urlMappings", ")", "{", "Assert", ".", "notNull", "(", "urlMappings", ",", "\"UrlMappings must not be null\"", ")", ";", "this", ".", "urlMappings", ".", "addAll", "(", "Arrays", ".", "asList", "(", "urlMappings", ")", ")", ";", "}"], "docstring": "Add URL mappings, as defined in the Servlet specification, for the servlet.\n@param urlMappings the mappings to add\n@see #setUrlMappings(Collection)", "docstring_tokens": ["Add", "URL", "mappings", "as", "defined", "in", "the", "Servlet", "specification", "for", "the", "servlet", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java#L140-L143", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java", "func_name": "ServletRegistrationBean.configure", "original_string": "@Override\n\tprotected void configure(ServletRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tString[] urlMapping = StringUtils.toStringArray(this.urlMappings);\n\t\tif (urlMapping.length == 0 && this.alwaysMapUrl) {\n\t\t\turlMapping = DEFAULT_MAPPINGS;\n\t\t}\n\t\tif (!ObjectUtils.isEmpty(urlMapping)) {\n\t\t\tregistration.addMapping(urlMapping);\n\t\t}\n\t\tregistration.setLoadOnStartup(this.loadOnStartup);\n\t\tif (this.multipartConfig != null) {\n\t\t\tregistration.setMultipartConfig(this.multipartConfig);\n\t\t}\n\t}", "language": "java", "code": "@Override\n\tprotected void configure(ServletRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tString[] urlMapping = StringUtils.toStringArray(this.urlMappings);\n\t\tif (urlMapping.length == 0 && this.alwaysMapUrl) {\n\t\t\turlMapping = DEFAULT_MAPPINGS;\n\t\t}\n\t\tif (!ObjectUtils.isEmpty(urlMapping)) {\n\t\t\tregistration.addMapping(urlMapping);\n\t\t}\n\t\tregistration.setLoadOnStartup(this.loadOnStartup);\n\t\tif (this.multipartConfig != null) {\n\t\t\tregistration.setMultipartConfig(this.multipartConfig);\n\t\t}\n\t}", "code_tokens": ["@", "Override", "protected", "void", "configure", "(", "ServletRegistration", ".", "Dynamic", "registration", ")", "{", "super", ".", "configure", "(", "registration", ")", ";", "String", "[", "]", "urlMapping", "=", "StringUtils", ".", "toStringArray", "(", "this", ".", "urlMappings", ")", ";", "if", "(", "urlMapping", ".", "length", "==", "0", "&&", "this", ".", "alwaysMapUrl", ")", "{", "urlMapping", "=", "DEFAULT_MAPPINGS", ";", "}", "if", "(", "!", "ObjectUtils", ".", "isEmpty", "(", "urlMapping", ")", ")", "{", "registration", ".", "addMapping", "(", "urlMapping", ")", ";", "}", "registration", ".", "setLoadOnStartup", "(", "this", ".", "loadOnStartup", ")", ";", "if", "(", "this", ".", "multipartConfig", "!=", "null", ")", "{", "registration", ".", "setMultipartConfig", "(", "this", ".", "multipartConfig", ")", ";", "}", "}"], "docstring": "Configure registration settings. Subclasses can override this method to perform\nadditional configuration if required.\n@param registration the registration", "docstring_tokens": ["Configure", "registration", "settings", ".", "Subclasses", "can", "override", "this", "method", "to", "perform", "additional", "configuration", "if", "required", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java#L189-L203", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JavaExecutable.java", "func_name": "JavaExecutable.processBuilder", "original_string": "public ProcessBuilder processBuilder(String... arguments) {\n\t\tProcessBuilder processBuilder = new ProcessBuilder(toString());\n\t\tprocessBuilder.command().addAll(Arrays.asList(arguments));\n\t\treturn processBuilder;\n\t}", "language": "java", "code": "public ProcessBuilder processBuilder(String... arguments) {\n\t\tProcessBuilder processBuilder = new ProcessBuilder(toString());\n\t\tprocessBuilder.command().addAll(Arrays.asList(arguments));\n\t\treturn processBuilder;\n\t}", "code_tokens": ["public", "ProcessBuilder", "processBuilder", "(", "String", "...", "arguments", ")", "{", "ProcessBuilder", "processBuilder", "=", "new", "ProcessBuilder", "(", "toString", "(", ")", ")", ";", "processBuilder", ".", "command", "(", ")", ".", "addAll", "(", "Arrays", ".", "asList", "(", "arguments", ")", ")", ";", "return", "processBuilder", ";", "}"], "docstring": "Create a new {@link ProcessBuilder} that will run with the Java executable.\n@param arguments the command arguments\n@return a {@link ProcessBuilder}", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JavaExecutable.java#L56-L60", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java", "func_name": "LoggingApplicationListener.initialize", "original_string": "protected void initialize(ConfigurableEnvironment environment,\n\t\t\tClassLoader classLoader) {\n\t\tnew LoggingSystemProperties(environment).apply();\n\t\tLogFile logFile = LogFile.get(environment);\n\t\tif (logFile != null) {\n\t\t\tlogFile.applyToSystemProperties();\n\t\t}\n\t\tinitializeEarlyLoggingLevel(environment);\n\t\tinitializeSystem(environment, this.loggingSystem, logFile);\n\t\tinitializeFinalLoggingLevels(environment, this.loggingSystem);\n\t\tregisterShutdownHookIfNecessary(environment, this.loggingSystem);\n\t}", "language": "java", "code": "protected void initialize(ConfigurableEnvironment environment,\n\t\t\tClassLoader classLoader) {\n\t\tnew LoggingSystemProperties(environment).apply();\n\t\tLogFile logFile = LogFile.get(environment);\n\t\tif (logFile != null) {\n\t\t\tlogFile.applyToSystemProperties();\n\t\t}\n\t\tinitializeEarlyLoggingLevel(environment);\n\t\tinitializeSystem(environment, this.loggingSystem, logFile);\n\t\tinitializeFinalLoggingLevels(environment, this.loggingSystem);\n\t\tregisterShutdownHookIfNecessary(environment, this.loggingSystem);\n\t}", "code_tokens": ["protected", "void", "initialize", "(", "ConfigurableEnvironment", "environment", ",", "ClassLoader", "classLoader", ")", "{", "new", "LoggingSystemProperties", "(", "environment", ")", ".", "apply", "(", ")", ";", "LogFile", "logFile", "=", "LogFile", ".", "get", "(", "environment", ")", ";", "if", "(", "logFile", "!=", "null", ")", "{", "logFile", ".", "applyToSystemProperties", "(", ")", ";", "}", "initializeEarlyLoggingLevel", "(", "environment", ")", ";", "initializeSystem", "(", "environment", ",", "this", ".", "loggingSystem", ",", "logFile", ")", ";", "initializeFinalLoggingLevels", "(", "environment", ",", "this", ".", "loggingSystem", ")", ";", "registerShutdownHookIfNecessary", "(", "environment", ",", "this", ".", "loggingSystem", ")", ";", "}"], "docstring": "Initialize the logging system according to preferences expressed through the\n{@link Environment} and the classpath.\n@param environment the environment\n@param classLoader the classloader", "docstring_tokens": ["Initialize", "the", "logging", "system", "according", "to", "preferences", "expressed", "through", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java#L258-L269", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.rootUri", "original_string": "public RestTemplateBuilder rootUri(String rootUri) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder rootUri(String rootUri) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "rootUri", "(", "String", "rootUri", ")", "{", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set a root URL that should be applied to each request that starts with {@code '/'}.\nSee {@link RootUriTemplateHandler} for details.\n@param rootUri the root URI or {@code null}\n@return a new builder instance", "docstring_tokens": ["Set", "a", "root", "URL", "that", "should", "be", "applied", "to", "each", "request", "that", "starts", "with", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L146-L152", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.messageConverters", "original_string": "public RestTemplateBuilder messageConverters(\n\t\t\tHttpMessageConverter<?>... messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn messageConverters(Arrays.asList(messageConverters));\n\t}", "language": "java", "code": "public RestTemplateBuilder messageConverters(\n\t\t\tHttpMessageConverter<?>... messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn messageConverters(Arrays.asList(messageConverters));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "messageConverters", "(", "HttpMessageConverter", "<", "?", ">", "...", "messageConverters", ")", "{", "Assert", ".", "notNull", "(", "messageConverters", ",", "\"MessageConverters must not be null\"", ")", ";", "return", "messageConverters", "(", "Arrays", ".", "asList", "(", "messageConverters", ")", ")", ";", "}"], "docstring": "Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with\nthe {@link RestTemplate}. Setting this value will replace any previously configured\nconverters and any converters configured on the builder will replace RestTemplate's\ndefault converters.\n@param messageConverters the converters to set\n@return a new builder instance\n@see #additionalMessageConverters(HttpMessageConverter...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L163-L167", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.messageConverters", "original_string": "public RestTemplateBuilder messageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tCollections.unmodifiableSet(\n\t\t\t\t\t\tnew LinkedHashSet<HttpMessageConverter<?>>(messageConverters)),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder messageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tCollections.unmodifiableSet(\n\t\t\t\t\t\tnew LinkedHashSet<HttpMessageConverter<?>>(messageConverters)),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "messageConverters", "(", "Collection", "<", "?", "extends", "HttpMessageConverter", "<", "?", ">", ">", "messageConverters", ")", "{", "Assert", ".", "notNull", "(", "messageConverters", ",", "\"MessageConverters must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "Collections", ".", "unmodifiableSet", "(", "new", "LinkedHashSet", "<", "HttpMessageConverter", "<", "?", ">", ">", "(", "messageConverters", ")", ")", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with\nthe {@link RestTemplate}. Setting this value will replace any previously configured\nconverters and any converters configured on the builder will replace RestTemplate's\ndefault converters.\n@param messageConverters the converters to set\n@return a new builder instance\n@see #additionalMessageConverters(HttpMessageConverter...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L178-L187", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalMessageConverters", "original_string": "public RestTemplateBuilder additionalMessageConverters(\n\t\t\tHttpMessageConverter<?>... messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn additionalMessageConverters(Arrays.asList(messageConverters));\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalMessageConverters(\n\t\t\tHttpMessageConverter<?>... messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn additionalMessageConverters(Arrays.asList(messageConverters));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalMessageConverters", "(", "HttpMessageConverter", "<", "?", ">", "...", "messageConverters", ")", "{", "Assert", ".", "notNull", "(", "messageConverters", ",", "\"MessageConverters must not be null\"", ")", ";", "return", "additionalMessageConverters", "(", "Arrays", ".", "asList", "(", "messageConverters", ")", ")", ";", "}"], "docstring": "Add additional {@link HttpMessageConverter HttpMessageConverters} that should be\nused with the {@link RestTemplate}. Any converters configured on the builder will\nreplace RestTemplate's default converters.\n@param messageConverters the converters to add\n@return a new builder instance\n@see #messageConverters(HttpMessageConverter...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L197-L201", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalMessageConverters", "original_string": "public RestTemplateBuilder additionalMessageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tappend(this.messageConverters, messageConverters),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalMessageConverters(\n\t\t\tCollection<? extends HttpMessageConverter<?>> messageConverters) {\n\t\tAssert.notNull(messageConverters, \"MessageConverters must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tappend(this.messageConverters, messageConverters),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalMessageConverters", "(", "Collection", "<", "?", "extends", "HttpMessageConverter", "<", "?", ">", ">", "messageConverters", ")", "{", "Assert", ".", "notNull", "(", "messageConverters", ",", "\"MessageConverters must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "append", "(", "this", ".", "messageConverters", ",", "messageConverters", ")", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Add additional {@link HttpMessageConverter HttpMessageConverters} that should be\nused with the {@link RestTemplate}. Any converters configured on the builder will\nreplace RestTemplate's default converters.\n@param messageConverters the converters to add\n@return a new builder instance\n@see #messageConverters(HttpMessageConverter...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L211-L219", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.defaultMessageConverters", "original_string": "public RestTemplateBuilder defaultMessageConverters() {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tCollections.unmodifiableSet(\n\t\t\t\t\t\tnew LinkedHashSet<>(new RestTemplate().getMessageConverters())),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder defaultMessageConverters() {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tCollections.unmodifiableSet(\n\t\t\t\t\t\tnew LinkedHashSet<>(new RestTemplate().getMessageConverters())),\n\t\t\t\tthis.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler,\n\t\t\t\tthis.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "defaultMessageConverters", "(", ")", "{", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "Collections", ".", "unmodifiableSet", "(", "new", "LinkedHashSet", "<>", "(", "new", "RestTemplate", "(", ")", ".", "getMessageConverters", "(", ")", ")", ")", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with\nthe {@link RestTemplate} to the default set. Calling this method will replace any\npreviously defined converters.\n@return a new builder instance\n@see #messageConverters(HttpMessageConverter...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L228-L235", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.interceptors", "original_string": "public RestTemplateBuilder interceptors(\n\t\t\tClientHttpRequestInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn interceptors(Arrays.asList(interceptors));\n\t}", "language": "java", "code": "public RestTemplateBuilder interceptors(\n\t\t\tClientHttpRequestInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn interceptors(Arrays.asList(interceptors));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "interceptors", "(", "ClientHttpRequestInterceptor", "...", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"interceptors must not be null\"", ")", ";", "return", "interceptors", "(", "Arrays", ".", "asList", "(", "interceptors", ")", ")", ";", "}"], "docstring": "Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that\nshould be used with the {@link RestTemplate}. Setting this value will replace any\npreviously defined interceptors.\n@param interceptors the interceptors to set\n@return a new builder instance\n@since 1.4.1\n@see #additionalInterceptors(ClientHttpRequestInterceptor...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L246-L250", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.interceptors", "original_string": "public RestTemplateBuilder interceptors(\n\t\t\tCollection<ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tCollections.unmodifiableSet(new LinkedHashSet<>(interceptors)));\n\t}", "language": "java", "code": "public RestTemplateBuilder interceptors(\n\t\t\tCollection<ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tCollections.unmodifiableSet(new LinkedHashSet<>(interceptors)));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "interceptors", "(", "Collection", "<", "ClientHttpRequestInterceptor", ">", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"interceptors must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "Collections", ".", "unmodifiableSet", "(", "new", "LinkedHashSet", "<>", "(", "interceptors", ")", ")", ")", ";", "}"], "docstring": "Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that\nshould be used with the {@link RestTemplate}. Setting this value will replace any\npreviously defined interceptors.\n@param interceptors the interceptors to set\n@return a new builder instance\n@since 1.4.1\n@see #additionalInterceptors(ClientHttpRequestInterceptor...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L261-L269", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalInterceptors", "original_string": "public RestTemplateBuilder additionalInterceptors(\n\t\t\tClientHttpRequestInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn additionalInterceptors(Arrays.asList(interceptors));\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalInterceptors(\n\t\t\tClientHttpRequestInterceptor... interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn additionalInterceptors(Arrays.asList(interceptors));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalInterceptors", "(", "ClientHttpRequestInterceptor", "...", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"interceptors must not be null\"", ")", ";", "return", "additionalInterceptors", "(", "Arrays", ".", "asList", "(", "interceptors", ")", ")", ";", "}"], "docstring": "Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}\nthat should be used with the {@link RestTemplate}.\n@param interceptors the interceptors to add\n@return a new builder instance\n@since 1.4.1\n@see #interceptors(ClientHttpRequestInterceptor...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L279-L283", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalInterceptors", "original_string": "public RestTemplateBuilder additionalInterceptors(\n\t\t\tCollection<? extends ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tappend(this.interceptors, interceptors));\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalInterceptors(\n\t\t\tCollection<? extends ClientHttpRequestInterceptor> interceptors) {\n\t\tAssert.notNull(interceptors, \"interceptors must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tappend(this.interceptors, interceptors));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalInterceptors", "(", "Collection", "<", "?", "extends", "ClientHttpRequestInterceptor", ">", "interceptors", ")", "{", "Assert", ".", "notNull", "(", "interceptors", ",", "\"interceptors must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "append", "(", "this", ".", "interceptors", ",", "interceptors", ")", ")", ";", "}"], "docstring": "Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}\nthat should be used with the {@link RestTemplate}.\n@param interceptors the interceptors to add\n@return a new builder instance\n@since 1.4.1\n@see #interceptors(ClientHttpRequestInterceptor...)", "docstring_tokens": ["Add", "additional", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L293-L301", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.requestFactory", "original_string": "public RestTemplateBuilder requestFactory(\n\t\t\tClass<? extends ClientHttpRequestFactory> requestFactory) {\n\t\tAssert.notNull(requestFactory, \"RequestFactory must not be null\");\n\t\treturn requestFactory(() -> createRequestFactory(requestFactory));\n\t}", "language": "java", "code": "public RestTemplateBuilder requestFactory(\n\t\t\tClass<? extends ClientHttpRequestFactory> requestFactory) {\n\t\tAssert.notNull(requestFactory, \"RequestFactory must not be null\");\n\t\treturn requestFactory(() -> createRequestFactory(requestFactory));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "requestFactory", "(", "Class", "<", "?", "extends", "ClientHttpRequestFactory", ">", "requestFactory", ")", "{", "Assert", ".", "notNull", "(", "requestFactory", ",", "\"RequestFactory must not be null\"", ")", ";", "return", "requestFactory", "(", "(", ")", "->", "createRequestFactory", "(", "requestFactory", ")", ")", ";", "}"], "docstring": "Set the {@link ClientHttpRequestFactory} class that should be used with the\n{@link RestTemplate}.\n@param requestFactory the request factory to use\n@return a new builder instance", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L309-L313", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.requestFactory", "original_string": "public RestTemplateBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier,\n\t\t\t\t\"RequestFactory Supplier must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, requestFactorySupplier, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder requestFactory(\n\t\t\tSupplier<ClientHttpRequestFactory> requestFactorySupplier) {\n\t\tAssert.notNull(requestFactorySupplier,\n\t\t\t\t\"RequestFactory Supplier must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, requestFactorySupplier, this.uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "requestFactory", "(", "Supplier", "<", "ClientHttpRequestFactory", ">", "requestFactorySupplier", ")", "{", "Assert", ".", "notNull", "(", "requestFactorySupplier", ",", "\"RequestFactory Supplier must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called\neach time we {@link #build()} a new {@link RestTemplate} instance.\n@param requestFactorySupplier the supplier for the request factory\n@return a new builder instance\n@since 2.0.0", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L334-L342", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.uriTemplateHandler", "original_string": "public RestTemplateBuilder uriTemplateHandler(UriTemplateHandler uriTemplateHandler) {\n\t\tAssert.notNull(uriTemplateHandler, \"UriTemplateHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier, uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder uriTemplateHandler(UriTemplateHandler uriTemplateHandler) {\n\t\tAssert.notNull(uriTemplateHandler, \"UriTemplateHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier, uriTemplateHandler,\n\t\t\t\tthis.errorHandler, this.basicAuthentication, this.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "uriTemplateHandler", "(", "UriTemplateHandler", "uriTemplateHandler", ")", "{", "Assert", ".", "notNull", "(", "uriTemplateHandler", ",", "\"UriTemplateHandler must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@link UriTemplateHandler} that should be used with the\n{@link RestTemplate}.\n@param uriTemplateHandler the URI template handler to use\n@return a new builder instance", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L350-L356", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.errorHandler", "original_string": "public RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n\t\tAssert.notNull(errorHandler, \"ErrorHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n\t\tAssert.notNull(errorHandler, \"ErrorHandler must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "errorHandler", "(", "ResponseErrorHandler", "errorHandler", ")", "{", "Assert", ".", "notNull", "(", "errorHandler", ",", "\"ErrorHandler must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@link ResponseErrorHandler} that should be used with the\n{@link RestTemplate}.\n@param errorHandler the error handler to use\n@return a new builder instance", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L364-L371", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.basicAuthentication", "original_string": "public RestTemplateBuilder basicAuthentication(String username, String password) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler,\n\t\t\t\tnew BasicAuthenticationInterceptor(username, password),\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder basicAuthentication(String username, String password) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler,\n\t\t\t\tnew BasicAuthenticationInterceptor(username, password),\n\t\t\t\tthis.restTemplateCustomizers, this.requestFactoryCustomizer,\n\t\t\t\tthis.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "basicAuthentication", "(", "String", "username", ",", "String", "password", ")", "{", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "new", "BasicAuthenticationInterceptor", "(", "username", ",", "password", ")", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Add HTTP basic authentication to requests. See\n{@link BasicAuthenticationInterceptor} for details.\n@param username the user name\n@param password the password\n@return a new builder instance\n@since 2.1.0", "docstring_tokens": ["Add", "HTTP", "basic", "authentication", "to", "requests", ".", "See", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L381-L388", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.customizers", "original_string": "public RestTemplateBuilder customizers(\n\t\t\tRestTemplateCustomizer... restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn customizers(Arrays.asList(restTemplateCustomizers));\n\t}", "language": "java", "code": "public RestTemplateBuilder customizers(\n\t\t\tRestTemplateCustomizer... restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn customizers(Arrays.asList(restTemplateCustomizers));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "customizers", "(", "RestTemplateCustomizer", "...", "restTemplateCustomizers", ")", "{", "Assert", ".", "notNull", "(", "restTemplateCustomizers", ",", "\"RestTemplateCustomizers must not be null\"", ")", ";", "return", "customizers", "(", "Arrays", ".", "asList", "(", "restTemplateCustomizers", ")", ")", ";", "}"], "docstring": "Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be\napplied to the {@link RestTemplate}. Customizers are applied in the order that they\nwere added after builder configuration has been applied. Setting this value will\nreplace any previously configured customizers.\n@param restTemplateCustomizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(RestTemplateCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L399-L404", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.customizers", "original_string": "public RestTemplateBuilder customizers(\n\t\t\tCollection<? extends RestTemplateCustomizer> restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tCollections.unmodifiableSet(new LinkedHashSet<RestTemplateCustomizer>(\n\t\t\t\t\t\trestTemplateCustomizers)),\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder customizers(\n\t\t\tCollection<? extends RestTemplateCustomizer> restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tCollections.unmodifiableSet(new LinkedHashSet<RestTemplateCustomizer>(\n\t\t\t\t\t\trestTemplateCustomizers)),\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "customizers", "(", "Collection", "<", "?", "extends", "RestTemplateCustomizer", ">", "restTemplateCustomizers", ")", "{", "Assert", ".", "notNull", "(", "restTemplateCustomizers", ",", "\"RestTemplateCustomizers must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "Collections", ".", "unmodifiableSet", "(", "new", "LinkedHashSet", "<", "RestTemplateCustomizer", ">", "(", "restTemplateCustomizers", ")", ")", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be\napplied to the {@link RestTemplate}. Customizers are applied in the order that they\nwere added after builder configuration has been applied. Setting this value will\nreplace any previously configured customizers.\n@param restTemplateCustomizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(RestTemplateCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L415-L425", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalCustomizers", "original_string": "public RestTemplateBuilder additionalCustomizers(\n\t\t\tRestTemplateCustomizer... restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(restTemplateCustomizers));\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalCustomizers(\n\t\t\tRestTemplateCustomizer... restTemplateCustomizers) {\n\t\tAssert.notNull(restTemplateCustomizers,\n\t\t\t\t\"RestTemplateCustomizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(restTemplateCustomizers));\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalCustomizers", "(", "RestTemplateCustomizer", "...", "restTemplateCustomizers", ")", "{", "Assert", ".", "notNull", "(", "restTemplateCustomizers", ",", "\"RestTemplateCustomizers must not be null\"", ")", ";", "return", "additionalCustomizers", "(", "Arrays", ".", "asList", "(", "restTemplateCustomizers", ")", ")", ";", "}"], "docstring": "Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied\nto the {@link RestTemplate}. Customizers are applied in the order that they were\nadded after builder configuration has been applied.\n@param restTemplateCustomizers the customizers to add\n@return a new builder instance\n@see #customizers(RestTemplateCustomizer...)", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L435-L440", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.additionalCustomizers", "original_string": "public RestTemplateBuilder additionalCustomizers(\n\t\t\tCollection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tappend(this.restTemplateCustomizers, customizers),\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder additionalCustomizers(\n\t\t\tCollection<? extends RestTemplateCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"RestTemplateCustomizers must not be null\");\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tappend(this.restTemplateCustomizers, customizers),\n\t\t\t\tthis.requestFactoryCustomizer, this.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "additionalCustomizers", "(", "Collection", "<", "?", "extends", "RestTemplateCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"RestTemplateCustomizers must not be null\"", ")", ";", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "append", "(", "this", ".", "restTemplateCustomizers", ",", "customizers", ")", ",", "this", ".", "requestFactoryCustomizer", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied\nto the {@link RestTemplate}. Customizers are applied in the order that they were\nadded after builder configuration has been applied.\n@param customizers the customizers to add\n@return a new builder instance\n@see #customizers(RestTemplateCustomizer...)", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L450-L458", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.setConnectTimeout", "original_string": "public RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer.connectTimeout(connectTimeout),\n\t\t\t\tthis.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer.connectTimeout(connectTimeout),\n\t\t\t\tthis.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "setConnectTimeout", "(", "Duration", "connectTimeout", ")", "{", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ".", "connectTimeout", "(", "connectTimeout", ")", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Sets the connection timeout on the underlying {@link ClientHttpRequestFactory}.\n@param connectTimeout the connection timeout\n@return a new builder instance.\n@since 2.1.0", "docstring_tokens": ["Sets", "the", "connection", "timeout", "on", "the", "underlying", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L466-L473", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.setReadTimeout", "original_string": "public RestTemplateBuilder setReadTimeout(Duration readTimeout) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer.readTimeout(readTimeout),\n\t\t\t\tthis.interceptors);\n\t}", "language": "java", "code": "public RestTemplateBuilder setReadTimeout(Duration readTimeout) {\n\t\treturn new RestTemplateBuilder(this.detectRequestFactory, this.rootUri,\n\t\t\t\tthis.messageConverters, this.requestFactorySupplier,\n\t\t\t\tthis.uriTemplateHandler, this.errorHandler, this.basicAuthentication,\n\t\t\t\tthis.restTemplateCustomizers,\n\t\t\t\tthis.requestFactoryCustomizer.readTimeout(readTimeout),\n\t\t\t\tthis.interceptors);\n\t}", "code_tokens": ["public", "RestTemplateBuilder", "setReadTimeout", "(", "Duration", "readTimeout", ")", "{", "return", "new", "RestTemplateBuilder", "(", "this", ".", "detectRequestFactory", ",", "this", ".", "rootUri", ",", "this", ".", "messageConverters", ",", "this", ".", "requestFactorySupplier", ",", "this", ".", "uriTemplateHandler", ",", "this", ".", "errorHandler", ",", "this", ".", "basicAuthentication", ",", "this", ".", "restTemplateCustomizers", ",", "this", ".", "requestFactoryCustomizer", ".", "readTimeout", "(", "readTimeout", ")", ",", "this", ".", "interceptors", ")", ";", "}"], "docstring": "Sets the read timeout on the underlying {@link ClientHttpRequestFactory}.\n@param readTimeout the read timeout\n@return a new builder instance.\n@since 2.1.0", "docstring_tokens": ["Sets", "the", "read", "timeout", "on", "the", "underlying", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L481-L488", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.build", "original_string": "public <T extends RestTemplate> T build(Class<T> restTemplateClass) {\n\t\treturn configure(BeanUtils.instantiateClass(restTemplateClass));\n\t}", "language": "java", "code": "public <T extends RestTemplate> T build(Class<T> restTemplateClass) {\n\t\treturn configure(BeanUtils.instantiateClass(restTemplateClass));\n\t}", "code_tokens": ["public", "<", "T", "extends", "RestTemplate", ">", "T", "build", "(", "Class", "<", "T", ">", "restTemplateClass", ")", "{", "return", "configure", "(", "BeanUtils", ".", "instantiateClass", "(", "restTemplateClass", ")", ")", ";", "}"], "docstring": "Build a new {@link RestTemplate} instance of the specified type and configure it\nusing this builder.\n@param <T> the type of rest template\n@param restTemplateClass the template type to create\n@return a configured {@link RestTemplate} instance.\n@see RestTemplateBuilder#build()\n@see #configure(RestTemplate)", "docstring_tokens": ["Build", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L510-L512", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java", "func_name": "RestTemplateBuilder.configure", "original_string": "public <T extends RestTemplate> T configure(T restTemplate) {\n\t\tconfigureRequestFactory(restTemplate);\n\t\tif (!CollectionUtils.isEmpty(this.messageConverters)) {\n\t\t\trestTemplate.setMessageConverters(new ArrayList<>(this.messageConverters));\n\t\t}\n\t\tif (this.uriTemplateHandler != null) {\n\t\t\trestTemplate.setUriTemplateHandler(this.uriTemplateHandler);\n\t\t}\n\t\tif (this.errorHandler != null) {\n\t\t\trestTemplate.setErrorHandler(this.errorHandler);\n\t\t}\n\t\tif (this.rootUri != null) {\n\t\t\tRootUriTemplateHandler.addTo(restTemplate, this.rootUri);\n\t\t}\n\t\tif (this.basicAuthentication != null) {\n\t\t\trestTemplate.getInterceptors().add(this.basicAuthentication);\n\t\t}\n\t\trestTemplate.getInterceptors().addAll(this.interceptors);\n\t\tif (!CollectionUtils.isEmpty(this.restTemplateCustomizers)) {\n\t\t\tfor (RestTemplateCustomizer customizer : this.restTemplateCustomizers) {\n\t\t\t\tcustomizer.customize(restTemplate);\n\t\t\t}\n\t\t}\n\t\treturn restTemplate;\n\t}", "language": "java", "code": "public <T extends RestTemplate> T configure(T restTemplate) {\n\t\tconfigureRequestFactory(restTemplate);\n\t\tif (!CollectionUtils.isEmpty(this.messageConverters)) {\n\t\t\trestTemplate.setMessageConverters(new ArrayList<>(this.messageConverters));\n\t\t}\n\t\tif (this.uriTemplateHandler != null) {\n\t\t\trestTemplate.setUriTemplateHandler(this.uriTemplateHandler);\n\t\t}\n\t\tif (this.errorHandler != null) {\n\t\t\trestTemplate.setErrorHandler(this.errorHandler);\n\t\t}\n\t\tif (this.rootUri != null) {\n\t\t\tRootUriTemplateHandler.addTo(restTemplate, this.rootUri);\n\t\t}\n\t\tif (this.basicAuthentication != null) {\n\t\t\trestTemplate.getInterceptors().add(this.basicAuthentication);\n\t\t}\n\t\trestTemplate.getInterceptors().addAll(this.interceptors);\n\t\tif (!CollectionUtils.isEmpty(this.restTemplateCustomizers)) {\n\t\t\tfor (RestTemplateCustomizer customizer : this.restTemplateCustomizers) {\n\t\t\t\tcustomizer.customize(restTemplate);\n\t\t\t}\n\t\t}\n\t\treturn restTemplate;\n\t}", "code_tokens": ["public", "<", "T", "extends", "RestTemplate", ">", "T", "configure", "(", "T", "restTemplate", ")", "{", "configureRequestFactory", "(", "restTemplate", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "messageConverters", ")", ")", "{", "restTemplate", ".", "setMessageConverters", "(", "new", "ArrayList", "<>", "(", "this", ".", "messageConverters", ")", ")", ";", "}", "if", "(", "this", ".", "uriTemplateHandler", "!=", "null", ")", "{", "restTemplate", ".", "setUriTemplateHandler", "(", "this", ".", "uriTemplateHandler", ")", ";", "}", "if", "(", "this", ".", "errorHandler", "!=", "null", ")", "{", "restTemplate", ".", "setErrorHandler", "(", "this", ".", "errorHandler", ")", ";", "}", "if", "(", "this", ".", "rootUri", "!=", "null", ")", "{", "RootUriTemplateHandler", ".", "addTo", "(", "restTemplate", ",", "this", ".", "rootUri", ")", ";", "}", "if", "(", "this", ".", "basicAuthentication", "!=", "null", ")", "{", "restTemplate", ".", "getInterceptors", "(", ")", ".", "add", "(", "this", ".", "basicAuthentication", ")", ";", "}", "restTemplate", ".", "getInterceptors", "(", ")", ".", "addAll", "(", "this", ".", "interceptors", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "restTemplateCustomizers", ")", ")", "{", "for", "(", "RestTemplateCustomizer", "customizer", ":", "this", ".", "restTemplateCustomizers", ")", "{", "customizer", ".", "customize", "(", "restTemplate", ")", ";", "}", "}", "return", "restTemplate", ";", "}"], "docstring": "Configure the provided {@link RestTemplate} instance using this builder.\n@param <T> the type of rest template\n@param restTemplate the {@link RestTemplate} to configure\n@return the rest template instance\n@see RestTemplateBuilder#build()\n@see RestTemplateBuilder#build(Class)", "docstring_tokens": ["Configure", "the", "provided", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java#L522-L546", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilder.java", "func_name": "ConfigurationMetadataRepositoryJsonBuilder.withJsonResource", "original_string": "public ConfigurationMetadataRepositoryJsonBuilder withJsonResource(\n\t\t\tInputStream inputStream, Charset charset) throws IOException {\n\t\tif (inputStream == null) {\n\t\t\tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n\t\t}\n\t\tthis.repositories.add(add(inputStream, charset));\n\t\treturn this;\n\t}", "language": "java", "code": "public ConfigurationMetadataRepositoryJsonBuilder withJsonResource(\n\t\t\tInputStream inputStream, Charset charset) throws IOException {\n\t\tif (inputStream == null) {\n\t\t\tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n\t\t}\n\t\tthis.repositories.add(add(inputStream, charset));\n\t\treturn this;\n\t}", "code_tokens": ["public", "ConfigurationMetadataRepositoryJsonBuilder", "withJsonResource", "(", "InputStream", "inputStream", ",", "Charset", "charset", ")", "throws", "IOException", "{", "if", "(", "inputStream", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"InputStream must not be null.\"", ")", ";", "}", "this", ".", "repositories", ".", "add", "(", "add", "(", "inputStream", ",", "charset", ")", ")", ";", "return", "this", ";", "}"], "docstring": "Add the content of a {@link ConfigurationMetadataRepository} defined by the\nspecified {@link InputStream} json document using the specified {@link Charset}. If\nthis metadata repository holds items that were loaded previously, these are\nignored.\n<p>\nLeaves the stream open when done.\n@param inputStream the source input stream\n@param charset the charset of the input\n@return this builder\n@throws IOException in case of I/O errors", "docstring_tokens": ["Add", "the", "content", "of", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilder.java#L73-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilder.java", "func_name": "ConfigurationMetadataRepositoryJsonBuilder.create", "original_string": "public static ConfigurationMetadataRepositoryJsonBuilder create(\n\t\t\tInputStream... inputStreams) throws IOException {\n\t\tConfigurationMetadataRepositoryJsonBuilder builder = create();\n\t\tfor (InputStream inputStream : inputStreams) {\n\t\t\tbuilder = builder.withJsonResource(inputStream);\n\t\t}\n\t\treturn builder;\n\t}", "language": "java", "code": "public static ConfigurationMetadataRepositoryJsonBuilder create(\n\t\t\tInputStream... inputStreams) throws IOException {\n\t\tConfigurationMetadataRepositoryJsonBuilder builder = create();\n\t\tfor (InputStream inputStream : inputStreams) {\n\t\t\tbuilder = builder.withJsonResource(inputStream);\n\t\t}\n\t\treturn builder;\n\t}", "code_tokens": ["public", "static", "ConfigurationMetadataRepositoryJsonBuilder", "create", "(", "InputStream", "...", "inputStreams", ")", "throws", "IOException", "{", "ConfigurationMetadataRepositoryJsonBuilder", "builder", "=", "create", "(", ")", ";", "for", "(", "InputStream", "inputStream", ":", "inputStreams", ")", "{", "builder", "=", "builder", ".", "withJsonResource", "(", "inputStream", ")", ";", "}", "return", "builder", ";", "}"], "docstring": "Create a new builder instance using {@link StandardCharsets#UTF_8} as the default\ncharset and the specified json resource.\n@param inputStreams the source input streams\n@return a new {@link ConfigurationMetadataRepositoryJsonBuilder} instance.\n@throws IOException on error", "docstring_tokens": ["Create", "a", "new", "builder", "instance", "using", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataRepositoryJsonBuilder.java#L156-L163", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.configureWebAppContext", "original_string": "protected final void configureWebAppContext(WebAppContext context,\n\t\t\tServletContextInitializer... initializers) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tcontext.setTempDirectory(getTempDirectory());\n\t\tif (this.resourceLoader != null) {\n\t\t\tcontext.setClassLoader(this.resourceLoader.getClassLoader());\n\t\t}\n\t\tString contextPath = getContextPath();\n\t\tcontext.setContextPath(StringUtils.hasLength(contextPath) ? contextPath : \"/\");\n\t\tcontext.setDisplayName(getDisplayName());\n\t\tconfigureDocumentRoot(context);\n\t\tif (isRegisterDefaultServlet()) {\n\t\t\taddDefaultServlet(context);\n\t\t}\n\t\tif (shouldRegisterJspServlet()) {\n\t\t\taddJspServlet(context);\n\t\t\tcontext.addBean(new JasperInitializer(context), true);\n\t\t}\n\t\taddLocaleMappings(context);\n\t\tServletContextInitializer[] initializersToUse = mergeInitializers(initializers);\n\t\tConfiguration[] configurations = getWebAppContextConfigurations(context,\n\t\t\t\tinitializersToUse);\n\t\tcontext.setConfigurations(configurations);\n\t\tcontext.setThrowUnavailableOnStartupException(true);\n\t\tconfigureSession(context);\n\t\tpostProcessWebAppContext(context);\n\t}", "language": "java", "code": "protected final void configureWebAppContext(WebAppContext context,\n\t\t\tServletContextInitializer... initializers) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tcontext.setTempDirectory(getTempDirectory());\n\t\tif (this.resourceLoader != null) {\n\t\t\tcontext.setClassLoader(this.resourceLoader.getClassLoader());\n\t\t}\n\t\tString contextPath = getContextPath();\n\t\tcontext.setContextPath(StringUtils.hasLength(contextPath) ? contextPath : \"/\");\n\t\tcontext.setDisplayName(getDisplayName());\n\t\tconfigureDocumentRoot(context);\n\t\tif (isRegisterDefaultServlet()) {\n\t\t\taddDefaultServlet(context);\n\t\t}\n\t\tif (shouldRegisterJspServlet()) {\n\t\t\taddJspServlet(context);\n\t\t\tcontext.addBean(new JasperInitializer(context), true);\n\t\t}\n\t\taddLocaleMappings(context);\n\t\tServletContextInitializer[] initializersToUse = mergeInitializers(initializers);\n\t\tConfiguration[] configurations = getWebAppContextConfigurations(context,\n\t\t\t\tinitializersToUse);\n\t\tcontext.setConfigurations(configurations);\n\t\tcontext.setThrowUnavailableOnStartupException(true);\n\t\tconfigureSession(context);\n\t\tpostProcessWebAppContext(context);\n\t}", "code_tokens": ["protected", "final", "void", "configureWebAppContext", "(", "WebAppContext", "context", ",", "ServletContextInitializer", "...", "initializers", ")", "{", "Assert", ".", "notNull", "(", "context", ",", "\"Context must not be null\"", ")", ";", "context", ".", "setTempDirectory", "(", "getTempDirectory", "(", ")", ")", ";", "if", "(", "this", ".", "resourceLoader", "!=", "null", ")", "{", "context", ".", "setClassLoader", "(", "this", ".", "resourceLoader", ".", "getClassLoader", "(", ")", ")", ";", "}", "String", "contextPath", "=", "getContextPath", "(", ")", ";", "context", ".", "setContextPath", "(", "StringUtils", ".", "hasLength", "(", "contextPath", ")", "?", "contextPath", ":", "\"/\"", ")", ";", "context", ".", "setDisplayName", "(", "getDisplayName", "(", ")", ")", ";", "configureDocumentRoot", "(", "context", ")", ";", "if", "(", "isRegisterDefaultServlet", "(", ")", ")", "{", "addDefaultServlet", "(", "context", ")", ";", "}", "if", "(", "shouldRegisterJspServlet", "(", ")", ")", "{", "addJspServlet", "(", "context", ")", ";", "context", ".", "addBean", "(", "new", "JasperInitializer", "(", "context", ")", ",", "true", ")", ";", "}", "addLocaleMappings", "(", "context", ")", ";", "ServletContextInitializer", "[", "]", "initializersToUse", "=", "mergeInitializers", "(", "initializers", ")", ";", "Configuration", "[", "]", "configurations", "=", "getWebAppContextConfigurations", "(", "context", ",", "initializersToUse", ")", ";", "context", ".", "setConfigurations", "(", "configurations", ")", ";", "context", ".", "setThrowUnavailableOnStartupException", "(", "true", ")", ";", "configureSession", "(", "context", ")", ";", "postProcessWebAppContext", "(", "context", ")", ";", "}"], "docstring": "Configure the given Jetty {@link WebAppContext} for use.\n@param context the context to configure\n@param initializers the set of initializers to apply", "docstring_tokens": ["Configure", "the", "given", "Jetty", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L203-L229", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.addDefaultServlet", "original_string": "protected final void addDefaultServlet(WebAppContext context) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tServletHolder holder = new ServletHolder();\n\t\tholder.setName(\"default\");\n\t\tholder.setClassName(\"org.eclipse.jetty.servlet.DefaultServlet\");\n\t\tholder.setInitParameter(\"dirAllowed\", \"false\");\n\t\tholder.setInitOrder(1);\n\t\tcontext.getServletHandler().addServletWithMapping(holder, \"/\");\n\t\tcontext.getServletHandler().getServletMapping(\"/\").setDefault(true);\n\t}", "language": "java", "code": "protected final void addDefaultServlet(WebAppContext context) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tServletHolder holder = new ServletHolder();\n\t\tholder.setName(\"default\");\n\t\tholder.setClassName(\"org.eclipse.jetty.servlet.DefaultServlet\");\n\t\tholder.setInitParameter(\"dirAllowed\", \"false\");\n\t\tholder.setInitOrder(1);\n\t\tcontext.getServletHandler().addServletWithMapping(holder, \"/\");\n\t\tcontext.getServletHandler().getServletMapping(\"/\").setDefault(true);\n\t}", "code_tokens": ["protected", "final", "void", "addDefaultServlet", "(", "WebAppContext", "context", ")", "{", "Assert", ".", "notNull", "(", "context", ",", "\"Context must not be null\"", ")", ";", "ServletHolder", "holder", "=", "new", "ServletHolder", "(", ")", ";", "holder", ".", "setName", "(", "\"default\"", ")", ";", "holder", ".", "setClassName", "(", "\"org.eclipse.jetty.servlet.DefaultServlet\"", ")", ";", "holder", ".", "setInitParameter", "(", "\"dirAllowed\"", ",", "\"false\"", ")", ";", "holder", ".", "setInitOrder", "(", "1", ")", ";", "context", ".", "getServletHandler", "(", ")", ".", "addServletWithMapping", "(", "holder", ",", "\"/\"", ")", ";", "context", ".", "getServletHandler", "(", ")", ".", "getServletMapping", "(", "\"/\"", ")", ".", "setDefault", "(", "true", ")", ";", "}"], "docstring": "Add Jetty's {@code DefaultServlet} to the given {@link WebAppContext}.\n@param context the jetty {@link WebAppContext}", "docstring_tokens": ["Add", "Jetty", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L297-L306", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.addJspServlet", "original_string": "protected final void addJspServlet(WebAppContext context) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tServletHolder holder = new ServletHolder();\n\t\tholder.setName(\"jsp\");\n\t\tholder.setClassName(getJsp().getClassName());\n\t\tholder.setInitParameter(\"fork\", \"false\");\n\t\tholder.setInitParameters(getJsp().getInitParameters());\n\t\tholder.setInitOrder(3);\n\t\tcontext.getServletHandler().addServlet(holder);\n\t\tServletMapping mapping = new ServletMapping();\n\t\tmapping.setServletName(\"jsp\");\n\t\tmapping.setPathSpecs(new String[] { \"*.jsp\", \"*.jspx\" });\n\t\tcontext.getServletHandler().addServletMapping(mapping);\n\t}", "language": "java", "code": "protected final void addJspServlet(WebAppContext context) {\n\t\tAssert.notNull(context, \"Context must not be null\");\n\t\tServletHolder holder = new ServletHolder();\n\t\tholder.setName(\"jsp\");\n\t\tholder.setClassName(getJsp().getClassName());\n\t\tholder.setInitParameter(\"fork\", \"false\");\n\t\tholder.setInitParameters(getJsp().getInitParameters());\n\t\tholder.setInitOrder(3);\n\t\tcontext.getServletHandler().addServlet(holder);\n\t\tServletMapping mapping = new ServletMapping();\n\t\tmapping.setServletName(\"jsp\");\n\t\tmapping.setPathSpecs(new String[] { \"*.jsp\", \"*.jspx\" });\n\t\tcontext.getServletHandler().addServletMapping(mapping);\n\t}", "code_tokens": ["protected", "final", "void", "addJspServlet", "(", "WebAppContext", "context", ")", "{", "Assert", ".", "notNull", "(", "context", ",", "\"Context must not be null\"", ")", ";", "ServletHolder", "holder", "=", "new", "ServletHolder", "(", ")", ";", "holder", ".", "setName", "(", "\"jsp\"", ")", ";", "holder", ".", "setClassName", "(", "getJsp", "(", ")", ".", "getClassName", "(", ")", ")", ";", "holder", ".", "setInitParameter", "(", "\"fork\"", ",", "\"false\"", ")", ";", "holder", ".", "setInitParameters", "(", "getJsp", "(", ")", ".", "getInitParameters", "(", ")", ")", ";", "holder", ".", "setInitOrder", "(", "3", ")", ";", "context", ".", "getServletHandler", "(", ")", ".", "addServlet", "(", "holder", ")", ";", "ServletMapping", "mapping", "=", "new", "ServletMapping", "(", ")", ";", "mapping", ".", "setServletName", "(", "\"jsp\"", ")", ";", "mapping", ".", "setPathSpecs", "(", "new", "String", "[", "]", "{", "\"*.jsp\"", ",", "\"*.jspx\"", "}", ")", ";", "context", ".", "getServletHandler", "(", ")", ".", "addServletMapping", "(", "mapping", ")", ";", "}"], "docstring": "Add Jetty's {@code JspServlet} to the given {@link WebAppContext}.\n@param context the jetty {@link WebAppContext}", "docstring_tokens": ["Add", "Jetty", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L312-L325", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.getWebAppContextConfigurations", "original_string": "protected Configuration[] getWebAppContextConfigurations(WebAppContext webAppContext,\n\t\t\tServletContextInitializer... initializers) {\n\t\tList<Configuration> configurations = new ArrayList<>();\n\t\tconfigurations.add(\n\t\t\t\tgetServletContextInitializerConfiguration(webAppContext, initializers));\n\t\tconfigurations.addAll(getConfigurations());\n\t\tconfigurations.add(getErrorPageConfiguration());\n\t\tconfigurations.add(getMimeTypeConfiguration());\n\t\treturn configurations.toArray(new Configuration[0]);\n\t}", "language": "java", "code": "protected Configuration[] getWebAppContextConfigurations(WebAppContext webAppContext,\n\t\t\tServletContextInitializer... initializers) {\n\t\tList<Configuration> configurations = new ArrayList<>();\n\t\tconfigurations.add(\n\t\t\t\tgetServletContextInitializerConfiguration(webAppContext, initializers));\n\t\tconfigurations.addAll(getConfigurations());\n\t\tconfigurations.add(getErrorPageConfiguration());\n\t\tconfigurations.add(getMimeTypeConfiguration());\n\t\treturn configurations.toArray(new Configuration[0]);\n\t}", "code_tokens": ["protected", "Configuration", "[", "]", "getWebAppContextConfigurations", "(", "WebAppContext", "webAppContext", ",", "ServletContextInitializer", "...", "initializers", ")", "{", "List", "<", "Configuration", ">", "configurations", "=", "new", "ArrayList", "<>", "(", ")", ";", "configurations", ".", "add", "(", "getServletContextInitializerConfiguration", "(", "webAppContext", ",", "initializers", ")", ")", ";", "configurations", ".", "addAll", "(", "getConfigurations", "(", ")", ")", ";", "configurations", ".", "add", "(", "getErrorPageConfiguration", "(", ")", ")", ";", "configurations", ".", "add", "(", "getMimeTypeConfiguration", "(", ")", ")", ";", "return", "configurations", ".", "toArray", "(", "new", "Configuration", "[", "0", "]", ")", ";", "}"], "docstring": "Return the Jetty {@link Configuration}s that should be applied to the server.\n@param webAppContext the Jetty {@link WebAppContext}\n@param initializers the {@link ServletContextInitializer}s to apply\n@return configurations to apply", "docstring_tokens": ["Return", "the", "Jetty", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L333-L342", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.getErrorPageConfiguration", "original_string": "private Configuration getErrorPageConfiguration() {\n\t\treturn new AbstractConfiguration() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(WebAppContext context) throws Exception {\n\t\t\t\tErrorHandler errorHandler = context.getErrorHandler();\n\t\t\t\tcontext.setErrorHandler(new JettyEmbeddedErrorHandler(errorHandler));\n\t\t\t\taddJettyErrorPages(errorHandler, getErrorPages());\n\t\t\t}\n\n\t\t};\n\t}", "language": "java", "code": "private Configuration getErrorPageConfiguration() {\n\t\treturn new AbstractConfiguration() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(WebAppContext context) throws Exception {\n\t\t\t\tErrorHandler errorHandler = context.getErrorHandler();\n\t\t\t\tcontext.setErrorHandler(new JettyEmbeddedErrorHandler(errorHandler));\n\t\t\t\taddJettyErrorPages(errorHandler, getErrorPages());\n\t\t\t}\n\n\t\t};\n\t}", "code_tokens": ["private", "Configuration", "getErrorPageConfiguration", "(", ")", "{", "return", "new", "AbstractConfiguration", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "WebAppContext", "context", ")", "throws", "Exception", "{", "ErrorHandler", "errorHandler", "=", "context", ".", "getErrorHandler", "(", ")", ";", "context", ".", "setErrorHandler", "(", "new", "JettyEmbeddedErrorHandler", "(", "errorHandler", ")", ")", ";", "addJettyErrorPages", "(", "errorHandler", ",", "getErrorPages", "(", ")", ")", ";", "}", "}", ";", "}"], "docstring": "Create a configuration object that adds error handlers.\n@return a configuration object for adding error pages", "docstring_tokens": ["Create", "a", "configuration", "object", "that", "adds", "error", "handlers", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L348-L359", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.getMimeTypeConfiguration", "original_string": "private Configuration getMimeTypeConfiguration() {\n\t\treturn new AbstractConfiguration() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(WebAppContext context) throws Exception {\n\t\t\t\tMimeTypes mimeTypes = context.getMimeTypes();\n\t\t\t\tfor (MimeMappings.Mapping mapping : getMimeMappings()) {\n\t\t\t\t\tmimeTypes.addMimeMapping(mapping.getExtension(),\n\t\t\t\t\t\t\tmapping.getMimeType());\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t}", "language": "java", "code": "private Configuration getMimeTypeConfiguration() {\n\t\treturn new AbstractConfiguration() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(WebAppContext context) throws Exception {\n\t\t\t\tMimeTypes mimeTypes = context.getMimeTypes();\n\t\t\t\tfor (MimeMappings.Mapping mapping : getMimeMappings()) {\n\t\t\t\t\tmimeTypes.addMimeMapping(mapping.getExtension(),\n\t\t\t\t\t\t\tmapping.getMimeType());\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t}", "code_tokens": ["private", "Configuration", "getMimeTypeConfiguration", "(", ")", "{", "return", "new", "AbstractConfiguration", "(", ")", "{", "@", "Override", "public", "void", "configure", "(", "WebAppContext", "context", ")", "throws", "Exception", "{", "MimeTypes", "mimeTypes", "=", "context", ".", "getMimeTypes", "(", ")", ";", "for", "(", "MimeMappings", ".", "Mapping", "mapping", ":", "getMimeMappings", "(", ")", ")", "{", "mimeTypes", ".", "addMimeMapping", "(", "mapping", ".", "getExtension", "(", ")", ",", "mapping", ".", "getMimeType", "(", ")", ")", ";", "}", "}", "}", ";", "}"], "docstring": "Create a configuration object that adds mime type mappings.\n@return a configuration object for adding mime type mappings", "docstring_tokens": ["Create", "a", "configuration", "object", "that", "adds", "mime", "type", "mappings", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L365-L378", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.setConfigurations", "original_string": "public void setConfigurations(Collection<? extends Configuration> configurations) {\n\t\tAssert.notNull(configurations, \"Configurations must not be null\");\n\t\tthis.configurations = new ArrayList<>(configurations);\n\t}", "language": "java", "code": "public void setConfigurations(Collection<? extends Configuration> configurations) {\n\t\tAssert.notNull(configurations, \"Configurations must not be null\");\n\t\tthis.configurations = new ArrayList<>(configurations);\n\t}", "code_tokens": ["public", "void", "setConfigurations", "(", "Collection", "<", "?", "extends", "Configuration", ">", "configurations", ")", "{", "Assert", ".", "notNull", "(", "configurations", ",", "\"Configurations must not be null\"", ")", ";", "this", ".", "configurations", "=", "new", "ArrayList", "<>", "(", "configurations", ")", ";", "}"], "docstring": "Sets Jetty {@link Configuration}s that will be applied to the {@link WebAppContext}\nbefore the server is created. Calling this method will replace any existing\nconfigurations.\n@param configurations the Jetty configurations to apply", "docstring_tokens": ["Sets", "Jetty", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L465-L468", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java", "func_name": "JettyServletWebServerFactory.addConfigurations", "original_string": "public void addConfigurations(Configuration... configurations) {\n\t\tAssert.notNull(configurations, \"Configurations must not be null\");\n\t\tthis.configurations.addAll(Arrays.asList(configurations));\n\t}", "language": "java", "code": "public void addConfigurations(Configuration... configurations) {\n\t\tAssert.notNull(configurations, \"Configurations must not be null\");\n\t\tthis.configurations.addAll(Arrays.asList(configurations));\n\t}", "code_tokens": ["public", "void", "addConfigurations", "(", "Configuration", "...", "configurations", ")", "{", "Assert", ".", "notNull", "(", "configurations", ",", "\"Configurations must not be null\"", ")", ";", "this", ".", "configurations", ".", "addAll", "(", "Arrays", ".", "asList", "(", "configurations", ")", ")", ";", "}"], "docstring": "Add {@link Configuration}s that will be applied to the {@link WebAppContext} before\nthe server is started.\n@param configurations the configurations to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L484-L487", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookup.java", "func_name": "DatabaseLookup.getDatabase", "original_string": "public static Database getDatabase(DataSource dataSource) {\n\t\tif (dataSource == null) {\n\t\t\treturn Database.DEFAULT;\n\t\t}\n\t\ttry {\n\t\t\tString url = JdbcUtils.extractDatabaseMetaData(dataSource, \"getURL\");\n\t\t\tDatabaseDriver driver = DatabaseDriver.fromJdbcUrl(url);\n\t\t\tDatabase database = LOOKUP.get(driver);\n\t\t\tif (database != null) {\n\t\t\t\treturn database;\n\t\t\t}\n\t\t}\n\t\tcatch (MetaDataAccessException ex) {\n\t\t\tlogger.warn(\"Unable to determine jdbc url from datasource\", ex);\n\t\t}\n\t\treturn Database.DEFAULT;\n\t}", "language": "java", "code": "public static Database getDatabase(DataSource dataSource) {\n\t\tif (dataSource == null) {\n\t\t\treturn Database.DEFAULT;\n\t\t}\n\t\ttry {\n\t\t\tString url = JdbcUtils.extractDatabaseMetaData(dataSource, \"getURL\");\n\t\t\tDatabaseDriver driver = DatabaseDriver.fromJdbcUrl(url);\n\t\t\tDatabase database = LOOKUP.get(driver);\n\t\t\tif (database != null) {\n\t\t\t\treturn database;\n\t\t\t}\n\t\t}\n\t\tcatch (MetaDataAccessException ex) {\n\t\t\tlogger.warn(\"Unable to determine jdbc url from datasource\", ex);\n\t\t}\n\t\treturn Database.DEFAULT;\n\t}", "code_tokens": ["public", "static", "Database", "getDatabase", "(", "DataSource", "dataSource", ")", "{", "if", "(", "dataSource", "==", "null", ")", "{", "return", "Database", ".", "DEFAULT", ";", "}", "try", "{", "String", "url", "=", "JdbcUtils", ".", "extractDatabaseMetaData", "(", "dataSource", ",", "\"getURL\"", ")", ";", "DatabaseDriver", "driver", "=", "DatabaseDriver", ".", "fromJdbcUrl", "(", "url", ")", ";", "Database", "database", "=", "LOOKUP", ".", "get", "(", "driver", ")", ";", "if", "(", "database", "!=", "null", ")", "{", "return", "database", ";", "}", "}", "catch", "(", "MetaDataAccessException", "ex", ")", "{", "logger", ".", "warn", "(", "\"Unable to determine jdbc url from datasource\"", ",", "ex", ")", ";", "}", "return", "Database", ".", "DEFAULT", ";", "}"], "docstring": "Return the most suitable {@link Database} for the given {@link DataSource}.\n@param dataSource the source {@link DataSource}\n@return the most suitable {@link Database}", "docstring_tokens": ["Return", "the", "most", "suitable", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookup.java#L68-L84", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java", "func_name": "JSONTokener.nextValue", "original_string": "public Object nextValue() throws JSONException {\n\t\tint c = nextCleanInternal();\n\t\tswitch (c) {\n\t\tcase -1:\n\t\t\tthrow syntaxError(\"End of input\");\n\n\t\tcase '{':\n\t\t\treturn readObject();\n\n\t\tcase '[':\n\t\t\treturn readArray();\n\n\t\tcase '\\'':\n\t\tcase '\"':\n\t\t\treturn nextString((char) c);\n\n\t\tdefault:\n\t\t\tthis.pos--;\n\t\t\treturn readLiteral();\n\t\t}\n\t}", "language": "java", "code": "public Object nextValue() throws JSONException {\n\t\tint c = nextCleanInternal();\n\t\tswitch (c) {\n\t\tcase -1:\n\t\t\tthrow syntaxError(\"End of input\");\n\n\t\tcase '{':\n\t\t\treturn readObject();\n\n\t\tcase '[':\n\t\t\treturn readArray();\n\n\t\tcase '\\'':\n\t\tcase '\"':\n\t\t\treturn nextString((char) c);\n\n\t\tdefault:\n\t\t\tthis.pos--;\n\t\t\treturn readLiteral();\n\t\t}\n\t}", "code_tokens": ["public", "Object", "nextValue", "(", ")", "throws", "JSONException", "{", "int", "c", "=", "nextCleanInternal", "(", ")", ";", "switch", "(", "c", ")", "{", "case", "-", "1", ":", "throw", "syntaxError", "(", "\"End of input\"", ")", ";", "case", "'", "'", ":", "return", "readObject", "(", ")", ";", "case", "'", "'", ":", "return", "readArray", "(", ")", ";", "case", "'", "'", ":", "case", "'", "'", ":", "return", "nextString", "(", "(", "char", ")", "c", ")", ";", "default", ":", "this", ".", "pos", "--", ";", "return", "readLiteral", "(", ")", ";", "}", "}"], "docstring": "Returns the next value from the input.\n@return a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer, Long,\nDouble or {@link JSONObject#NULL}.\n@throws JSONException if the input is malformed.", "docstring_tokens": ["Returns", "the", "next", "value", "from", "the", "input", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java#L91-L111", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java", "func_name": "JSONTokener.skipToEndOfLine", "original_string": "private void skipToEndOfLine() {\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n') {\n\t\t\t\tthis.pos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private void skipToEndOfLine() {\n\t\tfor (; this.pos < this.in.length(); this.pos++) {\n\t\t\tchar c = this.in.charAt(this.pos);\n\t\t\tif (c == '\\r' || c == '\\n') {\n\t\t\t\tthis.pos++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "void", "skipToEndOfLine", "(", ")", "{", "for", "(", ";", "this", ".", "pos", "<", "this", ".", "in", ".", "length", "(", ")", ";", "this", ".", "pos", "++", ")", "{", "char", "c", "=", "this", ".", "in", ".", "charAt", "(", "this", ".", "pos", ")", ";", "if", "(", "c", "==", "'", "'", "||", "c", "==", "'", "'", ")", "{", "this", ".", "pos", "++", ";", "break", ";", "}", "}", "}"], "docstring": "Advances the position until after the next newline character. If the line is\nterminated by \"\\r\\n\", the '\\n' must be consumed as whitespace by the caller.", "docstring_tokens": ["Advances", "the", "position", "until", "after", "the", "next", "newline", "character", ".", "If", "the", "line", "is", "terminated", "by", "\\", "r", "\\", "n", "the", "\\", "n", "must", "be", "consumed", "as", "whitespace", "by", "the", "caller", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java#L171-L179", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java", "func_name": "JSONTokener.nextString", "original_string": "public String nextString(char quote) throws JSONException {\n\t\t/*\n\t\t * For strings that are free of escape sequences, we can just extract the result\n\t\t * as a substring of the input. But if we encounter an escape sequence, we need to\n\t\t * use a StringBuilder to compose the result.\n\t\t */\n\t\tStringBuilder builder = null;\n\n\t\t/* the index of the first character not yet appended to the builder. */\n\t\tint start = this.pos;\n\n\t\twhile (this.pos < this.in.length()) {\n\t\t\tint c = this.in.charAt(this.pos++);\n\t\t\tif (c == quote) {\n\t\t\t\tif (builder == null) {\n\t\t\t\t\t// a new string avoids leaking memory\n\t\t\t\t\treturn new String(this.in.substring(start, this.pos - 1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\t\treturn builder.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c == '\\\\') {\n\t\t\t\tif (this.pos == this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tif (builder == null) {\n\t\t\t\t\tbuilder = new StringBuilder();\n\t\t\t\t}\n\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\tbuilder.append(readEscapeCharacter());\n\t\t\t\tstart = this.pos;\n\t\t\t}\n\t\t}\n\n\t\tthrow syntaxError(\"Unterminated string\");\n\t}", "language": "java", "code": "public String nextString(char quote) throws JSONException {\n\t\t/*\n\t\t * For strings that are free of escape sequences, we can just extract the result\n\t\t * as a substring of the input. But if we encounter an escape sequence, we need to\n\t\t * use a StringBuilder to compose the result.\n\t\t */\n\t\tStringBuilder builder = null;\n\n\t\t/* the index of the first character not yet appended to the builder. */\n\t\tint start = this.pos;\n\n\t\twhile (this.pos < this.in.length()) {\n\t\t\tint c = this.in.charAt(this.pos++);\n\t\t\tif (c == quote) {\n\t\t\t\tif (builder == null) {\n\t\t\t\t\t// a new string avoids leaking memory\n\t\t\t\t\treturn new String(this.in.substring(start, this.pos - 1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\t\treturn builder.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c == '\\\\') {\n\t\t\t\tif (this.pos == this.in.length()) {\n\t\t\t\t\tthrow syntaxError(\"Unterminated escape sequence\");\n\t\t\t\t}\n\t\t\t\tif (builder == null) {\n\t\t\t\t\tbuilder = new StringBuilder();\n\t\t\t\t}\n\t\t\t\tbuilder.append(this.in, start, this.pos - 1);\n\t\t\t\tbuilder.append(readEscapeCharacter());\n\t\t\t\tstart = this.pos;\n\t\t\t}\n\t\t}\n\n\t\tthrow syntaxError(\"Unterminated string\");\n\t}", "code_tokens": ["public", "String", "nextString", "(", "char", "quote", ")", "throws", "JSONException", "{", "/*\n\t\t * For strings that are free of escape sequences, we can just extract the result\n\t\t * as a substring of the input. But if we encounter an escape sequence, we need to\n\t\t * use a StringBuilder to compose the result.\n\t\t */", "StringBuilder", "builder", "=", "null", ";", "/* the index of the first character not yet appended to the builder. */", "int", "start", "=", "this", ".", "pos", ";", "while", "(", "this", ".", "pos", "<", "this", ".", "in", ".", "length", "(", ")", ")", "{", "int", "c", "=", "this", ".", "in", ".", "charAt", "(", "this", ".", "pos", "++", ")", ";", "if", "(", "c", "==", "quote", ")", "{", "if", "(", "builder", "==", "null", ")", "{", "// a new string avoids leaking memory", "return", "new", "String", "(", "this", ".", "in", ".", "substring", "(", "start", ",", "this", ".", "pos", "-", "1", ")", ")", ";", "}", "else", "{", "builder", ".", "append", "(", "this", ".", "in", ",", "start", ",", "this", ".", "pos", "-", "1", ")", ";", "return", "builder", ".", "toString", "(", ")", ";", "}", "}", "if", "(", "c", "==", "'", "'", ")", "{", "if", "(", "this", ".", "pos", "==", "this", ".", "in", ".", "length", "(", ")", ")", "{", "throw", "syntaxError", "(", "\"Unterminated escape sequence\"", ")", ";", "}", "if", "(", "builder", "==", "null", ")", "{", "builder", "=", "new", "StringBuilder", "(", ")", ";", "}", "builder", ".", "append", "(", "this", ".", "in", ",", "start", ",", "this", ".", "pos", "-", "1", ")", ";", "builder", ".", "append", "(", "readEscapeCharacter", "(", ")", ")", ";", "start", "=", "this", ".", "pos", ";", "}", "}", "throw", "syntaxError", "(", "\"Unterminated string\"", ")", ";", "}"], "docstring": "Returns the string up to but not including {@code quote}, unescaping any character\nescape sequences encountered along the way. The opening quote should have already\nbeen read. This consumes the closing quote, but does not include it in the returned\nstring.\n@param quote either ' or \".\n@return the string up to but not including {@code quote}\n@throws NumberFormatException if any unicode escape sequences are malformed.\n@throws JSONException if processing of json failed", "docstring_tokens": ["Returns", "the", "string", "up", "to", "but", "not", "including", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java#L191-L229", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java", "func_name": "JSONTokener.readObject", "original_string": "private JSONObject readObject() throws JSONException {\n\t\tJSONObject result = new JSONObject();\n\n\t\t/* Peek to see if this is the empty object. */\n\t\tint first = nextCleanInternal();\n\t\tif (first == '}') {\n\t\t\treturn result;\n\t\t}\n\t\telse if (first != -1) {\n\t\t\tthis.pos--;\n\t\t}\n\n\t\twhile (true) {\n\t\t\tObject name = nextValue();\n\t\t\tif (!(name instanceof String)) {\n\t\t\t\tif (name == null) {\n\t\t\t\t\tthrow syntaxError(\"Names cannot be null\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow syntaxError(\"Names must be strings, but \" + name\n\t\t\t\t\t\t\t+ \" is of type \" + name.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Expect the name/value separator to be either a colon ':', an equals sign\n\t\t\t * '=', or an arrow \"=>\". The last two are bogus but we include them because\n\t\t\t * that's what the original implementation did.\n\t\t\t */\n\t\t\tint separator = nextCleanInternal();\n\t\t\tif (separator != ':' && separator != '=') {\n\t\t\t\tthrow syntaxError(\"Expected ':' after \" + name);\n\t\t\t}\n\t\t\tif (this.pos < this.in.length() && this.in.charAt(this.pos) == '>') {\n\t\t\t\tthis.pos++;\n\t\t\t}\n\n\t\t\tresult.put((String) name, nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase '}':\n\t\t\t\treturn result;\n\t\t\tcase ';':\n\t\t\tcase ',':\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthrow syntaxError(\"Unterminated object\");\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private JSONObject readObject() throws JSONException {\n\t\tJSONObject result = new JSONObject();\n\n\t\t/* Peek to see if this is the empty object. */\n\t\tint first = nextCleanInternal();\n\t\tif (first == '}') {\n\t\t\treturn result;\n\t\t}\n\t\telse if (first != -1) {\n\t\t\tthis.pos--;\n\t\t}\n\n\t\twhile (true) {\n\t\t\tObject name = nextValue();\n\t\t\tif (!(name instanceof String)) {\n\t\t\t\tif (name == null) {\n\t\t\t\t\tthrow syntaxError(\"Names cannot be null\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow syntaxError(\"Names must be strings, but \" + name\n\t\t\t\t\t\t\t+ \" is of type \" + name.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Expect the name/value separator to be either a colon ':', an equals sign\n\t\t\t * '=', or an arrow \"=>\". The last two are bogus but we include them because\n\t\t\t * that's what the original implementation did.\n\t\t\t */\n\t\t\tint separator = nextCleanInternal();\n\t\t\tif (separator != ':' && separator != '=') {\n\t\t\t\tthrow syntaxError(\"Expected ':' after \" + name);\n\t\t\t}\n\t\t\tif (this.pos < this.in.length() && this.in.charAt(this.pos) == '>') {\n\t\t\t\tthis.pos++;\n\t\t\t}\n\n\t\t\tresult.put((String) name, nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase '}':\n\t\t\t\treturn result;\n\t\t\tcase ';':\n\t\t\tcase ',':\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthrow syntaxError(\"Unterminated object\");\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "JSONObject", "readObject", "(", ")", "throws", "JSONException", "{", "JSONObject", "result", "=", "new", "JSONObject", "(", ")", ";", "/* Peek to see if this is the empty object. */", "int", "first", "=", "nextCleanInternal", "(", ")", ";", "if", "(", "first", "==", "'", "'", ")", "{", "return", "result", ";", "}", "else", "if", "(", "first", "!=", "-", "1", ")", "{", "this", ".", "pos", "--", ";", "}", "while", "(", "true", ")", "{", "Object", "name", "=", "nextValue", "(", ")", ";", "if", "(", "!", "(", "name", "instanceof", "String", ")", ")", "{", "if", "(", "name", "==", "null", ")", "{", "throw", "syntaxError", "(", "\"Names cannot be null\"", ")", ";", "}", "else", "{", "throw", "syntaxError", "(", "\"Names must be strings, but \"", "+", "name", "+", "\" is of type \"", "+", "name", ".", "getClass", "(", ")", ".", "getName", "(", ")", ")", ";", "}", "}", "/*\n\t\t\t * Expect the name/value separator to be either a colon ':', an equals sign\n\t\t\t * '=', or an arrow \"=>\". The last two are bogus but we include them because\n\t\t\t * that's what the original implementation did.\n\t\t\t */", "int", "separator", "=", "nextCleanInternal", "(", ")", ";", "if", "(", "separator", "!=", "'", "'", "&&", "separator", "!=", "'", "'", ")", "{", "throw", "syntaxError", "(", "\"Expected ':' after \"", "+", "name", ")", ";", "}", "if", "(", "this", ".", "pos", "<", "this", ".", "in", ".", "length", "(", ")", "&&", "this", ".", "in", ".", "charAt", "(", "this", ".", "pos", ")", "==", "'", "'", ")", "{", "this", ".", "pos", "++", ";", "}", "result", ".", "put", "(", "(", "String", ")", "name", ",", "nextValue", "(", ")", ")", ";", "switch", "(", "nextCleanInternal", "(", ")", ")", "{", "case", "'", "'", ":", "return", "result", ";", "case", "'", "'", ":", "case", "'", "'", ":", "continue", ";", "default", ":", "throw", "syntaxError", "(", "\"Unterminated object\"", ")", ";", "}", "}", "}"], "docstring": "Reads a sequence of key/value pairs and the trailing closing brace '}' of an\nobject. The opening brace '{' should have already been read.\n@return an object\n@throws JSONException if processing of json failed", "docstring_tokens": ["Reads", "a", "sequence", "of", "key", "/", "value", "pairs", "and", "the", "trailing", "closing", "brace", "}", "of", "an", "object", ".", "The", "opening", "brace", "{", "should", "have", "already", "been", "read", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java#L359-L408", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java", "func_name": "JSONTokener.readArray", "original_string": "private JSONArray readArray() throws JSONException {\n\t\tJSONArray result = new JSONArray();\n\n\t\t/* to cover input that ends with \",]\". */\n\t\tboolean hasTrailingSeparator = false;\n\n\t\twhile (true) {\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase -1:\n\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\tcase ']':\n\t\t\t\tif (hasTrailingSeparator) {\n\t\t\t\t\tresult.put(null);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\tcase ',':\n\t\t\tcase ';':\n\t\t\t\t/* A separator without a value first means \"null\". */\n\t\t\t\tresult.put(null);\n\t\t\t\thasTrailingSeparator = true;\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthis.pos--;\n\t\t\t}\n\n\t\t\tresult.put(nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase ']':\n\t\t\t\treturn result;\n\t\t\tcase ',':\n\t\t\tcase ';':\n\t\t\t\thasTrailingSeparator = true;\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "private JSONArray readArray() throws JSONException {\n\t\tJSONArray result = new JSONArray();\n\n\t\t/* to cover input that ends with \",]\". */\n\t\tboolean hasTrailingSeparator = false;\n\n\t\twhile (true) {\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase -1:\n\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\tcase ']':\n\t\t\t\tif (hasTrailingSeparator) {\n\t\t\t\t\tresult.put(null);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\tcase ',':\n\t\t\tcase ';':\n\t\t\t\t/* A separator without a value first means \"null\". */\n\t\t\t\tresult.put(null);\n\t\t\t\thasTrailingSeparator = true;\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthis.pos--;\n\t\t\t}\n\n\t\t\tresult.put(nextValue());\n\n\t\t\tswitch (nextCleanInternal()) {\n\t\t\tcase ']':\n\t\t\t\treturn result;\n\t\t\tcase ',':\n\t\t\tcase ';':\n\t\t\t\thasTrailingSeparator = true;\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthrow syntaxError(\"Unterminated array\");\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["private", "JSONArray", "readArray", "(", ")", "throws", "JSONException", "{", "JSONArray", "result", "=", "new", "JSONArray", "(", ")", ";", "/* to cover input that ends with \",]\". */", "boolean", "hasTrailingSeparator", "=", "false", ";", "while", "(", "true", ")", "{", "switch", "(", "nextCleanInternal", "(", ")", ")", "{", "case", "-", "1", ":", "throw", "syntaxError", "(", "\"Unterminated array\"", ")", ";", "case", "'", "'", ":", "if", "(", "hasTrailingSeparator", ")", "{", "result", ".", "put", "(", "null", ")", ";", "}", "return", "result", ";", "case", "'", "'", ":", "case", "'", "'", ":", "/* A separator without a value first means \"null\". */", "result", ".", "put", "(", "null", ")", ";", "hasTrailingSeparator", "=", "true", ";", "continue", ";", "default", ":", "this", ".", "pos", "--", ";", "}", "result", ".", "put", "(", "nextValue", "(", ")", ")", ";", "switch", "(", "nextCleanInternal", "(", ")", ")", "{", "case", "'", "'", ":", "return", "result", ";", "case", "'", "'", ":", "case", "'", "'", ":", "hasTrailingSeparator", "=", "true", ";", "continue", ";", "default", ":", "throw", "syntaxError", "(", "\"Unterminated array\"", ")", ";", "}", "}", "}"], "docstring": "Reads a sequence of values and the trailing closing brace ']' of an array. The\nopening brace '[' should have already been read. Note that \"[]\" yields an empty\narray, but \"[,]\" returns a two-element array equivalent to \"[null,null]\".\n@return an array\n@throws JSONException if processing of json failed", "docstring_tokens": ["Reads", "a", "sequence", "of", "values", "and", "the", "trailing", "closing", "brace", "]", "of", "an", "array", ".", "The", "opening", "brace", "[", "should", "have", "already", "been", "read", ".", "Note", "that", "[]", "yields", "an", "empty", "array", "but", "[", "]", "returns", "a", "two", "-", "element", "array", "equivalent", "to", "[", "null", "null", "]", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONTokener.java#L417-L455", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java", "func_name": "RedisConnectionConfiguration.getClusterConfiguration", "original_string": "protected final RedisClusterConfiguration getClusterConfiguration() {\n\t\tif (this.clusterConfiguration != null) {\n\t\t\treturn this.clusterConfiguration;\n\t\t}\n\t\tif (this.properties.getCluster() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tRedisProperties.Cluster clusterProperties = this.properties.getCluster();\n\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\tclusterProperties.getNodes());\n\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t}\n\t\tif (this.properties.getPassword() != null) {\n\t\t\tconfig.setPassword(RedisPassword.of(this.properties.getPassword()));\n\t\t}\n\t\treturn config;\n\t}", "language": "java", "code": "protected final RedisClusterConfiguration getClusterConfiguration() {\n\t\tif (this.clusterConfiguration != null) {\n\t\t\treturn this.clusterConfiguration;\n\t\t}\n\t\tif (this.properties.getCluster() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tRedisProperties.Cluster clusterProperties = this.properties.getCluster();\n\t\tRedisClusterConfiguration config = new RedisClusterConfiguration(\n\t\t\t\tclusterProperties.getNodes());\n\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n\t\t}\n\t\tif (this.properties.getPassword() != null) {\n\t\t\tconfig.setPassword(RedisPassword.of(this.properties.getPassword()));\n\t\t}\n\t\treturn config;\n\t}", "code_tokens": ["protected", "final", "RedisClusterConfiguration", "getClusterConfiguration", "(", ")", "{", "if", "(", "this", ".", "clusterConfiguration", "!=", "null", ")", "{", "return", "this", ".", "clusterConfiguration", ";", "}", "if", "(", "this", ".", "properties", ".", "getCluster", "(", ")", "==", "null", ")", "{", "return", "null", ";", "}", "RedisProperties", ".", "Cluster", "clusterProperties", "=", "this", ".", "properties", ".", "getCluster", "(", ")", ";", "RedisClusterConfiguration", "config", "=", "new", "RedisClusterConfiguration", "(", "clusterProperties", ".", "getNodes", "(", ")", ")", ";", "if", "(", "clusterProperties", ".", "getMaxRedirects", "(", ")", "!=", "null", ")", "{", "config", ".", "setMaxRedirects", "(", "clusterProperties", ".", "getMaxRedirects", "(", ")", ")", ";", "}", "if", "(", "this", ".", "properties", ".", "getPassword", "(", ")", "!=", "null", ")", "{", "config", ".", "setPassword", "(", "RedisPassword", ".", "of", "(", "this", ".", "properties", ".", "getPassword", "(", ")", ")", ")", ";", "}", "return", "config", ";", "}"], "docstring": "Create a {@link RedisClusterConfiguration} if necessary.\n@return {@literal null} if no cluster settings are set.", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java#L95-L112", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/LombokPropertyDescriptor.java", "func_name": "LombokPropertyDescriptor.hasLombokPublicAccessor", "original_string": "private boolean hasLombokPublicAccessor(MetadataGenerationEnvironment env,\n\t\t\tboolean getter) {\n\t\tString annotation = (getter ? LOMBOK_GETTER_ANNOTATION\n\t\t\t\t: LOMBOK_SETTER_ANNOTATION);\n\t\tAnnotationMirror lombokMethodAnnotationOnField = env.getAnnotation(getField(),\n\t\t\t\tannotation);\n\t\tif (lombokMethodAnnotationOnField != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnField);\n\t\t}\n\t\tAnnotationMirror lombokMethodAnnotationOnElement = env\n\t\t\t\t.getAnnotation(getOwnerElement(), annotation);\n\t\tif (lombokMethodAnnotationOnElement != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnElement);\n\t\t}\n\t\treturn (env.getAnnotation(getOwnerElement(), LOMBOK_DATA_ANNOTATION) != null);\n\t}", "language": "java", "code": "private boolean hasLombokPublicAccessor(MetadataGenerationEnvironment env,\n\t\t\tboolean getter) {\n\t\tString annotation = (getter ? LOMBOK_GETTER_ANNOTATION\n\t\t\t\t: LOMBOK_SETTER_ANNOTATION);\n\t\tAnnotationMirror lombokMethodAnnotationOnField = env.getAnnotation(getField(),\n\t\t\t\tannotation);\n\t\tif (lombokMethodAnnotationOnField != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnField);\n\t\t}\n\t\tAnnotationMirror lombokMethodAnnotationOnElement = env\n\t\t\t\t.getAnnotation(getOwnerElement(), annotation);\n\t\tif (lombokMethodAnnotationOnElement != null) {\n\t\t\treturn isAccessLevelPublic(env, lombokMethodAnnotationOnElement);\n\t\t}\n\t\treturn (env.getAnnotation(getOwnerElement(), LOMBOK_DATA_ANNOTATION) != null);\n\t}", "code_tokens": ["private", "boolean", "hasLombokPublicAccessor", "(", "MetadataGenerationEnvironment", "env", ",", "boolean", "getter", ")", "{", "String", "annotation", "=", "(", "getter", "?", "LOMBOK_GETTER_ANNOTATION", ":", "LOMBOK_SETTER_ANNOTATION", ")", ";", "AnnotationMirror", "lombokMethodAnnotationOnField", "=", "env", ".", "getAnnotation", "(", "getField", "(", ")", ",", "annotation", ")", ";", "if", "(", "lombokMethodAnnotationOnField", "!=", "null", ")", "{", "return", "isAccessLevelPublic", "(", "env", ",", "lombokMethodAnnotationOnField", ")", ";", "}", "AnnotationMirror", "lombokMethodAnnotationOnElement", "=", "env", ".", "getAnnotation", "(", "getOwnerElement", "(", ")", ",", "annotation", ")", ";", "if", "(", "lombokMethodAnnotationOnElement", "!=", "null", ")", "{", "return", "isAccessLevelPublic", "(", "env", ",", "lombokMethodAnnotationOnElement", ")", ";", "}", "return", "(", "env", ".", "getAnnotation", "(", "getOwnerElement", "(", ")", ",", "LOMBOK_DATA_ANNOTATION", ")", "!=", "null", ")", ";", "}"], "docstring": "Determine if the current {@link #getField() field} defines a public accessor using\nlombok annotations.\n@param env the {@link MetadataGenerationEnvironment}\n@param getter {@code true} to look for the read accessor, {@code false} for the\nwrite accessor\n@return {@code true} if this field has a public accessor of the specified type", "docstring_tokens": ["Determine", "if", "the", "current", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/LombokPropertyDescriptor.java#L96-L111", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java", "func_name": "MultipartProperties.createMultipartConfig", "original_string": "public MultipartConfigElement createMultipartConfig() {\n\t\tMultipartConfigFactory factory = new MultipartConfigFactory();\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);\n\t\tmap.from(this.location).whenHasText().to(factory::setLocation);\n\t\tmap.from(this.maxRequestSize).to(factory::setMaxRequestSize);\n\t\tmap.from(this.maxFileSize).to(factory::setMaxFileSize);\n\t\treturn factory.createMultipartConfig();\n\t}", "language": "java", "code": "public MultipartConfigElement createMultipartConfig() {\n\t\tMultipartConfigFactory factory = new MultipartConfigFactory();\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.fileSizeThreshold).to(factory::setFileSizeThreshold);\n\t\tmap.from(this.location).whenHasText().to(factory::setLocation);\n\t\tmap.from(this.maxRequestSize).to(factory::setMaxRequestSize);\n\t\tmap.from(this.maxFileSize).to(factory::setMaxFileSize);\n\t\treturn factory.createMultipartConfig();\n\t}", "code_tokens": ["public", "MultipartConfigElement", "createMultipartConfig", "(", ")", "{", "MultipartConfigFactory", "factory", "=", "new", "MultipartConfigFactory", "(", ")", ";", "PropertyMapper", "map", "=", "PropertyMapper", ".", "get", "(", ")", ".", "alwaysApplyingWhenNonNull", "(", ")", ";", "map", ".", "from", "(", "this", ".", "fileSizeThreshold", ")", ".", "to", "(", "factory", "::", "setFileSizeThreshold", ")", ";", "map", ".", "from", "(", "this", ".", "location", ")", ".", "whenHasText", "(", ")", ".", "to", "(", "factory", "::", "setLocation", ")", ";", "map", ".", "from", "(", "this", ".", "maxRequestSize", ")", ".", "to", "(", "factory", "::", "setMaxRequestSize", ")", ";", "map", ".", "from", "(", "this", ".", "maxFileSize", ")", ".", "to", "(", "factory", "::", "setMaxFileSize", ")", ";", "return", "factory", ".", "createMultipartConfig", "(", ")", ";", "}"], "docstring": "Create a new {@link MultipartConfigElement} using the properties.\n@return a new {@link MultipartConfigElement} configured using there properties", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/MultipartProperties.java#L134-L142", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java", "func_name": "RepositoryConfigurationFactory.createDefaultRepositoryConfiguration", "original_string": "public static List<RepositoryConfiguration> createDefaultRepositoryConfiguration() {\n\t\tMavenSettings mavenSettings = new MavenSettingsReader().readSettings();\n\t\tList<RepositoryConfiguration> repositoryConfiguration = new ArrayList<>();\n\t\trepositoryConfiguration.add(MAVEN_CENTRAL);\n\t\tif (!Boolean.getBoolean(\"disableSpringSnapshotRepos\")) {\n\t\t\trepositoryConfiguration.add(SPRING_MILESTONE);\n\t\t\trepositoryConfiguration.add(SPRING_SNAPSHOT);\n\t\t}\n\t\taddDefaultCacheAsRepository(mavenSettings.getLocalRepository(),\n\t\t\t\trepositoryConfiguration);\n\t\taddActiveProfileRepositories(mavenSettings.getActiveProfiles(),\n\t\t\t\trepositoryConfiguration);\n\t\treturn repositoryConfiguration;\n\t}", "language": "java", "code": "public static List<RepositoryConfiguration> createDefaultRepositoryConfiguration() {\n\t\tMavenSettings mavenSettings = new MavenSettingsReader().readSettings();\n\t\tList<RepositoryConfiguration> repositoryConfiguration = new ArrayList<>();\n\t\trepositoryConfiguration.add(MAVEN_CENTRAL);\n\t\tif (!Boolean.getBoolean(\"disableSpringSnapshotRepos\")) {\n\t\t\trepositoryConfiguration.add(SPRING_MILESTONE);\n\t\t\trepositoryConfiguration.add(SPRING_SNAPSHOT);\n\t\t}\n\t\taddDefaultCacheAsRepository(mavenSettings.getLocalRepository(),\n\t\t\t\trepositoryConfiguration);\n\t\taddActiveProfileRepositories(mavenSettings.getActiveProfiles(),\n\t\t\t\trepositoryConfiguration);\n\t\treturn repositoryConfiguration;\n\t}", "code_tokens": ["public", "static", "List", "<", "RepositoryConfiguration", ">", "createDefaultRepositoryConfiguration", "(", ")", "{", "MavenSettings", "mavenSettings", "=", "new", "MavenSettingsReader", "(", ")", ".", "readSettings", "(", ")", ";", "List", "<", "RepositoryConfiguration", ">", "repositoryConfiguration", "=", "new", "ArrayList", "<>", "(", ")", ";", "repositoryConfiguration", ".", "add", "(", "MAVEN_CENTRAL", ")", ";", "if", "(", "!", "Boolean", ".", "getBoolean", "(", "\"disableSpringSnapshotRepos\"", ")", ")", "{", "repositoryConfiguration", ".", "add", "(", "SPRING_MILESTONE", ")", ";", "repositoryConfiguration", ".", "add", "(", "SPRING_SNAPSHOT", ")", ";", "}", "addDefaultCacheAsRepository", "(", "mavenSettings", ".", "getLocalRepository", "(", ")", ",", "repositoryConfiguration", ")", ";", "addActiveProfileRepositories", "(", "mavenSettings", ".", "getActiveProfiles", "(", ")", ",", "repositoryConfiguration", ")", ";", "return", "repositoryConfiguration", ";", "}"], "docstring": "Create a new default repository configuration.\n@return the newly-created default repository configuration", "docstring_tokens": ["Create", "a", "new", "default", "repository", "configuration", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java#L60-L73", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java", "func_name": "AutoConfigurationImportSelector.getAutoConfigurationEntry", "original_string": "protected AutoConfigurationEntry getAutoConfigurationEntry(\n\t\t\tAutoConfigurationMetadata autoConfigurationMetadata,\n\t\t\tAnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata,\n\t\t\t\tattributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = filter(configurations, autoConfigurationMetadata);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}", "language": "java", "code": "protected AutoConfigurationEntry getAutoConfigurationEntry(\n\t\t\tAutoConfigurationMetadata autoConfigurationMetadata,\n\t\t\tAnnotationMetadata annotationMetadata) {\n\t\tif (!isEnabled(annotationMetadata)) {\n\t\t\treturn EMPTY_ENTRY;\n\t\t}\n\t\tAnnotationAttributes attributes = getAttributes(annotationMetadata);\n\t\tList<String> configurations = getCandidateConfigurations(annotationMetadata,\n\t\t\t\tattributes);\n\t\tconfigurations = removeDuplicates(configurations);\n\t\tSet<String> exclusions = getExclusions(annotationMetadata, attributes);\n\t\tcheckExcludedClasses(configurations, exclusions);\n\t\tconfigurations.removeAll(exclusions);\n\t\tconfigurations = filter(configurations, autoConfigurationMetadata);\n\t\tfireAutoConfigurationImportEvents(configurations, exclusions);\n\t\treturn new AutoConfigurationEntry(configurations, exclusions);\n\t}", "code_tokens": ["protected", "AutoConfigurationEntry", "getAutoConfigurationEntry", "(", "AutoConfigurationMetadata", "autoConfigurationMetadata", ",", "AnnotationMetadata", "annotationMetadata", ")", "{", "if", "(", "!", "isEnabled", "(", "annotationMetadata", ")", ")", "{", "return", "EMPTY_ENTRY", ";", "}", "AnnotationAttributes", "attributes", "=", "getAttributes", "(", "annotationMetadata", ")", ";", "List", "<", "String", ">", "configurations", "=", "getCandidateConfigurations", "(", "annotationMetadata", ",", "attributes", ")", ";", "configurations", "=", "removeDuplicates", "(", "configurations", ")", ";", "Set", "<", "String", ">", "exclusions", "=", "getExclusions", "(", "annotationMetadata", ",", "attributes", ")", ";", "checkExcludedClasses", "(", "configurations", ",", "exclusions", ")", ";", "configurations", ".", "removeAll", "(", "exclusions", ")", ";", "configurations", "=", "filter", "(", "configurations", ",", "autoConfigurationMetadata", ")", ";", "fireAutoConfigurationImportEvents", "(", "configurations", ",", "exclusions", ")", ";", "return", "new", "AutoConfigurationEntry", "(", "configurations", ",", "exclusions", ")", ";", "}"], "docstring": "Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}\nof the importing {@link Configuration @Configuration} class.\n@param autoConfigurationMetadata the auto-configuration metadata\n@param annotationMetadata the annotation metadata of the configuration class\n@return the auto-configurations that should be imported", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java#L112-L128", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java", "func_name": "AutoConfigurationImportSelector.getAttributes", "original_string": "protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {\n\t\tString name = getAnnotationClass().getName();\n\t\tAnnotationAttributes attributes = AnnotationAttributes\n\t\t\t\t.fromMap(metadata.getAnnotationAttributes(name, true));\n\t\tAssert.notNull(attributes,\n\t\t\t\t() -> \"No auto-configuration attributes found. Is \"\n\t\t\t\t\t\t+ metadata.getClassName() + \" annotated with \"\n\t\t\t\t\t\t+ ClassUtils.getShortName(name) + \"?\");\n\t\treturn attributes;\n\t}", "language": "java", "code": "protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {\n\t\tString name = getAnnotationClass().getName();\n\t\tAnnotationAttributes attributes = AnnotationAttributes\n\t\t\t\t.fromMap(metadata.getAnnotationAttributes(name, true));\n\t\tAssert.notNull(attributes,\n\t\t\t\t() -> \"No auto-configuration attributes found. Is \"\n\t\t\t\t\t\t+ metadata.getClassName() + \" annotated with \"\n\t\t\t\t\t\t+ ClassUtils.getShortName(name) + \"?\");\n\t\treturn attributes;\n\t}", "code_tokens": ["protected", "AnnotationAttributes", "getAttributes", "(", "AnnotationMetadata", "metadata", ")", "{", "String", "name", "=", "getAnnotationClass", "(", ")", ".", "getName", "(", ")", ";", "AnnotationAttributes", "attributes", "=", "AnnotationAttributes", ".", "fromMap", "(", "metadata", ".", "getAnnotationAttributes", "(", "name", ",", "true", ")", ")", ";", "Assert", ".", "notNull", "(", "attributes", ",", "(", ")", "->", "\"No auto-configuration attributes found. Is \"", "+", "metadata", ".", "getClassName", "(", ")", "+", "\" annotated with \"", "+", "ClassUtils", ".", "getShortName", "(", "name", ")", "+", "\"?\"", ")", ";", "return", "attributes", ";", "}"], "docstring": "Return the appropriate {@link AnnotationAttributes} from the\n{@link AnnotationMetadata}. By default this method will return attributes for\n{@link #getAnnotationClass()}.\n@param metadata the annotation metadata\n@return annotation attributes", "docstring_tokens": ["Return", "the", "appropriate", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java#L151-L160", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java", "func_name": "AutoConfigurationImportSelector.getCandidateConfigurations", "original_string": "protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\n\t\t\tAnnotationAttributes attributes) {\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(\n\t\t\t\tgetSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());\n\t\tAssert.notEmpty(configurations,\n\t\t\t\t\"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}", "language": "java", "code": "protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\n\t\t\tAnnotationAttributes attributes) {\n\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(\n\t\t\t\tgetSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());\n\t\tAssert.notEmpty(configurations,\n\t\t\t\t\"No auto configuration classes found in META-INF/spring.factories. If you \"\n\t\t\t\t\t\t+ \"are using a custom packaging, make sure that file is correct.\");\n\t\treturn configurations;\n\t}", "code_tokens": ["protected", "List", "<", "String", ">", "getCandidateConfigurations", "(", "AnnotationMetadata", "metadata", ",", "AnnotationAttributes", "attributes", ")", "{", "List", "<", "String", ">", "configurations", "=", "SpringFactoriesLoader", ".", "loadFactoryNames", "(", "getSpringFactoriesLoaderFactoryClass", "(", ")", ",", "getBeanClassLoader", "(", ")", ")", ";", "Assert", ".", "notEmpty", "(", "configurations", ",", "\"No auto configuration classes found in META-INF/spring.factories. If you \"", "+", "\"are using a custom packaging, make sure that file is correct.\"", ")", ";", "return", "configurations", ";", "}"], "docstring": "Return the auto-configuration class names that should be considered. By default\nthis method will load candidates using {@link SpringFactoriesLoader} with\n{@link #getSpringFactoriesLoaderFactoryClass()}.\n@param metadata the source metadata\n@param attributes the {@link #getAttributes(AnnotationMetadata) annotation\nattributes}\n@return a list of candidate configurations", "docstring_tokens": ["Return", "the", "auto", "-", "configuration", "class", "names", "that", "should", "be", "considered", ".", "By", "default", "this", "method", "will", "load", "candidates", "using", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java#L179-L187", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java", "func_name": "AutoConfigurationImportSelector.handleInvalidExcludes", "original_string": "protected void handleInvalidExcludes(List<String> invalidExcludes) {\n\t\tStringBuilder message = new StringBuilder();\n\t\tfor (String exclude : invalidExcludes) {\n\t\t\tmessage.append(\"\\t- \").append(exclude).append(String.format(\"%n\"));\n\t\t}\n\t\tthrow new IllegalStateException(String\n\t\t\t\t.format(\"The following classes could not be excluded because they are\"\n\t\t\t\t\t\t+ \" not auto-configuration classes:%n%s\", message));\n\t}", "language": "java", "code": "protected void handleInvalidExcludes(List<String> invalidExcludes) {\n\t\tStringBuilder message = new StringBuilder();\n\t\tfor (String exclude : invalidExcludes) {\n\t\t\tmessage.append(\"\\t- \").append(exclude).append(String.format(\"%n\"));\n\t\t}\n\t\tthrow new IllegalStateException(String\n\t\t\t\t.format(\"The following classes could not be excluded because they are\"\n\t\t\t\t\t\t+ \" not auto-configuration classes:%n%s\", message));\n\t}", "code_tokens": ["protected", "void", "handleInvalidExcludes", "(", "List", "<", "String", ">", "invalidExcludes", ")", "{", "StringBuilder", "message", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "String", "exclude", ":", "invalidExcludes", ")", "{", "message", ".", "append", "(", "\"\\t- \"", ")", ".", "append", "(", "exclude", ")", ".", "append", "(", "String", ".", "format", "(", "\"%n\"", ")", ")", ";", "}", "throw", "new", "IllegalStateException", "(", "String", ".", "format", "(", "\"The following classes could not be excluded because they are\"", "+", "\" not auto-configuration classes:%n%s\"", ",", "message", ")", ")", ";", "}"], "docstring": "Handle any invalid excludes that have been specified.\n@param invalidExcludes the list of invalid excludes (will always have at least one\nelement)", "docstring_tokens": ["Handle", "any", "invalid", "excludes", "that", "have", "been", "specified", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java#L217-L225", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java", "func_name": "AutoConfigurationImportSelector.getExclusions", "original_string": "protected Set<String> getExclusions(AnnotationMetadata metadata,\n\t\t\tAnnotationAttributes attributes) {\n\t\tSet<String> excluded = new LinkedHashSet<>();\n\t\texcluded.addAll(asList(attributes, \"exclude\"));\n\t\texcluded.addAll(Arrays.asList(attributes.getStringArray(\"excludeName\")));\n\t\texcluded.addAll(getExcludeAutoConfigurationsProperty());\n\t\treturn excluded;\n\t}", "language": "java", "code": "protected Set<String> getExclusions(AnnotationMetadata metadata,\n\t\t\tAnnotationAttributes attributes) {\n\t\tSet<String> excluded = new LinkedHashSet<>();\n\t\texcluded.addAll(asList(attributes, \"exclude\"));\n\t\texcluded.addAll(Arrays.asList(attributes.getStringArray(\"excludeName\")));\n\t\texcluded.addAll(getExcludeAutoConfigurationsProperty());\n\t\treturn excluded;\n\t}", "code_tokens": ["protected", "Set", "<", "String", ">", "getExclusions", "(", "AnnotationMetadata", "metadata", ",", "AnnotationAttributes", "attributes", ")", "{", "Set", "<", "String", ">", "excluded", "=", "new", "LinkedHashSet", "<>", "(", ")", ";", "excluded", ".", "addAll", "(", "asList", "(", "attributes", ",", "\"exclude\"", ")", ")", ";", "excluded", ".", "addAll", "(", "Arrays", ".", "asList", "(", "attributes", ".", "getStringArray", "(", "\"excludeName\"", ")", ")", ")", ";", "excluded", ".", "addAll", "(", "getExcludeAutoConfigurationsProperty", "(", ")", ")", ";", "return", "excluded", ";", "}"], "docstring": "Return any exclusions that limit the candidate configurations.\n@param metadata the source metadata\n@param attributes the {@link #getAttributes(AnnotationMetadata) annotation\nattributes}\n@return exclusions or an empty set", "docstring_tokens": ["Return", "any", "exclusions", "that", "limit", "the", "candidate", "configurations", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java#L234-L241", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "func_name": "Configurations.merge", "original_string": "protected Configurations merge(Configurations other) {\n\t\tSet<Class<?>> mergedClasses = new LinkedHashSet<>(getClasses());\n\t\tmergedClasses.addAll(other.getClasses());\n\t\treturn merge(mergedClasses);\n\t}", "language": "java", "code": "protected Configurations merge(Configurations other) {\n\t\tSet<Class<?>> mergedClasses = new LinkedHashSet<>(getClasses());\n\t\tmergedClasses.addAll(other.getClasses());\n\t\treturn merge(mergedClasses);\n\t}", "code_tokens": ["protected", "Configurations", "merge", "(", "Configurations", "other", ")", "{", "Set", "<", "Class", "<", "?", ">", ">", "mergedClasses", "=", "new", "LinkedHashSet", "<>", "(", "getClasses", "(", ")", ")", ";", "mergedClasses", ".", "addAll", "(", "other", ".", "getClasses", "(", ")", ")", ";", "return", "merge", "(", "mergedClasses", ")", ";", "}"], "docstring": "Merge configurations from another source of the same type.\n@param other the other {@link Configurations} (must be of the same type as this\ninstance)\n@return a new configurations instance (must be of the same type as this instance)", "docstring_tokens": ["Merge", "configurations", "from", "another", "source", "of", "the", "same", "type", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#L89-L93", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java", "func_name": "Configurations.getClasses", "original_string": "public static Class<?>[] getClasses(Collection<Configurations> configurations) {\n\t\tList<Configurations> ordered = new ArrayList<>(configurations);\n\t\tordered.sort(COMPARATOR);\n\t\tList<Configurations> collated = collate(ordered);\n\t\tLinkedHashSet<Class<?>> classes = collated.stream()\n\t\t\t\t.flatMap(Configurations::streamClasses)\n\t\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "language": "java", "code": "public static Class<?>[] getClasses(Collection<Configurations> configurations) {\n\t\tList<Configurations> ordered = new ArrayList<>(configurations);\n\t\tordered.sort(COMPARATOR);\n\t\tList<Configurations> collated = collate(ordered);\n\t\tLinkedHashSet<Class<?>> classes = collated.stream()\n\t\t\t\t.flatMap(Configurations::streamClasses)\n\t\t\t\t.collect(Collectors.toCollection(LinkedHashSet::new));\n\t\treturn ClassUtils.toClassArray(classes);\n\t}", "code_tokens": ["public", "static", "Class", "<", "?", ">", "[", "]", "getClasses", "(", "Collection", "<", "Configurations", ">", "configurations", ")", "{", "List", "<", "Configurations", ">", "ordered", "=", "new", "ArrayList", "<>", "(", "configurations", ")", ";", "ordered", ".", "sort", "(", "COMPARATOR", ")", ";", "List", "<", "Configurations", ">", "collated", "=", "collate", "(", "ordered", ")", ";", "LinkedHashSet", "<", "Class", "<", "?", ">", ">", "classes", "=", "collated", ".", "stream", "(", ")", ".", "flatMap", "(", "Configurations", "::", "streamClasses", ")", ".", "collect", "(", "Collectors", ".", "toCollection", "(", "LinkedHashSet", "::", "new", ")", ")", ";", "return", "ClassUtils", ".", "toClassArray", "(", "classes", ")", ";", "}"], "docstring": "Return the classes from all the specified configurations in the order that they\nwould be registered.\n@param configurations the source configuration\n@return configuration classes in registration order", "docstring_tokens": ["Return", "the", "classes", "from", "all", "the", "specified", "configurations", "in", "the", "order", "that", "they", "would", "be", "registered", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/annotation/Configurations.java#L118-L126", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolver.java", "func_name": "EndpointLinksResolver.resolveLinks", "original_string": "public Map<String, Link> resolveLinks(String requestUrl) {\n\t\tString normalizedUrl = normalizeRequestUrl(requestUrl);\n\t\tMap<String, Link> links = new LinkedHashMap<>();\n\t\tlinks.put(\"self\", new Link(normalizedUrl));\n\t\tfor (ExposableEndpoint<?> endpoint : this.endpoints) {\n\t\t\tif (endpoint instanceof ExposableWebEndpoint) {\n\t\t\t\tcollectLinks(links, (ExposableWebEndpoint) endpoint, normalizedUrl);\n\t\t\t}\n\t\t\telse if (endpoint instanceof PathMappedEndpoint) {\n\t\t\t\tString rootPath = ((PathMappedEndpoint) endpoint).getRootPath();\n\t\t\t\tLink link = createLink(normalizedUrl, rootPath);\n\t\t\t\tlinks.put(endpoint.getEndpointId().toLowerCaseString(), link);\n\t\t\t}\n\t\t}\n\t\treturn links;\n\t}", "language": "java", "code": "public Map<String, Link> resolveLinks(String requestUrl) {\n\t\tString normalizedUrl = normalizeRequestUrl(requestUrl);\n\t\tMap<String, Link> links = new LinkedHashMap<>();\n\t\tlinks.put(\"self\", new Link(normalizedUrl));\n\t\tfor (ExposableEndpoint<?> endpoint : this.endpoints) {\n\t\t\tif (endpoint instanceof ExposableWebEndpoint) {\n\t\t\t\tcollectLinks(links, (ExposableWebEndpoint) endpoint, normalizedUrl);\n\t\t\t}\n\t\t\telse if (endpoint instanceof PathMappedEndpoint) {\n\t\t\t\tString rootPath = ((PathMappedEndpoint) endpoint).getRootPath();\n\t\t\t\tLink link = createLink(normalizedUrl, rootPath);\n\t\t\t\tlinks.put(endpoint.getEndpointId().toLowerCaseString(), link);\n\t\t\t}\n\t\t}\n\t\treturn links;\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Link", ">", "resolveLinks", "(", "String", "requestUrl", ")", "{", "String", "normalizedUrl", "=", "normalizeRequestUrl", "(", "requestUrl", ")", ";", "Map", "<", "String", ",", "Link", ">", "links", "=", "new", "LinkedHashMap", "<>", "(", ")", ";", "links", ".", "put", "(", "\"self\"", ",", "new", "Link", "(", "normalizedUrl", ")", ")", ";", "for", "(", "ExposableEndpoint", "<", "?", ">", "endpoint", ":", "this", ".", "endpoints", ")", "{", "if", "(", "endpoint", "instanceof", "ExposableWebEndpoint", ")", "{", "collectLinks", "(", "links", ",", "(", "ExposableWebEndpoint", ")", "endpoint", ",", "normalizedUrl", ")", ";", "}", "else", "if", "(", "endpoint", "instanceof", "PathMappedEndpoint", ")", "{", "String", "rootPath", "=", "(", "(", "PathMappedEndpoint", ")", "endpoint", ")", ".", "getRootPath", "(", ")", ";", "Link", "link", "=", "createLink", "(", "normalizedUrl", ",", "rootPath", ")", ";", "links", ".", "put", "(", "endpoint", ".", "getEndpointId", "(", ")", ".", "toLowerCaseString", "(", ")", ",", "link", ")", ";", "}", "}", "return", "links", ";", "}"], "docstring": "Resolves links to the known endpoints based on a request with the given\n{@code requestUrl}.\n@param requestUrl the url of the request for the endpoint links\n@return the links", "docstring_tokens": ["Resolves", "links", "to", "the", "known", "endpoints", "based", "on", "a", "request", "with", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointLinksResolver.java#L70-L85", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java", "func_name": "Handler.addToRootFileCache", "original_string": "static void addToRootFileCache(File sourceFile, JarFile jarFile) {\n\t\tMap<File, JarFile> cache = rootFileCache.get();\n\t\tif (cache == null) {\n\t\t\tcache = new ConcurrentHashMap<>();\n\t\t\trootFileCache = new SoftReference<>(cache);\n\t\t}\n\t\tcache.put(sourceFile, jarFile);\n\t}", "language": "java", "code": "static void addToRootFileCache(File sourceFile, JarFile jarFile) {\n\t\tMap<File, JarFile> cache = rootFileCache.get();\n\t\tif (cache == null) {\n\t\t\tcache = new ConcurrentHashMap<>();\n\t\t\trootFileCache = new SoftReference<>(cache);\n\t\t}\n\t\tcache.put(sourceFile, jarFile);\n\t}", "code_tokens": ["static", "void", "addToRootFileCache", "(", "File", "sourceFile", ",", "JarFile", "jarFile", ")", "{", "Map", "<", "File", ",", "JarFile", ">", "cache", "=", "rootFileCache", ".", "get", "(", ")", ";", "if", "(", "cache", "==", "null", ")", "{", "cache", "=", "new", "ConcurrentHashMap", "<>", "(", ")", ";", "rootFileCache", "=", "new", "SoftReference", "<>", "(", "cache", ")", ";", "}", "cache", ".", "put", "(", "sourceFile", ",", "jarFile", ")", ";", "}"], "docstring": "Add the given {@link JarFile} to the root file cache.\n@param sourceFile the source file to add\n@param jarFile the jar file.", "docstring_tokens": ["Add", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java#L333-L340", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java", "func_name": "UndertowServletWebServerFactory.getUndertowWebServer", "original_string": "protected UndertowServletWebServer getUndertowWebServer(Builder builder,\n\t\t\tDeploymentManager manager, int port) {\n\t\treturn new UndertowServletWebServer(builder, manager, getContextPath(),\n\t\t\t\tisUseForwardHeaders(), port >= 0, getCompression(), getServerHeader());\n\t}", "language": "java", "code": "protected UndertowServletWebServer getUndertowWebServer(Builder builder,\n\t\t\tDeploymentManager manager, int port) {\n\t\treturn new UndertowServletWebServer(builder, manager, getContextPath(),\n\t\t\t\tisUseForwardHeaders(), port >= 0, getCompression(), getServerHeader());\n\t}", "code_tokens": ["protected", "UndertowServletWebServer", "getUndertowWebServer", "(", "Builder", "builder", ",", "DeploymentManager", "manager", ",", "int", "port", ")", "{", "return", "new", "UndertowServletWebServer", "(", "builder", ",", "manager", ",", "getContextPath", "(", ")", ",", "isUseForwardHeaders", "(", ")", ",", "port", ">=", "0", ",", "getCompression", "(", ")", ",", "getServerHeader", "(", ")", ")", ";", "}"], "docstring": "Factory method called to create the {@link UndertowServletWebServer}. Subclasses\ncan override this method to return a different {@link UndertowServletWebServer} or\napply additional processing to the {@link Builder} and {@link DeploymentManager}\nused to bootstrap Undertow\n@param builder the builder\n@param manager the deployment manager\n@param port the port that Undertow should listen on\n@return a new {@link UndertowServletWebServer} instance", "docstring_tokens": ["Factory", "method", "called", "to", "create", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java#L445-L449", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java", "func_name": "GitProperties.getShortCommitId", "original_string": "public String getShortCommitId() {\n\t\tString shortId = get(\"commit.id.abbrev\");\n\t\tif (shortId != null) {\n\t\t\treturn shortId;\n\t\t}\n\t\tString id = getCommitId();\n\t\tif (id == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn (id.length() > 7) ? id.substring(0, 7) : id;\n\t}", "language": "java", "code": "public String getShortCommitId() {\n\t\tString shortId = get(\"commit.id.abbrev\");\n\t\tif (shortId != null) {\n\t\t\treturn shortId;\n\t\t}\n\t\tString id = getCommitId();\n\t\tif (id == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn (id.length() > 7) ? id.substring(0, 7) : id;\n\t}", "code_tokens": ["public", "String", "getShortCommitId", "(", ")", "{", "String", "shortId", "=", "get", "(", "\"commit.id.abbrev\"", ")", ";", "if", "(", "shortId", "!=", "null", ")", "{", "return", "shortId", ";", "}", "String", "id", "=", "getCommitId", "(", ")", ";", "if", "(", "id", "==", "null", ")", "{", "return", "null", ";", "}", "return", "(", "id", ".", "length", "(", ")", ">", "7", ")", "?", "id", ".", "substring", "(", "0", ",", "7", ")", ":", "id", ";", "}"], "docstring": "Return the abbreviated id of the commit or {@code null}.\n@return the short commit id", "docstring_tokens": ["Return", "the", "abbreviated", "id", "of", "the", "commit", "or", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java#L56-L66", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java", "func_name": "GitProperties.coerceToEpoch", "original_string": "private static String coerceToEpoch(String s) {\n\t\tLong epoch = parseEpochSecond(s);\n\t\tif (epoch != null) {\n\t\t\treturn String.valueOf(epoch);\n\t\t}\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\ttry {\n\t\t\treturn String.valueOf(format.parse(s).getTime());\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn s;\n\t\t}\n\t}", "language": "java", "code": "private static String coerceToEpoch(String s) {\n\t\tLong epoch = parseEpochSecond(s);\n\t\tif (epoch != null) {\n\t\t\treturn String.valueOf(epoch);\n\t\t}\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\ttry {\n\t\t\treturn String.valueOf(format.parse(s).getTime());\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn s;\n\t\t}\n\t}", "code_tokens": ["private", "static", "String", "coerceToEpoch", "(", "String", "s", ")", "{", "Long", "epoch", "=", "parseEpochSecond", "(", "s", ")", ";", "if", "(", "epoch", "!=", "null", ")", "{", "return", "String", ".", "valueOf", "(", "epoch", ")", ";", "}", "SimpleDateFormat", "format", "=", "new", "SimpleDateFormat", "(", "\"yyyy-MM-dd'T'HH:mm:ssZ\"", ")", ";", "try", "{", "return", "String", ".", "valueOf", "(", "format", ".", "parse", "(", "s", ")", ".", "getTime", "(", ")", ")", ";", "}", "catch", "(", "ParseException", "ex", ")", "{", "return", "s", ";", "}", "}"], "docstring": "Attempt to convert the specified value to epoch time. Git properties information\nare known to be specified either as epoch time in seconds or using a specific date\nformat.\n@param s the value to coerce to\n@return the epoch time in milliseconds or the original value if it couldn't be\nconverted", "docstring_tokens": ["Attempt", "to", "convert", "the", "specified", "value", "to", "epoch", "time", ".", "Git", "properties", "information", "are", "known", "to", "be", "specified", "either", "as", "epoch", "time", "in", "seconds", "or", "using", "a", "specific", "date", "format", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java#L106-L118", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java", "func_name": "ApplicationPid.write", "original_string": "public void write(File file) throws IOException {\n\t\tAssert.state(this.pid != null, \"No PID available\");\n\t\tcreateParentFolder(file);\n\t\tif (file.exists()) {\n\t\t\tassertCanOverwrite(file);\n\t\t}\n\t\ttry (FileWriter writer = new FileWriter(file)) {\n\t\t\twriter.append(this.pid);\n\t\t}\n\t}", "language": "java", "code": "public void write(File file) throws IOException {\n\t\tAssert.state(this.pid != null, \"No PID available\");\n\t\tcreateParentFolder(file);\n\t\tif (file.exists()) {\n\t\t\tassertCanOverwrite(file);\n\t\t}\n\t\ttry (FileWriter writer = new FileWriter(file)) {\n\t\t\twriter.append(this.pid);\n\t\t}\n\t}", "code_tokens": ["public", "void", "write", "(", "File", "file", ")", "throws", "IOException", "{", "Assert", ".", "state", "(", "this", ".", "pid", "!=", "null", ",", "\"No PID available\"", ")", ";", "createParentFolder", "(", "file", ")", ";", "if", "(", "file", ".", "exists", "(", ")", ")", "{", "assertCanOverwrite", "(", "file", ")", ";", "}", "try", "(", "FileWriter", "writer", "=", "new", "FileWriter", "(", "file", ")", ")", "{", "writer", ".", "append", "(", "this", ".", "pid", ")", ";", "}", "}"], "docstring": "Write the PID to the specified file.\n@param file the PID file\n@throws IllegalStateException if no PID is available.\n@throws IOException if the file cannot be written", "docstring_tokens": ["Write", "the", "PID", "to", "the", "specified", "file", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPid.java#L90-L99", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.preInitializeLeakyClasses", "original_string": "private void preInitializeLeakyClasses() {\n\t\ttry {\n\t\t\tClass<?> readerClass = ClassNameReader.class;\n\t\t\tField field = readerClass.getDeclaredField(\"EARLY_EXIT\");\n\t\t\tfield.setAccessible(true);\n\t\t\t((Throwable) field.get(null)).fillInStackTrace();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.warn(\"Unable to pre-initialize classes\", ex);\n\t\t}\n\t}", "language": "java", "code": "private void preInitializeLeakyClasses() {\n\t\ttry {\n\t\t\tClass<?> readerClass = ClassNameReader.class;\n\t\t\tField field = readerClass.getDeclaredField(\"EARLY_EXIT\");\n\t\t\tfield.setAccessible(true);\n\t\t\t((Throwable) field.get(null)).fillInStackTrace();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthis.logger.warn(\"Unable to pre-initialize classes\", ex);\n\t\t}\n\t}", "code_tokens": ["private", "void", "preInitializeLeakyClasses", "(", ")", "{", "try", "{", "Class", "<", "?", ">", "readerClass", "=", "ClassNameReader", ".", "class", ";", "Field", "field", "=", "readerClass", ".", "getDeclaredField", "(", "\"EARLY_EXIT\"", ")", ";", "field", ".", "setAccessible", "(", "true", ")", ";", "(", "(", "Throwable", ")", "field", ".", "get", "(", "null", ")", ")", ".", "fillInStackTrace", "(", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "this", ".", "logger", ".", "warn", "(", "\"Unable to pre-initialize classes\"", ",", "ex", ")", ";", "}", "}"], "docstring": "CGLIB has a private exception field which needs to initialized early to ensure that\nthe stacktrace doesn't retain a reference to the RestartClassLoader.", "docstring_tokens": ["CGLIB", "has", "a", "private", "exception", "field", "which", "needs", "to", "initialized", "early", "to", "ensure", "that", "the", "stacktrace", "doesn", "t", "retain", "a", "reference", "to", "the", "RestartClassLoader", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L188-L198", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.addUrls", "original_string": "public void addUrls(Collection<URL> urls) {\n\t\tAssert.notNull(urls, \"Urls must not be null\");\n\t\tthis.urls.addAll(urls);\n\t}", "language": "java", "code": "public void addUrls(Collection<URL> urls) {\n\t\tAssert.notNull(urls, \"Urls must not be null\");\n\t\tthis.urls.addAll(urls);\n\t}", "code_tokens": ["public", "void", "addUrls", "(", "Collection", "<", "URL", ">", "urls", ")", "{", "Assert", ".", "notNull", "(", "urls", ",", "\"Urls must not be null\"", ")", ";", "this", ".", "urls", ".", "addAll", "(", "urls", ")", ";", "}"], "docstring": "Add additional URLs to be includes in the next restart.\n@param urls the urls to add", "docstring_tokens": ["Add", "additional", "URLs", "to", "be", "includes", "in", "the", "next", "restart", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L212-L215", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.restart", "original_string": "public void restart(FailureHandler failureHandler) {\n\t\tif (!this.enabled) {\n\t\t\tthis.logger.debug(\"Application restart is disabled\");\n\t\t\treturn;\n\t\t}\n\t\tthis.logger.debug(\"Restarting application\");\n\t\tgetLeakSafeThread().call(() -> {\n\t\t\tRestarter.this.stop();\n\t\t\tRestarter.this.start(failureHandler);\n\t\t\treturn null;\n\t\t});\n\t}", "language": "java", "code": "public void restart(FailureHandler failureHandler) {\n\t\tif (!this.enabled) {\n\t\t\tthis.logger.debug(\"Application restart is disabled\");\n\t\t\treturn;\n\t\t}\n\t\tthis.logger.debug(\"Restarting application\");\n\t\tgetLeakSafeThread().call(() -> {\n\t\t\tRestarter.this.stop();\n\t\t\tRestarter.this.start(failureHandler);\n\t\t\treturn null;\n\t\t});\n\t}", "code_tokens": ["public", "void", "restart", "(", "FailureHandler", "failureHandler", ")", "{", "if", "(", "!", "this", ".", "enabled", ")", "{", "this", ".", "logger", ".", "debug", "(", "\"Application restart is disabled\"", ")", ";", "return", ";", "}", "this", ".", "logger", ".", "debug", "(", "\"Restarting application\"", ")", ";", "getLeakSafeThread", "(", ")", ".", "call", "(", "(", ")", "->", "{", "Restarter", ".", "this", ".", "stop", "(", ")", ";", "Restarter", ".", "this", ".", "start", "(", "failureHandler", ")", ";", "return", "null", ";", "}", ")", ";", "}"], "docstring": "Restart the running application.\n@param failureHandler a failure handler to deal with application that doesn't start", "docstring_tokens": ["Restart", "the", "running", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L245-L256", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.start", "original_string": "protected void start(FailureHandler failureHandler) throws Exception {\n\t\tdo {\n\t\t\tThrowable error = doStart();\n\t\t\tif (error == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (failureHandler.handle(error) == Outcome.ABORT) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\twhile (true);\n\t}", "language": "java", "code": "protected void start(FailureHandler failureHandler) throws Exception {\n\t\tdo {\n\t\t\tThrowable error = doStart();\n\t\t\tif (error == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (failureHandler.handle(error) == Outcome.ABORT) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\twhile (true);\n\t}", "code_tokens": ["protected", "void", "start", "(", "FailureHandler", "failureHandler", ")", "throws", "Exception", "{", "do", "{", "Throwable", "error", "=", "doStart", "(", ")", ";", "if", "(", "error", "==", "null", ")", "{", "return", ";", "}", "if", "(", "failureHandler", ".", "handle", "(", "error", ")", "==", "Outcome", ".", "ABORT", ")", "{", "return", ";", "}", "}", "while", "(", "true", ")", ";", "}"], "docstring": "Start the application.\n@param failureHandler a failure handler for application that won't start\n@throws Exception in case of errors", "docstring_tokens": ["Start", "the", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L263-L274", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.relaunch", "original_string": "protected Throwable relaunch(ClassLoader classLoader) throws Exception {\n\t\tRestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,\n\t\t\t\tthis.args, this.exceptionHandler);\n\t\tlauncher.start();\n\t\tlauncher.join();\n\t\treturn launcher.getError();\n\t}", "language": "java", "code": "protected Throwable relaunch(ClassLoader classLoader) throws Exception {\n\t\tRestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,\n\t\t\t\tthis.args, this.exceptionHandler);\n\t\tlauncher.start();\n\t\tlauncher.join();\n\t\treturn launcher.getError();\n\t}", "code_tokens": ["protected", "Throwable", "relaunch", "(", "ClassLoader", "classLoader", ")", "throws", "Exception", "{", "RestartLauncher", "launcher", "=", "new", "RestartLauncher", "(", "classLoader", ",", "this", ".", "mainClassName", ",", "this", ".", "args", ",", "this", ".", "exceptionHandler", ")", ";", "launcher", ".", "start", "(", ")", ";", "launcher", ".", "join", "(", ")", ";", "return", "launcher", ".", "getError", "(", ")", ";", "}"], "docstring": "Relaunch the application using the specified classloader.\n@param classLoader the classloader to use\n@return any exception that caused the launch to fail or {@code null}\n@throws Exception in case of errors", "docstring_tokens": ["Relaunch", "the", "application", "using", "the", "specified", "classloader", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L295-L301", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.stop", "original_string": "protected void stop() throws Exception {\n\t\tthis.logger.debug(\"Stopping application\");\n\t\tthis.stopLock.lock();\n\t\ttry {\n\t\t\tfor (ConfigurableApplicationContext context : this.rootContexts) {\n\t\t\t\tcontext.close();\n\t\t\t\tthis.rootContexts.remove(context);\n\t\t\t}\n\t\t\tcleanupCaches();\n\t\t\tif (this.forceReferenceCleanup) {\n\t\t\t\tforceReferenceCleanup();\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.stopLock.unlock();\n\t\t}\n\t\tSystem.gc();\n\t\tSystem.runFinalization();\n\t}", "language": "java", "code": "protected void stop() throws Exception {\n\t\tthis.logger.debug(\"Stopping application\");\n\t\tthis.stopLock.lock();\n\t\ttry {\n\t\t\tfor (ConfigurableApplicationContext context : this.rootContexts) {\n\t\t\t\tcontext.close();\n\t\t\t\tthis.rootContexts.remove(context);\n\t\t\t}\n\t\t\tcleanupCaches();\n\t\t\tif (this.forceReferenceCleanup) {\n\t\t\t\tforceReferenceCleanup();\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.stopLock.unlock();\n\t\t}\n\t\tSystem.gc();\n\t\tSystem.runFinalization();\n\t}", "code_tokens": ["protected", "void", "stop", "(", ")", "throws", "Exception", "{", "this", ".", "logger", ".", "debug", "(", "\"Stopping application\"", ")", ";", "this", ".", "stopLock", ".", "lock", "(", ")", ";", "try", "{", "for", "(", "ConfigurableApplicationContext", "context", ":", "this", ".", "rootContexts", ")", "{", "context", ".", "close", "(", ")", ";", "this", ".", "rootContexts", ".", "remove", "(", "context", ")", ";", "}", "cleanupCaches", "(", ")", ";", "if", "(", "this", ".", "forceReferenceCleanup", ")", "{", "forceReferenceCleanup", "(", ")", ";", "}", "}", "finally", "{", "this", ".", "stopLock", ".", "unlock", "(", ")", ";", "}", "System", ".", "gc", "(", ")", ";", "System", ".", "runFinalization", "(", ")", ";", "}"], "docstring": "Stop the application.\n@throws Exception in case of errors", "docstring_tokens": ["Stop", "the", "application", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L307-L325", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.finish", "original_string": "void finish() {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (!isFinished()) {\n\t\t\t\tthis.logger = DeferredLog.replay(this.logger,\n\t\t\t\t\t\tLogFactory.getLog(getClass()));\n\t\t\t\tthis.finished = true;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "void finish() {\n\t\tsynchronized (this.monitor) {\n\t\t\tif (!isFinished()) {\n\t\t\t\tthis.logger = DeferredLog.replay(this.logger,\n\t\t\t\t\t\tLogFactory.getLog(getClass()));\n\t\t\t\tthis.finished = true;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["void", "finish", "(", ")", "{", "synchronized", "(", "this", ".", "monitor", ")", "{", "if", "(", "!", "isFinished", "(", ")", ")", "{", "this", ".", "logger", "=", "DeferredLog", ".", "replay", "(", "this", ".", "logger", ",", "LogFactory", ".", "getLog", "(", "getClass", "(", ")", ")", ")", ";", "this", ".", "finished", "=", "true", ";", "}", "}", "}"], "docstring": "Called to finish {@link Restarter} initialization when application logging is\navailable.", "docstring_tokens": ["Called", "to", "finish", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L415-L423", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.initialize", "original_string": "public static void initialize(String[] args, RestartInitializer initializer) {\n\t\tinitialize(args, false, initializer, true);\n\t}", "language": "java", "code": "public static void initialize(String[] args, RestartInitializer initializer) {\n\t\tinitialize(args, false, initializer, true);\n\t}", "code_tokens": ["public", "static", "void", "initialize", "(", "String", "[", "]", "args", ",", "RestartInitializer", "initializer", ")", "{", "initialize", "(", "args", ",", "false", ",", "initializer", ",", "true", ")", ";", "}"], "docstring": "Initialize restart support. See\n{@link #initialize(String[], boolean, RestartInitializer)} for details.\n@param args main application arguments\n@param initializer the restart initializer\n@see #initialize(String[], boolean, RestartInitializer)", "docstring_tokens": ["Initialize", "restart", "support", ".", "See", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L511-L513", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.initialize", "original_string": "public static void initialize(String[] args, boolean forceReferenceCleanup,\n\t\t\tRestartInitializer initializer) {\n\t\tinitialize(args, forceReferenceCleanup, initializer, true);\n\t}", "language": "java", "code": "public static void initialize(String[] args, boolean forceReferenceCleanup,\n\t\t\tRestartInitializer initializer) {\n\t\tinitialize(args, forceReferenceCleanup, initializer, true);\n\t}", "code_tokens": ["public", "static", "void", "initialize", "(", "String", "[", "]", "args", ",", "boolean", "forceReferenceCleanup", ",", "RestartInitializer", "initializer", ")", "{", "initialize", "(", "args", ",", "forceReferenceCleanup", ",", "initializer", ",", "true", ")", ";", "}"], "docstring": "Initialize restart support. See\n{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details.\n@param args main application arguments\n@param forceReferenceCleanup if forcing of soft/weak reference should happen on\n@param initializer the restart initializer\n@see #initialize(String[], boolean, RestartInitializer)", "docstring_tokens": ["Initialize", "restart", "support", ".", "See", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L534-L537", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java", "func_name": "Restarter.initialize", "original_string": "public static void initialize(String[] args, boolean forceReferenceCleanup,\n\t\t\tRestartInitializer initializer, boolean restartOnInitialize) {\n\t\tRestarter localInstance = null;\n\t\tsynchronized (INSTANCE_MONITOR) {\n\t\t\tif (instance == null) {\n\t\t\t\tlocalInstance = new Restarter(Thread.currentThread(), args,\n\t\t\t\t\t\tforceReferenceCleanup, initializer);\n\t\t\t\tinstance = localInstance;\n\t\t\t}\n\t\t}\n\t\tif (localInstance != null) {\n\t\t\tlocalInstance.initialize(restartOnInitialize);\n\t\t}\n\t}", "language": "java", "code": "public static void initialize(String[] args, boolean forceReferenceCleanup,\n\t\t\tRestartInitializer initializer, boolean restartOnInitialize) {\n\t\tRestarter localInstance = null;\n\t\tsynchronized (INSTANCE_MONITOR) {\n\t\t\tif (instance == null) {\n\t\t\t\tlocalInstance = new Restarter(Thread.currentThread(), args,\n\t\t\t\t\t\tforceReferenceCleanup, initializer);\n\t\t\t\tinstance = localInstance;\n\t\t\t}\n\t\t}\n\t\tif (localInstance != null) {\n\t\t\tlocalInstance.initialize(restartOnInitialize);\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "initialize", "(", "String", "[", "]", "args", ",", "boolean", "forceReferenceCleanup", ",", "RestartInitializer", "initializer", ",", "boolean", "restartOnInitialize", ")", "{", "Restarter", "localInstance", "=", "null", ";", "synchronized", "(", "INSTANCE_MONITOR", ")", "{", "if", "(", "instance", "==", "null", ")", "{", "localInstance", "=", "new", "Restarter", "(", "Thread", ".", "currentThread", "(", ")", ",", "args", ",", "forceReferenceCleanup", ",", "initializer", ")", ";", "instance", "=", "localInstance", ";", "}", "}", "if", "(", "localInstance", "!=", "null", ")", "{", "localInstance", ".", "initialize", "(", "restartOnInitialize", ")", ";", "}", "}"], "docstring": "Initialize restart support for the current application. Called automatically by\n{@link RestartApplicationListener} but can also be called directly if main\napplication arguments are not the same as those passed to the\n{@link SpringApplication}.\n@param args main application arguments\n@param forceReferenceCleanup if forcing of soft/weak reference should happen on\neach restart. This will slow down restarts and is intended primarily for testing\n@param initializer the restart initializer\n@param restartOnInitialize if the restarter should be restarted immediately when\nthe {@link RestartInitializer} returns non {@code null} results", "docstring_tokens": ["Initialize", "restart", "support", "for", "the", "current", "application", ".", "Called", "automatically", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java#L551-L564", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastInstanceFactory.java", "func_name": "HazelcastInstanceFactory.getHazelcastInstance", "original_string": "public HazelcastInstance getHazelcastInstance() {\n\t\tif (StringUtils.hasText(this.config.getInstanceName())) {\n\t\t\treturn Hazelcast.getOrCreateHazelcastInstance(this.config);\n\t\t}\n\t\treturn Hazelcast.newHazelcastInstance(this.config);\n\t}", "language": "java", "code": "public HazelcastInstance getHazelcastInstance() {\n\t\tif (StringUtils.hasText(this.config.getInstanceName())) {\n\t\t\treturn Hazelcast.getOrCreateHazelcastInstance(this.config);\n\t\t}\n\t\treturn Hazelcast.newHazelcastInstance(this.config);\n\t}", "code_tokens": ["public", "HazelcastInstance", "getHazelcastInstance", "(", ")", "{", "if", "(", "StringUtils", ".", "hasText", "(", "this", ".", "config", ".", "getInstanceName", "(", ")", ")", ")", "{", "return", "Hazelcast", ".", "getOrCreateHazelcastInstance", "(", "this", ".", "config", ")", ";", "}", "return", "Hazelcast", ".", "newHazelcastInstance", "(", "this", ".", "config", ")", ";", "}"], "docstring": "Get the {@link HazelcastInstance}.\n@return the {@link HazelcastInstance}", "docstring_tokens": ["Get", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastInstanceFactory.java#L87-L92", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java", "func_name": "HealthWebEndpointResponseMapper.mapDetails", "original_string": "public WebEndpointResponse<Health> mapDetails(Supplier<Health> health,\n\t\t\tSecurityContext securityContext) {\n\t\tif (canSeeDetails(securityContext, this.showDetails)) {\n\t\t\tHealth healthDetails = health.get();\n\t\t\tif (healthDetails != null) {\n\t\t\t\treturn createWebEndpointResponse(healthDetails);\n\t\t\t}\n\t\t}\n\t\treturn new WebEndpointResponse<>(WebEndpointResponse.STATUS_NOT_FOUND);\n\t}", "language": "java", "code": "public WebEndpointResponse<Health> mapDetails(Supplier<Health> health,\n\t\t\tSecurityContext securityContext) {\n\t\tif (canSeeDetails(securityContext, this.showDetails)) {\n\t\t\tHealth healthDetails = health.get();\n\t\t\tif (healthDetails != null) {\n\t\t\t\treturn createWebEndpointResponse(healthDetails);\n\t\t\t}\n\t\t}\n\t\treturn new WebEndpointResponse<>(WebEndpointResponse.STATUS_NOT_FOUND);\n\t}", "code_tokens": ["public", "WebEndpointResponse", "<", "Health", ">", "mapDetails", "(", "Supplier", "<", "Health", ">", "health", ",", "SecurityContext", "securityContext", ")", "{", "if", "(", "canSeeDetails", "(", "securityContext", ",", "this", ".", "showDetails", ")", ")", "{", "Health", "healthDetails", "=", "health", ".", "get", "(", ")", ";", "if", "(", "healthDetails", "!=", "null", ")", "{", "return", "createWebEndpointResponse", "(", "healthDetails", ")", ";", "}", "}", "return", "new", "WebEndpointResponse", "<>", "(", "WebEndpointResponse", ".", "STATUS_NOT_FOUND", ")", ";", "}"], "docstring": "Maps the given {@code health} details to a {@link WebEndpointResponse}, honouring\nthe mapper's default {@link ShowDetails} using the given {@code securityContext}.\n<p>\nIf the current user does not have the right to see the details, the\n{@link Supplier} is not invoked and a 404 response is returned instead.\n@param health the provider of health details, invoked if the current user has the\nright to see them\n@param securityContext the security context\n@return the mapped response", "docstring_tokens": ["Maps", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java#L58-L67", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java", "func_name": "HealthWebEndpointResponseMapper.map", "original_string": "public WebEndpointResponse<Health> map(Health health,\n\t\t\tSecurityContext securityContext) {\n\t\treturn map(health, securityContext, this.showDetails);\n\t}", "language": "java", "code": "public WebEndpointResponse<Health> map(Health health,\n\t\t\tSecurityContext securityContext) {\n\t\treturn map(health, securityContext, this.showDetails);\n\t}", "code_tokens": ["public", "WebEndpointResponse", "<", "Health", ">", "map", "(", "Health", "health", ",", "SecurityContext", "securityContext", ")", "{", "return", "map", "(", "health", ",", "securityContext", ",", "this", ".", "showDetails", ")", ";", "}"], "docstring": "Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the\nmapper's default {@link ShowDetails} using the given {@code securityContext}.\n@param health the health to map\n@param securityContext the security context\n@return the mapped response", "docstring_tokens": ["Maps", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java#L76-L79", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java", "func_name": "HealthWebEndpointResponseMapper.map", "original_string": "public WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n\t\t\tShowDetails showDetails) {\n\t\tif (!canSeeDetails(securityContext, showDetails)) {\n\t\t\thealth = Health.status(health.getStatus()).build();\n\t\t}\n\t\treturn createWebEndpointResponse(health);\n\t}", "language": "java", "code": "public WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n\t\t\tShowDetails showDetails) {\n\t\tif (!canSeeDetails(securityContext, showDetails)) {\n\t\t\thealth = Health.status(health.getStatus()).build();\n\t\t}\n\t\treturn createWebEndpointResponse(health);\n\t}", "code_tokens": ["public", "WebEndpointResponse", "<", "Health", ">", "map", "(", "Health", "health", ",", "SecurityContext", "securityContext", ",", "ShowDetails", "showDetails", ")", "{", "if", "(", "!", "canSeeDetails", "(", "securityContext", ",", "showDetails", ")", ")", "{", "health", "=", "Health", ".", "status", "(", "health", ".", "getStatus", "(", ")", ")", ".", "build", "(", ")", ";", "}", "return", "createWebEndpointResponse", "(", "health", ")", ";", "}"], "docstring": "Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the given\n{@code showDetails} using the given {@code securityContext}.\n@param health the health to map\n@param securityContext the security context\n@param showDetails when to show details in the response\n@return the mapped response", "docstring_tokens": ["Maps", "the", "given", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java#L89-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.getLastElement", "original_string": "public String getLastElement(Form form) {\n\t\tint size = getNumberOfElements();\n\t\treturn (size != 0) ? getElement(size - 1, form) : EMPTY_STRING;\n\t}", "language": "java", "code": "public String getLastElement(Form form) {\n\t\tint size = getNumberOfElements();\n\t\treturn (size != 0) ? getElement(size - 1, form) : EMPTY_STRING;\n\t}", "code_tokens": ["public", "String", "getLastElement", "(", "Form", "form", ")", "{", "int", "size", "=", "getNumberOfElements", "(", ")", ";", "return", "(", "size", "!=", "0", ")", "?", "getElement", "(", "size", "-", "1", ",", "form", ")", ":", "EMPTY_STRING", ";", "}"], "docstring": "Return the last element in the name in the given form.\n@param form the form to return\n@return the last element", "docstring_tokens": ["Return", "the", "last", "element", "in", "the", "name", "in", "the", "given", "form", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L114-L117", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.getElement", "original_string": "public String getElement(int elementIndex, Form form) {\n\t\tCharSequence element = this.elements.get(elementIndex);\n\t\tElementType type = this.elements.getType(elementIndex);\n\t\tif (type.isIndexed()) {\n\t\t\treturn element.toString();\n\t\t}\n\t\tif (form == Form.ORIGINAL) {\n\t\t\tif (type != ElementType.NON_UNIFORM) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToOriginalForm(element).toString();\n\t\t}\n\t\tif (form == Form.DASHED) {\n\t\t\tif (type == ElementType.UNIFORM || type == ElementType.DASHED) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToDashedElement(element).toString();\n\t\t}\n\t\tCharSequence uniformElement = this.uniformElements[elementIndex];\n\t\tif (uniformElement == null) {\n\t\t\tuniformElement = (type != ElementType.UNIFORM)\n\t\t\t\t\t? convertToUniformElement(element) : element;\n\t\t\tthis.uniformElements[elementIndex] = uniformElement.toString();\n\t\t}\n\t\treturn uniformElement.toString();\n\t}", "language": "java", "code": "public String getElement(int elementIndex, Form form) {\n\t\tCharSequence element = this.elements.get(elementIndex);\n\t\tElementType type = this.elements.getType(elementIndex);\n\t\tif (type.isIndexed()) {\n\t\t\treturn element.toString();\n\t\t}\n\t\tif (form == Form.ORIGINAL) {\n\t\t\tif (type != ElementType.NON_UNIFORM) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToOriginalForm(element).toString();\n\t\t}\n\t\tif (form == Form.DASHED) {\n\t\t\tif (type == ElementType.UNIFORM || type == ElementType.DASHED) {\n\t\t\t\treturn element.toString();\n\t\t\t}\n\t\t\treturn convertToDashedElement(element).toString();\n\t\t}\n\t\tCharSequence uniformElement = this.uniformElements[elementIndex];\n\t\tif (uniformElement == null) {\n\t\t\tuniformElement = (type != ElementType.UNIFORM)\n\t\t\t\t\t? convertToUniformElement(element) : element;\n\t\t\tthis.uniformElements[elementIndex] = uniformElement.toString();\n\t\t}\n\t\treturn uniformElement.toString();\n\t}", "code_tokens": ["public", "String", "getElement", "(", "int", "elementIndex", ",", "Form", "form", ")", "{", "CharSequence", "element", "=", "this", ".", "elements", ".", "get", "(", "elementIndex", ")", ";", "ElementType", "type", "=", "this", ".", "elements", ".", "getType", "(", "elementIndex", ")", ";", "if", "(", "type", ".", "isIndexed", "(", ")", ")", "{", "return", "element", ".", "toString", "(", ")", ";", "}", "if", "(", "form", "==", "Form", ".", "ORIGINAL", ")", "{", "if", "(", "type", "!=", "ElementType", ".", "NON_UNIFORM", ")", "{", "return", "element", ".", "toString", "(", ")", ";", "}", "return", "convertToOriginalForm", "(", "element", ")", ".", "toString", "(", ")", ";", "}", "if", "(", "form", "==", "Form", ".", "DASHED", ")", "{", "if", "(", "type", "==", "ElementType", ".", "UNIFORM", "||", "type", "==", "ElementType", ".", "DASHED", ")", "{", "return", "element", ".", "toString", "(", ")", ";", "}", "return", "convertToDashedElement", "(", "element", ")", ".", "toString", "(", ")", ";", "}", "CharSequence", "uniformElement", "=", "this", ".", "uniformElements", "[", "elementIndex", "]", ";", "if", "(", "uniformElement", "==", "null", ")", "{", "uniformElement", "=", "(", "type", "!=", "ElementType", ".", "UNIFORM", ")", "?", "convertToUniformElement", "(", "element", ")", ":", "element", ";", "this", ".", "uniformElements", "[", "elementIndex", "]", "=", "uniformElement", ".", "toString", "(", ")", ";", "}", "return", "uniformElement", ".", "toString", "(", ")", ";", "}"], "docstring": "Return an element in the name in the given form.\n@param elementIndex the element index\n@param form the form to return\n@return the last element", "docstring_tokens": ["Return", "an", "element", "in", "the", "name", "in", "the", "given", "form", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L125-L150", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.append", "original_string": "public ConfigurationPropertyName append(String elementValue) {\n\t\tif (elementValue == null) {\n\t\t\treturn this;\n\t\t}\n\t\tElements additionalElements = probablySingleElementOf(elementValue);\n\t\treturn new ConfigurationPropertyName(this.elements.append(additionalElements));\n\t}", "language": "java", "code": "public ConfigurationPropertyName append(String elementValue) {\n\t\tif (elementValue == null) {\n\t\t\treturn this;\n\t\t}\n\t\tElements additionalElements = probablySingleElementOf(elementValue);\n\t\treturn new ConfigurationPropertyName(this.elements.append(additionalElements));\n\t}", "code_tokens": ["public", "ConfigurationPropertyName", "append", "(", "String", "elementValue", ")", "{", "if", "(", "elementValue", "==", "null", ")", "{", "return", "this", ";", "}", "Elements", "additionalElements", "=", "probablySingleElementOf", "(", "elementValue", ")", ";", "return", "new", "ConfigurationPropertyName", "(", "this", ".", "elements", ".", "append", "(", "additionalElements", ")", ")", ";", "}"], "docstring": "Create a new {@link ConfigurationPropertyName} by appending the given element\nvalue.\n@param elementValue the single element value to append\n@return a new {@link ConfigurationPropertyName}\n@throws InvalidConfigurationPropertyNameException if elementValue is not valid", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L194-L200", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.isParentOf", "original_string": "public boolean isParentOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (this.getNumberOfElements() != name.getNumberOfElements() - 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isAncestorOf(name);\n\t}", "language": "java", "code": "public boolean isParentOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (this.getNumberOfElements() != name.getNumberOfElements() - 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isAncestorOf(name);\n\t}", "code_tokens": ["public", "boolean", "isParentOf", "(", "ConfigurationPropertyName", "name", ")", "{", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "if", "(", "this", ".", "getNumberOfElements", "(", ")", "!=", "name", ".", "getNumberOfElements", "(", ")", "-", "1", ")", "{", "return", "false", ";", "}", "return", "isAncestorOf", "(", "name", ")", ";", "}"], "docstring": "Returns {@code true} if this element is an immediate parent of the specified name.\n@param name the name to check\n@return {@code true} if this name is an ancestor", "docstring_tokens": ["Returns", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L221-L227", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.isAncestorOf", "original_string": "public boolean isAncestorOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (this.getNumberOfElements() >= name.getNumberOfElements()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn elementsEqual(name);\n\t}", "language": "java", "code": "public boolean isAncestorOf(ConfigurationPropertyName name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (this.getNumberOfElements() >= name.getNumberOfElements()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn elementsEqual(name);\n\t}", "code_tokens": ["public", "boolean", "isAncestorOf", "(", "ConfigurationPropertyName", "name", ")", "{", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "if", "(", "this", ".", "getNumberOfElements", "(", ")", ">=", "name", ".", "getNumberOfElements", "(", ")", ")", "{", "return", "false", ";", "}", "return", "elementsEqual", "(", "name", ")", ";", "}"], "docstring": "Returns {@code true} if this element is an ancestor (immediate or nested parent) of\nthe specified name.\n@param name the name to check\n@return {@code true} if this name is an ancestor", "docstring_tokens": ["Returns", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L235-L241", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.of", "original_string": "static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {\n\t\tElements elements = elementsOf(name, returnNullIfInvalid);\n\t\treturn (elements != null) ? new ConfigurationPropertyName(elements) : null;\n\t}", "language": "java", "code": "static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {\n\t\tElements elements = elementsOf(name, returnNullIfInvalid);\n\t\treturn (elements != null) ? new ConfigurationPropertyName(elements) : null;\n\t}", "code_tokens": ["static", "ConfigurationPropertyName", "of", "(", "CharSequence", "name", ",", "boolean", "returnNullIfInvalid", ")", "{", "Elements", "elements", "=", "elementsOf", "(", "name", ",", "returnNullIfInvalid", ")", ";", "return", "(", "elements", "!=", "null", ")", "?", "new", "ConfigurationPropertyName", "(", "elements", ")", ":", "null", ";", "}"], "docstring": "Return a {@link ConfigurationPropertyName} for the specified string.\n@param name the source name\n@param returnNullIfInvalid if null should be returned if the name is not valid\n@return a {@link ConfigurationPropertyName} instance\n@throws InvalidConfigurationPropertyNameException if the name is not valid and\n{@code returnNullIfInvalid} is {@code false}", "docstring_tokens": ["Return", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L490-L493", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java", "func_name": "ConfigurationPropertyName.adapt", "original_string": "static ConfigurationPropertyName adapt(CharSequence name, char separator,\n\t\t\tFunction<CharSequence, CharSequence> elementValueProcessor) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (name.length() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tElements elements = new ElementsParser(name, separator)\n\t\t\t\t.parse(elementValueProcessor);\n\t\tif (elements.getSize() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\treturn new ConfigurationPropertyName(elements);\n\t}", "language": "java", "code": "static ConfigurationPropertyName adapt(CharSequence name, char separator,\n\t\t\tFunction<CharSequence, CharSequence> elementValueProcessor) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (name.length() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\tElements elements = new ElementsParser(name, separator)\n\t\t\t\t.parse(elementValueProcessor);\n\t\tif (elements.getSize() == 0) {\n\t\t\treturn EMPTY;\n\t\t}\n\t\treturn new ConfigurationPropertyName(elements);\n\t}", "code_tokens": ["static", "ConfigurationPropertyName", "adapt", "(", "CharSequence", "name", ",", "char", "separator", ",", "Function", "<", "CharSequence", ",", "CharSequence", ">", "elementValueProcessor", ")", "{", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "if", "(", "name", ".", "length", "(", ")", "==", "0", ")", "{", "return", "EMPTY", ";", "}", "Elements", "elements", "=", "new", "ElementsParser", "(", "name", ",", "separator", ")", ".", "parse", "(", "elementValueProcessor", ")", ";", "if", "(", "elements", ".", "getSize", "(", ")", "==", "0", ")", "{", "return", "EMPTY", ";", "}", "return", "new", "ConfigurationPropertyName", "(", "elements", ")", ";", "}"], "docstring": "Create a {@link ConfigurationPropertyName} by adapting the given source. The name\nis split into elements around the given {@code separator}. This method is more\nlenient than {@link #of} in that it allows mixed case names and '{@code _}'\ncharacters. Other invalid characters are stripped out during parsing.\n<p>\nThe {@code elementValueProcessor} function may be used if additional processing is\nrequired on the extracted element values.\n@param name the name to parse\n@param separator the separator used to split the name\n@param elementValueProcessor a function to process element values\n@return a {@link ConfigurationPropertyName}", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java#L567-L579", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java", "func_name": "CommandRunner.addCommands", "original_string": "public void addCommands(Iterable<Command> commands) {\n\t\tAssert.notNull(commands, \"Commands must not be null\");\n\t\tfor (Command command : commands) {\n\t\t\taddCommand(command);\n\t\t}\n\t}", "language": "java", "code": "public void addCommands(Iterable<Command> commands) {\n\t\tAssert.notNull(commands, \"Commands must not be null\");\n\t\tfor (Command command : commands) {\n\t\t\taddCommand(command);\n\t\t}\n\t}", "code_tokens": ["public", "void", "addCommands", "(", "Iterable", "<", "Command", ">", "commands", ")", "{", "Assert", ".", "notNull", "(", "commands", ",", "\"Commands must not be null\"", ")", ";", "for", "(", "Command", "command", ":", "commands", ")", "{", "addCommand", "(", "command", ")", ";", "}", "}"], "docstring": "Add the specified commands.\n@param commands the commands to add", "docstring_tokens": ["Add", "the", "specified", "commands", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java#L73-L78", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java", "func_name": "CommandRunner.findCommand", "original_string": "public Command findCommand(String name) {\n\t\tfor (Command candidate : this.commands) {\n\t\t\tString candidateName = candidate.getName();\n\t\t\tif (candidateName.equals(name) || (isOptionCommand(candidate)\n\t\t\t\t\t&& (\"--\" + candidateName).equals(name))) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public Command findCommand(String name) {\n\t\tfor (Command candidate : this.commands) {\n\t\t\tString candidateName = candidate.getName();\n\t\t\tif (candidateName.equals(name) || (isOptionCommand(candidate)\n\t\t\t\t\t&& (\"--\" + candidateName).equals(name))) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "Command", "findCommand", "(", "String", "name", ")", "{", "for", "(", "Command", "candidate", ":", "this", ".", "commands", ")", "{", "String", "candidateName", "=", "candidate", ".", "getName", "(", ")", ";", "if", "(", "candidateName", ".", "equals", "(", "name", ")", "||", "(", "isOptionCommand", "(", "candidate", ")", "&&", "(", "\"--\"", "+", "candidateName", ")", ".", "equals", "(", "name", ")", ")", ")", "{", "return", "candidate", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Find a command by name.\n@param name the name of the command\n@return the command or {@code null} if not found", "docstring_tokens": ["Find", "a", "command", "by", "name", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java#L148-L157", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java", "func_name": "CommandRunner.runAndHandleErrors", "original_string": "public int runAndHandleErrors(String... args) {\n\t\tString[] argsWithoutDebugFlags = removeDebugFlags(args);\n\t\tboolean debug = argsWithoutDebugFlags.length != args.length;\n\t\tif (debug) {\n\t\t\tSystem.setProperty(\"debug\", \"true\");\n\t\t}\n\t\ttry {\n\t\t\tExitStatus result = run(argsWithoutDebugFlags);\n\t\t\t// The caller will hang up if it gets a non-zero status\n\t\t\tif (result != null && result.isHangup()) {\n\t\t\t\treturn (result.getCode() > 0) ? result.getCode() : 0;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tcatch (NoArgumentsException ex) {\n\t\t\tshowUsage();\n\t\t\treturn 1;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn handleError(debug, ex);\n\t\t}\n\t}", "language": "java", "code": "public int runAndHandleErrors(String... args) {\n\t\tString[] argsWithoutDebugFlags = removeDebugFlags(args);\n\t\tboolean debug = argsWithoutDebugFlags.length != args.length;\n\t\tif (debug) {\n\t\t\tSystem.setProperty(\"debug\", \"true\");\n\t\t}\n\t\ttry {\n\t\t\tExitStatus result = run(argsWithoutDebugFlags);\n\t\t\t// The caller will hang up if it gets a non-zero status\n\t\t\tif (result != null && result.isHangup()) {\n\t\t\t\treturn (result.getCode() > 0) ? result.getCode() : 0;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tcatch (NoArgumentsException ex) {\n\t\t\tshowUsage();\n\t\t\treturn 1;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn handleError(debug, ex);\n\t\t}\n\t}", "code_tokens": ["public", "int", "runAndHandleErrors", "(", "String", "...", "args", ")", "{", "String", "[", "]", "argsWithoutDebugFlags", "=", "removeDebugFlags", "(", "args", ")", ";", "boolean", "debug", "=", "argsWithoutDebugFlags", ".", "length", "!=", "args", ".", "length", ";", "if", "(", "debug", ")", "{", "System", ".", "setProperty", "(", "\"debug\"", ",", "\"true\"", ")", ";", "}", "try", "{", "ExitStatus", "result", "=", "run", "(", "argsWithoutDebugFlags", ")", ";", "// The caller will hang up if it gets a non-zero status", "if", "(", "result", "!=", "null", "&&", "result", ".", "isHangup", "(", ")", ")", "{", "return", "(", "result", ".", "getCode", "(", ")", ">", "0", ")", "?", "result", ".", "getCode", "(", ")", ":", "0", ";", "}", "return", "0", ";", "}", "catch", "(", "NoArgumentsException", "ex", ")", "{", "showUsage", "(", ")", ";", "return", "1", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "return", "handleError", "(", "debug", ",", "ex", ")", ";", "}", "}"], "docstring": "Run the appropriate and handle and errors.\n@param args the input arguments\n@return a return status code (non boot is used to indicate an error)", "docstring_tokens": ["Run", "the", "appropriate", "and", "handle", "and", "errors", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java#L164-L185", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java", "func_name": "CommandRunner.run", "original_string": "protected ExitStatus run(String... args) throws Exception {\n\t\tif (args.length == 0) {\n\t\t\tthrow new NoArgumentsException();\n\t\t}\n\t\tString commandName = args[0];\n\t\tString[] commandArguments = Arrays.copyOfRange(args, 1, args.length);\n\t\tCommand command = findCommand(commandName);\n\t\tif (command == null) {\n\t\t\tthrow new NoSuchCommandException(commandName);\n\t\t}\n\t\tbeforeRun(command);\n\t\ttry {\n\t\t\treturn command.run(commandArguments);\n\t\t}\n\t\tfinally {\n\t\t\tafterRun(command);\n\t\t}\n\t}", "language": "java", "code": "protected ExitStatus run(String... args) throws Exception {\n\t\tif (args.length == 0) {\n\t\t\tthrow new NoArgumentsException();\n\t\t}\n\t\tString commandName = args[0];\n\t\tString[] commandArguments = Arrays.copyOfRange(args, 1, args.length);\n\t\tCommand command = findCommand(commandName);\n\t\tif (command == null) {\n\t\t\tthrow new NoSuchCommandException(commandName);\n\t\t}\n\t\tbeforeRun(command);\n\t\ttry {\n\t\t\treturn command.run(commandArguments);\n\t\t}\n\t\tfinally {\n\t\t\tafterRun(command);\n\t\t}\n\t}", "code_tokens": ["protected", "ExitStatus", "run", "(", "String", "...", "args", ")", "throws", "Exception", "{", "if", "(", "args", ".", "length", "==", "0", ")", "{", "throw", "new", "NoArgumentsException", "(", ")", ";", "}", "String", "commandName", "=", "args", "[", "0", "]", ";", "String", "[", "]", "commandArguments", "=", "Arrays", ".", "copyOfRange", "(", "args", ",", "1", ",", "args", ".", "length", ")", ";", "Command", "command", "=", "findCommand", "(", "commandName", ")", ";", "if", "(", "command", "==", "null", ")", "{", "throw", "new", "NoSuchCommandException", "(", "commandName", ")", ";", "}", "beforeRun", "(", "command", ")", ";", "try", "{", "return", "command", ".", "run", "(", "commandArguments", ")", ";", "}", "finally", "{", "afterRun", "(", "command", ")", ";", "}", "}"], "docstring": "Parse the arguments and run a suitable command.\n@param args the arguments\n@return the outcome of the command\n@throws Exception if the command fails", "docstring_tokens": ["Parse", "the", "arguments", "and", "run", "a", "suitable", "command", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java#L207-L224", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java", "func_name": "ConfigurationPropertiesReportEndpoint.safeSerialize", "original_string": "@SuppressWarnings(\"unchecked\")\n\tprivate Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,\n\t\t\tString prefix) {\n\t\ttry {\n\t\t\treturn new HashMap<>(mapper.convertValue(bean, Map.class));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn new HashMap<>(Collections.singletonMap(\"error\",\n\t\t\t\t\t\"Cannot serialize '\" + prefix + \"'\"));\n\t\t}\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tprivate Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,\n\t\t\tString prefix) {\n\t\ttry {\n\t\t\treturn new HashMap<>(mapper.convertValue(bean, Map.class));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\treturn new HashMap<>(Collections.singletonMap(\"error\",\n\t\t\t\t\t\"Cannot serialize '\" + prefix + \"'\"));\n\t\t}\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "private", "Map", "<", "String", ",", "Object", ">", "safeSerialize", "(", "ObjectMapper", "mapper", ",", "Object", "bean", ",", "String", "prefix", ")", "{", "try", "{", "return", "new", "HashMap", "<>", "(", "mapper", ".", "convertValue", "(", "bean", ",", "Map", ".", "class", ")", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "return", "new", "HashMap", "<>", "(", "Collections", ".", "singletonMap", "(", "\"error\"", ",", "\"Cannot serialize '\"", "+", "prefix", "+", "\"'\"", ")", ")", ";", "}", "}"], "docstring": "Cautiously serialize the bean to a map (returning a map with an error message\ninstead of throwing an exception if there is a problem).\n@param mapper the object mapper\n@param bean the source bean\n@param prefix the prefix\n@return the serialized instance", "docstring_tokens": ["Cautiously", "serialize", "the", "bean", "to", "a", "map", "(", "returning", "a", "map", "with", "an", "error", "message", "instead", "of", "throwing", "an", "exception", "if", "there", "is", "a", "problem", ")", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L155-L165", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java", "func_name": "ConfigurationPropertiesReportEndpoint.configureObjectMapper", "original_string": "protected void configureObjectMapper(ObjectMapper mapper) {\n\t\tmapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n\t\tmapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true);\n\t\tmapper.setSerializationInclusion(Include.NON_NULL);\n\t\tapplyConfigurationPropertiesFilter(mapper);\n\t\tapplySerializationModifier(mapper);\n\t}", "language": "java", "code": "protected void configureObjectMapper(ObjectMapper mapper) {\n\t\tmapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n\t\tmapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true);\n\t\tmapper.setSerializationInclusion(Include.NON_NULL);\n\t\tapplyConfigurationPropertiesFilter(mapper);\n\t\tapplySerializationModifier(mapper);\n\t}", "code_tokens": ["protected", "void", "configureObjectMapper", "(", "ObjectMapper", "mapper", ")", "{", "mapper", ".", "configure", "(", "SerializationFeature", ".", "FAIL_ON_EMPTY_BEANS", ",", "false", ")", ";", "mapper", ".", "configure", "(", "MapperFeature", ".", "USE_STD_BEAN_NAMING", ",", "true", ")", ";", "mapper", ".", "setSerializationInclusion", "(", "Include", ".", "NON_NULL", ")", ";", "applyConfigurationPropertiesFilter", "(", "mapper", ")", ";", "applySerializationModifier", "(", "mapper", ")", ";", "}"], "docstring": "Configure Jackson's {@link ObjectMapper} to be used to serialize the\n{@link ConfigurationProperties @ConfigurationProperties} objects into a {@link Map}\nstructure.\n@param mapper the object mapper", "docstring_tokens": ["Configure", "Jackson", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L173-L179", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java", "func_name": "ConfigurationPropertiesReportEndpoint.applySerializationModifier", "original_string": "private void applySerializationModifier(ObjectMapper mapper) {\n\t\tSerializerFactory factory = BeanSerializerFactory.instance\n\t\t\t\t.withSerializerModifier(new GenericSerializerModifier());\n\t\tmapper.setSerializerFactory(factory);\n\t}", "language": "java", "code": "private void applySerializationModifier(ObjectMapper mapper) {\n\t\tSerializerFactory factory = BeanSerializerFactory.instance\n\t\t\t\t.withSerializerModifier(new GenericSerializerModifier());\n\t\tmapper.setSerializerFactory(factory);\n\t}", "code_tokens": ["private", "void", "applySerializationModifier", "(", "ObjectMapper", "mapper", ")", "{", "SerializerFactory", "factory", "=", "BeanSerializerFactory", ".", "instance", ".", "withSerializerModifier", "(", "new", "GenericSerializerModifier", "(", ")", ")", ";", "mapper", ".", "setSerializerFactory", "(", "factory", ")", ";", "}"], "docstring": "Ensure only bindable and non-cyclic bean properties are reported.\n@param mapper the object mapper", "docstring_tokens": ["Ensure", "only", "bindable", "and", "non", "-", "cyclic", "bean", "properties", "are", "reported", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L193-L197", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java", "func_name": "ConfigurationPropertiesReportEndpoint.extractPrefix", "original_string": "private String extractPrefix(ApplicationContext context,\n\t\t\tConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {\n\t\tConfigurationProperties annotation = context.findAnnotationOnBean(beanName,\n\t\t\t\tConfigurationProperties.class);\n\t\tif (beanFactoryMetaData != null) {\n\t\t\tConfigurationProperties override = beanFactoryMetaData\n\t\t\t\t\t.findFactoryAnnotation(beanName, ConfigurationProperties.class);\n\t\t\tif (override != null) {\n\t\t\t\t// The @Bean-level @ConfigurationProperties overrides the one at type\n\t\t\t\t// level when binding. Arguably we should render them both, but this one\n\t\t\t\t// might be the most relevant for a starting point.\n\t\t\t\tannotation = override;\n\t\t\t}\n\t\t}\n\t\treturn annotation.prefix();\n\t}", "language": "java", "code": "private String extractPrefix(ApplicationContext context,\n\t\t\tConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {\n\t\tConfigurationProperties annotation = context.findAnnotationOnBean(beanName,\n\t\t\t\tConfigurationProperties.class);\n\t\tif (beanFactoryMetaData != null) {\n\t\t\tConfigurationProperties override = beanFactoryMetaData\n\t\t\t\t\t.findFactoryAnnotation(beanName, ConfigurationProperties.class);\n\t\t\tif (override != null) {\n\t\t\t\t// The @Bean-level @ConfigurationProperties overrides the one at type\n\t\t\t\t// level when binding. Arguably we should render them both, but this one\n\t\t\t\t// might be the most relevant for a starting point.\n\t\t\t\tannotation = override;\n\t\t\t}\n\t\t}\n\t\treturn annotation.prefix();\n\t}", "code_tokens": ["private", "String", "extractPrefix", "(", "ApplicationContext", "context", ",", "ConfigurationBeanFactoryMetadata", "beanFactoryMetaData", ",", "String", "beanName", ")", "{", "ConfigurationProperties", "annotation", "=", "context", ".", "findAnnotationOnBean", "(", "beanName", ",", "ConfigurationProperties", ".", "class", ")", ";", "if", "(", "beanFactoryMetaData", "!=", "null", ")", "{", "ConfigurationProperties", "override", "=", "beanFactoryMetaData", ".", "findFactoryAnnotation", "(", "beanName", ",", "ConfigurationProperties", ".", "class", ")", ";", "if", "(", "override", "!=", "null", ")", "{", "// The @Bean-level @ConfigurationProperties overrides the one at type", "// level when binding. Arguably we should render them both, but this one", "// might be the most relevant for a starting point.", "annotation", "=", "override", ";", "}", "}", "return", "annotation", ".", "prefix", "(", ")", ";", "}"], "docstring": "Extract configuration prefix from\n{@link ConfigurationProperties @ConfigurationProperties} annotation.\n@param context the application context\n@param beanFactoryMetaData the bean factory meta-data\n@param beanName the bean name\n@return the prefix", "docstring_tokens": ["Extract", "configuration", "prefix", "from", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L214-L229", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java", "func_name": "ConfigurationPropertiesReportEndpoint.sanitize", "original_string": "@SuppressWarnings(\"unchecked\")\n\tprivate Map<String, Object> sanitize(String prefix, Map<String, Object> map) {\n\t\tmap.forEach((key, value) -> {\n\t\t\tString qualifiedKey = (prefix.isEmpty() ? prefix : prefix + \".\") + key;\n\t\t\tif (value instanceof Map) {\n\t\t\t\tmap.put(key, sanitize(qualifiedKey, (Map<String, Object>) value));\n\t\t\t}\n\t\t\telse if (value instanceof List) {\n\t\t\t\tmap.put(key, sanitize(qualifiedKey, (List<Object>) value));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalue = this.sanitizer.sanitize(key, value);\n\t\t\t\tvalue = this.sanitizer.sanitize(qualifiedKey, value);\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t});\n\t\treturn map;\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tprivate Map<String, Object> sanitize(String prefix, Map<String, Object> map) {\n\t\tmap.forEach((key, value) -> {\n\t\t\tString qualifiedKey = (prefix.isEmpty() ? prefix : prefix + \".\") + key;\n\t\t\tif (value instanceof Map) {\n\t\t\t\tmap.put(key, sanitize(qualifiedKey, (Map<String, Object>) value));\n\t\t\t}\n\t\t\telse if (value instanceof List) {\n\t\t\t\tmap.put(key, sanitize(qualifiedKey, (List<Object>) value));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalue = this.sanitizer.sanitize(key, value);\n\t\t\t\tvalue = this.sanitizer.sanitize(qualifiedKey, value);\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t});\n\t\treturn map;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "private", "Map", "<", "String", ",", "Object", ">", "sanitize", "(", "String", "prefix", ",", "Map", "<", "String", ",", "Object", ">", "map", ")", "{", "map", ".", "forEach", "(", "(", "key", ",", "value", ")", "->", "{", "String", "qualifiedKey", "=", "(", "prefix", ".", "isEmpty", "(", ")", "?", "prefix", ":", "prefix", "+", "\".\"", ")", "+", "key", ";", "if", "(", "value", "instanceof", "Map", ")", "{", "map", ".", "put", "(", "key", ",", "sanitize", "(", "qualifiedKey", ",", "(", "Map", "<", "String", ",", "Object", ">", ")", "value", ")", ")", ";", "}", "else", "if", "(", "value", "instanceof", "List", ")", "{", "map", ".", "put", "(", "key", ",", "sanitize", "(", "qualifiedKey", ",", "(", "List", "<", "Object", ">", ")", "value", ")", ")", ";", "}", "else", "{", "value", "=", "this", ".", "sanitizer", ".", "sanitize", "(", "key", ",", "value", ")", ";", "value", "=", "this", ".", "sanitizer", ".", "sanitize", "(", "qualifiedKey", ",", "value", ")", ";", "map", ".", "put", "(", "key", ",", "value", ")", ";", "}", "}", ")", ";", "return", "map", ";", "}"], "docstring": "Sanitize all unwanted configuration properties to avoid leaking of sensitive\ninformation.\n@param prefix the property prefix\n@param map the source map\n@return the sanitized map", "docstring_tokens": ["Sanitize", "all", "unwanted", "configuration", "properties", "to", "avoid", "leaking", "of", "sensitive", "information", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java#L238-L255", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java", "func_name": "Sanitizer.setKeysToSanitize", "original_string": "public void setKeysToSanitize(String... keysToSanitize) {\n\t\tAssert.notNull(keysToSanitize, \"KeysToSanitize must not be null\");\n\t\tthis.keysToSanitize = new Pattern[keysToSanitize.length];\n\t\tfor (int i = 0; i < keysToSanitize.length; i++) {\n\t\t\tthis.keysToSanitize[i] = getPattern(keysToSanitize[i]);\n\t\t}\n\t}", "language": "java", "code": "public void setKeysToSanitize(String... keysToSanitize) {\n\t\tAssert.notNull(keysToSanitize, \"KeysToSanitize must not be null\");\n\t\tthis.keysToSanitize = new Pattern[keysToSanitize.length];\n\t\tfor (int i = 0; i < keysToSanitize.length; i++) {\n\t\t\tthis.keysToSanitize[i] = getPattern(keysToSanitize[i]);\n\t\t}\n\t}", "code_tokens": ["public", "void", "setKeysToSanitize", "(", "String", "...", "keysToSanitize", ")", "{", "Assert", ".", "notNull", "(", "keysToSanitize", ",", "\"KeysToSanitize must not be null\"", ")", ";", "this", ".", "keysToSanitize", "=", "new", "Pattern", "[", "keysToSanitize", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "keysToSanitize", ".", "length", ";", "i", "++", ")", "{", "this", ".", "keysToSanitize", "[", "i", "]", "=", "getPattern", "(", "keysToSanitize", "[", "i", "]", ")", ";", "}", "}"], "docstring": "Keys that should be sanitized. Keys can be simple strings that the property ends\nwith or regular expressions.\n@param keysToSanitize the keys to sanitize", "docstring_tokens": ["Keys", "that", "should", "be", "sanitized", ".", "Keys", "can", "be", "simple", "strings", "that", "the", "property", "ends", "with", "or", "regular", "expressions", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java#L54-L60", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java", "func_name": "Sanitizer.sanitize", "original_string": "public Object sanitize(String key, Object value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (Pattern pattern : this.keysToSanitize) {\n\t\t\tif (pattern.matcher(key).matches()) {\n\t\t\t\treturn \"******\";\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}", "language": "java", "code": "public Object sanitize(String key, Object value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (Pattern pattern : this.keysToSanitize) {\n\t\t\tif (pattern.matcher(key).matches()) {\n\t\t\t\treturn \"******\";\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}", "code_tokens": ["public", "Object", "sanitize", "(", "String", "key", ",", "Object", "value", ")", "{", "if", "(", "value", "==", "null", ")", "{", "return", "null", ";", "}", "for", "(", "Pattern", "pattern", ":", "this", ".", "keysToSanitize", ")", "{", "if", "(", "pattern", ".", "matcher", "(", "key", ")", ".", "matches", "(", ")", ")", "{", "return", "\"******\"", ";", "}", "}", "return", "value", ";", "}"], "docstring": "Sanitize the given value if necessary.\n@param key the key to sanitize\n@param value the value\n@return the potentially sanitized value", "docstring_tokens": ["Sanitize", "the", "given", "value", "if", "necessary", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java#L84-L94", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java", "func_name": "WebClientExchangeTags.uri", "original_string": "public static Tag uri(ClientRequest request) {\n\t\tString uri = (String) request.attribute(URI_TEMPLATE_ATTRIBUTE)\n\t\t\t\t.orElseGet(() -> request.url().getPath());\n\t\treturn Tag.of(\"uri\", extractPath(uri));\n\t}", "language": "java", "code": "public static Tag uri(ClientRequest request) {\n\t\tString uri = (String) request.attribute(URI_TEMPLATE_ATTRIBUTE)\n\t\t\t\t.orElseGet(() -> request.url().getPath());\n\t\treturn Tag.of(\"uri\", extractPath(uri));\n\t}", "code_tokens": ["public", "static", "Tag", "uri", "(", "ClientRequest", "request", ")", "{", "String", "uri", "=", "(", "String", ")", "request", ".", "attribute", "(", "URI_TEMPLATE_ATTRIBUTE", ")", ".", "orElseGet", "(", "(", ")", "->", "request", ".", "url", "(", ")", ".", "getPath", "(", ")", ")", ";", "return", "Tag", ".", "of", "(", "\"uri\"", ",", "extractPath", "(", "uri", ")", ")", ";", "}"], "docstring": "Creates a {@code uri} {@code Tag} for the URI path of the given {@code request}.\n@param request the request\n@return the uri tag", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java#L82-L86", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java", "func_name": "WebClientExchangeTags.status", "original_string": "public static Tag status(ClientResponse response) {\n\t\treturn Tag.of(\"status\", String.valueOf(response.statusCode().value()));\n\t}", "language": "java", "code": "public static Tag status(ClientResponse response) {\n\t\treturn Tag.of(\"status\", String.valueOf(response.statusCode().value()));\n\t}", "code_tokens": ["public", "static", "Tag", "status", "(", "ClientResponse", "response", ")", "{", "return", "Tag", ".", "of", "(", "\"status\"", ",", "String", ".", "valueOf", "(", "response", ".", "statusCode", "(", ")", ".", "value", "(", ")", ")", ")", ";", "}"], "docstring": "Creates a {@code status} {@code Tag} derived from the\n{@link ClientResponse#statusCode()} of the given {@code response}.\n@param response the response\n@return the status tag", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java#L99-L101", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java", "func_name": "WebClientExchangeTags.clientName", "original_string": "public static Tag clientName(ClientRequest request) {\n\t\tString host = request.url().getHost();\n\t\tif (host == null) {\n\t\t\treturn CLIENT_NAME_NONE;\n\t\t}\n\t\treturn Tag.of(\"clientName\", host);\n\t}", "language": "java", "code": "public static Tag clientName(ClientRequest request) {\n\t\tString host = request.url().getHost();\n\t\tif (host == null) {\n\t\t\treturn CLIENT_NAME_NONE;\n\t\t}\n\t\treturn Tag.of(\"clientName\", host);\n\t}", "code_tokens": ["public", "static", "Tag", "clientName", "(", "ClientRequest", "request", ")", "{", "String", "host", "=", "request", ".", "url", "(", ")", ".", "getHost", "(", ")", ";", "if", "(", "host", "==", "null", ")", "{", "return", "CLIENT_NAME_NONE", ";", "}", "return", "Tag", ".", "of", "(", "\"clientName\"", ",", "host", ")", ";", "}"], "docstring": "Create a {@code clientName} {@code Tag} derived from the\n{@link java.net.URI#getHost host} of the {@link ClientRequest#url() URL} of the\ngiven {@code request}.\n@param request the request\n@return the clientName tag", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java#L120-L126", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java", "func_name": "WebClientExchangeTags.outcome", "original_string": "public static Tag outcome(ClientResponse response) {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus status = response.statusCode();\n\t\t\t\tif (status.is1xxInformational()) {\n\t\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t\t}\n\t\t\t\tif (status.is2xxSuccessful()) {\n\t\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t\t}\n\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t\t}\n\t\t\t\tif (status.is4xxClientError()) {\n\t\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t\t}\n\t\t\t\tif (status.is5xxServerError()) {\n\t\t\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t\tcatch (IllegalArgumentException exc) {\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t}", "language": "java", "code": "public static Tag outcome(ClientResponse response) {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tHttpStatus status = response.statusCode();\n\t\t\t\tif (status.is1xxInformational()) {\n\t\t\t\t\treturn OUTCOME_INFORMATIONAL;\n\t\t\t\t}\n\t\t\t\tif (status.is2xxSuccessful()) {\n\t\t\t\t\treturn OUTCOME_SUCCESS;\n\t\t\t\t}\n\t\t\t\tif (status.is3xxRedirection()) {\n\t\t\t\t\treturn OUTCOME_REDIRECTION;\n\t\t\t\t}\n\t\t\t\tif (status.is4xxClientError()) {\n\t\t\t\t\treturn OUTCOME_CLIENT_ERROR;\n\t\t\t\t}\n\t\t\t\tif (status.is5xxServerError()) {\n\t\t\t\t\treturn OUTCOME_SERVER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t\tcatch (IllegalArgumentException exc) {\n\t\t\treturn OUTCOME_UNKNOWN;\n\t\t}\n\t}", "code_tokens": ["public", "static", "Tag", "outcome", "(", "ClientResponse", "response", ")", "{", "try", "{", "if", "(", "response", "!=", "null", ")", "{", "HttpStatus", "status", "=", "response", ".", "statusCode", "(", ")", ";", "if", "(", "status", ".", "is1xxInformational", "(", ")", ")", "{", "return", "OUTCOME_INFORMATIONAL", ";", "}", "if", "(", "status", ".", "is2xxSuccessful", "(", ")", ")", "{", "return", "OUTCOME_SUCCESS", ";", "}", "if", "(", "status", ".", "is3xxRedirection", "(", ")", ")", "{", "return", "OUTCOME_REDIRECTION", ";", "}", "if", "(", "status", ".", "is4xxClientError", "(", ")", ")", "{", "return", "OUTCOME_CLIENT_ERROR", ";", "}", "if", "(", "status", ".", "is5xxServerError", "(", ")", ")", "{", "return", "OUTCOME_SERVER_ERROR", ";", "}", "}", "return", "OUTCOME_UNKNOWN", ";", "}", "catch", "(", "IllegalArgumentException", "exc", ")", "{", "return", "OUTCOME_UNKNOWN", ";", "}", "}"], "docstring": "Creates an {@code outcome} {@code Tag} derived from the\n{@link ClientResponse#statusCode() status} of the given {@code response}.\n@param response the response\n@return the outcome tag\n@since 2.2.0", "docstring_tokens": ["Creates", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java#L135-L160", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java", "func_name": "SqlDialectLookup.getDialect", "original_string": "public static SQLDialect getDialect(DataSource dataSource) {\n\t\tif (dataSource == null) {\n\t\t\treturn SQLDialect.DEFAULT;\n\t\t}\n\t\ttry {\n\t\t\tString url = JdbcUtils.extractDatabaseMetaData(dataSource, \"getURL\");\n\t\t\tSQLDialect sqlDialect = JDBCUtils.dialect(url);\n\t\t\tif (sqlDialect != null) {\n\t\t\t\treturn sqlDialect;\n\t\t\t}\n\t\t}\n\t\tcatch (MetaDataAccessException ex) {\n\t\t\tlogger.warn(\"Unable to determine jdbc url from datasource\", ex);\n\t\t}\n\t\treturn SQLDialect.DEFAULT;\n\t}", "language": "java", "code": "public static SQLDialect getDialect(DataSource dataSource) {\n\t\tif (dataSource == null) {\n\t\t\treturn SQLDialect.DEFAULT;\n\t\t}\n\t\ttry {\n\t\t\tString url = JdbcUtils.extractDatabaseMetaData(dataSource, \"getURL\");\n\t\t\tSQLDialect sqlDialect = JDBCUtils.dialect(url);\n\t\t\tif (sqlDialect != null) {\n\t\t\t\treturn sqlDialect;\n\t\t\t}\n\t\t}\n\t\tcatch (MetaDataAccessException ex) {\n\t\t\tlogger.warn(\"Unable to determine jdbc url from datasource\", ex);\n\t\t}\n\t\treturn SQLDialect.DEFAULT;\n\t}", "code_tokens": ["public", "static", "SQLDialect", "getDialect", "(", "DataSource", "dataSource", ")", "{", "if", "(", "dataSource", "==", "null", ")", "{", "return", "SQLDialect", ".", "DEFAULT", ";", "}", "try", "{", "String", "url", "=", "JdbcUtils", ".", "extractDatabaseMetaData", "(", "dataSource", ",", "\"getURL\"", ")", ";", "SQLDialect", "sqlDialect", "=", "JDBCUtils", ".", "dialect", "(", "url", ")", ";", "if", "(", "sqlDialect", "!=", "null", ")", "{", "return", "sqlDialect", ";", "}", "}", "catch", "(", "MetaDataAccessException", "ex", ")", "{", "logger", ".", "warn", "(", "\"Unable to determine jdbc url from datasource\"", ",", "ex", ")", ";", "}", "return", "SQLDialect", ".", "DEFAULT", ";", "}"], "docstring": "Return the most suitable {@link SQLDialect} for the given {@link DataSource}.\n@param dataSource the source {@link DataSource}\n@return the most suitable {@link SQLDialect}", "docstring_tokens": ["Return", "the", "most", "suitable", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/SqlDialectLookup.java#L47-L62", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.putOpt", "original_string": "public JSONObject putOpt(String name, Object value) throws JSONException {\n\t\tif (name == null || value == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn put(name, value);\n\t}", "language": "java", "code": "public JSONObject putOpt(String name, Object value) throws JSONException {\n\t\tif (name == null || value == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn put(name, value);\n\t}", "code_tokens": ["public", "JSONObject", "putOpt", "(", "String", "name", ",", "Object", "value", ")", "throws", "JSONException", "{", "if", "(", "name", "==", "null", "||", "value", "==", "null", ")", "{", "return", "this", ";", "}", "return", "put", "(", "name", ",", "value", ")", ";", "}"], "docstring": "Equivalent to {@code put(name, value)} when both parameters are non-null; does\nnothing otherwise.\n@param name the name of the property\n@param value the value of the property\n@return this object.\n@throws JSONException if an error occurs", "docstring_tokens": ["Equivalent", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L284-L289", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.accumulate", "original_string": "public JSONObject accumulate(String name, Object value) throws JSONException {\n\t\tObject current = this.nameValuePairs.get(checkName(name));\n\t\tif (current == null) {\n\t\t\treturn put(name, value);\n\t\t}\n\n\t\t// check in accumulate, since array.put(Object) doesn't do any checking\n\t\tif (value instanceof Number) {\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\n\t\tif (current instanceof JSONArray) {\n\t\t\tJSONArray array = (JSONArray) current;\n\t\t\tarray.put(value);\n\t\t}\n\t\telse {\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tarray.put(current);\n\t\t\tarray.put(value);\n\t\t\tthis.nameValuePairs.put(name, array);\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public JSONObject accumulate(String name, Object value) throws JSONException {\n\t\tObject current = this.nameValuePairs.get(checkName(name));\n\t\tif (current == null) {\n\t\t\treturn put(name, value);\n\t\t}\n\n\t\t// check in accumulate, since array.put(Object) doesn't do any checking\n\t\tif (value instanceof Number) {\n\t\t\tJSON.checkDouble(((Number) value).doubleValue());\n\t\t}\n\n\t\tif (current instanceof JSONArray) {\n\t\t\tJSONArray array = (JSONArray) current;\n\t\t\tarray.put(value);\n\t\t}\n\t\telse {\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tarray.put(current);\n\t\t\tarray.put(value);\n\t\t\tthis.nameValuePairs.put(name, array);\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "JSONObject", "accumulate", "(", "String", "name", ",", "Object", "value", ")", "throws", "JSONException", "{", "Object", "current", "=", "this", ".", "nameValuePairs", ".", "get", "(", "checkName", "(", "name", ")", ")", ";", "if", "(", "current", "==", "null", ")", "{", "return", "put", "(", "name", ",", "value", ")", ";", "}", "// check in accumulate, since array.put(Object) doesn't do any checking", "if", "(", "value", "instanceof", "Number", ")", "{", "JSON", ".", "checkDouble", "(", "(", "(", "Number", ")", "value", ")", ".", "doubleValue", "(", ")", ")", ";", "}", "if", "(", "current", "instanceof", "JSONArray", ")", "{", "JSONArray", "array", "=", "(", "JSONArray", ")", "current", ";", "array", ".", "put", "(", "value", ")", ";", "}", "else", "{", "JSONArray", "array", "=", "new", "JSONArray", "(", ")", ";", "array", ".", "put", "(", "current", ")", ";", "array", ".", "put", "(", "value", ")", ";", "this", ".", "nameValuePairs", ".", "put", "(", "name", ",", "array", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Appends {@code value} to the array already mapped to {@code name}. If this object\nhas no mapping for {@code name}, this inserts a new mapping. If the mapping exists\nbut its value is not an array, the existing and new values are inserted in order\ninto a new array which is itself mapped to {@code name}. In aggregate, this allows\nvalues to be added to a mapping one at a time.\n@param name the name of the property\n@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,\nLong, Double, {@link #NULL} or null. May not be {@link Double#isNaN() NaNs} or\n{@link Double#isInfinite() infinities}.\n@return this object.\n@throws JSONException if an error occurs", "docstring_tokens": ["Appends", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L304-L326", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.isNull", "original_string": "public boolean isNull(String name) {\n\t\tObject value = this.nameValuePairs.get(name);\n\t\treturn value == null || value == NULL;\n\t}", "language": "java", "code": "public boolean isNull(String name) {\n\t\tObject value = this.nameValuePairs.get(name);\n\t\treturn value == null || value == NULL;\n\t}", "code_tokens": ["public", "boolean", "isNull", "(", "String", "name", ")", "{", "Object", "value", "=", "this", ".", "nameValuePairs", ".", "get", "(", "name", ")", ";", "return", "value", "==", "null", "||", "value", "==", "NULL", ";", "}"], "docstring": "Returns true if this object has no mapping for {@code name} or if it has a mapping\nwhose value is {@link #NULL}.\n@param name the name of the property\n@return true if this object has no mapping for {@code name}", "docstring_tokens": ["Returns", "true", "if", "this", "object", "has", "no", "mapping", "for", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L352-L355", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.get", "original_string": "public Object get(String name) throws JSONException {\n\t\tObject result = this.nameValuePairs.get(name);\n\t\tif (result == null) {\n\t\t\tthrow new JSONException(\"No value for \" + name);\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public Object get(String name) throws JSONException {\n\t\tObject result = this.nameValuePairs.get(name);\n\t\tif (result == null) {\n\t\t\tthrow new JSONException(\"No value for \" + name);\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "Object", "get", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "result", "=", "this", ".", "nameValuePairs", ".", "get", "(", "name", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "new", "JSONException", "(", "\"No value for \"", "+", "name", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name}.\n@param name the name of the property\n@return the value\n@throws JSONException if no such mapping exists.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L373-L379", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getBoolean", "original_string": "public boolean getBoolean(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public boolean getBoolean(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"boolean\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "boolean", "getBoolean", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "Boolean", "result", "=", "JSON", ".", "toBoolean", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"boolean\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a boolean or can be\ncoerced to a boolean.\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or cannot be coerced to a\nboolean.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L398-L405", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optBoolean", "original_string": "public boolean optBoolean(String name, boolean fallback) {\n\t\tObject object = opt(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public boolean optBoolean(String name, boolean fallback) {\n\t\tObject object = opt(name);\n\t\tBoolean result = JSON.toBoolean(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "boolean", "optBoolean", "(", "String", "name", ",", "boolean", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "Boolean", "result", "=", "JSON", ".", "toBoolean", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a boolean or can be\ncoerced to a boolean. Returns {@code fallback} otherwise.\n@param name the name of the property\n@param fallback a fallback value\n@return the value or {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L424-L428", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getDouble", "original_string": "public double getDouble(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public double getDouble(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"double\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "double", "getDouble", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "Double", "result", "=", "JSON", ".", "toDouble", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"double\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a double or can be\ncoerced to a double.\n\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or cannot be coerced to a\ndouble.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{", "@code", "name", "}", "if", "it", "exists", "and", "is", "a", "double", "or", "can", "be", "coerced", "to", "a", "double", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L439-L446", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optDouble", "original_string": "public double optDouble(String name, double fallback) {\n\t\tObject object = opt(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public double optDouble(String name, double fallback) {\n\t\tObject object = opt(name);\n\t\tDouble result = JSON.toDouble(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "double", "optDouble", "(", "String", "name", ",", "double", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "Double", "result", "=", "JSON", ".", "toDouble", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a double or can be\ncoerced to a double. Returns {@code fallback} otherwise.\n@param name the name of the property\n@param fallback a fallback value\n@return the value or {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L465-L469", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getInt", "original_string": "public int getInt(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public int getInt(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"int\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "int", "getInt", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "Integer", "result", "=", "JSON", ".", "toInteger", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"int\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is an int or can be\ncoerced to an int.\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or cannot be coerced to an int.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L478-L485", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optInt", "original_string": "public int optInt(String name, int fallback) {\n\t\tObject object = opt(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public int optInt(String name, int fallback) {\n\t\tObject object = opt(name);\n\t\tInteger result = JSON.toInteger(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "int", "optInt", "(", "String", "name", ",", "int", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "Integer", "result", "=", "JSON", ".", "toInteger", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is an int or can be\ncoerced to an int. Returns {@code fallback} otherwise.\n@param name the name of the property\n@param fallback a fallback value\n@return the value or {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L504-L508", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getLong", "original_string": "public long getLong(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public long getLong(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tLong result = JSON.toLong(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"long\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "long", "getLong", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "Long", "result", "=", "JSON", ".", "toLong", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"long\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a long or can be\ncoerced to a long. Note that JSON represents numbers as doubles, so this is\n<a href=\"#lossy\">lossy</a>; use strings to transfer numbers via JSON.\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or cannot be coerced to a long.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L518-L525", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optLong", "original_string": "public long optLong(String name, long fallback) {\n\t\tObject object = opt(name);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public long optLong(String name, long fallback) {\n\t\tObject object = opt(name);\n\t\tLong result = JSON.toLong(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "long", "optLong", "(", "String", "name", ",", "long", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "Long", "result", "=", "JSON", ".", "toLong", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a long or can be\ncoerced to a long. Returns {@code fallback} otherwise. Note that JSON represents\nnumbers as doubles, so this is <a href=\"#lossy\">lossy</a>; use strings to transfer\nnumbers via JSON.\n@param name the name of the property\n@param fallback a fallback value\n@return the value or {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L548-L552", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getString", "original_string": "public String getString(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tString result = JSON.toString(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"String\");\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public String getString(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tString result = JSON.toString(object);\n\t\tif (result == null) {\n\t\t\tthrow JSON.typeMismatch(name, object, \"String\");\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "String", "getString", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "String", "result", "=", "JSON", ".", "toString", "(", "object", ")", ";", "if", "(", "result", "==", "null", ")", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"String\"", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists, coercing it if necessary.\n@param name the name of the property\n@return the value\n@throws JSONException if no such mapping exists.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L560-L567", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optString", "original_string": "public String optString(String name, String fallback) {\n\t\tObject object = opt(name);\n\t\tString result = JSON.toString(object);\n\t\treturn result != null ? result : fallback;\n\t}", "language": "java", "code": "public String optString(String name, String fallback) {\n\t\tObject object = opt(name);\n\t\tString result = JSON.toString(object);\n\t\treturn result != null ? result : fallback;\n\t}", "code_tokens": ["public", "String", "optString", "(", "String", "name", ",", "String", "fallback", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "String", "result", "=", "JSON", ".", "toString", "(", "object", ")", ";", "return", "result", "!=", "null", "?", "result", ":", "fallback", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists, coercing it if necessary.\nReturns {@code fallback} if no such mapping exists.\n@param name the name of the property\n@param fallback a fallback value\n@return the value or {@code fallback}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L586-L590", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getJSONArray", "original_string": "public JSONArray getJSONArray(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONArray\");\n\t\t}\n\t}", "language": "java", "code": "public JSONArray getJSONArray(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONArray) {\n\t\t\treturn (JSONArray) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONArray\");\n\t\t}\n\t}", "code_tokens": ["public", "JSONArray", "getJSONArray", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "if", "(", "object", "instanceof", "JSONArray", ")", "{", "return", "(", "JSONArray", ")", "object", ";", "}", "else", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"JSONArray\"", ")", ";", "}", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a {@code\nJSONArray}.\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or is not a {@code\nJSONArray}.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L600-L608", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optJSONArray", "original_string": "public JSONArray optJSONArray(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}", "language": "java", "code": "public JSONArray optJSONArray(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONArray ? (JSONArray) object : null;\n\t}", "code_tokens": ["public", "JSONArray", "optJSONArray", "(", "String", "name", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "return", "object", "instanceof", "JSONArray", "?", "(", "JSONArray", ")", "object", ":", "null", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a {@code\nJSONArray}. Returns null otherwise.\n@param name the name of the property\n@return the value or {@code null}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L616-L619", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.getJSONObject", "original_string": "public JSONObject getJSONObject(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONObject\");\n\t\t}\n\t}", "language": "java", "code": "public JSONObject getJSONObject(String name) throws JSONException {\n\t\tObject object = get(name);\n\t\tif (object instanceof JSONObject) {\n\t\t\treturn (JSONObject) object;\n\t\t}\n\t\telse {\n\t\t\tthrow JSON.typeMismatch(name, object, \"JSONObject\");\n\t\t}\n\t}", "code_tokens": ["public", "JSONObject", "getJSONObject", "(", "String", "name", ")", "throws", "JSONException", "{", "Object", "object", "=", "get", "(", "name", ")", ";", "if", "(", "object", "instanceof", "JSONObject", ")", "{", "return", "(", "JSONObject", ")", "object", ";", "}", "else", "{", "throw", "JSON", ".", "typeMismatch", "(", "name", ",", "object", ",", "\"JSONObject\"", ")", ";", "}", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a {@code\nJSONObject}.\n@param name the name of the property\n@return the value\n@throws JSONException if the mapping doesn't exist or is not a {@code\nJSONObject}.", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L629-L637", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.optJSONObject", "original_string": "public JSONObject optJSONObject(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}", "language": "java", "code": "public JSONObject optJSONObject(String name) {\n\t\tObject object = opt(name);\n\t\treturn object instanceof JSONObject ? (JSONObject) object : null;\n\t}", "code_tokens": ["public", "JSONObject", "optJSONObject", "(", "String", "name", ")", "{", "Object", "object", "=", "opt", "(", "name", ")", ";", "return", "object", "instanceof", "JSONObject", "?", "(", "JSONObject", ")", "object", ":", "null", ";", "}"], "docstring": "Returns the value mapped by {@code name} if it exists and is a {@code\nJSONObject}. Returns null otherwise.\n@param name the name of the property\n@return the value or {@code null}", "docstring_tokens": ["Returns", "the", "value", "mapped", "by", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L645-L648", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.toJSONArray", "original_string": "public JSONArray toJSONArray(JSONArray names) {\n\t\tJSONArray result = new JSONArray();\n\t\tif (names == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint length = names.length();\n\t\tif (length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tString name = JSON.toString(names.opt(i));\n\t\t\tresult.put(opt(name));\n\t\t}\n\t\treturn result;\n\t}", "language": "java", "code": "public JSONArray toJSONArray(JSONArray names) {\n\t\tJSONArray result = new JSONArray();\n\t\tif (names == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint length = names.length();\n\t\tif (length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tString name = JSON.toString(names.opt(i));\n\t\t\tresult.put(opt(name));\n\t\t}\n\t\treturn result;\n\t}", "code_tokens": ["public", "JSONArray", "toJSONArray", "(", "JSONArray", "names", ")", "{", "JSONArray", "result", "=", "new", "JSONArray", "(", ")", ";", "if", "(", "names", "==", "null", ")", "{", "return", "null", ";", "}", "int", "length", "=", "names", ".", "length", "(", ")", ";", "if", "(", "length", "==", "0", ")", "{", "return", "null", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "String", "name", "=", "JSON", ".", "toString", "(", "names", ".", "opt", "(", "i", ")", ")", ";", "result", ".", "put", "(", "opt", "(", "name", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "Returns an array with the values corresponding to {@code names}. The array contains\nnull for names that aren't mapped. This method returns null if {@code names} is\neither null or empty.\n@param names the names of the properties\n@return the array", "docstring_tokens": ["Returns", "an", "array", "with", "the", "values", "corresponding", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L657-L671", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.numberToString", "original_string": "public static String numberToString(Number number) throws JSONException {\n\t\tif (number == null) {\n\t\t\tthrow new JSONException(\"Number must be non-null\");\n\t\t}\n\n\t\tdouble doubleValue = number.doubleValue();\n\t\tJSON.checkDouble(doubleValue);\n\n\t\t// the original returns \"-0\" instead of \"-0.0\" for negative zero\n\t\tif (number.equals(NEGATIVE_ZERO)) {\n\t\t\treturn \"-0\";\n\t\t}\n\n\t\tlong longValue = number.longValue();\n\t\tif (doubleValue == longValue) {\n\t\t\treturn Long.toString(longValue);\n\t\t}\n\n\t\treturn number.toString();\n\t}", "language": "java", "code": "public static String numberToString(Number number) throws JSONException {\n\t\tif (number == null) {\n\t\t\tthrow new JSONException(\"Number must be non-null\");\n\t\t}\n\n\t\tdouble doubleValue = number.doubleValue();\n\t\tJSON.checkDouble(doubleValue);\n\n\t\t// the original returns \"-0\" instead of \"-0.0\" for negative zero\n\t\tif (number.equals(NEGATIVE_ZERO)) {\n\t\t\treturn \"-0\";\n\t\t}\n\n\t\tlong longValue = number.longValue();\n\t\tif (doubleValue == longValue) {\n\t\t\treturn Long.toString(longValue);\n\t\t}\n\n\t\treturn number.toString();\n\t}", "code_tokens": ["public", "static", "String", "numberToString", "(", "Number", "number", ")", "throws", "JSONException", "{", "if", "(", "number", "==", "null", ")", "{", "throw", "new", "JSONException", "(", "\"Number must be non-null\"", ")", ";", "}", "double", "doubleValue", "=", "number", ".", "doubleValue", "(", ")", ";", "JSON", ".", "checkDouble", "(", "doubleValue", ")", ";", "// the original returns \"-0\" instead of \"-0.0\" for negative zero", "if", "(", "number", ".", "equals", "(", "NEGATIVE_ZERO", ")", ")", "{", "return", "\"-0\"", ";", "}", "long", "longValue", "=", "number", ".", "longValue", "(", ")", ";", "if", "(", "doubleValue", "==", "longValue", ")", "{", "return", "Long", ".", "toString", "(", "longValue", ")", ";", "}", "return", "number", ".", "toString", "(", ")", ";", "}"], "docstring": "Encodes the number as a JSON string.\n@param number a finite value. May not be {@link Double#isNaN() NaNs} or\n{@link Double#isInfinite() infinities}.\n@return the encoded value\n@throws JSONException if an error occurs", "docstring_tokens": ["Encodes", "the", "number", "as", "a", "JSON", "string", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L748-L767", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java", "func_name": "JSONObject.quote", "original_string": "public static String quote(String data) {\n\t\tif (data == null) {\n\t\t\treturn \"\\\"\\\"\";\n\t\t}\n\t\ttry {\n\t\t\tJSONStringer stringer = new JSONStringer();\n\t\t\tstringer.open(JSONStringer.Scope.NULL, \"\");\n\t\t\tstringer.value(data);\n\t\t\tstringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, \"\");\n\t\t\treturn stringer.toString();\n\t\t}\n\t\tcatch (JSONException e) {\n\t\t\tthrow new AssertionError();\n\t\t}\n\t}", "language": "java", "code": "public static String quote(String data) {\n\t\tif (data == null) {\n\t\t\treturn \"\\\"\\\"\";\n\t\t}\n\t\ttry {\n\t\t\tJSONStringer stringer = new JSONStringer();\n\t\t\tstringer.open(JSONStringer.Scope.NULL, \"\");\n\t\t\tstringer.value(data);\n\t\t\tstringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, \"\");\n\t\t\treturn stringer.toString();\n\t\t}\n\t\tcatch (JSONException e) {\n\t\t\tthrow new AssertionError();\n\t\t}\n\t}", "code_tokens": ["public", "static", "String", "quote", "(", "String", "data", ")", "{", "if", "(", "data", "==", "null", ")", "{", "return", "\"\\\"\\\"\"", ";", "}", "try", "{", "JSONStringer", "stringer", "=", "new", "JSONStringer", "(", ")", ";", "stringer", ".", "open", "(", "JSONStringer", ".", "Scope", ".", "NULL", ",", "\"\"", ")", ";", "stringer", ".", "value", "(", "data", ")", ";", "stringer", ".", "close", "(", "JSONStringer", ".", "Scope", ".", "NULL", ",", "JSONStringer", ".", "Scope", ".", "NULL", ",", "\"\"", ")", ";", "return", "stringer", ".", "toString", "(", ")", ";", "}", "catch", "(", "JSONException", "e", ")", "{", "throw", "new", "AssertionError", "(", ")", ";", "}", "}"], "docstring": "Encodes {@code data} as a JSON string. This applies quotes and any necessary\ncharacter escaping.\n@param data the string to encode. Null will be interpreted as an empty string.\n@return the quoted value", "docstring_tokens": ["Encodes", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONObject.java#L775-L789", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.taskDecorator", "original_string": "public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,\n\t\t\t\tthis.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,\n\t\t\t\tthis.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\ttaskDecorator, this.customizers);\n\t}", "language": "java", "code": "public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,\n\t\t\t\tthis.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,\n\t\t\t\tthis.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\ttaskDecorator, this.customizers);\n\t}", "code_tokens": ["public", "TaskExecutorBuilder", "taskDecorator", "(", "TaskDecorator", "taskDecorator", ")", "{", "return", "new", "TaskExecutorBuilder", "(", "this", ".", "queueCapacity", ",", "this", ".", "corePoolSize", ",", "this", ".", "maxPoolSize", ",", "this", ".", "allowCoreThreadTimeOut", ",", "this", ".", "keepAlive", ",", "this", ".", "awaitTermination", ",", "this", ".", "awaitTerminationPeriod", ",", "this", ".", "threadNamePrefix", ",", "taskDecorator", ",", "this", ".", "customizers", ")", ";", "}"], "docstring": "Set the {@link TaskDecorator} to use or {@code null} to not use any.\n@param taskDecorator the task decorator to use\n@return a new builder instance", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L216-L221", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.customizers", "original_string": "public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn customizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "TaskExecutorBuilder", "customizers", "(", "TaskExecutorCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "customizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be\napplied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order\nthat they were added after builder configuration has been applied. Setting this\nvalue will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(TaskExecutorCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L232-L235", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.customizers", "original_string": "public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,\n\t\t\t\tthis.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,\n\t\t\t\tthis.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, append(null, customizers));\n\t}", "language": "java", "code": "public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,\n\t\t\t\tthis.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,\n\t\t\t\tthis.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,\n\t\t\t\tthis.taskDecorator, append(null, customizers));\n\t}", "code_tokens": ["public", "TaskExecutorBuilder", "customizers", "(", "Iterable", "<", "TaskExecutorCustomizer", ">", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "new", "TaskExecutorBuilder", "(", "this", ".", "queueCapacity", ",", "this", ".", "corePoolSize", ",", "this", ".", "maxPoolSize", ",", "this", ".", "allowCoreThreadTimeOut", ",", "this", ".", "keepAlive", ",", "this", ".", "awaitTermination", ",", "this", ".", "awaitTerminationPeriod", ",", "this", ".", "threadNamePrefix", ",", "this", ".", "taskDecorator", ",", "append", "(", "null", ",", "customizers", ")", ")", ";", "}"], "docstring": "Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be\napplied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order\nthat they were added after builder configuration has been applied. Setting this\nvalue will replace any previously configured customizers.\n@param customizers the customizers to set\n@return a new builder instance\n@see #additionalCustomizers(TaskExecutorCustomizer...)", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L246-L252", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.additionalCustomizers", "original_string": "public TaskExecutorBuilder additionalCustomizers(\n\t\t\tTaskExecutorCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "language": "java", "code": "public TaskExecutorBuilder additionalCustomizers(\n\t\t\tTaskExecutorCustomizer... customizers) {\n\t\tAssert.notNull(customizers, \"Customizers must not be null\");\n\t\treturn additionalCustomizers(Arrays.asList(customizers));\n\t}", "code_tokens": ["public", "TaskExecutorBuilder", "additionalCustomizers", "(", "TaskExecutorCustomizer", "...", "customizers", ")", "{", "Assert", ".", "notNull", "(", "customizers", ",", "\"Customizers must not be null\"", ")", ";", "return", "additionalCustomizers", "(", "Arrays", ".", "asList", "(", "customizers", ")", ")", ";", "}"], "docstring": "Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied\nto the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that\nthey were added after builder configuration has been applied.\n@param customizers the customizers to add\n@return a new builder instance\n@see #customizers(TaskExecutorCustomizer...)", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L262-L266", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.build", "original_string": "public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {\n\t\treturn configure(BeanUtils.instantiateClass(taskExecutorClass));\n\t}", "language": "java", "code": "public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {\n\t\treturn configure(BeanUtils.instantiateClass(taskExecutorClass));\n\t}", "code_tokens": ["public", "<", "T", "extends", "ThreadPoolTaskExecutor", ">", "T", "build", "(", "Class", "<", "T", ">", "taskExecutorClass", ")", "{", "return", "configure", "(", "BeanUtils", ".", "instantiateClass", "(", "taskExecutorClass", ")", ")", ";", "}"], "docstring": "Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and\nconfigure it using this builder.\n@param <T> the type of task executor\n@param taskExecutorClass the template type to create\n@return a configured {@link ThreadPoolTaskExecutor} instance.\n@see #build()\n@see #configure(ThreadPoolTaskExecutor)", "docstring_tokens": ["Build", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L305-L307", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java", "func_name": "TaskExecutorBuilder.configure", "original_string": "public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}", "language": "java", "code": "public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {\n\t\tPropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();\n\t\tmap.from(this.queueCapacity).to(taskExecutor::setQueueCapacity);\n\t\tmap.from(this.corePoolSize).to(taskExecutor::setCorePoolSize);\n\t\tmap.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize);\n\t\tmap.from(this.keepAlive).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setKeepAliveSeconds);\n\t\tmap.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut);\n\t\tmap.from(this.awaitTermination)\n\t\t\t\t.to(taskExecutor::setWaitForTasksToCompleteOnShutdown);\n\t\tmap.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)\n\t\t\t\t.to(taskExecutor::setAwaitTerminationSeconds);\n\t\tmap.from(this.threadNamePrefix).whenHasText()\n\t\t\t\t.to(taskExecutor::setThreadNamePrefix);\n\t\tmap.from(this.taskDecorator).to(taskExecutor::setTaskDecorator);\n\t\tif (!CollectionUtils.isEmpty(this.customizers)) {\n\t\t\tthis.customizers.forEach((customizer) -> customizer.customize(taskExecutor));\n\t\t}\n\t\treturn taskExecutor;\n\t}", "code_tokens": ["public", "<", "T", "extends", "ThreadPoolTaskExecutor", ">", "T", "configure", "(", "T", "taskExecutor", ")", "{", "PropertyMapper", "map", "=", "PropertyMapper", ".", "get", "(", ")", ".", "alwaysApplyingWhenNonNull", "(", ")", ";", "map", ".", "from", "(", "this", ".", "queueCapacity", ")", ".", "to", "(", "taskExecutor", "::", "setQueueCapacity", ")", ";", "map", ".", "from", "(", "this", ".", "corePoolSize", ")", ".", "to", "(", "taskExecutor", "::", "setCorePoolSize", ")", ";", "map", ".", "from", "(", "this", ".", "maxPoolSize", ")", ".", "to", "(", "taskExecutor", "::", "setMaxPoolSize", ")", ";", "map", ".", "from", "(", "this", ".", "keepAlive", ")", ".", "asInt", "(", "Duration", "::", "getSeconds", ")", ".", "to", "(", "taskExecutor", "::", "setKeepAliveSeconds", ")", ";", "map", ".", "from", "(", "this", ".", "allowCoreThreadTimeOut", ")", ".", "to", "(", "taskExecutor", "::", "setAllowCoreThreadTimeOut", ")", ";", "map", ".", "from", "(", "this", ".", "awaitTermination", ")", ".", "to", "(", "taskExecutor", "::", "setWaitForTasksToCompleteOnShutdown", ")", ";", "map", ".", "from", "(", "this", ".", "awaitTerminationPeriod", ")", ".", "asInt", "(", "Duration", "::", "getSeconds", ")", ".", "to", "(", "taskExecutor", "::", "setAwaitTerminationSeconds", ")", ";", "map", ".", "from", "(", "this", ".", "threadNamePrefix", ")", ".", "whenHasText", "(", ")", ".", "to", "(", "taskExecutor", "::", "setThreadNamePrefix", ")", ";", "map", ".", "from", "(", "this", ".", "taskDecorator", ")", ".", "to", "(", "taskExecutor", "::", "setTaskDecorator", ")", ";", "if", "(", "!", "CollectionUtils", ".", "isEmpty", "(", "this", ".", "customizers", ")", ")", "{", "this", ".", "customizers", ".", "forEach", "(", "(", "customizer", ")", "-", ">", "customizer", ".", "customize", "(", "taskExecutor", ")", ")", ";", "}", "return", "taskExecutor", ";", "}"], "docstring": "Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder.\n@param <T> the type of task executor\n@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure\n@return the task executor instance\n@see #build()\n@see #build(Class)", "docstring_tokens": ["Configure", "the", "provided", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/task/TaskExecutorBuilder.java#L317-L336", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java", "func_name": "DefaultJmsListenerContainerFactoryConfigurer.configure", "original_string": "public void configure(DefaultJmsListenerContainerFactory factory,\n\t\t\tConnectionFactory connectionFactory) {\n\t\tAssert.notNull(factory, \"Factory must not be null\");\n\t\tAssert.notNull(connectionFactory, \"ConnectionFactory must not be null\");\n\t\tfactory.setConnectionFactory(connectionFactory);\n\t\tfactory.setPubSubDomain(this.jmsProperties.isPubSubDomain());\n\t\tif (this.transactionManager != null) {\n\t\t\tfactory.setTransactionManager(this.transactionManager);\n\t\t}\n\t\telse {\n\t\t\tfactory.setSessionTransacted(true);\n\t\t}\n\t\tif (this.destinationResolver != null) {\n\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\tif (this.messageConverter != null) {\n\t\t\tfactory.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tJmsProperties.Listener listener = this.jmsProperties.getListener();\n\t\tfactory.setAutoStartup(listener.isAutoStartup());\n\t\tif (listener.getAcknowledgeMode() != null) {\n\t\t\tfactory.setSessionAcknowledgeMode(listener.getAcknowledgeMode().getMode());\n\t\t}\n\t\tString concurrency = listener.formatConcurrency();\n\t\tif (concurrency != null) {\n\t\t\tfactory.setConcurrency(concurrency);\n\t\t}\n\t}", "language": "java", "code": "public void configure(DefaultJmsListenerContainerFactory factory,\n\t\t\tConnectionFactory connectionFactory) {\n\t\tAssert.notNull(factory, \"Factory must not be null\");\n\t\tAssert.notNull(connectionFactory, \"ConnectionFactory must not be null\");\n\t\tfactory.setConnectionFactory(connectionFactory);\n\t\tfactory.setPubSubDomain(this.jmsProperties.isPubSubDomain());\n\t\tif (this.transactionManager != null) {\n\t\t\tfactory.setTransactionManager(this.transactionManager);\n\t\t}\n\t\telse {\n\t\t\tfactory.setSessionTransacted(true);\n\t\t}\n\t\tif (this.destinationResolver != null) {\n\t\t\tfactory.setDestinationResolver(this.destinationResolver);\n\t\t}\n\t\tif (this.messageConverter != null) {\n\t\t\tfactory.setMessageConverter(this.messageConverter);\n\t\t}\n\t\tJmsProperties.Listener listener = this.jmsProperties.getListener();\n\t\tfactory.setAutoStartup(listener.isAutoStartup());\n\t\tif (listener.getAcknowledgeMode() != null) {\n\t\t\tfactory.setSessionAcknowledgeMode(listener.getAcknowledgeMode().getMode());\n\t\t}\n\t\tString concurrency = listener.formatConcurrency();\n\t\tif (concurrency != null) {\n\t\t\tfactory.setConcurrency(concurrency);\n\t\t}\n\t}", "code_tokens": ["public", "void", "configure", "(", "DefaultJmsListenerContainerFactory", "factory", ",", "ConnectionFactory", "connectionFactory", ")", "{", "Assert", ".", "notNull", "(", "factory", ",", "\"Factory must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "connectionFactory", ",", "\"ConnectionFactory must not be null\"", ")", ";", "factory", ".", "setConnectionFactory", "(", "connectionFactory", ")", ";", "factory", ".", "setPubSubDomain", "(", "this", ".", "jmsProperties", ".", "isPubSubDomain", "(", ")", ")", ";", "if", "(", "this", ".", "transactionManager", "!=", "null", ")", "{", "factory", ".", "setTransactionManager", "(", "this", ".", "transactionManager", ")", ";", "}", "else", "{", "factory", ".", "setSessionTransacted", "(", "true", ")", ";", "}", "if", "(", "this", ".", "destinationResolver", "!=", "null", ")", "{", "factory", ".", "setDestinationResolver", "(", "this", ".", "destinationResolver", ")", ";", "}", "if", "(", "this", ".", "messageConverter", "!=", "null", ")", "{", "factory", ".", "setMessageConverter", "(", "this", ".", "messageConverter", ")", ";", "}", "JmsProperties", ".", "Listener", "listener", "=", "this", ".", "jmsProperties", ".", "getListener", "(", ")", ";", "factory", ".", "setAutoStartup", "(", "listener", ".", "isAutoStartup", "(", ")", ")", ";", "if", "(", "listener", ".", "getAcknowledgeMode", "(", ")", "!=", "null", ")", "{", "factory", ".", "setSessionAcknowledgeMode", "(", "listener", ".", "getAcknowledgeMode", "(", ")", ".", "getMode", "(", ")", ")", ";", "}", "String", "concurrency", "=", "listener", ".", "formatConcurrency", "(", ")", ";", "if", "(", "concurrency", "!=", "null", ")", "{", "factory", ".", "setConcurrency", "(", "concurrency", ")", ";", "}", "}"], "docstring": "Configure the specified jms listener container factory. The factory can be further\ntuned and default settings can be overridden.\n@param factory the {@link DefaultJmsListenerContainerFactory} instance to configure\n@param connectionFactory the {@link ConnectionFactory} to use", "docstring_tokens": ["Configure", "the", "specified", "jms", "listener", "container", "factory", ".", "The", "factory", "can", "be", "further", "tuned", "and", "default", "settings", "can", "be", "overridden", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/DefaultJmsListenerContainerFactoryConfigurer.java#L84-L111", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java", "func_name": "SimpleConfigurationMetadataRepository.add", "original_string": "public void add(Collection<ConfigurationMetadataSource> sources) {\n\t\tfor (ConfigurationMetadataSource source : sources) {\n\t\t\tString groupId = source.getGroupId();\n\t\t\tConfigurationMetadataGroup group = this.allGroups.get(groupId);\n\t\t\tif (group == null) {\n\t\t\t\tgroup = new ConfigurationMetadataGroup(groupId);\n\t\t\t\tthis.allGroups.put(groupId, group);\n\t\t\t}\n\t\t\tString sourceType = source.getType();\n\t\t\tif (sourceType != null) {\n\t\t\t\tputIfAbsent(group.getSources(), sourceType, source);\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public void add(Collection<ConfigurationMetadataSource> sources) {\n\t\tfor (ConfigurationMetadataSource source : sources) {\n\t\t\tString groupId = source.getGroupId();\n\t\t\tConfigurationMetadataGroup group = this.allGroups.get(groupId);\n\t\t\tif (group == null) {\n\t\t\t\tgroup = new ConfigurationMetadataGroup(groupId);\n\t\t\t\tthis.allGroups.put(groupId, group);\n\t\t\t}\n\t\t\tString sourceType = source.getType();\n\t\t\tif (sourceType != null) {\n\t\t\t\tputIfAbsent(group.getSources(), sourceType, source);\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "void", "add", "(", "Collection", "<", "ConfigurationMetadataSource", ">", "sources", ")", "{", "for", "(", "ConfigurationMetadataSource", "source", ":", "sources", ")", "{", "String", "groupId", "=", "source", ".", "getGroupId", "(", ")", ";", "ConfigurationMetadataGroup", "group", "=", "this", ".", "allGroups", ".", "get", "(", "groupId", ")", ";", "if", "(", "group", "==", "null", ")", "{", "group", "=", "new", "ConfigurationMetadataGroup", "(", "groupId", ")", ";", "this", ".", "allGroups", ".", "put", "(", "groupId", ",", "group", ")", ";", "}", "String", "sourceType", "=", "source", ".", "getType", "(", ")", ";", "if", "(", "sourceType", "!=", "null", ")", "{", "putIfAbsent", "(", "group", ".", "getSources", "(", ")", ",", "sourceType", ",", "source", ")", ";", "}", "}", "}"], "docstring": "Register the specified {@link ConfigurationMetadataSource sources}.\n@param sources the sources to add", "docstring_tokens": ["Register", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java#L55-L68", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java", "func_name": "SimpleConfigurationMetadataRepository.add", "original_string": "public void add(ConfigurationMetadataProperty property,\n\t\t\tConfigurationMetadataSource source) {\n\t\tif (source != null) {\n\t\t\tputIfAbsent(source.getProperties(), property.getId(), property);\n\t\t}\n\t\tputIfAbsent(getGroup(source).getProperties(), property.getId(), property);\n\t}", "language": "java", "code": "public void add(ConfigurationMetadataProperty property,\n\t\t\tConfigurationMetadataSource source) {\n\t\tif (source != null) {\n\t\t\tputIfAbsent(source.getProperties(), property.getId(), property);\n\t\t}\n\t\tputIfAbsent(getGroup(source).getProperties(), property.getId(), property);\n\t}", "code_tokens": ["public", "void", "add", "(", "ConfigurationMetadataProperty", "property", ",", "ConfigurationMetadataSource", "source", ")", "{", "if", "(", "source", "!=", "null", ")", "{", "putIfAbsent", "(", "source", ".", "getProperties", "(", ")", ",", "property", ".", "getId", "(", ")", ",", "property", ")", ";", "}", "putIfAbsent", "(", "getGroup", "(", "source", ")", ".", "getProperties", "(", ")", ",", "property", ".", "getId", "(", ")", ",", "property", ")", ";", "}"], "docstring": "Add a {@link ConfigurationMetadataProperty} with the\n{@link ConfigurationMetadataSource source} that defines it, if any.\n@param property the property to add\n@param source the source", "docstring_tokens": ["Add", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java#L76-L82", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java", "func_name": "SimpleConfigurationMetadataRepository.include", "original_string": "public void include(ConfigurationMetadataRepository repository) {\n\t\tfor (ConfigurationMetadataGroup group : repository.getAllGroups().values()) {\n\t\t\tConfigurationMetadataGroup existingGroup = this.allGroups.get(group.getId());\n\t\t\tif (existingGroup == null) {\n\t\t\t\tthis.allGroups.put(group.getId(), group);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Merge properties\n\t\t\t\tgroup.getProperties().forEach((name, value) -> putIfAbsent(\n\t\t\t\t\t\texistingGroup.getProperties(), name, value));\n\t\t\t\t// Merge sources\n\t\t\t\tgroup.getSources().forEach((name,\n\t\t\t\t\t\tvalue) -> putIfAbsent(existingGroup.getSources(), name, value));\n\t\t\t}\n\t\t}\n\n\t}", "language": "java", "code": "public void include(ConfigurationMetadataRepository repository) {\n\t\tfor (ConfigurationMetadataGroup group : repository.getAllGroups().values()) {\n\t\t\tConfigurationMetadataGroup existingGroup = this.allGroups.get(group.getId());\n\t\t\tif (existingGroup == null) {\n\t\t\t\tthis.allGroups.put(group.getId(), group);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Merge properties\n\t\t\t\tgroup.getProperties().forEach((name, value) -> putIfAbsent(\n\t\t\t\t\t\texistingGroup.getProperties(), name, value));\n\t\t\t\t// Merge sources\n\t\t\t\tgroup.getSources().forEach((name,\n\t\t\t\t\t\tvalue) -> putIfAbsent(existingGroup.getSources(), name, value));\n\t\t\t}\n\t\t}\n\n\t}", "code_tokens": ["public", "void", "include", "(", "ConfigurationMetadataRepository", "repository", ")", "{", "for", "(", "ConfigurationMetadataGroup", "group", ":", "repository", ".", "getAllGroups", "(", ")", ".", "values", "(", ")", ")", "{", "ConfigurationMetadataGroup", "existingGroup", "=", "this", ".", "allGroups", ".", "get", "(", "group", ".", "getId", "(", ")", ")", ";", "if", "(", "existingGroup", "==", "null", ")", "{", "this", ".", "allGroups", ".", "put", "(", "group", ".", "getId", "(", ")", ",", "group", ")", ";", "}", "else", "{", "// Merge properties", "group", ".", "getProperties", "(", ")", ".", "forEach", "(", "(", "name", ",", "value", ")", "->", "putIfAbsent", "(", "existingGroup", ".", "getProperties", "(", ")", ",", "name", ",", "value", ")", ")", ";", "// Merge sources", "group", ".", "getSources", "(", ")", ".", "forEach", "(", "(", "name", ",", "value", ")", "->", "putIfAbsent", "(", "existingGroup", ".", "getSources", "(", ")", ",", "name", ",", "value", ")", ")", ";", "}", "}", "}"], "docstring": "Merge the content of the specified repository to this repository.\n@param repository the repository to include", "docstring_tokens": ["Merge", "the", "content", "of", "the", "specified", "repository", "to", "this", "repository", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/SimpleConfigurationMetadataRepository.java#L88-L104", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java", "func_name": "ServletWebServerApplicationContext.postProcessBeanFactory", "original_string": "@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tbeanFactory.addBeanPostProcessor(\n\t\t\t\tnew WebApplicationContextServletContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(ServletContextAware.class);\n\t\tregisterWebApplicationScopes();\n\t}", "language": "java", "code": "@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tbeanFactory.addBeanPostProcessor(\n\t\t\t\tnew WebApplicationContextServletContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(ServletContextAware.class);\n\t\tregisterWebApplicationScopes();\n\t}", "code_tokens": ["@", "Override", "protected", "void", "postProcessBeanFactory", "(", "ConfigurableListableBeanFactory", "beanFactory", ")", "{", "beanFactory", ".", "addBeanPostProcessor", "(", "new", "WebApplicationContextServletContextAwareProcessor", "(", "this", ")", ")", ";", "beanFactory", ".", "ignoreDependencyInterface", "(", "ServletContextAware", ".", "class", ")", ";", "registerWebApplicationScopes", "(", ")", ";", "}"], "docstring": "Register ServletContextAwareProcessor.\n@see ServletContextAwareProcessor", "docstring_tokens": ["Register", "ServletContextAwareProcessor", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java#L131-L137", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java", "func_name": "ServletWebServerApplicationContext.getWebServerFactory", "original_string": "protected ServletWebServerFactory getWebServerFactory() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory()\n\t\t\t\t.getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ServletWebServerApplicationContext due to missing \"\n\t\t\t\t\t\t\t+ \"ServletWebServerFactory bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t\t\t+ \"ServletWebServerFactory beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}", "language": "java", "code": "protected ServletWebServerFactory getWebServerFactory() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory()\n\t\t\t\t.getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ServletWebServerApplicationContext due to missing \"\n\t\t\t\t\t\t\t+ \"ServletWebServerFactory bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\n\t\t\t\t\t\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t\t\t+ \"ServletWebServerFactory beans : \"\n\t\t\t\t\t\t\t+ StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}", "code_tokens": ["protected", "ServletWebServerFactory", "getWebServerFactory", "(", ")", "{", "// Use bean names so that we don't consider the hierarchy", "String", "[", "]", "beanNames", "=", "getBeanFactory", "(", ")", ".", "getBeanNamesForType", "(", "ServletWebServerFactory", ".", "class", ")", ";", "if", "(", "beanNames", ".", "length", "==", "0", ")", "{", "throw", "new", "ApplicationContextException", "(", "\"Unable to start ServletWebServerApplicationContext due to missing \"", "+", "\"ServletWebServerFactory bean.\"", ")", ";", "}", "if", "(", "beanNames", ".", "length", ">", "1", ")", "{", "throw", "new", "ApplicationContextException", "(", "\"Unable to start ServletWebServerApplicationContext due to multiple \"", "+", "\"ServletWebServerFactory beans : \"", "+", "StringUtils", ".", "arrayToCommaDelimitedString", "(", "beanNames", ")", ")", ";", "}", "return", "getBeanFactory", "(", ")", ".", "getBean", "(", "beanNames", "[", "0", "]", ",", "ServletWebServerFactory", ".", "class", ")", ";", "}"], "docstring": "Returns the {@link ServletWebServerFactory} that should be used to create the\nembedded {@link WebServer}. By default this method searches for a suitable bean in\nthe context itself.\n@return a {@link ServletWebServerFactory} (never {@code null})", "docstring_tokens": ["Returns", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java#L201-L217", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java", "func_name": "ServletWebServerApplicationContext.prepareWebApplicationContext", "original_string": "protected void prepareWebApplicationContext(ServletContext servletContext) {\n\t\tObject rootContext = servletContext.getAttribute(\n\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\tif (rootContext != null) {\n\t\t\tif (rootContext == this) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \"\n\t\t\t\t\t\t\t\t+ \"check whether you have multiple ServletContextInitializers!\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n\t\tservletContext.log(\"Initializing Spring embedded WebApplicationContext\");\n\t\ttry {\n\t\t\tservletContext.setAttribute(\n\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\"Published root WebApplicationContext as ServletContext attribute with name [\"\n\t\t\t\t\t\t\t\t+ WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE\n\t\t\t\t\t\t\t\t+ \"]\");\n\t\t\t}\n\t\t\tsetServletContext(servletContext);\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - getStartupDate();\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \"\n\t\t\t\t\t\t+ elapsedTime + \" ms\");\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException | Error ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(\n\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t}", "language": "java", "code": "protected void prepareWebApplicationContext(ServletContext servletContext) {\n\t\tObject rootContext = servletContext.getAttribute(\n\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\tif (rootContext != null) {\n\t\t\tif (rootContext == this) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \"\n\t\t\t\t\t\t\t\t+ \"check whether you have multiple ServletContextInitializers!\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n\t\tservletContext.log(\"Initializing Spring embedded WebApplicationContext\");\n\t\ttry {\n\t\t\tservletContext.setAttribute(\n\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\"Published root WebApplicationContext as ServletContext attribute with name [\"\n\t\t\t\t\t\t\t\t+ WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE\n\t\t\t\t\t\t\t\t+ \"]\");\n\t\t\t}\n\t\t\tsetServletContext(servletContext);\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - getStartupDate();\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \"\n\t\t\t\t\t\t+ elapsedTime + \" ms\");\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException | Error ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(\n\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t}", "code_tokens": ["protected", "void", "prepareWebApplicationContext", "(", "ServletContext", "servletContext", ")", "{", "Object", "rootContext", "=", "servletContext", ".", "getAttribute", "(", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE", ")", ";", "if", "(", "rootContext", "!=", "null", ")", "{", "if", "(", "rootContext", "==", "this", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Cannot initialize context because there is already a root application context present - \"", "+", "\"check whether you have multiple ServletContextInitializers!\"", ")", ";", "}", "return", ";", "}", "Log", "logger", "=", "LogFactory", ".", "getLog", "(", "ContextLoader", ".", "class", ")", ";", "servletContext", ".", "log", "(", "\"Initializing Spring embedded WebApplicationContext\"", ")", ";", "try", "{", "servletContext", ".", "setAttribute", "(", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE", ",", "this", ")", ";", "if", "(", "logger", ".", "isDebugEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Published root WebApplicationContext as ServletContext attribute with name [\"", "+", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE", "+", "\"]\"", ")", ";", "}", "setServletContext", "(", "servletContext", ")", ";", "if", "(", "logger", ".", "isInfoEnabled", "(", ")", ")", "{", "long", "elapsedTime", "=", "System", ".", "currentTimeMillis", "(", ")", "-", "getStartupDate", "(", ")", ";", "logger", ".", "info", "(", "\"Root WebApplicationContext: initialization completed in \"", "+", "elapsedTime", "+", "\" ms\"", ")", ";", "}", "}", "catch", "(", "RuntimeException", "|", "Error", "ex", ")", "{", "logger", ".", "error", "(", "\"Context initialization failed\"", ",", "ex", ")", ";", "servletContext", ".", "setAttribute", "(", "WebApplicationContext", ".", "ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE", ",", "ex", ")", ";", "throw", "ex", ";", "}", "}"], "docstring": "Prepare the {@link WebApplicationContext} with the given fully loaded\n{@link ServletContext}. This method is usually called from\n{@link ServletContextInitializer#onStartup(ServletContext)} and is similar to the\nfunctionality usually provided by a {@link ContextLoaderListener}.\n@param servletContext the operational servlet context", "docstring_tokens": ["Prepare", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/ServletWebServerApplicationContext.java#L271-L306", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java", "func_name": "AnnotationConfigServletWebApplicationContext.setEnvironment", "original_string": "@Override\n\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "language": "java", "code": "@Override\n\tpublic void setEnvironment(ConfigurableEnvironment environment) {\n\t\tsuper.setEnvironment(environment);\n\t\tthis.reader.setEnvironment(environment);\n\t\tthis.scanner.setEnvironment(environment);\n\t}", "code_tokens": ["@", "Override", "public", "void", "setEnvironment", "(", "ConfigurableEnvironment", "environment", ")", "{", "super", ".", "setEnvironment", "(", "environment", ")", ";", "this", ".", "reader", ".", "setEnvironment", "(", "environment", ")", ";", "this", ".", "scanner", ".", "setEnvironment", "(", "environment", ")", ";", "}"], "docstring": "{@inheritDoc}\n<p>\nDelegates given environment to underlying {@link AnnotatedBeanDefinitionReader} and\n{@link ClassPathBeanDefinitionScanner} members.", "docstring_tokens": ["{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java#L123-L128", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java", "func_name": "AnnotationConfigServletWebApplicationContext.setBeanNameGenerator", "original_string": "public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.getBeanFactory().registerSingleton(\n\t\t\t\tAnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,\n\t\t\t\tbeanNameGenerator);\n\t}", "language": "java", "code": "public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {\n\t\tthis.reader.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.scanner.setBeanNameGenerator(beanNameGenerator);\n\t\tthis.getBeanFactory().registerSingleton(\n\t\t\t\tAnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,\n\t\t\t\tbeanNameGenerator);\n\t}", "code_tokens": ["public", "void", "setBeanNameGenerator", "(", "BeanNameGenerator", "beanNameGenerator", ")", "{", "this", ".", "reader", ".", "setBeanNameGenerator", "(", "beanNameGenerator", ")", ";", "this", ".", "scanner", ".", "setBeanNameGenerator", "(", "beanNameGenerator", ")", ";", "this", ".", "getBeanFactory", "(", ")", ".", "registerSingleton", "(", "AnnotationConfigUtils", ".", "CONFIGURATION_BEAN_NAME_GENERATOR", ",", "beanNameGenerator", ")", ";", "}"], "docstring": "Provide a custom {@link BeanNameGenerator} for use with\n{@link AnnotatedBeanDefinitionReader} and/or\n{@link ClassPathBeanDefinitionScanner}, if any.\n<p>\nDefault is\n{@link org.springframework.context.annotation.AnnotationBeanNameGenerator}.\n<p>\nAny call to this method must occur prior to calls to {@link #register(Class...)}\nand/or {@link #scan(String...)}.\n@param beanNameGenerator the bean name generator\n@see AnnotatedBeanDefinitionReader#setBeanNameGenerator\n@see ClassPathBeanDefinitionScanner#setBeanNameGenerator", "docstring_tokens": ["Provide", "a", "custom", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java#L144-L150", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java", "func_name": "AnnotationConfigServletWebApplicationContext.register", "original_string": "@Override\n\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses,\n\t\t\t\t\"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}", "language": "java", "code": "@Override\n\tpublic final void register(Class<?>... annotatedClasses) {\n\t\tAssert.notEmpty(annotatedClasses,\n\t\t\t\t\"At least one annotated class must be specified\");\n\t\tthis.annotatedClasses.addAll(Arrays.asList(annotatedClasses));\n\t}", "code_tokens": ["@", "Override", "public", "final", "void", "register", "(", "Class", "<", "?", ">", "...", "annotatedClasses", ")", "{", "Assert", ".", "notEmpty", "(", "annotatedClasses", ",", "\"At least one annotated class must be specified\"", ")", ";", "this", ".", "annotatedClasses", ".", "addAll", "(", "Arrays", ".", "asList", "(", "annotatedClasses", ")", ")", ";", "}"], "docstring": "Register one or more annotated classes to be processed. Note that\n{@link #refresh()} must be called in order for the context to fully process the new\nclass.\n<p>\nCalls to {@code #register} are idempotent; adding the same annotated class more\nthan once has no additional effect.\n@param annotatedClasses one or more annotated classes, e.g. {@code @Configuration}\nclasses\n@see #scan(String...)\n@see #refresh()", "docstring_tokens": ["Register", "one", "or", "more", "annotated", "classes", "to", "be", "processed", ".", "Note", "that", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebApplicationContext.java#L178-L183", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java", "func_name": "SslServerCustomizer.configureSsl", "original_string": "protected void configureSsl(SslContextFactory factory, Ssl ssl,\n\t\t\tSslStoreProvider sslStoreProvider) {\n\t\tfactory.setProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(factory, ssl);\n\t\tconfigureSslPasswords(factory, ssl);\n\t\tfactory.setCertAlias(ssl.getKeyAlias());\n\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers())) {\n\t\t\tfactory.setIncludeCipherSuites(ssl.getCiphers());\n\t\t\tfactory.setExcludeCipherSuites();\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfactory.setIncludeProtocols(ssl.getEnabledProtocols());\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\ttry {\n\t\t\t\tfactory.setKeyStore(sslStoreProvider.getKeyStore());\n\t\t\t\tfactory.setTrustStore(sslStoreProvider.getTrustStore());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(factory, ssl);\n\t\t\tconfigureSslTrustStore(factory, ssl);\n\t\t}\n\t}", "language": "java", "code": "protected void configureSsl(SslContextFactory factory, Ssl ssl,\n\t\t\tSslStoreProvider sslStoreProvider) {\n\t\tfactory.setProtocol(ssl.getProtocol());\n\t\tconfigureSslClientAuth(factory, ssl);\n\t\tconfigureSslPasswords(factory, ssl);\n\t\tfactory.setCertAlias(ssl.getKeyAlias());\n\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers())) {\n\t\t\tfactory.setIncludeCipherSuites(ssl.getCiphers());\n\t\t\tfactory.setExcludeCipherSuites();\n\t\t}\n\t\tif (ssl.getEnabledProtocols() != null) {\n\t\t\tfactory.setIncludeProtocols(ssl.getEnabledProtocols());\n\t\t}\n\t\tif (sslStoreProvider != null) {\n\t\t\ttry {\n\t\t\t\tfactory.setKeyStore(sslStoreProvider.getKeyStore());\n\t\t\t\tfactory.setTrustStore(sslStoreProvider.getTrustStore());\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfigureSslKeyStore(factory, ssl);\n\t\t\tconfigureSslTrustStore(factory, ssl);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "configureSsl", "(", "SslContextFactory", "factory", ",", "Ssl", "ssl", ",", "SslStoreProvider", "sslStoreProvider", ")", "{", "factory", ".", "setProtocol", "(", "ssl", ".", "getProtocol", "(", ")", ")", ";", "configureSslClientAuth", "(", "factory", ",", "ssl", ")", ";", "configureSslPasswords", "(", "factory", ",", "ssl", ")", ";", "factory", ".", "setCertAlias", "(", "ssl", ".", "getKeyAlias", "(", ")", ")", ";", "if", "(", "!", "ObjectUtils", ".", "isEmpty", "(", "ssl", ".", "getCiphers", "(", ")", ")", ")", "{", "factory", ".", "setIncludeCipherSuites", "(", "ssl", ".", "getCiphers", "(", ")", ")", ";", "factory", ".", "setExcludeCipherSuites", "(", ")", ";", "}", "if", "(", "ssl", ".", "getEnabledProtocols", "(", ")", "!=", "null", ")", "{", "factory", ".", "setIncludeProtocols", "(", "ssl", ".", "getEnabledProtocols", "(", ")", ")", ";", "}", "if", "(", "sslStoreProvider", "!=", "null", ")", "{", "try", "{", "factory", ".", "setKeyStore", "(", "sslStoreProvider", ".", "getKeyStore", "(", ")", ")", ";", "factory", ".", "setTrustStore", "(", "sslStoreProvider", ".", "getTrustStore", "(", ")", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "throw", "new", "IllegalStateException", "(", "\"Unable to set SSL store\"", ",", "ex", ")", ";", "}", "}", "else", "{", "configureSslKeyStore", "(", "factory", ",", "ssl", ")", ";", "configureSslTrustStore", "(", "factory", ",", "ssl", ")", ";", "}", "}"], "docstring": "Configure the SSL connection.\n@param factory the Jetty {@link SslContextFactory}.\n@param ssl the ssl details.\n@param sslStoreProvider the ssl store provider", "docstring_tokens": ["Configure", "the", "SSL", "connection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java#L141-L167", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitConnectionFactoryMetricsPostProcessor.java", "func_name": "RabbitConnectionFactoryMetricsPostProcessor.getConnectionFactoryName", "original_string": "private String getConnectionFactoryName(String beanName) {\n\t\tif (beanName.length() > CONNECTION_FACTORY_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CONNECTION_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - CONNECTION_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "language": "java", "code": "private String getConnectionFactoryName(String beanName) {\n\t\tif (beanName.length() > CONNECTION_FACTORY_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CONNECTION_FACTORY_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - CONNECTION_FACTORY_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "code_tokens": ["private", "String", "getConnectionFactoryName", "(", "String", "beanName", ")", "{", "if", "(", "beanName", ".", "length", "(", ")", ">", "CONNECTION_FACTORY_SUFFIX", ".", "length", "(", ")", "&&", "StringUtils", ".", "endsWithIgnoreCase", "(", "beanName", ",", "CONNECTION_FACTORY_SUFFIX", ")", ")", "{", "return", "beanName", ".", "substring", "(", "0", ",", "beanName", ".", "length", "(", ")", "-", "CONNECTION_FACTORY_SUFFIX", ".", "length", "(", ")", ")", ";", "}", "return", "beanName", ";", "}"], "docstring": "Get the name of a ConnectionFactory based on its {@code beanName}.\n@param beanName the name of the connection factory bean\n@return a name for the given connection factory", "docstring_tokens": ["Get", "the", "name", "of", "a", "ConnectionFactory", "based", "on", "its", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/amqp/RabbitConnectionFactoryMetricsPostProcessor.java#L73-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/run/BootRun.java", "func_name": "BootRun.sourceResources", "original_string": "public void sourceResources(SourceSet sourceSet) {\n\t\tsetClasspath(getProject()\n\t\t\t\t.files(sourceSet.getResources().getSrcDirs(), getClasspath())\n\t\t\t\t.filter((file) -> !file.equals(sourceSet.getOutput().getResourcesDir())));\n\t}", "language": "java", "code": "public void sourceResources(SourceSet sourceSet) {\n\t\tsetClasspath(getProject()\n\t\t\t\t.files(sourceSet.getResources().getSrcDirs(), getClasspath())\n\t\t\t\t.filter((file) -> !file.equals(sourceSet.getOutput().getResourcesDir())));\n\t}", "code_tokens": ["public", "void", "sourceResources", "(", "SourceSet", "sourceSet", ")", "{", "setClasspath", "(", "getProject", "(", ")", ".", "files", "(", "sourceSet", ".", "getResources", "(", ")", ".", "getSrcDirs", "(", ")", ",", "getClasspath", "(", ")", ")", ".", "filter", "(", "(", "file", ")", "-", ">", "!", "file", ".", "equals", "(", "sourceSet", ".", "getOutput", "(", ")", ".", "getResourcesDir", "(", ")", ")", ")", ")", ";", "}"], "docstring": "Adds the {@link SourceDirectorySet#getSrcDirs() source directories} of the given\n{@code sourceSet's} {@link SourceSet#getResources() resources} to the start of the\nclasspath in place of the {@link SourceSet#getOutput output's}\n{@link SourceSetOutput#getResourcesDir() resources directory}.\n@param sourceSet the source set", "docstring_tokens": ["Adds", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/run/BootRun.java#L39-L43", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/ErrorPageFilter.java", "func_name": "ErrorPageFilter.getDescription", "original_string": "protected String getDescription(HttpServletRequest request) {\n\t\tString pathInfo = (request.getPathInfo() != null) ? request.getPathInfo() : \"\";\n\t\treturn \"[\" + request.getServletPath() + pathInfo + \"]\";\n\t}", "language": "java", "code": "protected String getDescription(HttpServletRequest request) {\n\t\tString pathInfo = (request.getPathInfo() != null) ? request.getPathInfo() : \"\";\n\t\treturn \"[\" + request.getServletPath() + pathInfo + \"]\";\n\t}", "code_tokens": ["protected", "String", "getDescription", "(", "HttpServletRequest", "request", ")", "{", "String", "pathInfo", "=", "(", "request", ".", "getPathInfo", "(", ")", "!=", "null", ")", "?", "request", ".", "getPathInfo", "(", ")", ":", "\"\"", ";", "return", "\"[\"", "+", "request", ".", "getServletPath", "(", ")", "+", "pathInfo", "+", "\"]\"", ";", "}"], "docstring": "Return the description for the given request. By default this method will return a\ndescription based on the request {@code servletPath} and {@code pathInfo}.\n@param request the source request\n@return the description\n@since 1.5.0", "docstring_tokens": ["Return", "the", "description", "for", "the", "given", "request", ".", "By", "default", "this", "method", "will", "return", "a", "description", "based", "on", "the", "request", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/support/ErrorPageFilter.java#L209-L212", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java", "func_name": "ConcurrentKafkaListenerContainerFactoryConfigurer.configure", "original_string": "public void configure(\n\t\t\tConcurrentKafkaListenerContainerFactory<Object, Object> listenerFactory,\n\t\t\tConsumerFactory<Object, Object> consumerFactory) {\n\t\tlistenerFactory.setConsumerFactory(consumerFactory);\n\t\tconfigureListenerFactory(listenerFactory);\n\t\tconfigureContainer(listenerFactory.getContainerProperties());\n\t}", "language": "java", "code": "public void configure(\n\t\t\tConcurrentKafkaListenerContainerFactory<Object, Object> listenerFactory,\n\t\t\tConsumerFactory<Object, Object> consumerFactory) {\n\t\tlistenerFactory.setConsumerFactory(consumerFactory);\n\t\tconfigureListenerFactory(listenerFactory);\n\t\tconfigureContainer(listenerFactory.getContainerProperties());\n\t}", "code_tokens": ["public", "void", "configure", "(", "ConcurrentKafkaListenerContainerFactory", "<", "Object", ",", "Object", ">", "listenerFactory", ",", "ConsumerFactory", "<", "Object", ",", "Object", ">", "consumerFactory", ")", "{", "listenerFactory", ".", "setConsumerFactory", "(", "consumerFactory", ")", ";", "configureListenerFactory", "(", "listenerFactory", ")", ";", "configureContainer", "(", "listenerFactory", ".", "getContainerProperties", "(", ")", ")", ";", "}"], "docstring": "Configure the specified Kafka listener container factory. The factory can be\nfurther tuned and default settings can be overridden.\n@param listenerFactory the {@link ConcurrentKafkaListenerContainerFactory} instance\nto configure\n@param consumerFactory the {@link ConsumerFactory} to use", "docstring_tokens": ["Configure", "the", "specified", "Kafka", "listener", "container", "factory", ".", "The", "factory", "can", "be", "further", "tuned", "and", "default", "settings", "can", "be", "overridden", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java#L121-L127", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/orm/jpa/hibernate/SpringPhysicalNamingStrategy.java", "func_name": "SpringPhysicalNamingStrategy.getIdentifier", "original_string": "protected Identifier getIdentifier(String name, boolean quoted,\n\t\t\tJdbcEnvironment jdbcEnvironment) {\n\t\tif (isCaseInsensitive(jdbcEnvironment)) {\n\t\t\tname = name.toLowerCase(Locale.ROOT);\n\t\t}\n\t\treturn new Identifier(name, quoted);\n\t}", "language": "java", "code": "protected Identifier getIdentifier(String name, boolean quoted,\n\t\t\tJdbcEnvironment jdbcEnvironment) {\n\t\tif (isCaseInsensitive(jdbcEnvironment)) {\n\t\t\tname = name.toLowerCase(Locale.ROOT);\n\t\t}\n\t\treturn new Identifier(name, quoted);\n\t}", "code_tokens": ["protected", "Identifier", "getIdentifier", "(", "String", "name", ",", "boolean", "quoted", ",", "JdbcEnvironment", "jdbcEnvironment", ")", "{", "if", "(", "isCaseInsensitive", "(", "jdbcEnvironment", ")", ")", "{", "name", "=", "name", ".", "toLowerCase", "(", "Locale", ".", "ROOT", ")", ";", "}", "return", "new", "Identifier", "(", "name", ",", "quoted", ")", ";", "}"], "docstring": "Get an identifier for the specified details. By default this method will return an\nidentifier with the name adapted based on the result of\n{@link #isCaseInsensitive(JdbcEnvironment)}\n@param name the name of the identifier\n@param quoted if the identifier is quoted\n@param jdbcEnvironment the JDBC environment\n@return an identifier instance", "docstring_tokens": ["Get", "an", "identifier", "for", "the", "specified", "details", ".", "By", "default", "this", "method", "will", "return", "an", "identifier", "with", "the", "name", "adapted", "based", "on", "the", "result", "of", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/orm/jpa/hibernate/SpringPhysicalNamingStrategy.java#L88-L94", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastProperties.java", "func_name": "HazelcastProperties.resolveConfigLocation", "original_string": "public Resource resolveConfigLocation() {\n\t\tif (this.config == null) {\n\t\t\treturn null;\n\t\t}\n\t\tAssert.isTrue(this.config.exists(), () -> \"Hazelcast configuration does not \"\n\t\t\t\t+ \"exist '\" + this.config.getDescription() + \"'\");\n\t\treturn this.config;\n\t}", "language": "java", "code": "public Resource resolveConfigLocation() {\n\t\tif (this.config == null) {\n\t\t\treturn null;\n\t\t}\n\t\tAssert.isTrue(this.config.exists(), () -> \"Hazelcast configuration does not \"\n\t\t\t\t+ \"exist '\" + this.config.getDescription() + \"'\");\n\t\treturn this.config;\n\t}", "code_tokens": ["public", "Resource", "resolveConfigLocation", "(", ")", "{", "if", "(", "this", ".", "config", "==", "null", ")", "{", "return", "null", ";", "}", "Assert", ".", "isTrue", "(", "this", ".", "config", ".", "exists", "(", ")", ",", "(", ")", "->", "\"Hazelcast configuration does not \"", "+", "\"exist '\"", "+", "this", ".", "config", ".", "getDescription", "(", ")", "+", "\"'\"", ")", ";", "return", "this", ".", "config", ";", "}"], "docstring": "Resolve the config location if set.\n@return the location or {@code null} if it is not set\n@throws IllegalArgumentException if the config attribute is set to an unknown\nlocation", "docstring_tokens": ["Resolve", "the", "config", "location", "if", "set", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastProperties.java#L51-L58", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java", "func_name": "OriginTrackedPropertiesLoader.load", "original_string": "public Map<String, OriginTrackedValue> load(boolean expandLists) throws IOException {\n\t\ttry (CharacterReader reader = new CharacterReader(this.resource)) {\n\t\t\tMap<String, OriginTrackedValue> result = new LinkedHashMap<>();\n\t\t\tStringBuilder buffer = new StringBuilder();\n\t\t\twhile (reader.read()) {\n\t\t\t\tString key = loadKey(buffer, reader).trim();\n\t\t\t\tif (expandLists && key.endsWith(\"[]\")) {\n\t\t\t\t\tkey = key.substring(0, key.length() - 2);\n\t\t\t\t\tint index = 0;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tOriginTrackedValue value = loadValue(buffer, reader, true);\n\t\t\t\t\t\tput(result, key + \"[\" + (index++) + \"]\", value);\n\t\t\t\t\t\tif (!reader.isEndOfLine()) {\n\t\t\t\t\t\t\treader.read();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (!reader.isEndOfLine());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tOriginTrackedValue value = loadValue(buffer, reader, false);\n\t\t\t\t\tput(result, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}", "language": "java", "code": "public Map<String, OriginTrackedValue> load(boolean expandLists) throws IOException {\n\t\ttry (CharacterReader reader = new CharacterReader(this.resource)) {\n\t\t\tMap<String, OriginTrackedValue> result = new LinkedHashMap<>();\n\t\t\tStringBuilder buffer = new StringBuilder();\n\t\t\twhile (reader.read()) {\n\t\t\t\tString key = loadKey(buffer, reader).trim();\n\t\t\t\tif (expandLists && key.endsWith(\"[]\")) {\n\t\t\t\t\tkey = key.substring(0, key.length() - 2);\n\t\t\t\t\tint index = 0;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tOriginTrackedValue value = loadValue(buffer, reader, true);\n\t\t\t\t\t\tput(result, key + \"[\" + (index++) + \"]\", value);\n\t\t\t\t\t\tif (!reader.isEndOfLine()) {\n\t\t\t\t\t\t\treader.read();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (!reader.isEndOfLine());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tOriginTrackedValue value = loadValue(buffer, reader, false);\n\t\t\t\t\tput(result, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "OriginTrackedValue", ">", "load", "(", "boolean", "expandLists", ")", "throws", "IOException", "{", "try", "(", "CharacterReader", "reader", "=", "new", "CharacterReader", "(", "this", ".", "resource", ")", ")", "{", "Map", "<", "String", ",", "OriginTrackedValue", ">", "result", "=", "new", "LinkedHashMap", "<>", "(", ")", ";", "StringBuilder", "buffer", "=", "new", "StringBuilder", "(", ")", ";", "while", "(", "reader", ".", "read", "(", ")", ")", "{", "String", "key", "=", "loadKey", "(", "buffer", ",", "reader", ")", ".", "trim", "(", ")", ";", "if", "(", "expandLists", "&&", "key", ".", "endsWith", "(", "\"[]\"", ")", ")", "{", "key", "=", "key", ".", "substring", "(", "0", ",", "key", ".", "length", "(", ")", "-", "2", ")", ";", "int", "index", "=", "0", ";", "do", "{", "OriginTrackedValue", "value", "=", "loadValue", "(", "buffer", ",", "reader", ",", "true", ")", ";", "put", "(", "result", ",", "key", "+", "\"[\"", "+", "(", "index", "++", ")", "+", "\"]\"", ",", "value", ")", ";", "if", "(", "!", "reader", ".", "isEndOfLine", "(", ")", ")", "{", "reader", ".", "read", "(", ")", ";", "}", "}", "while", "(", "!", "reader", ".", "isEndOfLine", "(", ")", ")", ";", "}", "else", "{", "OriginTrackedValue", "value", "=", "loadValue", "(", "buffer", ",", "reader", ",", "false", ")", ";", "put", "(", "result", ",", "key", ",", "value", ")", ";", "}", "}", "return", "result", ";", "}", "}"], "docstring": "Load {@code .properties} data and return a map of {@code String} ->\n{@link OriginTrackedValue}.\n@param expandLists if list {@code name[]=a,b,c} shortcuts should be expanded\n@return the loaded properties\n@throws IOException on read error", "docstring_tokens": ["Load", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java#L73-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java", "func_name": "ArtemisConnectionFactoryFactory.deduceMode", "original_string": "private ArtemisMode deduceMode() {\n\t\tif (this.properties.getEmbedded().isEnabled()\n\t\t\t\t&& ClassUtils.isPresent(EMBEDDED_JMS_CLASS, null)) {\n\t\t\treturn ArtemisMode.EMBEDDED;\n\t\t}\n\t\treturn ArtemisMode.NATIVE;\n\t}", "language": "java", "code": "private ArtemisMode deduceMode() {\n\t\tif (this.properties.getEmbedded().isEnabled()\n\t\t\t\t&& ClassUtils.isPresent(EMBEDDED_JMS_CLASS, null)) {\n\t\t\treturn ArtemisMode.EMBEDDED;\n\t\t}\n\t\treturn ArtemisMode.NATIVE;\n\t}", "code_tokens": ["private", "ArtemisMode", "deduceMode", "(", ")", "{", "if", "(", "this", ".", "properties", ".", "getEmbedded", "(", ")", ".", "isEnabled", "(", ")", "&&", "ClassUtils", ".", "isPresent", "(", "EMBEDDED_JMS_CLASS", ",", "null", ")", ")", "{", "return", "ArtemisMode", ".", "EMBEDDED", ";", "}", "return", "ArtemisMode", ".", "NATIVE", ";", "}"], "docstring": "Deduce the {@link ArtemisMode} to use if none has been set.\n@return the mode", "docstring_tokens": ["Deduce", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisConnectionFactoryFactory.java#L99-L105", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java", "func_name": "OnJavaCondition.isWithin", "original_string": "private boolean isWithin(JavaVersion runningVersion, Range range,\n\t\t\tJavaVersion version) {\n\t\tif (range == Range.EQUAL_OR_NEWER) {\n\t\t\treturn runningVersion.isEqualOrNewerThan(version);\n\t\t}\n\t\tif (range == Range.OLDER_THAN) {\n\t\t\treturn runningVersion.isOlderThan(version);\n\t\t}\n\t\tthrow new IllegalStateException(\"Unknown range \" + range);\n\t}", "language": "java", "code": "private boolean isWithin(JavaVersion runningVersion, Range range,\n\t\t\tJavaVersion version) {\n\t\tif (range == Range.EQUAL_OR_NEWER) {\n\t\t\treturn runningVersion.isEqualOrNewerThan(version);\n\t\t}\n\t\tif (range == Range.OLDER_THAN) {\n\t\t\treturn runningVersion.isOlderThan(version);\n\t\t}\n\t\tthrow new IllegalStateException(\"Unknown range \" + range);\n\t}", "code_tokens": ["private", "boolean", "isWithin", "(", "JavaVersion", "runningVersion", ",", "Range", "range", ",", "JavaVersion", "version", ")", "{", "if", "(", "range", "==", "Range", ".", "EQUAL_OR_NEWER", ")", "{", "return", "runningVersion", ".", "isEqualOrNewerThan", "(", "version", ")", ";", "}", "if", "(", "range", "==", "Range", ".", "OLDER_THAN", ")", "{", "return", "runningVersion", ".", "isOlderThan", "(", "version", ")", ";", "}", "throw", "new", "IllegalStateException", "(", "\"Unknown range \"", "+", "range", ")", ";", "}"], "docstring": "Determines if the {@code runningVersion} is within the specified range of versions.\n@param runningVersion the current version.\n@param range the range\n@param version the bounds of the range\n@return if this version is within the specified range", "docstring_tokens": ["Determines", "if", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java#L71-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java", "func_name": "KafkaProperties.buildConsumerProperties", "original_string": "public Map<String, Object> buildConsumerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.consumer.buildProperties());\n\t\treturn properties;\n\t}", "language": "java", "code": "public Map<String, Object> buildConsumerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.consumer.buildProperties());\n\t\treturn properties;\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Object", ">", "buildConsumerProperties", "(", ")", "{", "Map", "<", "String", ",", "Object", ">", "properties", "=", "buildCommonProperties", "(", ")", ";", "properties", ".", "putAll", "(", "this", ".", "consumer", ".", "buildProperties", "(", ")", ")", ";", "return", "properties", ";", "}"], "docstring": "Create an initial map of consumer properties from the state of this instance.\n<p>\nThis allows you to add additional properties, if necessary, and override the\ndefault kafkaConsumerFactory bean.\n@return the consumer properties initialized with the customizations defined on this\ninstance", "docstring_tokens": ["Create", "an", "initial", "map", "of", "consumer", "properties", "from", "the", "state", "of", "this", "instance", ".", "<p", ">", "This", "allows", "you", "to", "add", "additional", "properties", "if", "necessary", "and", "override", "the", "default", "kafkaConsumerFactory", "bean", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java#L169-L173", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java", "func_name": "KafkaProperties.buildProducerProperties", "original_string": "public Map<String, Object> buildProducerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.producer.buildProperties());\n\t\treturn properties;\n\t}", "language": "java", "code": "public Map<String, Object> buildProducerProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.producer.buildProperties());\n\t\treturn properties;\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Object", ">", "buildProducerProperties", "(", ")", "{", "Map", "<", "String", ",", "Object", ">", "properties", "=", "buildCommonProperties", "(", ")", ";", "properties", ".", "putAll", "(", "this", ".", "producer", ".", "buildProperties", "(", ")", ")", ";", "return", "properties", ";", "}"], "docstring": "Create an initial map of producer properties from the state of this instance.\n<p>\nThis allows you to add additional properties, if necessary, and override the\ndefault kafkaProducerFactory bean.\n@return the producer properties initialized with the customizations defined on this\ninstance", "docstring_tokens": ["Create", "an", "initial", "map", "of", "producer", "properties", "from", "the", "state", "of", "this", "instance", ".", "<p", ">", "This", "allows", "you", "to", "add", "additional", "properties", "if", "necessary", "and", "override", "the", "default", "kafkaProducerFactory", "bean", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java#L183-L187", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java", "func_name": "KafkaProperties.buildAdminProperties", "original_string": "public Map<String, Object> buildAdminProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.admin.buildProperties());\n\t\treturn properties;\n\t}", "language": "java", "code": "public Map<String, Object> buildAdminProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.admin.buildProperties());\n\t\treturn properties;\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Object", ">", "buildAdminProperties", "(", ")", "{", "Map", "<", "String", ",", "Object", ">", "properties", "=", "buildCommonProperties", "(", ")", ";", "properties", ".", "putAll", "(", "this", ".", "admin", ".", "buildProperties", "(", ")", ")", ";", "return", "properties", ";", "}"], "docstring": "Create an initial map of admin properties from the state of this instance.\n<p>\nThis allows you to add additional properties, if necessary, and override the\ndefault kafkaAdmin bean.\n@return the admin properties initialized with the customizations defined on this\ninstance", "docstring_tokens": ["Create", "an", "initial", "map", "of", "admin", "properties", "from", "the", "state", "of", "this", "instance", ".", "<p", ">", "This", "allows", "you", "to", "add", "additional", "properties", "if", "necessary", "and", "override", "the", "default", "kafkaAdmin", "bean", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java#L197-L201", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java", "func_name": "KafkaProperties.buildStreamsProperties", "original_string": "public Map<String, Object> buildStreamsProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.streams.buildProperties());\n\t\treturn properties;\n\t}", "language": "java", "code": "public Map<String, Object> buildStreamsProperties() {\n\t\tMap<String, Object> properties = buildCommonProperties();\n\t\tproperties.putAll(this.streams.buildProperties());\n\t\treturn properties;\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Object", ">", "buildStreamsProperties", "(", ")", "{", "Map", "<", "String", ",", "Object", ">", "properties", "=", "buildCommonProperties", "(", ")", ";", "properties", ".", "putAll", "(", "this", ".", "streams", ".", "buildProperties", "(", ")", ")", ";", "return", "properties", ";", "}"], "docstring": "Create an initial map of streams properties from the state of this instance.\n<p>\nThis allows you to add additional properties, if necessary.\n@return the streams properties initialized with the customizations defined on this\ninstance", "docstring_tokens": ["Create", "an", "initial", "map", "of", "streams", "properties", "from", "the", "state", "of", "this", "instance", ".", "<p", ">", "This", "allows", "you", "to", "add", "additional", "properties", "if", "necessary", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java#L210-L214", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java", "func_name": "StartMojo.execute", "original_string": "public <T> T execute(long wait, int maxAttempts, Callable<T> callback)\n\t\t\tthrows Exception {\n\t\tgetLog().debug(\"Waiting for spring application to start...\");\n\t\tfor (int i = 0; i < maxAttempts; i++) {\n\t\t\tT result = callback.call();\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tString message = \"Spring application is not ready yet, waiting \" + wait\n\t\t\t\t\t+ \"ms (attempt \" + (i + 1) + \")\";\n\t\t\tgetLog().debug(message);\n\t\t\tsynchronized (this.lock) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.lock.wait(wait);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"Interrupted while waiting for Spring Boot app to start.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new MojoExecutionException(\n\t\t\t\t\"Spring application did not start before the configured \" + \"timeout (\"\n\t\t\t\t\t\t+ (wait * maxAttempts) + \"ms\");\n\t}", "language": "java", "code": "public <T> T execute(long wait, int maxAttempts, Callable<T> callback)\n\t\t\tthrows Exception {\n\t\tgetLog().debug(\"Waiting for spring application to start...\");\n\t\tfor (int i = 0; i < maxAttempts; i++) {\n\t\t\tT result = callback.call();\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tString message = \"Spring application is not ready yet, waiting \" + wait\n\t\t\t\t\t+ \"ms (attempt \" + (i + 1) + \")\";\n\t\t\tgetLog().debug(message);\n\t\t\tsynchronized (this.lock) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.lock.wait(wait);\n\t\t\t\t}\n\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"Interrupted while waiting for Spring Boot app to start.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new MojoExecutionException(\n\t\t\t\t\"Spring application did not start before the configured \" + \"timeout (\"\n\t\t\t\t\t\t+ (wait * maxAttempts) + \"ms\");\n\t}", "code_tokens": ["public", "<", "T", ">", "T", "execute", "(", "long", "wait", ",", "int", "maxAttempts", ",", "Callable", "<", "T", ">", "callback", ")", "throws", "Exception", "{", "getLog", "(", ")", ".", "debug", "(", "\"Waiting for spring application to start...\"", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "maxAttempts", ";", "i", "++", ")", "{", "T", "result", "=", "callback", ".", "call", "(", ")", ";", "if", "(", "result", "!=", "null", ")", "{", "return", "result", ";", "}", "String", "message", "=", "\"Spring application is not ready yet, waiting \"", "+", "wait", "+", "\"ms (attempt \"", "+", "(", "i", "+", "1", ")", "+", "\")\"", ";", "getLog", "(", ")", ".", "debug", "(", "message", ")", ";", "synchronized", "(", "this", ".", "lock", ")", "{", "try", "{", "this", ".", "lock", ".", "wait", "(", "wait", ")", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "throw", "new", "IllegalStateException", "(", "\"Interrupted while waiting for Spring Boot app to start.\"", ")", ";", "}", "}", "}", "throw", "new", "MojoExecutionException", "(", "\"Spring application did not start before the configured \"", "+", "\"timeout (\"", "+", "(", "wait", "*", "maxAttempts", ")", "+", "\"ms\"", ")", ";", "}"], "docstring": "Execute a task, retrying it on failure.\n@param <T> the result type\n@param wait the wait time\n@param maxAttempts the maximum number of attempts\n@param callback the task to execute (possibly multiple times). The callback should\nreturn {@code null} to indicate that another attempt should be made\n@return the result\n@throws Exception in case of execution errors", "docstring_tokens": ["Execute", "a", "task", "retrying", "it", "on", "failure", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java#L257-L282", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java", "func_name": "LogFile.applyTo", "original_string": "public void applyTo(Properties properties) {\n\t\tput(properties, LoggingSystemProperties.LOG_PATH, this.path);\n\t\tput(properties, LoggingSystemProperties.LOG_FILE, toString());\n\t}", "language": "java", "code": "public void applyTo(Properties properties) {\n\t\tput(properties, LoggingSystemProperties.LOG_PATH, this.path);\n\t\tput(properties, LoggingSystemProperties.LOG_FILE, toString());\n\t}", "code_tokens": ["public", "void", "applyTo", "(", "Properties", "properties", ")", "{", "put", "(", "properties", ",", "LoggingSystemProperties", ".", "LOG_PATH", ",", "this", ".", "path", ")", ";", "put", "(", "properties", ",", "LoggingSystemProperties", ".", "LOG_FILE", ",", "toString", "(", ")", ")", ";", "}"], "docstring": "Apply log file details to {@code LOG_PATH} and {@code LOG_FILE} map entries.\n@param properties the properties to apply to", "docstring_tokens": ["Apply", "log", "file", "details", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java#L105-L108", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java", "func_name": "LogFile.get", "original_string": "public static LogFile get(PropertyResolver propertyResolver) {\n\t\tString file = getLogFileProperty(propertyResolver, FILE_NAME_PROPERTY,\n\t\t\t\tFILE_PROPERTY);\n\t\tString path = getLogFileProperty(propertyResolver, FILE_PATH_PROPERTY,\n\t\t\t\tPATH_PROPERTY);\n\t\tif (StringUtils.hasLength(file) || StringUtils.hasLength(path)) {\n\t\t\treturn new LogFile(file, path);\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public static LogFile get(PropertyResolver propertyResolver) {\n\t\tString file = getLogFileProperty(propertyResolver, FILE_NAME_PROPERTY,\n\t\t\t\tFILE_PROPERTY);\n\t\tString path = getLogFileProperty(propertyResolver, FILE_PATH_PROPERTY,\n\t\t\t\tPATH_PROPERTY);\n\t\tif (StringUtils.hasLength(file) || StringUtils.hasLength(path)) {\n\t\t\treturn new LogFile(file, path);\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "static", "LogFile", "get", "(", "PropertyResolver", "propertyResolver", ")", "{", "String", "file", "=", "getLogFileProperty", "(", "propertyResolver", ",", "FILE_NAME_PROPERTY", ",", "FILE_PROPERTY", ")", ";", "String", "path", "=", "getLogFileProperty", "(", "propertyResolver", ",", "FILE_PATH_PROPERTY", ",", "PATH_PROPERTY", ")", ";", "if", "(", "StringUtils", ".", "hasLength", "(", "file", ")", "||", "StringUtils", ".", "hasLength", "(", "path", ")", ")", "{", "return", "new", "LogFile", "(", "file", ",", "path", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Get a {@link LogFile} from the given Spring {@link Environment}.\n@param propertyResolver the {@link PropertyResolver} used to obtain the logging\nproperties\n@return a {@link LogFile} or {@code null} if the environment didn't contain any\nsuitable properties", "docstring_tokens": ["Get", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LogFile.java#L131-L140", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java", "func_name": "DynamicRegistrationBean.setInitParameters", "original_string": "public void setInitParameters(Map<String, String> initParameters) {\n\t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n\t\tthis.initParameters = new LinkedHashMap<>(initParameters);\n\t}", "language": "java", "code": "public void setInitParameters(Map<String, String> initParameters) {\n\t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n\t\tthis.initParameters = new LinkedHashMap<>(initParameters);\n\t}", "code_tokens": ["public", "void", "setInitParameters", "(", "Map", "<", "String", ",", "String", ">", "initParameters", ")", "{", "Assert", ".", "notNull", "(", "initParameters", ",", "\"InitParameters must not be null\"", ")", ";", "this", ".", "initParameters", "=", "new", "LinkedHashMap", "<>", "(", "initParameters", ")", ";", "}"], "docstring": "Set init-parameters for this registration. Calling this method will replace any\nexisting init-parameters.\n@param initParameters the init parameters\n@see #getInitParameters\n@see #addInitParameter", "docstring_tokens": ["Set", "init", "-", "parameters", "for", "this", "registration", ".", "Calling", "this", "method", "will", "replace", "any", "existing", "init", "-", "parameters", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java#L84-L87", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java", "func_name": "DynamicRegistrationBean.addInitParameter", "original_string": "public void addInitParameter(String name, String value) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tthis.initParameters.put(name, value);\n\t}", "language": "java", "code": "public void addInitParameter(String name, String value) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tthis.initParameters.put(name, value);\n\t}", "code_tokens": ["public", "void", "addInitParameter", "(", "String", "name", ",", "String", "value", ")", "{", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "this", ".", "initParameters", ".", "put", "(", "name", ",", "value", ")", ";", "}"], "docstring": "Add a single init-parameter, replacing any existing parameter with the same name.\n@param name the init-parameter name\n@param value the init-parameter value", "docstring_tokens": ["Add", "a", "single", "init", "-", "parameter", "replacing", "any", "existing", "parameter", "with", "the", "same", "name", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java#L102-L105", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java", "func_name": "DynamicRegistrationBean.getOrDeduceName", "original_string": "protected final String getOrDeduceName(Object value) {\n\t\treturn (this.name != null) ? this.name : Conventions.getVariableName(value);\n\t}", "language": "java", "code": "protected final String getOrDeduceName(Object value) {\n\t\treturn (this.name != null) ? this.name : Conventions.getVariableName(value);\n\t}", "code_tokens": ["protected", "final", "String", "getOrDeduceName", "(", "Object", "value", ")", "{", "return", "(", "this", ".", "name", "!=", "null", ")", "?", "this", ".", "name", ":", "Conventions", ".", "getVariableName", "(", "value", ")", ";", "}"], "docstring": "Deduces the name for this registration. Will return user specified name or fallback\nto convention based naming.\n@param value the object used for convention based names\n@return the deduced name", "docstring_tokens": ["Deduces", "the", "name", "for", "this", "registration", ".", "Will", "return", "user", "specified", "name", "or", "fallback", "to", "convention", "based", "naming", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java#L134-L136", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataGenerationEnvironment.java", "func_name": "MetadataGenerationEnvironment.getFieldDefaultValue", "original_string": "public Object getFieldDefaultValue(TypeElement type, String name) {\n\t\treturn this.defaultValues.computeIfAbsent(type, this::resolveFieldValues)\n\t\t\t\t.get(name);\n\t}", "language": "java", "code": "public Object getFieldDefaultValue(TypeElement type, String name) {\n\t\treturn this.defaultValues.computeIfAbsent(type, this::resolveFieldValues)\n\t\t\t\t.get(name);\n\t}", "code_tokens": ["public", "Object", "getFieldDefaultValue", "(", "TypeElement", "type", ",", "String", "name", ")", "{", "return", "this", ".", "defaultValues", ".", "computeIfAbsent", "(", "type", ",", "this", "::", "resolveFieldValues", ")", ".", "get", "(", "name", ")", ";", "}"], "docstring": "Return the default value of the field with the specified {@code name}.\n@param type the type to consider\n@param name the name of the field\n@return the default value or {@code null} if the field does not exist or no default\nvalue has been detected", "docstring_tokens": ["Return", "the", "default", "value", "of", "the", "field", "with", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/MetadataGenerationEnvironment.java#L136-L139", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java", "func_name": "AtomikosProperties.asProperties", "original_string": "public Properties asProperties() {\n\t\tProperties properties = new Properties();\n\t\tset(properties, \"service\", getService());\n\t\tset(properties, \"max_timeout\", getMaxTimeout());\n\t\tset(properties, \"default_jta_timeout\", getDefaultJtaTimeout());\n\t\tset(properties, \"max_actives\", getMaxActives());\n\t\tset(properties, \"enable_logging\", isEnableLogging());\n\t\tset(properties, \"tm_unique_name\", getTransactionManagerUniqueName());\n\t\tset(properties, \"serial_jta_transactions\", isSerialJtaTransactions());\n\t\tset(properties, \"allow_subtransactions\", isAllowSubTransactions());\n\t\tset(properties, \"force_shutdown_on_vm_exit\", isForceShutdownOnVmExit());\n\t\tset(properties, \"default_max_wait_time_on_shutdown\",\n\t\t\t\tgetDefaultMaxWaitTimeOnShutdown());\n\t\tset(properties, \"log_base_name\", getLogBaseName());\n\t\tset(properties, \"log_base_dir\", getLogBaseDir());\n\t\tset(properties, \"checkpoint_interval\", getCheckpointInterval());\n\t\tset(properties, \"threaded_2pc\", isThreadedTwoPhaseCommit());\n\t\tRecovery recovery = getRecovery();\n\t\tset(properties, \"forget_orphaned_log_entries_delay\",\n\t\t\t\trecovery.getForgetOrphanedLogEntriesDelay());\n\t\tset(properties, \"recovery_delay\", recovery.getDelay());\n\t\tset(properties, \"oltp_max_retries\", recovery.getMaxRetries());\n\t\tset(properties, \"oltp_retry_interval\", recovery.getRetryInterval());\n\t\treturn properties;\n\t}", "language": "java", "code": "public Properties asProperties() {\n\t\tProperties properties = new Properties();\n\t\tset(properties, \"service\", getService());\n\t\tset(properties, \"max_timeout\", getMaxTimeout());\n\t\tset(properties, \"default_jta_timeout\", getDefaultJtaTimeout());\n\t\tset(properties, \"max_actives\", getMaxActives());\n\t\tset(properties, \"enable_logging\", isEnableLogging());\n\t\tset(properties, \"tm_unique_name\", getTransactionManagerUniqueName());\n\t\tset(properties, \"serial_jta_transactions\", isSerialJtaTransactions());\n\t\tset(properties, \"allow_subtransactions\", isAllowSubTransactions());\n\t\tset(properties, \"force_shutdown_on_vm_exit\", isForceShutdownOnVmExit());\n\t\tset(properties, \"default_max_wait_time_on_shutdown\",\n\t\t\t\tgetDefaultMaxWaitTimeOnShutdown());\n\t\tset(properties, \"log_base_name\", getLogBaseName());\n\t\tset(properties, \"log_base_dir\", getLogBaseDir());\n\t\tset(properties, \"checkpoint_interval\", getCheckpointInterval());\n\t\tset(properties, \"threaded_2pc\", isThreadedTwoPhaseCommit());\n\t\tRecovery recovery = getRecovery();\n\t\tset(properties, \"forget_orphaned_log_entries_delay\",\n\t\t\t\trecovery.getForgetOrphanedLogEntriesDelay());\n\t\tset(properties, \"recovery_delay\", recovery.getDelay());\n\t\tset(properties, \"oltp_max_retries\", recovery.getMaxRetries());\n\t\tset(properties, \"oltp_retry_interval\", recovery.getRetryInterval());\n\t\treturn properties;\n\t}", "code_tokens": ["public", "Properties", "asProperties", "(", ")", "{", "Properties", "properties", "=", "new", "Properties", "(", ")", ";", "set", "(", "properties", ",", "\"service\"", ",", "getService", "(", ")", ")", ";", "set", "(", "properties", ",", "\"max_timeout\"", ",", "getMaxTimeout", "(", ")", ")", ";", "set", "(", "properties", ",", "\"default_jta_timeout\"", ",", "getDefaultJtaTimeout", "(", ")", ")", ";", "set", "(", "properties", ",", "\"max_actives\"", ",", "getMaxActives", "(", ")", ")", ";", "set", "(", "properties", ",", "\"enable_logging\"", ",", "isEnableLogging", "(", ")", ")", ";", "set", "(", "properties", ",", "\"tm_unique_name\"", ",", "getTransactionManagerUniqueName", "(", ")", ")", ";", "set", "(", "properties", ",", "\"serial_jta_transactions\"", ",", "isSerialJtaTransactions", "(", ")", ")", ";", "set", "(", "properties", ",", "\"allow_subtransactions\"", ",", "isAllowSubTransactions", "(", ")", ")", ";", "set", "(", "properties", ",", "\"force_shutdown_on_vm_exit\"", ",", "isForceShutdownOnVmExit", "(", ")", ")", ";", "set", "(", "properties", ",", "\"default_max_wait_time_on_shutdown\"", ",", "getDefaultMaxWaitTimeOnShutdown", "(", ")", ")", ";", "set", "(", "properties", ",", "\"log_base_name\"", ",", "getLogBaseName", "(", ")", ")", ";", "set", "(", "properties", ",", "\"log_base_dir\"", ",", "getLogBaseDir", "(", ")", ")", ";", "set", "(", "properties", ",", "\"checkpoint_interval\"", ",", "getCheckpointInterval", "(", ")", ")", ";", "set", "(", "properties", ",", "\"threaded_2pc\"", ",", "isThreadedTwoPhaseCommit", "(", ")", ")", ";", "Recovery", "recovery", "=", "getRecovery", "(", ")", ";", "set", "(", "properties", ",", "\"forget_orphaned_log_entries_delay\"", ",", "recovery", ".", "getForgetOrphanedLogEntriesDelay", "(", ")", ")", ";", "set", "(", "properties", ",", "\"recovery_delay\"", ",", "recovery", ".", "getDelay", "(", ")", ")", ";", "set", "(", "properties", ",", "\"oltp_max_retries\"", ",", "recovery", ".", "getMaxRetries", "(", ")", ")", ";", "set", "(", "properties", ",", "\"oltp_retry_interval\"", ",", "recovery", ".", "getRetryInterval", "(", ")", ")", ";", "return", "properties", ";", "}"], "docstring": "Returns the properties as a {@link Properties} object that can be used with\nAtomikos.\n@return the properties", "docstring_tokens": ["Returns", "the", "properties", "as", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java#L327-L351", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties.java", "func_name": "HibernateProperties.determineHibernateProperties", "original_string": "public Map<String, Object> determineHibernateProperties(\n\t\t\tMap<String, String> jpaProperties, HibernateSettings settings) {\n\t\tAssert.notNull(jpaProperties, \"JpaProperties must not be null\");\n\t\tAssert.notNull(settings, \"Settings must not be null\");\n\t\treturn getAdditionalProperties(jpaProperties, settings);\n\t}", "language": "java", "code": "public Map<String, Object> determineHibernateProperties(\n\t\t\tMap<String, String> jpaProperties, HibernateSettings settings) {\n\t\tAssert.notNull(jpaProperties, \"JpaProperties must not be null\");\n\t\tAssert.notNull(settings, \"Settings must not be null\");\n\t\treturn getAdditionalProperties(jpaProperties, settings);\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "Object", ">", "determineHibernateProperties", "(", "Map", "<", "String", ",", "String", ">", "jpaProperties", ",", "HibernateSettings", "settings", ")", "{", "Assert", ".", "notNull", "(", "jpaProperties", ",", "\"JpaProperties must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "settings", ",", "\"Settings must not be null\"", ")", ";", "return", "getAdditionalProperties", "(", "jpaProperties", ",", "settings", ")", ";", "}"], "docstring": "Determine the configuration properties for the initialization of the main Hibernate\nEntityManagerFactory based on standard JPA properties and\n{@link HibernateSettings}.\n@param jpaProperties standard JPA properties\n@param settings the settings to apply when determining the configuration properties\n@return the Hibernate properties to use", "docstring_tokens": ["Determine", "the", "configuration", "properties", "for", "the", "initialization", "of", "the", "main", "Hibernate", "EntityManagerFactory", "based", "on", "standard", "JPA", "properties", "and", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateProperties.java#L90-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java", "func_name": "CacheMetricsRegistrarConfiguration.getCacheManagerName", "original_string": "private String getCacheManagerName(String beanName) {\n\t\tif (beanName.length() > CACHE_MANAGER_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - CACHE_MANAGER_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "language": "java", "code": "private String getCacheManagerName(String beanName) {\n\t\tif (beanName.length() > CACHE_MANAGER_SUFFIX.length()\n\t\t\t\t&& StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {\n\t\t\treturn beanName.substring(0,\n\t\t\t\t\tbeanName.length() - CACHE_MANAGER_SUFFIX.length());\n\t\t}\n\t\treturn beanName;\n\t}", "code_tokens": ["private", "String", "getCacheManagerName", "(", "String", "beanName", ")", "{", "if", "(", "beanName", ".", "length", "(", ")", ">", "CACHE_MANAGER_SUFFIX", ".", "length", "(", ")", "&&", "StringUtils", ".", "endsWithIgnoreCase", "(", "beanName", ",", "CACHE_MANAGER_SUFFIX", ")", ")", "{", "return", "beanName", ".", "substring", "(", "0", ",", "beanName", ".", "length", "(", ")", "-", "CACHE_MANAGER_SUFFIX", ".", "length", "(", ")", ")", ";", "}", "return", "beanName", ";", "}"], "docstring": "Get the name of a {@link CacheManager} based on its {@code beanName}.\n@param beanName the name of the {@link CacheManager} bean\n@return a name for the given cache manager", "docstring_tokens": ["Get", "the", "name", "of", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/cache/CacheMetricsRegistrarConfiguration.java#L88-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/FileUtils.java", "func_name": "FileUtils.removeDuplicatesFromOutputDirectory", "original_string": "public static void removeDuplicatesFromOutputDirectory(File outputDirectory,\n\t\t\tFile originDirectory) {\n\t\tif (originDirectory.isDirectory()) {\n\t\t\tfor (String name : originDirectory.list()) {\n\t\t\t\tFile targetFile = new File(outputDirectory, name);\n\t\t\t\tif (targetFile.exists() && targetFile.canWrite()) {\n\t\t\t\t\tif (!targetFile.isDirectory()) {\n\t\t\t\t\t\ttargetFile.delete();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tFileUtils.removeDuplicatesFromOutputDirectory(targetFile,\n\t\t\t\t\t\t\t\tnew File(originDirectory, name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "public static void removeDuplicatesFromOutputDirectory(File outputDirectory,\n\t\t\tFile originDirectory) {\n\t\tif (originDirectory.isDirectory()) {\n\t\t\tfor (String name : originDirectory.list()) {\n\t\t\t\tFile targetFile = new File(outputDirectory, name);\n\t\t\t\tif (targetFile.exists() && targetFile.canWrite()) {\n\t\t\t\t\tif (!targetFile.isDirectory()) {\n\t\t\t\t\t\ttargetFile.delete();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tFileUtils.removeDuplicatesFromOutputDirectory(targetFile,\n\t\t\t\t\t\t\t\tnew File(originDirectory, name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "removeDuplicatesFromOutputDirectory", "(", "File", "outputDirectory", ",", "File", "originDirectory", ")", "{", "if", "(", "originDirectory", ".", "isDirectory", "(", ")", ")", "{", "for", "(", "String", "name", ":", "originDirectory", ".", "list", "(", ")", ")", "{", "File", "targetFile", "=", "new", "File", "(", "outputDirectory", ",", "name", ")", ";", "if", "(", "targetFile", ".", "exists", "(", ")", "&&", "targetFile", ".", "canWrite", "(", ")", ")", "{", "if", "(", "!", "targetFile", ".", "isDirectory", "(", ")", ")", "{", "targetFile", ".", "delete", "(", ")", ";", "}", "else", "{", "FileUtils", ".", "removeDuplicatesFromOutputDirectory", "(", "targetFile", ",", "new", "File", "(", "originDirectory", ",", "name", ")", ")", ";", "}", "}", "}", "}", "}"], "docstring": "Utility to remove duplicate files from an \"output\" directory if they already exist\nin an \"origin\". Recursively scans the origin directory looking for files (not\ndirectories) that exist in both places and deleting the copy.\n@param outputDirectory the output directory\n@param originDirectory the origin directory", "docstring_tokens": ["Utility", "to", "remove", "duplicate", "files", "from", "an", "output", "directory", "if", "they", "already", "exist", "in", "an", "origin", ".", "Recursively", "scans", "the", "origin", "directory", "looking", "for", "files", "(", "not", "directories", ")", "that", "exist", "in", "both", "places", "and", "deleting", "the", "copy", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/FileUtils.java#L41-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java", "func_name": "Binder.bind", "original_string": "public <T> BindResult<T> bind(String name, Class<T> target) {\n\t\treturn bind(name, Bindable.of(target));\n\t}", "language": "java", "code": "public <T> BindResult<T> bind(String name, Class<T> target) {\n\t\treturn bind(name, Bindable.of(target));\n\t}", "code_tokens": ["public", "<", "T", ">", "BindResult", "<", "T", ">", "bind", "(", "String", "name", ",", "Class", "<", "T", ">", "target", ")", "{", "return", "bind", "(", "name", ",", "Bindable", ".", "of", "(", "target", ")", ")", ";", "}"], "docstring": "Bind the specified target {@link Class} using this binder's\n{@link ConfigurationPropertySource property sources}.\n@param name the configuration property name to bind\n@param target the target class\n@param <T> the bound type\n@return the binding result (never {@code null})\n@see #bind(ConfigurationPropertyName, Bindable, BindHandler)", "docstring_tokens": ["Bind", "the", "specified", "target", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L151-L153", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java", "func_name": "Binder.bind", "original_string": "public <T> BindResult<T> bind(String name, Bindable<T> target) {\n\t\treturn bind(ConfigurationPropertyName.of(name), target, null);\n\t}", "language": "java", "code": "public <T> BindResult<T> bind(String name, Bindable<T> target) {\n\t\treturn bind(ConfigurationPropertyName.of(name), target, null);\n\t}", "code_tokens": ["public", "<", "T", ">", "BindResult", "<", "T", ">", "bind", "(", "String", "name", ",", "Bindable", "<", "T", ">", "target", ")", "{", "return", "bind", "(", "ConfigurationPropertyName", ".", "of", "(", "name", ")", ",", "target", ",", "null", ")", ";", "}"], "docstring": "Bind the specified target {@link Bindable} using this binder's\n{@link ConfigurationPropertySource property sources}.\n@param name the configuration property name to bind\n@param target the target bindable\n@param <T> the bound type\n@return the binding result (never {@code null})\n@see #bind(ConfigurationPropertyName, Bindable, BindHandler)", "docstring_tokens": ["Bind", "the", "specified", "target", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L164-L166", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java", "func_name": "Binder.bind", "original_string": "public <T> BindResult<T> bind(String name, Bindable<T> target, BindHandler handler) {\n\t\treturn bind(ConfigurationPropertyName.of(name), target, handler);\n\t}", "language": "java", "code": "public <T> BindResult<T> bind(String name, Bindable<T> target, BindHandler handler) {\n\t\treturn bind(ConfigurationPropertyName.of(name), target, handler);\n\t}", "code_tokens": ["public", "<", "T", ">", "BindResult", "<", "T", ">", "bind", "(", "String", "name", ",", "Bindable", "<", "T", ">", "target", ",", "BindHandler", "handler", ")", "{", "return", "bind", "(", "ConfigurationPropertyName", ".", "of", "(", "name", ")", ",", "target", ",", "handler", ")", ";", "}"], "docstring": "Bind the specified target {@link Bindable} using this binder's\n{@link ConfigurationPropertySource property sources}.\n@param name the configuration property name to bind\n@param target the target bindable\n@param handler the bind handler (may be {@code null})\n@param <T> the bound type\n@return the binding result (never {@code null})", "docstring_tokens": ["Bind", "the", "specified", "target", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L190-L192", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java", "func_name": "Binder.bind", "original_string": "public <T> BindResult<T> bind(ConfigurationPropertyName name, Bindable<T> target,\n\t\t\tBindHandler handler) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(target, \"Target must not be null\");\n\t\thandler = (handler != null) ? handler : BindHandler.DEFAULT;\n\t\tContext context = new Context();\n\t\tT bound = bind(name, target, handler, context, false);\n\t\treturn BindResult.of(bound);\n\t}", "language": "java", "code": "public <T> BindResult<T> bind(ConfigurationPropertyName name, Bindable<T> target,\n\t\t\tBindHandler handler) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(target, \"Target must not be null\");\n\t\thandler = (handler != null) ? handler : BindHandler.DEFAULT;\n\t\tContext context = new Context();\n\t\tT bound = bind(name, target, handler, context, false);\n\t\treturn BindResult.of(bound);\n\t}", "code_tokens": ["public", "<", "T", ">", "BindResult", "<", "T", ">", "bind", "(", "ConfigurationPropertyName", "name", ",", "Bindable", "<", "T", ">", "target", ",", "BindHandler", "handler", ")", "{", "Assert", ".", "notNull", "(", "name", ",", "\"Name must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "target", ",", "\"Target must not be null\"", ")", ";", "handler", "=", "(", "handler", "!=", "null", ")", "?", "handler", ":", "BindHandler", ".", "DEFAULT", ";", "Context", "context", "=", "new", "Context", "(", ")", ";", "T", "bound", "=", "bind", "(", "name", ",", "target", ",", "handler", ",", "context", ",", "false", ")", ";", "return", "BindResult", ".", "of", "(", "bound", ")", ";", "}"], "docstring": "Bind the specified target {@link Bindable} using this binder's\n{@link ConfigurationPropertySource property sources}.\n@param name the configuration property name to bind\n@param target the target bindable\n@param handler the bind handler (may be {@code null})\n@param <T> the bound type\n@return the binding result (never {@code null})", "docstring_tokens": ["Bind", "the", "specified", "target", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L203-L211", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java", "func_name": "Binder.get", "original_string": "public static Binder get(Environment environment) {\n\t\treturn new Binder(ConfigurationPropertySources.get(environment),\n\t\t\t\tnew PropertySourcesPlaceholdersResolver(environment));\n\t}", "language": "java", "code": "public static Binder get(Environment environment) {\n\t\treturn new Binder(ConfigurationPropertySources.get(environment),\n\t\t\t\tnew PropertySourcesPlaceholdersResolver(environment));\n\t}", "code_tokens": ["public", "static", "Binder", "get", "(", "Environment", "environment", ")", "{", "return", "new", "Binder", "(", "ConfigurationPropertySources", ".", "get", "(", "environment", ")", ",", "new", "PropertySourcesPlaceholdersResolver", "(", "environment", ")", ")", ";", "}"], "docstring": "Create a new {@link Binder} instance from the specified environment.\n@param environment the environment source (must have attached\n{@link ConfigurationPropertySources})\n@return a {@link Binder} instance", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L381-L384", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqProperties.java", "func_name": "JooqProperties.determineSqlDialect", "original_string": "public SQLDialect determineSqlDialect(DataSource dataSource) {\n\t\tif (this.sqlDialect != null) {\n\t\t\treturn this.sqlDialect;\n\t\t}\n\t\treturn SqlDialectLookup.getDialect(dataSource);\n\t}", "language": "java", "code": "public SQLDialect determineSqlDialect(DataSource dataSource) {\n\t\tif (this.sqlDialect != null) {\n\t\t\treturn this.sqlDialect;\n\t\t}\n\t\treturn SqlDialectLookup.getDialect(dataSource);\n\t}", "code_tokens": ["public", "SQLDialect", "determineSqlDialect", "(", "DataSource", "dataSource", ")", "{", "if", "(", "this", ".", "sqlDialect", "!=", "null", ")", "{", "return", "this", ".", "sqlDialect", ";", "}", "return", "SqlDialectLookup", ".", "getDialect", "(", "dataSource", ")", ";", "}"], "docstring": "Determine the {@link SQLDialect} to use based on this configuration and the primary\n{@link DataSource}.\n@param dataSource the data source\n@return the {@code SQLDialect} to use for that {@link DataSource}", "docstring_tokens": ["Determine", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqProperties.java#L54-L59", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.getAnnotation", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic <A extends Annotation> A getAnnotation(Class<A> type) {\n\t\tfor (Annotation annotation : this.annotations) {\n\t\t\tif (type.isInstance(annotation)) {\n\t\t\t\treturn (A) annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic <A extends Annotation> A getAnnotation(Class<A> type) {\n\t\tfor (Annotation annotation : this.annotations) {\n\t\t\tif (type.isInstance(annotation)) {\n\t\t\t\treturn (A) annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "<", "A", "extends", "Annotation", ">", "A", "getAnnotation", "(", "Class", "<", "A", ">", "type", ")", "{", "for", "(", "Annotation", "annotation", ":", "this", ".", "annotations", ")", "{", "if", "(", "type", ".", "isInstance", "(", "annotation", ")", ")", "{", "return", "(", "A", ")", "annotation", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Return a single associated annotations that could affect binding.\n@param <A> the annotation type\n@param type annotation type\n@return the associated annotation or {@code null}", "docstring_tokens": ["Return", "a", "single", "associated", "annotations", "that", "could", "affect", "binding", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L99-L107", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.withAnnotations", "original_string": "public Bindable<T> withAnnotations(Annotation... annotations) {\n\t\treturn new Bindable<>(this.type, this.boxedType, this.value,\n\t\t\t\t(annotations != null) ? annotations : NO_ANNOTATIONS);\n\t}", "language": "java", "code": "public Bindable<T> withAnnotations(Annotation... annotations) {\n\t\treturn new Bindable<>(this.type, this.boxedType, this.value,\n\t\t\t\t(annotations != null) ? annotations : NO_ANNOTATIONS);\n\t}", "code_tokens": ["public", "Bindable", "<", "T", ">", "withAnnotations", "(", "Annotation", "...", "annotations", ")", "{", "return", "new", "Bindable", "<>", "(", "this", ".", "type", ",", "this", ".", "boxedType", ",", "this", ".", "value", ",", "(", "annotations", "!=", "null", ")", "?", "annotations", ":", "NO_ANNOTATIONS", ")", ";", "}"], "docstring": "Create an updated {@link Bindable} instance with the specified annotations.\n@param annotations the annotations\n@return an updated {@link Bindable}", "docstring_tokens": ["Create", "an", "updated", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L151-L154", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.withExistingValue", "original_string": "public Bindable<T> withExistingValue(T existingValue) {\n\t\tAssert.isTrue(\n\t\t\t\texistingValue == null || this.type.isArray()\n\t\t\t\t\t\t|| this.boxedType.resolve().isInstance(existingValue),\n\t\t\t\t() -> \"ExistingValue must be an instance of \" + this.type);\n\t\tSupplier<T> value = (existingValue != null) ? () -> existingValue : null;\n\t\treturn new Bindable<>(this.type, this.boxedType, value, NO_ANNOTATIONS);\n\t}", "language": "java", "code": "public Bindable<T> withExistingValue(T existingValue) {\n\t\tAssert.isTrue(\n\t\t\t\texistingValue == null || this.type.isArray()\n\t\t\t\t\t\t|| this.boxedType.resolve().isInstance(existingValue),\n\t\t\t\t() -> \"ExistingValue must be an instance of \" + this.type);\n\t\tSupplier<T> value = (existingValue != null) ? () -> existingValue : null;\n\t\treturn new Bindable<>(this.type, this.boxedType, value, NO_ANNOTATIONS);\n\t}", "code_tokens": ["public", "Bindable", "<", "T", ">", "withExistingValue", "(", "T", "existingValue", ")", "{", "Assert", ".", "isTrue", "(", "existingValue", "==", "null", "||", "this", ".", "type", ".", "isArray", "(", ")", "||", "this", ".", "boxedType", ".", "resolve", "(", ")", ".", "isInstance", "(", "existingValue", ")", ",", "(", ")", "->", "\"ExistingValue must be an instance of \"", "+", "this", ".", "type", ")", ";", "Supplier", "<", "T", ">", "value", "=", "(", "existingValue", "!=", "null", ")", "?", "(", ")", "->", "existingValue", ":", "null", ";", "return", "new", "Bindable", "<>", "(", "this", ".", "type", ",", "this", ".", "boxedType", ",", "value", ",", "NO_ANNOTATIONS", ")", ";", "}"], "docstring": "Create an updated {@link Bindable} instance with an existing value.\n@param existingValue the existing value\n@return an updated {@link Bindable}", "docstring_tokens": ["Create", "an", "updated", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L161-L168", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.withSuppliedValue", "original_string": "public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {\n\t\treturn new Bindable<>(this.type, this.boxedType, suppliedValue, NO_ANNOTATIONS);\n\t}", "language": "java", "code": "public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {\n\t\treturn new Bindable<>(this.type, this.boxedType, suppliedValue, NO_ANNOTATIONS);\n\t}", "code_tokens": ["public", "Bindable", "<", "T", ">", "withSuppliedValue", "(", "Supplier", "<", "T", ">", "suppliedValue", ")", "{", "return", "new", "Bindable", "<>", "(", "this", ".", "type", ",", "this", ".", "boxedType", ",", "suppliedValue", ",", "NO_ANNOTATIONS", ")", ";", "}"], "docstring": "Create an updated {@link Bindable} instance with a value supplier.\n@param suppliedValue the supplier for the value\n@return an updated {@link Bindable}", "docstring_tokens": ["Create", "an", "updated", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L175-L177", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.ofInstance", "original_string": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> Bindable<T> ofInstance(T instance) {\n\t\tAssert.notNull(instance, \"Instance must not be null\");\n\t\tClass<T> type = (Class<T>) instance.getClass();\n\t\treturn of(type).withExistingValue(instance);\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> Bindable<T> ofInstance(T instance) {\n\t\tAssert.notNull(instance, \"Instance must not be null\");\n\t\tClass<T> type = (Class<T>) instance.getClass();\n\t\treturn of(type).withExistingValue(instance);\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "T", ">", "Bindable", "<", "T", ">", "ofInstance", "(", "T", "instance", ")", "{", "Assert", ".", "notNull", "(", "instance", ",", "\"Instance must not be null\"", ")", ";", "Class", "<", "T", ">", "type", "=", "(", "Class", "<", "T", ">", ")", "instance", ".", "getClass", "(", ")", ";", "return", "of", "(", "type", ")", ".", "withExistingValue", "(", "instance", ")", ";", "}"], "docstring": "Create a new {@link Bindable} of the type of the specified instance with an\nexisting value equal to the instance.\n@param <T> the source type\n@param instance the instance (must not be {@code null})\n@return a {@link Bindable} instance\n@see #of(ResolvableType)\n@see #withExistingValue(Object)", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L188-L193", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.of", "original_string": "public static <T> Bindable<T> of(Class<T> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn of(ResolvableType.forClass(type));\n\t}", "language": "java", "code": "public static <T> Bindable<T> of(Class<T> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn of(ResolvableType.forClass(type));\n\t}", "code_tokens": ["public", "static", "<", "T", ">", "Bindable", "<", "T", ">", "of", "(", "Class", "<", "T", ">", "type", ")", "{", "Assert", ".", "notNull", "(", "type", ",", "\"Type must not be null\"", ")", ";", "return", "of", "(", "ResolvableType", ".", "forClass", "(", "type", ")", ")", ";", "}"], "docstring": "Create a new {@link Bindable} of the specified type.\n@param <T> the source type\n@param type the type (must not be {@code null})\n@return a {@link Bindable} instance\n@see #of(ResolvableType)", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L202-L205", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.listOf", "original_string": "public static <E> Bindable<List<E>> listOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(List.class, elementType));\n\t}", "language": "java", "code": "public static <E> Bindable<List<E>> listOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(List.class, elementType));\n\t}", "code_tokens": ["public", "static", "<", "E", ">", "Bindable", "<", "List", "<", "E", ">", ">", "listOf", "(", "Class", "<", "E", ">", "elementType", ")", "{", "return", "of", "(", "ResolvableType", ".", "forClassWithGenerics", "(", "List", ".", "class", ",", "elementType", ")", ")", ";", "}"], "docstring": "Create a new {@link Bindable} {@link List} of the specified element type.\n@param <E> the element type\n@param elementType the list element type\n@return a {@link Bindable} instance", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L213-L215", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.setOf", "original_string": "public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Set.class, elementType));\n\t}", "language": "java", "code": "public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Set.class, elementType));\n\t}", "code_tokens": ["public", "static", "<", "E", ">", "Bindable", "<", "Set", "<", "E", ">", ">", "setOf", "(", "Class", "<", "E", ">", "elementType", ")", "{", "return", "of", "(", "ResolvableType", ".", "forClassWithGenerics", "(", "Set", ".", "class", ",", "elementType", ")", ")", ";", "}"], "docstring": "Create a new {@link Bindable} {@link Set} of the specified element type.\n@param <E> the element type\n@param elementType the set element type\n@return a {@link Bindable} instance", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L223-L225", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.mapOf", "original_string": "public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType));\n\t}", "language": "java", "code": "public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {\n\t\treturn of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType));\n\t}", "code_tokens": ["public", "static", "<", "K", ",", "V", ">", "Bindable", "<", "Map", "<", "K", ",", "V", ">", ">", "mapOf", "(", "Class", "<", "K", ">", "keyType", ",", "Class", "<", "V", ">", "valueType", ")", "{", "return", "of", "(", "ResolvableType", ".", "forClassWithGenerics", "(", "Map", ".", "class", ",", "keyType", ",", "valueType", ")", ")", ";", "}"], "docstring": "Create a new {@link Bindable} {@link Map} of the specified key and value type.\n@param <K> the key type\n@param <V> the value type\n@param keyType the map key type\n@param valueType the map value type\n@return a {@link Bindable} instance", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L235-L237", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java", "func_name": "Bindable.of", "original_string": "public static <T> Bindable<T> of(ResolvableType type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tResolvableType boxedType = box(type);\n\t\treturn new Bindable<>(type, boxedType, null, NO_ANNOTATIONS);\n\t}", "language": "java", "code": "public static <T> Bindable<T> of(ResolvableType type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\tResolvableType boxedType = box(type);\n\t\treturn new Bindable<>(type, boxedType, null, NO_ANNOTATIONS);\n\t}", "code_tokens": ["public", "static", "<", "T", ">", "Bindable", "<", "T", ">", "of", "(", "ResolvableType", "type", ")", "{", "Assert", ".", "notNull", "(", "type", ",", "\"Type must not be null\"", ")", ";", "ResolvableType", "boxedType", "=", "box", "(", "type", ")", ";", "return", "new", "Bindable", "<>", "(", "type", ",", "boxedType", ",", "null", ",", "NO_ANNOTATIONS", ")", ";", "}"], "docstring": "Create a new {@link Bindable} of the specified type.\n@param <T> the source type\n@param type the type (must not be {@code null})\n@return a {@link Bindable} instance\n@see #of(Class)", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Bindable.java#L246-L250", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/PropertySourceOrigin.java", "func_name": "PropertySourceOrigin.get", "original_string": "public static Origin get(PropertySource<?> propertySource, String name) {\n\t\tOrigin origin = OriginLookup.getOrigin(propertySource, name);\n\t\treturn (origin != null) ? origin : new PropertySourceOrigin(propertySource, name);\n\t}", "language": "java", "code": "public static Origin get(PropertySource<?> propertySource, String name) {\n\t\tOrigin origin = OriginLookup.getOrigin(propertySource, name);\n\t\treturn (origin != null) ? origin : new PropertySourceOrigin(propertySource, name);\n\t}", "code_tokens": ["public", "static", "Origin", "get", "(", "PropertySource", "<", "?", ">", "propertySource", ",", "String", "name", ")", "{", "Origin", "origin", "=", "OriginLookup", ".", "getOrigin", "(", "propertySource", ",", "name", ")", ";", "return", "(", "origin", "!=", "null", ")", "?", "origin", ":", "new", "PropertySourceOrigin", "(", "propertySource", ",", "name", ")", ";", "}"], "docstring": "Get an {@link Origin} for the given {@link PropertySource} and\n{@code propertyName}. Will either return an {@link OriginLookup} result or a\n{@link PropertySourceOrigin}.\n@param propertySource the origin property source\n@param name the property name\n@return the property origin", "docstring_tokens": ["Get", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/origin/PropertySourceOrigin.java#L77-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java", "func_name": "ValidatorAdapter.get", "original_string": "public static Validator get(ApplicationContext applicationContext,\n\t\t\tValidator validator) {\n\t\tif (validator != null) {\n\t\t\treturn wrap(validator, false);\n\t\t}\n\t\treturn getExistingOrCreate(applicationContext);\n\t}", "language": "java", "code": "public static Validator get(ApplicationContext applicationContext,\n\t\t\tValidator validator) {\n\t\tif (validator != null) {\n\t\t\treturn wrap(validator, false);\n\t\t}\n\t\treturn getExistingOrCreate(applicationContext);\n\t}", "code_tokens": ["public", "static", "Validator", "get", "(", "ApplicationContext", "applicationContext", ",", "Validator", "validator", ")", "{", "if", "(", "validator", "!=", "null", ")", "{", "return", "wrap", "(", "validator", ",", "false", ")", ";", "}", "return", "getExistingOrCreate", "(", "applicationContext", ")", ";", "}"], "docstring": "Return a {@link Validator} that only implements the {@link Validator} interface,\nwrapping it if necessary.\n<p>\nIf the specified {@link Validator} is not {@code null}, it is wrapped. If not, a\n{@link javax.validation.Validator} is retrieved from the context and wrapped.\nOtherwise, a new default validator is created.\n@param applicationContext the application context\n@param validator an existing validator to use or {@code null}\n@return the validator to use", "docstring_tokens": ["Return", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java#L108-L114", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java", "func_name": "EntityScanPackages.get", "original_string": "public static EntityScanPackages get(BeanFactory beanFactory) {\n\t\t// Currently we only store a single base package, but we return a list to\n\t\t// allow this to change in the future if needed\n\t\ttry {\n\t\t\treturn beanFactory.getBean(BEAN, EntityScanPackages.class);\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn NONE;\n\t\t}\n\t}", "language": "java", "code": "public static EntityScanPackages get(BeanFactory beanFactory) {\n\t\t// Currently we only store a single base package, but we return a list to\n\t\t// allow this to change in the future if needed\n\t\ttry {\n\t\t\treturn beanFactory.getBean(BEAN, EntityScanPackages.class);\n\t\t}\n\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\treturn NONE;\n\t\t}\n\t}", "code_tokens": ["public", "static", "EntityScanPackages", "get", "(", "BeanFactory", "beanFactory", ")", "{", "// Currently we only store a single base package, but we return a list to", "// allow this to change in the future if needed", "try", "{", "return", "beanFactory", ".", "getBean", "(", "BEAN", ",", "EntityScanPackages", ".", "class", ")", ";", "}", "catch", "(", "NoSuchBeanDefinitionException", "ex", ")", "{", "return", "NONE", ";", "}", "}"], "docstring": "Return the {@link EntityScanPackages} for the given bean factory.\n@param beanFactory the source bean factory\n@return the {@link EntityScanPackages} for the bean factory (never {@code null})", "docstring_tokens": ["Return", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java#L81-L90", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java", "func_name": "EntityScanPackages.register", "original_string": "public static void register(BeanDefinitionRegistry registry, String... packageNames) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tAssert.notNull(packageNames, \"PackageNames must not be null\");\n\t\tregister(registry, Arrays.asList(packageNames));\n\t}", "language": "java", "code": "public static void register(BeanDefinitionRegistry registry, String... packageNames) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tAssert.notNull(packageNames, \"PackageNames must not be null\");\n\t\tregister(registry, Arrays.asList(packageNames));\n\t}", "code_tokens": ["public", "static", "void", "register", "(", "BeanDefinitionRegistry", "registry", ",", "String", "...", "packageNames", ")", "{", "Assert", ".", "notNull", "(", "registry", ",", "\"Registry must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "packageNames", ",", "\"PackageNames must not be null\"", ")", ";", "register", "(", "registry", ",", "Arrays", ".", "asList", "(", "packageNames", ")", ")", ";", "}"], "docstring": "Register the specified entity scan packages with the system.\n@param registry the source registry\n@param packageNames the package names to register", "docstring_tokens": ["Register", "the", "specified", "entity", "scan", "packages", "with", "the", "system", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java#L97-L101", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java", "func_name": "EntityScanPackages.register", "original_string": "public static void register(BeanDefinitionRegistry registry,\n\t\t\tCollection<String> packageNames) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tAssert.notNull(packageNames, \"PackageNames must not be null\");\n\t\tif (registry.containsBeanDefinition(BEAN)) {\n\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);\n\t\t\tConstructorArgumentValues constructorArguments = beanDefinition\n\t\t\t\t\t.getConstructorArgumentValues();\n\t\t\tconstructorArguments.addIndexedArgumentValue(0,\n\t\t\t\t\taddPackageNames(constructorArguments, packageNames));\n\t\t}\n\t\telse {\n\t\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\t\tbeanDefinition.setBeanClass(EntityScanPackages.class);\n\t\t\tbeanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,\n\t\t\t\t\tStringUtils.toStringArray(packageNames));\n\t\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tregistry.registerBeanDefinition(BEAN, beanDefinition);\n\t\t}\n\t}", "language": "java", "code": "public static void register(BeanDefinitionRegistry registry,\n\t\t\tCollection<String> packageNames) {\n\t\tAssert.notNull(registry, \"Registry must not be null\");\n\t\tAssert.notNull(packageNames, \"PackageNames must not be null\");\n\t\tif (registry.containsBeanDefinition(BEAN)) {\n\t\t\tBeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);\n\t\t\tConstructorArgumentValues constructorArguments = beanDefinition\n\t\t\t\t\t.getConstructorArgumentValues();\n\t\t\tconstructorArguments.addIndexedArgumentValue(0,\n\t\t\t\t\taddPackageNames(constructorArguments, packageNames));\n\t\t}\n\t\telse {\n\t\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\t\tbeanDefinition.setBeanClass(EntityScanPackages.class);\n\t\t\tbeanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,\n\t\t\t\t\tStringUtils.toStringArray(packageNames));\n\t\t\tbeanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t\tregistry.registerBeanDefinition(BEAN, beanDefinition);\n\t\t}\n\t}", "code_tokens": ["public", "static", "void", "register", "(", "BeanDefinitionRegistry", "registry", ",", "Collection", "<", "String", ">", "packageNames", ")", "{", "Assert", ".", "notNull", "(", "registry", ",", "\"Registry must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "packageNames", ",", "\"PackageNames must not be null\"", ")", ";", "if", "(", "registry", ".", "containsBeanDefinition", "(", "BEAN", ")", ")", "{", "BeanDefinition", "beanDefinition", "=", "registry", ".", "getBeanDefinition", "(", "BEAN", ")", ";", "ConstructorArgumentValues", "constructorArguments", "=", "beanDefinition", ".", "getConstructorArgumentValues", "(", ")", ";", "constructorArguments", ".", "addIndexedArgumentValue", "(", "0", ",", "addPackageNames", "(", "constructorArguments", ",", "packageNames", ")", ")", ";", "}", "else", "{", "GenericBeanDefinition", "beanDefinition", "=", "new", "GenericBeanDefinition", "(", ")", ";", "beanDefinition", ".", "setBeanClass", "(", "EntityScanPackages", ".", "class", ")", ";", "beanDefinition", ".", "getConstructorArgumentValues", "(", ")", ".", "addIndexedArgumentValue", "(", "0", ",", "StringUtils", ".", "toStringArray", "(", "packageNames", ")", ")", ";", "beanDefinition", ".", "setRole", "(", "BeanDefinition", ".", "ROLE_INFRASTRUCTURE", ")", ";", "registry", ".", "registerBeanDefinition", "(", "BEAN", ",", "beanDefinition", ")", ";", "}", "}"], "docstring": "Register the specified entity scan packages with the system.\n@param registry the source registry\n@param packageNames the package names to register", "docstring_tokens": ["Register", "the", "specified", "entity", "scan", "packages", "with", "the", "system", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java#L108-L127", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java", "func_name": "MongoClientFactory.createMongoClient", "original_string": "public MongoClient createMongoClient(MongoClientOptions options) {\n\t\tInteger embeddedPort = getEmbeddedPort();\n\t\tif (embeddedPort != null) {\n\t\t\treturn createEmbeddedMongoClient(options, embeddedPort);\n\t\t}\n\t\treturn createNetworkMongoClient(options);\n\t}", "language": "java", "code": "public MongoClient createMongoClient(MongoClientOptions options) {\n\t\tInteger embeddedPort = getEmbeddedPort();\n\t\tif (embeddedPort != null) {\n\t\t\treturn createEmbeddedMongoClient(options, embeddedPort);\n\t\t}\n\t\treturn createNetworkMongoClient(options);\n\t}", "code_tokens": ["public", "MongoClient", "createMongoClient", "(", "MongoClientOptions", "options", ")", "{", "Integer", "embeddedPort", "=", "getEmbeddedPort", "(", ")", ";", "if", "(", "embeddedPort", "!=", "null", ")", "{", "return", "createEmbeddedMongoClient", "(", "options", ",", "embeddedPort", ")", ";", "}", "return", "createNetworkMongoClient", "(", "options", ")", ";", "}"], "docstring": "Creates a {@link MongoClient} using the given {@code options}. If the environment\ncontains a {@code local.mongo.port} property, it is used to configure a client to\nan embedded MongoDB instance.\n@param options the options\n@return the Mongo client", "docstring_tokens": ["Creates", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java#L62-L68", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java", "func_name": "RepackageMojo.getSourceArtifact", "original_string": "private Artifact getSourceArtifact() {\n\t\tArtifact sourceArtifact = getArtifact(this.classifier);\n\t\treturn (sourceArtifact != null) ? sourceArtifact : this.project.getArtifact();\n\t}", "language": "java", "code": "private Artifact getSourceArtifact() {\n\t\tArtifact sourceArtifact = getArtifact(this.classifier);\n\t\treturn (sourceArtifact != null) ? sourceArtifact : this.project.getArtifact();\n\t}", "code_tokens": ["private", "Artifact", "getSourceArtifact", "(", ")", "{", "Artifact", "sourceArtifact", "=", "getArtifact", "(", "this", ".", "classifier", ")", ";", "return", "(", "sourceArtifact", "!=", "null", ")", "?", "sourceArtifact", ":", "this", ".", "project", ".", "getArtifact", "(", ")", ";", "}"], "docstring": "Return the source {@link Artifact} to repackage. If a classifier is specified and\nan artifact with that classifier exists, it is used. Otherwise, the main artifact\nis used.\n@return the source artifact to repackage", "docstring_tokens": ["Return", "the", "source", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java#L236-L239", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java", "func_name": "AbstractLoggingSystem.getSpringConfigLocations", "original_string": "protected String[] getSpringConfigLocations() {\n\t\tString[] locations = getStandardConfigLocations();\n\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\tString extension = StringUtils.getFilenameExtension(locations[i]);\n\t\t\tlocations[i] = locations[i].substring(0,\n\t\t\t\t\tlocations[i].length() - extension.length() - 1) + \"-spring.\"\n\t\t\t\t\t+ extension;\n\t\t}\n\t\treturn locations;\n\t}", "language": "java", "code": "protected String[] getSpringConfigLocations() {\n\t\tString[] locations = getStandardConfigLocations();\n\t\tfor (int i = 0; i < locations.length; i++) {\n\t\t\tString extension = StringUtils.getFilenameExtension(locations[i]);\n\t\t\tlocations[i] = locations[i].substring(0,\n\t\t\t\t\tlocations[i].length() - extension.length() - 1) + \"-spring.\"\n\t\t\t\t\t+ extension;\n\t\t}\n\t\treturn locations;\n\t}", "code_tokens": ["protected", "String", "[", "]", "getSpringConfigLocations", "(", ")", "{", "String", "[", "]", "locations", "=", "getStandardConfigLocations", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "locations", ".", "length", ";", "i", "++", ")", "{", "String", "extension", "=", "StringUtils", ".", "getFilenameExtension", "(", "locations", "[", "i", "]", ")", ";", "locations", "[", "i", "]", "=", "locations", "[", "i", "]", ".", "substring", "(", "0", ",", "locations", "[", "i", "]", ".", "length", "(", ")", "-", "extension", ".", "length", "(", ")", "-", "1", ")", "+", "\"-spring.\"", "+", "extension", ";", "}", "return", "locations", ";", "}"], "docstring": "Return the spring config locations for this system. By default this method returns\na set of locations based on {@link #getStandardConfigLocations()}.\n@return the spring config locations\n@see #getSpringInitializationConfig()", "docstring_tokens": ["Return", "the", "spring", "config", "locations", "for", "this", "system", ".", "By", "default", "this", "method", "returns", "a", "set", "of", "locations", "based", "on", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java#L131-L140", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java", "func_name": "Neo4jHealthIndicator.extractResult", "original_string": "protected void extractResult(Session session, Health.Builder builder)\n\t\t\tthrows Exception {\n\t\tResult result = session.query(CYPHER, Collections.emptyMap());\n\t\tbuilder.up().withDetail(\"nodes\",\n\t\t\t\tresult.queryResults().iterator().next().get(\"nodes\"));\n\t}", "language": "java", "code": "protected void extractResult(Session session, Health.Builder builder)\n\t\t\tthrows Exception {\n\t\tResult result = session.query(CYPHER, Collections.emptyMap());\n\t\tbuilder.up().withDetail(\"nodes\",\n\t\t\t\tresult.queryResults().iterator().next().get(\"nodes\"));\n\t}", "code_tokens": ["protected", "void", "extractResult", "(", "Session", "session", ",", "Health", ".", "Builder", "builder", ")", "throws", "Exception", "{", "Result", "result", "=", "session", ".", "query", "(", "CYPHER", ",", "Collections", ".", "emptyMap", "(", ")", ")", ";", "builder", ".", "up", "(", ")", ".", "withDetail", "(", "\"nodes\"", ",", "result", ".", "queryResults", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ".", "get", "(", "\"nodes\"", ")", ")", ";", "}"], "docstring": "Provide health details using the specified {@link Session} and {@link Builder\nBuilder}.\n@param session the session to use to execute a cypher statement\n@param builder the builder to add details to\n@throws Exception if getting health details failed", "docstring_tokens": ["Provide", "health", "details", "using", "the", "specified", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java#L70-L75", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/web/security/CustomWebFluxSecurityExample.java", "func_name": "CustomWebFluxSecurityExample.springSecurityFilterChain", "original_string": "@Bean\n\tpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\treturn http\n\t\t\t.authorizeExchange()\n\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t.pathMatchers(\"/foo\", \"/bar\")\n\t\t\t\t\t.authenticated().and()\n\t\t\t\t.formLogin().and()\n\t\t\t.build();\n\t}", "language": "java", "code": "@Bean\n\tpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n\t\treturn http\n\t\t\t.authorizeExchange()\n\t\t\t\t.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()\n\t\t\t\t.pathMatchers(\"/foo\", \"/bar\")\n\t\t\t\t\t.authenticated().and()\n\t\t\t\t.formLogin().and()\n\t\t\t.build();\n\t}", "code_tokens": ["@", "Bean", "public", "SecurityWebFilterChain", "springSecurityFilterChain", "(", "ServerHttpSecurity", "http", ")", "{", "return", "http", ".", "authorizeExchange", "(", ")", ".", "matchers", "(", "PathRequest", ".", "toStaticResources", "(", ")", ".", "atCommonLocations", "(", ")", ")", ".", "permitAll", "(", ")", ".", "pathMatchers", "(", "\"/foo\"", ",", "\"/bar\"", ")", ".", "authenticated", "(", ")", ".", "and", "(", ")", ".", "formLogin", "(", ")", ".", "and", "(", ")", ".", "build", "(", ")", ";", "}"], "docstring": "tag::configuration[]", "docstring_tokens": ["tag", "::", "configuration", "[]"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-docs/src/main/java/org/springframework/boot/docs/web/security/CustomWebFluxSecurityExample.java#L35-L44", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/BookToBookStore.java", "func_name": "BookToBookStore.getReferences", "original_string": "@Override\n\tpublic List<ForeignKey<Record, ?>> getReferences() {\n\t\treturn Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_B2BS_BOOK_STORE,\n\t\t\t\tKeys.FK_B2BS_BOOK);\n\t}", "language": "java", "code": "@Override\n\tpublic List<ForeignKey<Record, ?>> getReferences() {\n\t\treturn Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_B2BS_BOOK_STORE,\n\t\t\t\tKeys.FK_B2BS_BOOK);\n\t}", "code_tokens": ["@", "Override", "public", "List", "<", "ForeignKey", "<", "Record", ",", "?", ">", ">", "getReferences", "(", ")", "{", "return", "Arrays", ".", "<", "ForeignKey", "<", "Record", ",", "?", ">", ">", "asList", "(", "Keys", ".", "FK_B2BS_BOOK_STORE", ",", "Keys", ".", "FK_B2BS_BOOK", ")", ";", "}"], "docstring": "{@inheritDoc}", "docstring_tokens": ["{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/BookToBookStore.java#L110-L114", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java", "func_name": "AbstractFailureAnalyzer.getCauseType", "original_string": "@SuppressWarnings(\"unchecked\")\n\tprotected Class<? extends T> getCauseType() {\n\t\treturn (Class<? extends T>) ResolvableType\n\t\t\t\t.forClass(AbstractFailureAnalyzer.class, getClass()).resolveGeneric();\n\t}", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n\tprotected Class<? extends T> getCauseType() {\n\t\treturn (Class<? extends T>) ResolvableType\n\t\t\t\t.forClass(AbstractFailureAnalyzer.class, getClass()).resolveGeneric();\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "protected", "Class", "<", "?", "extends", "T", ">", "getCauseType", "(", ")", "{", "return", "(", "Class", "<", "?", "extends", "T", ">", ")", "ResolvableType", ".", "forClass", "(", "AbstractFailureAnalyzer", ".", "class", ",", "getClass", "(", ")", ")", ".", "resolveGeneric", "(", ")", ";", "}"], "docstring": "Return the cause type being handled by the analyzer. By default the class generic\nis used.\n@return the cause type", "docstring_tokens": ["Return", "the", "cause", "type", "being", "handled", "by", "the", "analyzer", ".", "By", "default", "the", "class", "generic", "is", "used", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java#L55-L59", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java", "func_name": "SpringApplicationJsonEnvironmentPostProcessor.flatten", "original_string": "private Map<String, Object> flatten(Map<String, Object> map) {\n\t\tMap<String, Object> result = new LinkedHashMap<>();\n\t\tflatten(null, result, map);\n\t\treturn result;\n\t}", "language": "java", "code": "private Map<String, Object> flatten(Map<String, Object> map) {\n\t\tMap<String, Object> result = new LinkedHashMap<>();\n\t\tflatten(null, result, map);\n\t\treturn result;\n\t}", "code_tokens": ["private", "Map", "<", "String", ",", "Object", ">", "flatten", "(", "Map", "<", "String", ",", "Object", ">", "map", ")", "{", "Map", "<", "String", ",", "Object", ">", "result", "=", "new", "LinkedHashMap", "<>", "(", ")", ";", "flatten", "(", "null", ",", "result", ",", "map", ")", ";", "return", "result", ";", "}"], "docstring": "Flatten the map keys using period separator.\n@param map the map that should be flattened\n@return the flattened map", "docstring_tokens": ["Flatten", "the", "map", "keys", "using", "period", "separator", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java#L108-L112", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java", "func_name": "PropertiesMigrationReport.getWarningReport", "original_string": "public String getWarningReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(\n\t\t\t\tLegacyProperties::getRenamed);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String.format(\"%nThe use of configuration keys that have been \"\n\t\t\t\t+ \"renamed was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Each configuration key has been temporarily mapped to its \"\n\t\t\t\t+ \"replacement for your convenience. To silence this warning, please \"\n\t\t\t\t+ \"update your configuration to use the new keys.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}", "language": "java", "code": "public String getWarningReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(\n\t\t\t\tLegacyProperties::getRenamed);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String.format(\"%nThe use of configuration keys that have been \"\n\t\t\t\t+ \"renamed was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Each configuration key has been temporarily mapped to its \"\n\t\t\t\t+ \"replacement for your convenience. To silence this warning, please \"\n\t\t\t\t+ \"update your configuration to use the new keys.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}", "code_tokens": ["public", "String", "getWarningReport", "(", ")", "{", "Map", "<", "String", ",", "List", "<", "PropertyMigration", ">", ">", "content", "=", "getContent", "(", "LegacyProperties", "::", "getRenamed", ")", ";", "if", "(", "content", ".", "isEmpty", "(", ")", ")", "{", "return", "null", ";", "}", "StringBuilder", "report", "=", "new", "StringBuilder", "(", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%nThe use of configuration keys that have been \"", "+", "\"renamed was found in the environment:%n%n\"", ")", ")", ";", "append", "(", "report", ",", "content", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%n\"", ")", ")", ";", "report", ".", "append", "(", "\"Each configuration key has been temporarily mapped to its \"", "+", "\"replacement for your convenience. To silence this warning, please \"", "+", "\"update your configuration to use the new keys.\"", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%n\"", ")", ")", ";", "return", "report", ".", "toString", "(", ")", ";", "}"], "docstring": "Return a report for all the properties that were automatically renamed. If no such\nproperties were found, return {@code null}.\n@return a report with the configurations keys that should be renamed", "docstring_tokens": ["Return", "a", "report", "for", "all", "the", "properties", "that", "were", "automatically", "renamed", ".", "If", "no", "such", "properties", "were", "found", "return", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java#L42-L58", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java", "func_name": "PropertiesMigrationReport.getErrorReport", "original_string": "public String getErrorReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(\n\t\t\t\tLegacyProperties::getUnsupported);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String.format(\"%nThe use of configuration keys that are no longer \"\n\t\t\t\t+ \"supported was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Please refer to the migration guide or reference guide for \"\n\t\t\t\t+ \"potential alternatives.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}", "language": "java", "code": "public String getErrorReport() {\n\t\tMap<String, List<PropertyMigration>> content = getContent(\n\t\t\t\tLegacyProperties::getUnsupported);\n\t\tif (content.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder report = new StringBuilder();\n\t\treport.append(String.format(\"%nThe use of configuration keys that are no longer \"\n\t\t\t\t+ \"supported was found in the environment:%n%n\"));\n\t\tappend(report, content);\n\t\treport.append(String.format(\"%n\"));\n\t\treport.append(\"Please refer to the migration guide or reference guide for \"\n\t\t\t\t+ \"potential alternatives.\");\n\t\treport.append(String.format(\"%n\"));\n\t\treturn report.toString();\n\t}", "code_tokens": ["public", "String", "getErrorReport", "(", ")", "{", "Map", "<", "String", ",", "List", "<", "PropertyMigration", ">", ">", "content", "=", "getContent", "(", "LegacyProperties", "::", "getUnsupported", ")", ";", "if", "(", "content", ".", "isEmpty", "(", ")", ")", "{", "return", "null", ";", "}", "StringBuilder", "report", "=", "new", "StringBuilder", "(", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%nThe use of configuration keys that are no longer \"", "+", "\"supported was found in the environment:%n%n\"", ")", ")", ";", "append", "(", "report", ",", "content", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%n\"", ")", ")", ";", "report", ".", "append", "(", "\"Please refer to the migration guide or reference guide for \"", "+", "\"potential alternatives.\"", ")", ";", "report", ".", "append", "(", "String", ".", "format", "(", "\"%n\"", ")", ")", ";", "return", "report", ".", "toString", "(", ")", ";", "}"], "docstring": "Return a report for all the properties that are no longer supported. If no such\nproperties were found, return {@code null}.\n@return a report with the configurations keys that are no longer supported", "docstring_tokens": ["Return", "a", "report", "for", "all", "the", "properties", "that", "are", "no", "longer", "supported", ".", "If", "no", "such", "properties", "were", "found", "return", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java#L65-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingDataSourceBean.java", "func_name": "PoolingDataSourceBean.setDataSource", "original_string": "public void setDataSource(XADataSource dataSource) {\n\t\tthis.dataSource = dataSource;\n\t\tsetClassName(DirectXADataSource.class.getName());\n\t\tsetDriverProperties(new Properties());\n\t}", "language": "java", "code": "public void setDataSource(XADataSource dataSource) {\n\t\tthis.dataSource = dataSource;\n\t\tsetClassName(DirectXADataSource.class.getName());\n\t\tsetDriverProperties(new Properties());\n\t}", "code_tokens": ["public", "void", "setDataSource", "(", "XADataSource", "dataSource", ")", "{", "this", ".", "dataSource", "=", "dataSource", ";", "setClassName", "(", "DirectXADataSource", ".", "class", ".", "getName", "(", ")", ")", ";", "setDriverProperties", "(", "new", "Properties", "(", ")", ")", ";", "}"], "docstring": "Set the {@link XADataSource} directly, instead of calling\n{@link #setClassName(String)}.\n@param dataSource the data source to use", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingDataSourceBean.java#L91-L95", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.recordConditionEvaluation", "original_string": "public void recordConditionEvaluation(String source, Condition condition,\n\t\t\tConditionOutcome outcome) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\tAssert.notNull(outcome, \"Outcome must not be null\");\n\t\tthis.unconditionalClasses.remove(source);\n\t\tif (!this.outcomes.containsKey(source)) {\n\t\t\tthis.outcomes.put(source, new ConditionAndOutcomes());\n\t\t}\n\t\tthis.outcomes.get(source).add(condition, outcome);\n\t\tthis.addedAncestorOutcomes = false;\n\t}", "language": "java", "code": "public void recordConditionEvaluation(String source, Condition condition,\n\t\t\tConditionOutcome outcome) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tAssert.notNull(condition, \"Condition must not be null\");\n\t\tAssert.notNull(outcome, \"Outcome must not be null\");\n\t\tthis.unconditionalClasses.remove(source);\n\t\tif (!this.outcomes.containsKey(source)) {\n\t\t\tthis.outcomes.put(source, new ConditionAndOutcomes());\n\t\t}\n\t\tthis.outcomes.get(source).add(condition, outcome);\n\t\tthis.addedAncestorOutcomes = false;\n\t}", "code_tokens": ["public", "void", "recordConditionEvaluation", "(", "String", "source", ",", "Condition", "condition", ",", "ConditionOutcome", "outcome", ")", "{", "Assert", ".", "notNull", "(", "source", ",", "\"Source must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "condition", ",", "\"Condition must not be null\"", ")", ";", "Assert", ".", "notNull", "(", "outcome", ",", "\"Outcome must not be null\"", ")", ";", "this", ".", "unconditionalClasses", ".", "remove", "(", "source", ")", ";", "if", "(", "!", "this", ".", "outcomes", ".", "containsKey", "(", "source", ")", ")", "{", "this", ".", "outcomes", ".", "put", "(", "source", ",", "new", "ConditionAndOutcomes", "(", ")", ")", ";", "}", "this", ".", "outcomes", ".", "get", "(", "source", ")", ".", "add", "(", "condition", ",", "outcome", ")", ";", "this", ".", "addedAncestorOutcomes", "=", "false", ";", "}"], "docstring": "Record the occurrence of condition evaluation.\n@param source the source of the condition (class or method name)\n@param condition the condition evaluated\n@param outcome the condition outcome", "docstring_tokens": ["Record", "the", "occurrence", "of", "condition", "evaluation", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L78-L89", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.recordExclusions", "original_string": "public void recordExclusions(Collection<String> exclusions) {\n\t\tAssert.notNull(exclusions, \"exclusions must not be null\");\n\t\tthis.exclusions.addAll(exclusions);\n\t}", "language": "java", "code": "public void recordExclusions(Collection<String> exclusions) {\n\t\tAssert.notNull(exclusions, \"exclusions must not be null\");\n\t\tthis.exclusions.addAll(exclusions);\n\t}", "code_tokens": ["public", "void", "recordExclusions", "(", "Collection", "<", "String", ">", "exclusions", ")", "{", "Assert", ".", "notNull", "(", "exclusions", ",", "\"exclusions must not be null\"", ")", ";", "this", ".", "exclusions", ".", "addAll", "(", "exclusions", ")", ";", "}"], "docstring": "Records the names of the classes that have been excluded from condition evaluation.\n@param exclusions the names of the excluded classes", "docstring_tokens": ["Records", "the", "names", "of", "the", "classes", "that", "have", "been", "excluded", "from", "condition", "evaluation", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L95-L98", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.recordEvaluationCandidates", "original_string": "public void recordEvaluationCandidates(List<String> evaluationCandidates) {\n\t\tAssert.notNull(evaluationCandidates, \"evaluationCandidates must not be null\");\n\t\tthis.unconditionalClasses.addAll(evaluationCandidates);\n\t}", "language": "java", "code": "public void recordEvaluationCandidates(List<String> evaluationCandidates) {\n\t\tAssert.notNull(evaluationCandidates, \"evaluationCandidates must not be null\");\n\t\tthis.unconditionalClasses.addAll(evaluationCandidates);\n\t}", "code_tokens": ["public", "void", "recordEvaluationCandidates", "(", "List", "<", "String", ">", "evaluationCandidates", ")", "{", "Assert", ".", "notNull", "(", "evaluationCandidates", ",", "\"evaluationCandidates must not be null\"", ")", ";", "this", ".", "unconditionalClasses", ".", "addAll", "(", "evaluationCandidates", ")", ";", "}"], "docstring": "Records the names of the classes that are candidates for condition evaluation.\n@param evaluationCandidates the names of the classes whose conditions will be\nevaluated", "docstring_tokens": ["Records", "the", "names", "of", "the", "classes", "that", "are", "candidates", "for", "condition", "evaluation", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L105-L108", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.getConditionAndOutcomesBySource", "original_string": "public Map<String, ConditionAndOutcomes> getConditionAndOutcomesBySource() {\n\t\tif (!this.addedAncestorOutcomes) {\n\t\t\tthis.outcomes.forEach((source, sourceOutcomes) -> {\n\t\t\t\tif (!sourceOutcomes.isFullMatch()) {\n\t\t\t\t\taddNoMatchOutcomeToAncestors(source);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.addedAncestorOutcomes = true;\n\t\t}\n\t\treturn Collections.unmodifiableMap(this.outcomes);\n\t}", "language": "java", "code": "public Map<String, ConditionAndOutcomes> getConditionAndOutcomesBySource() {\n\t\tif (!this.addedAncestorOutcomes) {\n\t\t\tthis.outcomes.forEach((source, sourceOutcomes) -> {\n\t\t\t\tif (!sourceOutcomes.isFullMatch()) {\n\t\t\t\t\taddNoMatchOutcomeToAncestors(source);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.addedAncestorOutcomes = true;\n\t\t}\n\t\treturn Collections.unmodifiableMap(this.outcomes);\n\t}", "code_tokens": ["public", "Map", "<", "String", ",", "ConditionAndOutcomes", ">", "getConditionAndOutcomesBySource", "(", ")", "{", "if", "(", "!", "this", ".", "addedAncestorOutcomes", ")", "{", "this", ".", "outcomes", ".", "forEach", "(", "(", "source", ",", "sourceOutcomes", ")", "->", "{", "if", "(", "!", "sourceOutcomes", ".", "isFullMatch", "(", ")", ")", "{", "addNoMatchOutcomeToAncestors", "(", "source", ")", ";", "}", "}", ")", ";", "this", ".", "addedAncestorOutcomes", "=", "true", ";", "}", "return", "Collections", ".", "unmodifiableMap", "(", "this", ".", "outcomes", ")", ";", "}"], "docstring": "Returns condition outcomes from this report, grouped by the source.\n@return the condition outcomes", "docstring_tokens": ["Returns", "condition", "outcomes", "from", "this", "report", "grouped", "by", "the", "source", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L114-L124", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.getUnconditionalClasses", "original_string": "public Set<String> getUnconditionalClasses() {\n\t\tSet<String> filtered = new HashSet<>(this.unconditionalClasses);\n\t\tfiltered.removeAll(this.exclusions);\n\t\treturn Collections.unmodifiableSet(filtered);\n\t}", "language": "java", "code": "public Set<String> getUnconditionalClasses() {\n\t\tSet<String> filtered = new HashSet<>(this.unconditionalClasses);\n\t\tfiltered.removeAll(this.exclusions);\n\t\treturn Collections.unmodifiableSet(filtered);\n\t}", "code_tokens": ["public", "Set", "<", "String", ">", "getUnconditionalClasses", "(", ")", "{", "Set", "<", "String", ">", "filtered", "=", "new", "HashSet", "<>", "(", "this", ".", "unconditionalClasses", ")", ";", "filtered", ".", "removeAll", "(", "this", ".", "exclusions", ")", ";", "return", "Collections", ".", "unmodifiableSet", "(", "filtered", ")", ";", "}"], "docstring": "Returns the names of the classes that were evaluated but were not conditional.\n@return the names of the unconditional classes", "docstring_tokens": ["Returns", "the", "names", "of", "the", "classes", "that", "were", "evaluated", "but", "were", "not", "conditional", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L149-L153", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.find", "original_string": "public static ConditionEvaluationReport find(BeanFactory beanFactory) {\n\t\tif (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {\n\t\t\treturn ConditionEvaluationReport\n\t\t\t\t\t.get((ConfigurableListableBeanFactory) beanFactory);\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public static ConditionEvaluationReport find(BeanFactory beanFactory) {\n\t\tif (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {\n\t\t\treturn ConditionEvaluationReport\n\t\t\t\t\t.get((ConfigurableListableBeanFactory) beanFactory);\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "static", "ConditionEvaluationReport", "find", "(", "BeanFactory", "beanFactory", ")", "{", "if", "(", "beanFactory", "!=", "null", "&&", "beanFactory", "instanceof", "ConfigurableBeanFactory", ")", "{", "return", "ConditionEvaluationReport", ".", "get", "(", "(", "ConfigurableListableBeanFactory", ")", "beanFactory", ")", ";", "}", "return", "null", ";", "}"], "docstring": "Attempt to find the {@link ConditionEvaluationReport} for the specified bean\nfactory.\n@param beanFactory the bean factory (may be {@code null})\n@return the {@link ConditionEvaluationReport} or {@code null}", "docstring_tokens": ["Attempt", "to", "find", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L169-L175", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java", "func_name": "ConditionEvaluationReport.get", "original_string": "public static ConditionEvaluationReport get(\n\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\tsynchronized (beanFactory) {\n\t\t\tConditionEvaluationReport report;\n\t\t\tif (beanFactory.containsSingleton(BEAN_NAME)) {\n\t\t\t\treport = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treport = new ConditionEvaluationReport();\n\t\t\t\tbeanFactory.registerSingleton(BEAN_NAME, report);\n\t\t\t}\n\t\t\tlocateParent(beanFactory.getParentBeanFactory(), report);\n\t\t\treturn report;\n\t\t}\n\t}", "language": "java", "code": "public static ConditionEvaluationReport get(\n\t\t\tConfigurableListableBeanFactory beanFactory) {\n\t\tsynchronized (beanFactory) {\n\t\t\tConditionEvaluationReport report;\n\t\t\tif (beanFactory.containsSingleton(BEAN_NAME)) {\n\t\t\t\treport = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treport = new ConditionEvaluationReport();\n\t\t\t\tbeanFactory.registerSingleton(BEAN_NAME, report);\n\t\t\t}\n\t\t\tlocateParent(beanFactory.getParentBeanFactory(), report);\n\t\t\treturn report;\n\t\t}\n\t}", "code_tokens": ["public", "static", "ConditionEvaluationReport", "get", "(", "ConfigurableListableBeanFactory", "beanFactory", ")", "{", "synchronized", "(", "beanFactory", ")", "{", "ConditionEvaluationReport", "report", ";", "if", "(", "beanFactory", ".", "containsSingleton", "(", "BEAN_NAME", ")", ")", "{", "report", "=", "beanFactory", ".", "getBean", "(", "BEAN_NAME", ",", "ConditionEvaluationReport", ".", "class", ")", ";", "}", "else", "{", "report", "=", "new", "ConditionEvaluationReport", "(", ")", ";", "beanFactory", ".", "registerSingleton", "(", "BEAN_NAME", ",", "report", ")", ";", "}", "locateParent", "(", "beanFactory", ".", "getParentBeanFactory", "(", ")", ",", "report", ")", ";", "return", "report", ";", "}", "}"], "docstring": "Obtain a {@link ConditionEvaluationReport} for the specified bean factory.\n@param beanFactory the bean factory\n@return an existing or new {@link ConditionEvaluationReport}", "docstring_tokens": ["Obtain", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReport.java#L182-L196", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java", "func_name": "DataSourceInitializer.createSchema", "original_string": "public boolean createSchema() {\n\t\tList<Resource> scripts = getScripts(\"spring.datasource.schema\",\n\t\t\t\tthis.properties.getSchema(), \"schema\");\n\t\tif (!scripts.isEmpty()) {\n\t\t\tif (!isEnabled()) {\n\t\t\t\tlogger.debug(\"Initialization disabled (not running DDL scripts)\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tString username = this.properties.getSchemaUsername();\n\t\t\tString password = this.properties.getSchemaPassword();\n\t\t\trunScripts(scripts, username, password);\n\t\t}\n\t\treturn !scripts.isEmpty();\n\t}", "language": "java", "code": "public boolean createSchema() {\n\t\tList<Resource> scripts = getScripts(\"spring.datasource.schema\",\n\t\t\t\tthis.properties.getSchema(), \"schema\");\n\t\tif (!scripts.isEmpty()) {\n\t\t\tif (!isEnabled()) {\n\t\t\t\tlogger.debug(\"Initialization disabled (not running DDL scripts)\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tString username = this.properties.getSchemaUsername();\n\t\t\tString password = this.properties.getSchemaPassword();\n\t\t\trunScripts(scripts, username, password);\n\t\t}\n\t\treturn !scripts.isEmpty();\n\t}", "code_tokens": ["public", "boolean", "createSchema", "(", ")", "{", "List", "<", "Resource", ">", "scripts", "=", "getScripts", "(", "\"spring.datasource.schema\"", ",", "this", ".", "properties", ".", "getSchema", "(", ")", ",", "\"schema\"", ")", ";", "if", "(", "!", "scripts", ".", "isEmpty", "(", ")", ")", "{", "if", "(", "!", "isEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Initialization disabled (not running DDL scripts)\"", ")", ";", "return", "false", ";", "}", "String", "username", "=", "this", ".", "properties", ".", "getSchemaUsername", "(", ")", ";", "String", "password", "=", "this", ".", "properties", ".", "getSchemaPassword", "(", ")", ";", "runScripts", "(", "scripts", ",", "username", ",", "password", ")", ";", "}", "return", "!", "scripts", ".", "isEmpty", "(", ")", ";", "}"], "docstring": "Create the schema if necessary.\n@return {@code true} if the schema was created\n@see DataSourceProperties#getSchema()", "docstring_tokens": ["Create", "the", "schema", "if", "necessary", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java#L94-L107", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java", "func_name": "DataSourceInitializer.initSchema", "original_string": "public void initSchema() {\n\t\tList<Resource> scripts = getScripts(\"spring.datasource.data\",\n\t\t\t\tthis.properties.getData(), \"data\");\n\t\tif (!scripts.isEmpty()) {\n\t\t\tif (!isEnabled()) {\n\t\t\t\tlogger.debug(\"Initialization disabled (not running data scripts)\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString username = this.properties.getDataUsername();\n\t\t\tString password = this.properties.getDataPassword();\n\t\t\trunScripts(scripts, username, password);\n\t\t}\n\t}", "language": "java", "code": "public void initSchema() {\n\t\tList<Resource> scripts = getScripts(\"spring.datasource.data\",\n\t\t\t\tthis.properties.getData(), \"data\");\n\t\tif (!scripts.isEmpty()) {\n\t\t\tif (!isEnabled()) {\n\t\t\t\tlogger.debug(\"Initialization disabled (not running data scripts)\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString username = this.properties.getDataUsername();\n\t\t\tString password = this.properties.getDataPassword();\n\t\t\trunScripts(scripts, username, password);\n\t\t}\n\t}", "code_tokens": ["public", "void", "initSchema", "(", ")", "{", "List", "<", "Resource", ">", "scripts", "=", "getScripts", "(", "\"spring.datasource.data\"", ",", "this", ".", "properties", ".", "getData", "(", ")", ",", "\"data\"", ")", ";", "if", "(", "!", "scripts", ".", "isEmpty", "(", ")", ")", "{", "if", "(", "!", "isEnabled", "(", ")", ")", "{", "logger", ".", "debug", "(", "\"Initialization disabled (not running data scripts)\"", ")", ";", "return", ";", "}", "String", "username", "=", "this", ".", "properties", ".", "getDataUsername", "(", ")", ";", "String", "password", "=", "this", ".", "properties", ".", "getDataPassword", "(", ")", ";", "runScripts", "(", "scripts", ",", "username", ",", "password", ")", ";", "}", "}"], "docstring": "Initialize the schema if necessary.\n@see DataSourceProperties#getData()", "docstring_tokens": ["Initialize", "the", "schema", "if", "necessary", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java#L113-L125", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/DevtoolsEnablementDeducer.java", "func_name": "DevtoolsEnablementDeducer.shouldEnable", "original_string": "public static boolean shouldEnable(Thread thread) {\n\t\tfor (StackTraceElement element : thread.getStackTrace()) {\n\t\t\tif (isSkippedStackElement(element)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "language": "java", "code": "public static boolean shouldEnable(Thread thread) {\n\t\tfor (StackTraceElement element : thread.getStackTrace()) {\n\t\t\tif (isSkippedStackElement(element)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "code_tokens": ["public", "static", "boolean", "shouldEnable", "(", "Thread", "thread", ")", "{", "for", "(", "StackTraceElement", "element", ":", "thread", ".", "getStackTrace", "(", ")", ")", "{", "if", "(", "isSkippedStackElement", "(", "element", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Checks if a specific {@link StackTraceElement} in the current thread's stacktrace\nshould cause devtools to be disabled.\n@param thread the current thread\n@return {@code true} if devtools should be enabled skipped", "docstring_tokens": ["Checks", "if", "a", "specific", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/DevtoolsEnablementDeducer.java#L50-L57", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java", "func_name": "SpringConfigurationPropertySource.from", "original_string": "public static SpringConfigurationPropertySource from(PropertySource<?> source) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tPropertyMapper mapper = getPropertyMapper(source);\n\t\tif (isFullEnumerable(source)) {\n\t\t\treturn new SpringIterableConfigurationPropertySource(\n\t\t\t\t\t(EnumerablePropertySource<?>) source, mapper);\n\t\t}\n\t\treturn new SpringConfigurationPropertySource(source, mapper,\n\t\t\t\tgetContainsDescendantOfForSource(source));\n\t}", "language": "java", "code": "public static SpringConfigurationPropertySource from(PropertySource<?> source) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tPropertyMapper mapper = getPropertyMapper(source);\n\t\tif (isFullEnumerable(source)) {\n\t\t\treturn new SpringIterableConfigurationPropertySource(\n\t\t\t\t\t(EnumerablePropertySource<?>) source, mapper);\n\t\t}\n\t\treturn new SpringConfigurationPropertySource(source, mapper,\n\t\t\t\tgetContainsDescendantOfForSource(source));\n\t}", "code_tokens": ["public", "static", "SpringConfigurationPropertySource", "from", "(", "PropertySource", "<", "?", ">", "source", ")", "{", "Assert", ".", "notNull", "(", "source", ",", "\"Source must not be null\"", ")", ";", "PropertyMapper", "mapper", "=", "getPropertyMapper", "(", "source", ")", ";", "if", "(", "isFullEnumerable", "(", "source", ")", ")", "{", "return", "new", "SpringIterableConfigurationPropertySource", "(", "(", "EnumerablePropertySource", "<", "?", ">", ")", "source", ",", "mapper", ")", ";", "}", "return", "new", "SpringConfigurationPropertySource", "(", "source", ",", "mapper", ",", "getContainsDescendantOfForSource", "(", "source", ")", ")", ";", "}"], "docstring": "Create a new {@link SpringConfigurationPropertySource} for the specified\n{@link PropertySource}.\n@param source the source Spring {@link PropertySource}\n@return a {@link SpringConfigurationPropertySource} or\n{@link SpringIterableConfigurationPropertySource} instance", "docstring_tokens": ["Create", "a", "new", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java#L147-L156", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/InfoProperties.java", "func_name": "InfoProperties.getInstant", "original_string": "public Instant getInstant(String key) {\n\t\tString s = get(key);\n\t\tif (s != null) {\n\t\t\ttry {\n\t\t\t\treturn Instant.ofEpochMilli(Long.parseLong(s));\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\t// Not valid epoch time\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "language": "java", "code": "public Instant getInstant(String key) {\n\t\tString s = get(key);\n\t\tif (s != null) {\n\t\t\ttry {\n\t\t\t\treturn Instant.ofEpochMilli(Long.parseLong(s));\n\t\t\t}\n\t\t\tcatch (NumberFormatException ex) {\n\t\t\t\t// Not valid epoch time\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "code_tokens": ["public", "Instant", "getInstant", "(", "String", "key", ")", "{", "String", "s", "=", "get", "(", "key", ")", ";", "if", "(", "s", "!=", "null", ")", "{", "try", "{", "return", "Instant", ".", "ofEpochMilli", "(", "Long", ".", "parseLong", "(", "s", ")", ")", ";", "}", "catch", "(", "NumberFormatException", "ex", ")", "{", "// Not valid epoch time", "}", "}", "return", "null", ";", "}"], "docstring": "Return the value of the specified property as an {@link Instant} or {@code null} if\nthe value is not a valid {@link Long} representation of an epoch time.\n@param key the key of the property\n@return the property value", "docstring_tokens": ["Return", "the", "value", "of", "the", "specified", "property", "as", "an", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/info/InfoProperties.java#L63-L74", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.resetDefaultLocaleMapping", "original_string": "private void resetDefaultLocaleMapping(TomcatEmbeddedContext context) {\n\t\tcontext.addLocaleEncodingMappingParameter(Locale.ENGLISH.toString(),\n\t\t\t\tDEFAULT_CHARSET.displayName());\n\t\tcontext.addLocaleEncodingMappingParameter(Locale.FRENCH.toString(),\n\t\t\t\tDEFAULT_CHARSET.displayName());\n\t}", "language": "java", "code": "private void resetDefaultLocaleMapping(TomcatEmbeddedContext context) {\n\t\tcontext.addLocaleEncodingMappingParameter(Locale.ENGLISH.toString(),\n\t\t\t\tDEFAULT_CHARSET.displayName());\n\t\tcontext.addLocaleEncodingMappingParameter(Locale.FRENCH.toString(),\n\t\t\t\tDEFAULT_CHARSET.displayName());\n\t}", "code_tokens": ["private", "void", "resetDefaultLocaleMapping", "(", "TomcatEmbeddedContext", "context", ")", "{", "context", ".", "addLocaleEncodingMappingParameter", "(", "Locale", ".", "ENGLISH", ".", "toString", "(", ")", ",", "DEFAULT_CHARSET", ".", "displayName", "(", ")", ")", ";", "context", ".", "addLocaleEncodingMappingParameter", "(", "Locale", ".", "FRENCH", ".", "toString", "(", ")", ",", "DEFAULT_CHARSET", ".", "displayName", "(", ")", ")", ";", "}"], "docstring": "Override Tomcat's default locale mappings to align with other servers. See\n{@code org.apache.catalina.util.CharsetMapperDefault.properties}.\n@param context the context to reset", "docstring_tokens": ["Override", "Tomcat", "s", "default", "locale", "mappings", "to", "align", "with", "other", "servers", ".", "See", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L243-L248", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.configureContext", "original_string": "protected void configureContext(Context context,\n\t\t\tServletContextInitializer[] initializers) {\n\t\tTomcatStarter starter = new TomcatStarter(initializers);\n\t\tif (context instanceof TomcatEmbeddedContext) {\n\t\t\tTomcatEmbeddedContext embeddedContext = (TomcatEmbeddedContext) context;\n\t\t\tembeddedContext.setStarter(starter);\n\t\t\tembeddedContext.setFailCtxIfServletStartFails(true);\n\t\t}\n\t\tcontext.addServletContainerInitializer(starter, NO_CLASSES);\n\t\tfor (LifecycleListener lifecycleListener : this.contextLifecycleListeners) {\n\t\t\tcontext.addLifecycleListener(lifecycleListener);\n\t\t}\n\t\tfor (Valve valve : this.contextValves) {\n\t\t\tcontext.getPipeline().addValve(valve);\n\t\t}\n\t\tfor (ErrorPage errorPage : getErrorPages()) {\n\t\t\tnew TomcatErrorPage(errorPage).addToContext(context);\n\t\t}\n\t\tfor (MimeMappings.Mapping mapping : getMimeMappings()) {\n\t\t\tcontext.addMimeMapping(mapping.getExtension(), mapping.getMimeType());\n\t\t}\n\t\tconfigureSession(context);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tfor (TomcatContextCustomizer customizer : this.tomcatContextCustomizers) {\n\t\t\tcustomizer.customize(context);\n\t\t}\n\t}", "language": "java", "code": "protected void configureContext(Context context,\n\t\t\tServletContextInitializer[] initializers) {\n\t\tTomcatStarter starter = new TomcatStarter(initializers);\n\t\tif (context instanceof TomcatEmbeddedContext) {\n\t\t\tTomcatEmbeddedContext embeddedContext = (TomcatEmbeddedContext) context;\n\t\t\tembeddedContext.setStarter(starter);\n\t\t\tembeddedContext.setFailCtxIfServletStartFails(true);\n\t\t}\n\t\tcontext.addServletContainerInitializer(starter, NO_CLASSES);\n\t\tfor (LifecycleListener lifecycleListener : this.contextLifecycleListeners) {\n\t\t\tcontext.addLifecycleListener(lifecycleListener);\n\t\t}\n\t\tfor (Valve valve : this.contextValves) {\n\t\t\tcontext.getPipeline().addValve(valve);\n\t\t}\n\t\tfor (ErrorPage errorPage : getErrorPages()) {\n\t\t\tnew TomcatErrorPage(errorPage).addToContext(context);\n\t\t}\n\t\tfor (MimeMappings.Mapping mapping : getMimeMappings()) {\n\t\t\tcontext.addMimeMapping(mapping.getExtension(), mapping.getMimeType());\n\t\t}\n\t\tconfigureSession(context);\n\t\tnew DisableReferenceClearingContextCustomizer().customize(context);\n\t\tfor (TomcatContextCustomizer customizer : this.tomcatContextCustomizers) {\n\t\t\tcustomizer.customize(context);\n\t\t}\n\t}", "code_tokens": ["protected", "void", "configureContext", "(", "Context", "context", ",", "ServletContextInitializer", "[", "]", "initializers", ")", "{", "TomcatStarter", "starter", "=", "new", "TomcatStarter", "(", "initializers", ")", ";", "if", "(", "context", "instanceof", "TomcatEmbeddedContext", ")", "{", "TomcatEmbeddedContext", "embeddedContext", "=", "(", "TomcatEmbeddedContext", ")", "context", ";", "embeddedContext", ".", "setStarter", "(", "starter", ")", ";", "embeddedContext", ".", "setFailCtxIfServletStartFails", "(", "true", ")", ";", "}", "context", ".", "addServletContainerInitializer", "(", "starter", ",", "NO_CLASSES", ")", ";", "for", "(", "LifecycleListener", "lifecycleListener", ":", "this", ".", "contextLifecycleListeners", ")", "{", "context", ".", "addLifecycleListener", "(", "lifecycleListener", ")", ";", "}", "for", "(", "Valve", "valve", ":", "this", ".", "contextValves", ")", "{", "context", ".", "getPipeline", "(", ")", ".", "addValve", "(", "valve", ")", ";", "}", "for", "(", "ErrorPage", "errorPage", ":", "getErrorPages", "(", ")", ")", "{", "new", "TomcatErrorPage", "(", "errorPage", ")", ".", "addToContext", "(", "context", ")", ";", "}", "for", "(", "MimeMappings", ".", "Mapping", "mapping", ":", "getMimeMappings", "(", ")", ")", "{", "context", ".", "addMimeMapping", "(", "mapping", ".", "getExtension", "(", ")", ",", "mapping", ".", "getMimeType", "(", ")", ")", ";", "}", "configureSession", "(", "context", ")", ";", "new", "DisableReferenceClearingContextCustomizer", "(", ")", ".", "customize", "(", "context", ")", ";", "for", "(", "TomcatContextCustomizer", "customizer", ":", "this", ".", "tomcatContextCustomizers", ")", "{", "customizer", ".", "customize", "(", "context", ")", ";", "}", "}"], "docstring": "Configure the Tomcat {@link Context}.\n@param context the Tomcat context\n@param initializers initializers to apply", "docstring_tokens": ["Configure", "the", "Tomcat", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L353-L379", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.setTldSkipPatterns", "original_string": "public void setTldSkipPatterns(Collection<String> patterns) {\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n\t\tthis.tldSkipPatterns = new LinkedHashSet<>(patterns);\n\t}", "language": "java", "code": "public void setTldSkipPatterns(Collection<String> patterns) {\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n\t\tthis.tldSkipPatterns = new LinkedHashSet<>(patterns);\n\t}", "code_tokens": ["public", "void", "setTldSkipPatterns", "(", "Collection", "<", "String", ">", "patterns", ")", "{", "Assert", ".", "notNull", "(", "patterns", ",", "\"Patterns must not be null\"", ")", ";", "this", ".", "tldSkipPatterns", "=", "new", "LinkedHashSet", "<>", "(", "patterns", ")", ";", "}"], "docstring": "Set the patterns that match jars to ignore for TLD scanning. See Tomcat's\ncatalina.properties for typical values. Defaults to a list drawn from that source.\n@param patterns the jar patterns to skip when scanning for TLDs etc", "docstring_tokens": ["Set", "the", "patterns", "that", "match", "jars", "to", "ignore", "for", "TLD", "scanning", ".", "See", "Tomcat", "s", "catalina", ".", "properties", "for", "typical", "values", ".", "Defaults", "to", "a", "list", "drawn", "from", "that", "source", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L466-L469", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.addTldSkipPatterns", "original_string": "public void addTldSkipPatterns(String... patterns) {\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n\t\tthis.tldSkipPatterns.addAll(Arrays.asList(patterns));\n\t}", "language": "java", "code": "public void addTldSkipPatterns(String... patterns) {\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n\t\tthis.tldSkipPatterns.addAll(Arrays.asList(patterns));\n\t}", "code_tokens": ["public", "void", "addTldSkipPatterns", "(", "String", "...", "patterns", ")", "{", "Assert", ".", "notNull", "(", "patterns", ",", "\"Patterns must not be null\"", ")", ";", "this", ".", "tldSkipPatterns", ".", "addAll", "(", "Arrays", ".", "asList", "(", "patterns", ")", ")", ";", "}"], "docstring": "Add patterns that match jars to ignore for TLD scanning. See Tomcat's\ncatalina.properties for typical values.\n@param patterns the additional jar patterns to skip when scanning for TLDs etc", "docstring_tokens": ["Add", "patterns", "that", "match", "jars", "to", "ignore", "for", "TLD", "scanning", ".", "See", "Tomcat", "s", "catalina", ".", "properties", "for", "typical", "values", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L476-L479", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.setEngineValves", "original_string": "public void setEngineValves(Collection<? extends Valve> engineValves) {\n\t\tAssert.notNull(engineValves, \"Valves must not be null\");\n\t\tthis.engineValves = new ArrayList<>(engineValves);\n\t}", "language": "java", "code": "public void setEngineValves(Collection<? extends Valve> engineValves) {\n\t\tAssert.notNull(engineValves, \"Valves must not be null\");\n\t\tthis.engineValves = new ArrayList<>(engineValves);\n\t}", "code_tokens": ["public", "void", "setEngineValves", "(", "Collection", "<", "?", "extends", "Valve", ">", "engineValves", ")", "{", "Assert", ".", "notNull", "(", "engineValves", ",", "\"Valves must not be null\"", ")", ";", "this", ".", "engineValves", "=", "new", "ArrayList", "<>", "(", "engineValves", ")", ";", "}"], "docstring": "Set {@link Valve}s that should be applied to the Tomcat {@link Engine}. Calling\nthis method will replace any existing valves.\n@param engineValves the valves to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L496-L499", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.setContextValves", "original_string": "public void setContextValves(Collection<? extends Valve> contextValves) {\n\t\tAssert.notNull(contextValves, \"Valves must not be null\");\n\t\tthis.contextValves = new ArrayList<>(contextValves);\n\t}", "language": "java", "code": "public void setContextValves(Collection<? extends Valve> contextValves) {\n\t\tAssert.notNull(contextValves, \"Valves must not be null\");\n\t\tthis.contextValves = new ArrayList<>(contextValves);\n\t}", "code_tokens": ["public", "void", "setContextValves", "(", "Collection", "<", "?", "extends", "Valve", ">", "contextValves", ")", "{", "Assert", ".", "notNull", "(", "contextValves", ",", "\"Valves must not be null\"", ")", ";", "this", ".", "contextValves", "=", "new", "ArrayList", "<>", "(", "contextValves", ")", ";", "}"], "docstring": "Set {@link Valve}s that should be applied to the Tomcat {@link Context}. Calling\nthis method will replace any existing valves.\n@param contextValves the valves to set", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L521-L524", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.addContextValves", "original_string": "public void addContextValves(Valve... contextValves) {\n\t\tAssert.notNull(contextValves, \"Valves must not be null\");\n\t\tthis.contextValves.addAll(Arrays.asList(contextValves));\n\t}", "language": "java", "code": "public void addContextValves(Valve... contextValves) {\n\t\tAssert.notNull(contextValves, \"Valves must not be null\");\n\t\tthis.contextValves.addAll(Arrays.asList(contextValves));\n\t}", "code_tokens": ["public", "void", "addContextValves", "(", "Valve", "...", "contextValves", ")", "{", "Assert", ".", "notNull", "(", "contextValves", ",", "\"Valves must not be null\"", ")", ";", "this", ".", "contextValves", ".", "addAll", "(", "Arrays", ".", "asList", "(", "contextValves", ")", ")", ";", "}"], "docstring": "Add {@link Valve}s that should be applied to the Tomcat {@link Context}.\n@param contextValves the valves to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L540-L543", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.setTomcatProtocolHandlerCustomizers", "original_string": "public void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizer) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizer,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new ArrayList<>(\n\t\t\t\ttomcatProtocolHandlerCustomizer);\n\t}", "language": "java", "code": "public void setTomcatProtocolHandlerCustomizers(\n\t\t\tCollection<? extends TomcatProtocolHandlerCustomizer<?>> tomcatProtocolHandlerCustomizer) {\n\t\tAssert.notNull(tomcatProtocolHandlerCustomizer,\n\t\t\t\t\"TomcatProtocolHandlerCustomizers must not be null\");\n\t\tthis.tomcatProtocolHandlerCustomizers = new ArrayList<>(\n\t\t\t\ttomcatProtocolHandlerCustomizer);\n\t}", "code_tokens": ["public", "void", "setTomcatProtocolHandlerCustomizers", "(", "Collection", "<", "?", "extends", "TomcatProtocolHandlerCustomizer", "<", "?", ">", ">", "tomcatProtocolHandlerCustomizer", ")", "{", "Assert", ".", "notNull", "(", "tomcatProtocolHandlerCustomizer", ",", "\"TomcatProtocolHandlerCustomizers must not be null\"", ")", ";", "this", ".", "tomcatProtocolHandlerCustomizers", "=", "new", "ArrayList", "<>", "(", "tomcatProtocolHandlerCustomizer", ")", ";", "}"], "docstring": "Set {@link TomcatProtocolHandlerCustomizer}s that should be applied to the Tomcat\n{@link Connector}. Calling this method will replace any existing customizers.\n@param tomcatProtocolHandlerCustomizer the customizers to set\n@since 2.2.0", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L641-L647", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java", "func_name": "TomcatServletWebServerFactory.addAdditionalTomcatConnectors", "original_string": "public void addAdditionalTomcatConnectors(Connector... connectors) {\n\t\tAssert.notNull(connectors, \"Connectors must not be null\");\n\t\tthis.additionalTomcatConnectors.addAll(Arrays.asList(connectors));\n\t}", "language": "java", "code": "public void addAdditionalTomcatConnectors(Connector... connectors) {\n\t\tAssert.notNull(connectors, \"Connectors must not be null\");\n\t\tthis.additionalTomcatConnectors.addAll(Arrays.asList(connectors));\n\t}", "code_tokens": ["public", "void", "addAdditionalTomcatConnectors", "(", "Connector", "...", "connectors", ")", "{", "Assert", ".", "notNull", "(", "connectors", ",", "\"Connectors must not be null\"", ")", ";", "this", ".", "additionalTomcatConnectors", ".", "addAll", "(", "Arrays", ".", "asList", "(", "connectors", ")", ")", ";", "}"], "docstring": "Add {@link Connector}s in addition to the default connector, e.g. for SSL or AJP\n@param connectors the connectors to add", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java#L678-L681", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java", "func_name": "PoolingConnectionFactoryBean.setConnectionFactory", "original_string": "public void setConnectionFactory(XAConnectionFactory connectionFactory) {\n\t\tthis.connectionFactory = connectionFactory;\n\t\tsetClassName(DirectXAConnectionFactory.class.getName());\n\t\tsetDriverProperties(new Properties());\n\t}", "language": "java", "code": "public void setConnectionFactory(XAConnectionFactory connectionFactory) {\n\t\tthis.connectionFactory = connectionFactory;\n\t\tsetClassName(DirectXAConnectionFactory.class.getName());\n\t\tsetDriverProperties(new Properties());\n\t}", "code_tokens": ["public", "void", "setConnectionFactory", "(", "XAConnectionFactory", "connectionFactory", ")", "{", "this", ".", "connectionFactory", "=", "connectionFactory", ";", "setClassName", "(", "DirectXAConnectionFactory", ".", "class", ".", "getName", "(", ")", ")", ";", "setDriverProperties", "(", "new", "Properties", "(", ")", ")", ";", "}"], "docstring": "Set the {@link XAConnectionFactory} directly, instead of calling\n{@link #setClassName(String)}.\n@param connectionFactory the connection factory to use", "docstring_tokens": ["Set", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java#L97-L101", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/util/ArrayTool.java", "func_name": "ArrayTool.binarySearch", "original_string": "public static int binarySearch(BaseNode[] branches, BaseNode node)\n    {\n        int high = branches.length - 1;\n        if (branches.length < 1)\n        {\n            return high;\n        }\n        int low = 0;\n        while (low <= high)\n        {\n            int mid = (low + high) >>> 1;\n            int cmp = branches[mid].compareTo(node);\n\n            if (cmp < 0)\n                low = mid + 1;\n            else if (cmp > 0)\n                high = mid - 1;\n            else\n                return mid;\n        }\n        return -(low + 1);\n    }", "language": "java", "code": "public static int binarySearch(BaseNode[] branches, BaseNode node)\n    {\n        int high = branches.length - 1;\n        if (branches.length < 1)\n        {\n            return high;\n        }\n        int low = 0;\n        while (low <= high)\n        {\n            int mid = (low + high) >>> 1;\n            int cmp = branches[mid].compareTo(node);\n\n            if (cmp < 0)\n                low = mid + 1;\n            else if (cmp > 0)\n                high = mid - 1;\n            else\n                return mid;\n        }\n        return -(low + 1);\n    }", "code_tokens": ["public", "static", "int", "binarySearch", "(", "BaseNode", "[", "]", "branches", ",", "BaseNode", "node", ")", "{", "int", "high", "=", "branches", ".", "length", "-", "1", ";", "if", "(", "branches", ".", "length", "<", "1", ")", "{", "return", "high", ";", "}", "int", "low", "=", "0", ";", "while", "(", "low", "<=", "high", ")", "{", "int", "mid", "=", "(", "low", "+", "high", ")", ">>>", "1", ";", "int", "cmp", "=", "branches", "[", "mid", "]", ".", "compareTo", "(", "node", ")", ";", "if", "(", "cmp", "<", "0", ")", "low", "=", "mid", "+", "1", ";", "else", "if", "(", "cmp", ">", "0", ")", "high", "=", "mid", "-", "1", ";", "else", "return", "mid", ";", "}", "return", "-", "(", "low", "+", "1", ")", ";", "}"], "docstring": "\u4e8c\u5206\u67e5\u627e\n@param branches \u6570\u7ec4\n@param node \u8981\u67e5\u627e\u7684node\n@return \u6570\u7ec4\u4e0b\u6807\uff0c\u5c0f\u4e8e0\u8868\u793a\u6ca1\u627e\u5230", "docstring_tokens": ["\u4e8c\u5206\u67e5\u627e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/util/ArrayTool.java#L28-L49", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/common/CommonSynonymDictionaryEx.java", "func_name": "CommonSynonymDictionaryEx.distance", "original_string": "public long distance(String a, String b)\n    {\n        Long[] itemA = get(a);\n        if (itemA == null) return Long.MAX_VALUE / 3;\n        Long[] itemB = get(b);\n        if (itemB == null) return Long.MAX_VALUE / 3;\n\n        return ArrayDistance.computeAverageDistance(itemA, itemB);\n    }", "language": "java", "code": "public long distance(String a, String b)\n    {\n        Long[] itemA = get(a);\n        if (itemA == null) return Long.MAX_VALUE / 3;\n        Long[] itemB = get(b);\n        if (itemB == null) return Long.MAX_VALUE / 3;\n\n        return ArrayDistance.computeAverageDistance(itemA, itemB);\n    }", "code_tokens": ["public", "long", "distance", "(", "String", "a", ",", "String", "b", ")", "{", "Long", "[", "]", "itemA", "=", "get", "(", "a", ")", ";", "if", "(", "itemA", "==", "null", ")", "return", "Long", ".", "MAX_VALUE", "/", "3", ";", "Long", "[", "]", "itemB", "=", "get", "(", "b", ")", ";", "if", "(", "itemB", "==", "null", ")", "return", "Long", ".", "MAX_VALUE", "/", "3", ";", "return", "ArrayDistance", ".", "computeAverageDistance", "(", "itemA", ",", "itemB", ")", ";", "}"], "docstring": "\u8bed\u4e49\u8ddd\u79bb\n@param a\n@param b\n@return", "docstring_tokens": ["\u8bed\u4e49\u8ddd\u79bb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/common/CommonSynonymDictionaryEx.java#L109-L117", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java", "func_name": "JapanesePersonRecognition.recognition", "original_string": "public static void recognition(List<Vertex> segResult, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        StringBuilder sbName = new StringBuilder();\n        int appendTimes = 0;\n        char[] charArray = wordNetAll.charArray;\n        DoubleArrayTrie<Character>.LongestSearcher searcher = JapanesePersonDictionary.getSearcher(charArray);\n        int activeLine = 1;\n        int preOffset = 0;\n        while (searcher.next())\n        {\n            Character label = searcher.value;\n            int offset = searcher.begin;\n            String key = new String(charArray, offset, searcher.length);\n            if (preOffset != offset)\n            {\n                if (appendTimes > 1 && sbName.length() > 2) // \u65e5\u672c\u4eba\u540d\u6700\u77ed\u4e3a3\u5b57\n                {\n                    insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n                }\n                sbName.setLength(0);\n                appendTimes = 0;\n            }\n            if (appendTimes == 0)\n            {\n                if (label == JapanesePersonDictionary.X)\n                {\n                    sbName.append(key);\n                    ++appendTimes;\n                    activeLine = offset + 1;\n                }\n            }\n            else\n            {\n                if (label == JapanesePersonDictionary.M)\n                {\n                    sbName.append(key);\n                    ++appendTimes;\n                }\n                else\n                {\n                    if (appendTimes > 1 && sbName.length() > 2)\n                    {\n                        insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n                    }\n                    sbName.setLength(0);\n                    appendTimes = 0;\n                }\n            }\n            preOffset = offset + key.length();\n        }\n        if (sbName.length() > 0)\n        {\n            if (appendTimes > 1)\n            {\n                insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n            }\n        }\n    }", "language": "java", "code": "public static void recognition(List<Vertex> segResult, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        StringBuilder sbName = new StringBuilder();\n        int appendTimes = 0;\n        char[] charArray = wordNetAll.charArray;\n        DoubleArrayTrie<Character>.LongestSearcher searcher = JapanesePersonDictionary.getSearcher(charArray);\n        int activeLine = 1;\n        int preOffset = 0;\n        while (searcher.next())\n        {\n            Character label = searcher.value;\n            int offset = searcher.begin;\n            String key = new String(charArray, offset, searcher.length);\n            if (preOffset != offset)\n            {\n                if (appendTimes > 1 && sbName.length() > 2) // \u65e5\u672c\u4eba\u540d\u6700\u77ed\u4e3a3\u5b57\n                {\n                    insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n                }\n                sbName.setLength(0);\n                appendTimes = 0;\n            }\n            if (appendTimes == 0)\n            {\n                if (label == JapanesePersonDictionary.X)\n                {\n                    sbName.append(key);\n                    ++appendTimes;\n                    activeLine = offset + 1;\n                }\n            }\n            else\n            {\n                if (label == JapanesePersonDictionary.M)\n                {\n                    sbName.append(key);\n                    ++appendTimes;\n                }\n                else\n                {\n                    if (appendTimes > 1 && sbName.length() > 2)\n                    {\n                        insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n                    }\n                    sbName.setLength(0);\n                    appendTimes = 0;\n                }\n            }\n            preOffset = offset + key.length();\n        }\n        if (sbName.length() > 0)\n        {\n            if (appendTimes > 1)\n            {\n                insertName(sbName.toString(), activeLine, wordNetOptimum, wordNetAll);\n            }\n        }\n    }", "code_tokens": ["public", "static", "void", "recognition", "(", "List", "<", "Vertex", ">", "segResult", ",", "WordNet", "wordNetOptimum", ",", "WordNet", "wordNetAll", ")", "{", "StringBuilder", "sbName", "=", "new", "StringBuilder", "(", ")", ";", "int", "appendTimes", "=", "0", ";", "char", "[", "]", "charArray", "=", "wordNetAll", ".", "charArray", ";", "DoubleArrayTrie", "<", "Character", ">", ".", "LongestSearcher", "searcher", "=", "JapanesePersonDictionary", ".", "getSearcher", "(", "charArray", ")", ";", "int", "activeLine", "=", "1", ";", "int", "preOffset", "=", "0", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "Character", "label", "=", "searcher", ".", "value", ";", "int", "offset", "=", "searcher", ".", "begin", ";", "String", "key", "=", "new", "String", "(", "charArray", ",", "offset", ",", "searcher", ".", "length", ")", ";", "if", "(", "preOffset", "!=", "offset", ")", "{", "if", "(", "appendTimes", ">", "1", "&&", "sbName", ".", "length", "(", ")", ">", "2", ")", "// \u65e5\u672c\u4eba\u540d\u6700\u77ed\u4e3a3\u5b57", "{", "insertName", "(", "sbName", ".", "toString", "(", ")", ",", "activeLine", ",", "wordNetOptimum", ",", "wordNetAll", ")", ";", "}", "sbName", ".", "setLength", "(", "0", ")", ";", "appendTimes", "=", "0", ";", "}", "if", "(", "appendTimes", "==", "0", ")", "{", "if", "(", "label", "==", "JapanesePersonDictionary", ".", "X", ")", "{", "sbName", ".", "append", "(", "key", ")", ";", "++", "appendTimes", ";", "activeLine", "=", "offset", "+", "1", ";", "}", "}", "else", "{", "if", "(", "label", "==", "JapanesePersonDictionary", ".", "M", ")", "{", "sbName", ".", "append", "(", "key", ")", ";", "++", "appendTimes", ";", "}", "else", "{", "if", "(", "appendTimes", ">", "1", "&&", "sbName", ".", "length", "(", ")", ">", "2", ")", "{", "insertName", "(", "sbName", ".", "toString", "(", ")", ",", "activeLine", ",", "wordNetOptimum", ",", "wordNetAll", ")", ";", "}", "sbName", ".", "setLength", "(", "0", ")", ";", "appendTimes", "=", "0", ";", "}", "}", "preOffset", "=", "offset", "+", "key", ".", "length", "(", ")", ";", "}", "if", "(", "sbName", ".", "length", "(", ")", ">", "0", ")", "{", "if", "(", "appendTimes", ">", "1", ")", "{", "insertName", "(", "sbName", ".", "toString", "(", ")", ",", "activeLine", ",", "wordNetOptimum", ",", "wordNetAll", ")", ";", "}", "}", "}"], "docstring": "\u6267\u884c\u8bc6\u522b\n\n@param segResult      \u7c97\u5206\u7ed3\u679c\n@param wordNetOptimum \u7c97\u5206\u7ed3\u679c\u5bf9\u5e94\u7684\u8bcd\u56fe\n@param wordNetAll     \u5168\u8bcd\u56fe", "docstring_tokens": ["\u6267\u884c\u8bc6\u522b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java#L43-L100", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java", "func_name": "JapanesePersonRecognition.isBadCase", "original_string": "public static boolean isBadCase(String name)\n    {\n        Character label = JapanesePersonDictionary.get(name);\n        if (label == null) return false;\n        return label.equals(JapanesePersonDictionary.A);\n    }", "language": "java", "code": "public static boolean isBadCase(String name)\n    {\n        Character label = JapanesePersonDictionary.get(name);\n        if (label == null) return false;\n        return label.equals(JapanesePersonDictionary.A);\n    }", "code_tokens": ["public", "static", "boolean", "isBadCase", "(", "String", "name", ")", "{", "Character", "label", "=", "JapanesePersonDictionary", ".", "get", "(", "name", ")", ";", "if", "(", "label", "==", "null", ")", "return", "false", ";", "return", "label", ".", "equals", "(", "JapanesePersonDictionary", ".", "A", ")", ";", "}"], "docstring": "\u662f\u5426\u662fbad case\n@param name\n@return", "docstring_tokens": ["\u662f\u5426\u662fbad", "case"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java#L107-L112", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java", "func_name": "JapanesePersonRecognition.insertName", "original_string": "private static void insertName(String name, int activeLine, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        if (isBadCase(name)) return;\n        wordNetOptimum.insert(activeLine, new Vertex(Predefine.TAG_PEOPLE, name, new CoreDictionary.Attribute(Nature.nrj), WORD_ID), wordNetAll);\n    }", "language": "java", "code": "private static void insertName(String name, int activeLine, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        if (isBadCase(name)) return;\n        wordNetOptimum.insert(activeLine, new Vertex(Predefine.TAG_PEOPLE, name, new CoreDictionary.Attribute(Nature.nrj), WORD_ID), wordNetAll);\n    }", "code_tokens": ["private", "static", "void", "insertName", "(", "String", "name", ",", "int", "activeLine", ",", "WordNet", "wordNetOptimum", ",", "WordNet", "wordNetAll", ")", "{", "if", "(", "isBadCase", "(", "name", ")", ")", "return", ";", "wordNetOptimum", ".", "insert", "(", "activeLine", ",", "new", "Vertex", "(", "Predefine", ".", "TAG_PEOPLE", ",", "name", ",", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "nrj", ")", ",", "WORD_ID", ")", ",", "wordNetAll", ")", ";", "}"], "docstring": "\u63d2\u5165\u65e5\u672c\u4eba\u540d\n@param name\n@param activeLine\n@param wordNetOptimum\n@param wordNetAll", "docstring_tokens": ["\u63d2\u5165\u65e5\u672c\u4eba\u540d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/JapanesePersonRecognition.java#L121-L125", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronTrainer.java", "func_name": "PerceptronTrainer.train", "original_string": "public Result train(String trainingFile, String developFile,\n                        String modelFile, final double compressRatio,\n                        final int maxIteration, final int threadNum) throws IOException\n    {\n        if (developFile == null)\n        {\n            developFile = trainingFile;\n        }\n        // \u52a0\u8f7d\u8bad\u7ec3\u8bed\u6599\n        TagSet tagSet = createTagSet();\n        MutableFeatureMap mutableFeatureMap = new MutableFeatureMap(tagSet);\n        ConsoleLogger logger = new ConsoleLogger();\n        logger.start(\"\u5f00\u59cb\u52a0\u8f7d\u8bad\u7ec3\u96c6...\\n\");\n        Instance[] instances = loadTrainInstances(trainingFile, mutableFeatureMap);\n        tagSet.lock();\n        logger.finish(\"\\n\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u5b9e\u4f8b\u4e00\u5171%d\u53e5\uff0c\u7279\u5f81\u603b\u6570%d\\n\", instances.length, mutableFeatureMap.size() * tagSet.size());\n\n        // \u5f00\u59cb\u8bad\u7ec3\n        ImmutableFeatureMap immutableFeatureMap = new ImmutableFeatureMap(mutableFeatureMap.featureIdMap, tagSet);\n        mutableFeatureMap = null;\n        double[] accuracy = null;\n\n        if (threadNum == 1)\n        {\n            AveragedPerceptron model;\n            model = new AveragedPerceptron(immutableFeatureMap);\n            final double[] total = new double[model.parameter.length];\n            final int[] timestamp = new int[model.parameter.length];\n            int current = 0;\n            for (int iter = 1; iter <= maxIteration; iter++)\n            {\n                Utility.shuffleArray(instances);\n                for (Instance instance : instances)\n                {\n                    ++current;\n                    int[] guessLabel = new int[instance.length()];\n                    model.viterbiDecode(instance, guessLabel);\n                    for (int i = 0; i < instance.length(); i++)\n                    {\n                        int[] featureVector = instance.getFeatureAt(i);\n                        int[] goldFeature = new int[featureVector.length];\n                        int[] predFeature = new int[featureVector.length];\n                        for (int j = 0; j < featureVector.length - 1; j++)\n                        {\n                            goldFeature[j] = featureVector[j] * tagSet.size() + instance.tagArray[i];\n                            predFeature[j] = featureVector[j] * tagSet.size() + guessLabel[i];\n                        }\n                        goldFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : instance.tagArray[i - 1]) * tagSet.size() + instance.tagArray[i];\n                        predFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : guessLabel[i - 1]) * tagSet.size() + guessLabel[i];\n                        model.update(goldFeature, predFeature, total, timestamp, current);\n                    }\n                }\n\n                // \u5728\u5f00\u53d1\u96c6\u4e0a\u6821\u9a8c\n                accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, model) : evaluate(developFile, model);\n                out.printf(\"Iter#%d - \", iter);\n                printAccuracy(accuracy);\n            }\n            // \u5e73\u5747\n            model.average(total, timestamp, current);\n            accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, model) : evaluate(developFile, model);\n            out.print(\"AP - \");\n            printAccuracy(accuracy);\n            logger.start(\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, modelFile);\n            model.save(modelFile, immutableFeatureMap.featureIdMap.entrySet(), compressRatio);\n            logger.finish(\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");\n            if (compressRatio == 0) return new Result(model, accuracy);\n        }\n        else\n        {\n            // \u591a\u7ebf\u7a0b\u7528Structure Perceptron\n            StructuredPerceptron[] models = new StructuredPerceptron[threadNum];\n            for (int i = 0; i < models.length; i++)\n            {\n                models[i] = new StructuredPerceptron(immutableFeatureMap);\n            }\n\n            TrainingWorker[] workers = new TrainingWorker[threadNum];\n            int job = instances.length / threadNum;\n            for (int iter = 1; iter <= maxIteration; iter++)\n            {\n                Utility.shuffleArray(instances);\n                try\n                {\n                    for (int i = 0; i < workers.length; i++)\n                    {\n                        workers[i] = new TrainingWorker(instances, i * job,\n                                                        i == workers.length - 1 ? instances.length : (i + 1) * job,\n                                                        models[i]);\n                        workers[i].start();\n                    }\n                    for (TrainingWorker worker : workers)\n                    {\n                        worker.join();\n                    }\n                    for (int j = 0; j < models[0].parameter.length; j++)\n                    {\n                        for (int i = 1; i < models.length; i++)\n                        {\n                            models[0].parameter[j] += models[i].parameter[j];\n                        }\n                        models[0].parameter[j] /= threadNum;\n                    }\n                    accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, models[0]) : evaluate(developFile, models[0]);\n                    out.printf(\"Iter#%d - \", iter);\n                    printAccuracy(accuracy);\n                }\n                catch (InterruptedException e)\n                {\n                    err.printf(\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff0c\u8bad\u7ec3\u5931\u8d25\\n\");\n                    e.printStackTrace();\n                    return null;\n                }\n            }\n            logger.start(\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, modelFile);\n            models[0].save(modelFile, immutableFeatureMap.featureIdMap.entrySet(), compressRatio, HanLP.Config.DEBUG);\n            logger.finish(\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");\n            if (compressRatio == 0) return new Result(models[0], accuracy);\n        }\n\n        LinearModel model = new LinearModel(modelFile);\n        if (compressRatio > 0)\n        {\n            accuracy = evaluate(developFile, model);\n            out.printf(\"\\n%.2f compressed model - \", compressRatio);\n            printAccuracy(accuracy);\n        }\n\n        return new Result(model, accuracy);\n    }", "language": "java", "code": "public Result train(String trainingFile, String developFile,\n                        String modelFile, final double compressRatio,\n                        final int maxIteration, final int threadNum) throws IOException\n    {\n        if (developFile == null)\n        {\n            developFile = trainingFile;\n        }\n        // \u52a0\u8f7d\u8bad\u7ec3\u8bed\u6599\n        TagSet tagSet = createTagSet();\n        MutableFeatureMap mutableFeatureMap = new MutableFeatureMap(tagSet);\n        ConsoleLogger logger = new ConsoleLogger();\n        logger.start(\"\u5f00\u59cb\u52a0\u8f7d\u8bad\u7ec3\u96c6...\\n\");\n        Instance[] instances = loadTrainInstances(trainingFile, mutableFeatureMap);\n        tagSet.lock();\n        logger.finish(\"\\n\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u5b9e\u4f8b\u4e00\u5171%d\u53e5\uff0c\u7279\u5f81\u603b\u6570%d\\n\", instances.length, mutableFeatureMap.size() * tagSet.size());\n\n        // \u5f00\u59cb\u8bad\u7ec3\n        ImmutableFeatureMap immutableFeatureMap = new ImmutableFeatureMap(mutableFeatureMap.featureIdMap, tagSet);\n        mutableFeatureMap = null;\n        double[] accuracy = null;\n\n        if (threadNum == 1)\n        {\n            AveragedPerceptron model;\n            model = new AveragedPerceptron(immutableFeatureMap);\n            final double[] total = new double[model.parameter.length];\n            final int[] timestamp = new int[model.parameter.length];\n            int current = 0;\n            for (int iter = 1; iter <= maxIteration; iter++)\n            {\n                Utility.shuffleArray(instances);\n                for (Instance instance : instances)\n                {\n                    ++current;\n                    int[] guessLabel = new int[instance.length()];\n                    model.viterbiDecode(instance, guessLabel);\n                    for (int i = 0; i < instance.length(); i++)\n                    {\n                        int[] featureVector = instance.getFeatureAt(i);\n                        int[] goldFeature = new int[featureVector.length];\n                        int[] predFeature = new int[featureVector.length];\n                        for (int j = 0; j < featureVector.length - 1; j++)\n                        {\n                            goldFeature[j] = featureVector[j] * tagSet.size() + instance.tagArray[i];\n                            predFeature[j] = featureVector[j] * tagSet.size() + guessLabel[i];\n                        }\n                        goldFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : instance.tagArray[i - 1]) * tagSet.size() + instance.tagArray[i];\n                        predFeature[featureVector.length - 1] = (i == 0 ? tagSet.bosId() : guessLabel[i - 1]) * tagSet.size() + guessLabel[i];\n                        model.update(goldFeature, predFeature, total, timestamp, current);\n                    }\n                }\n\n                // \u5728\u5f00\u53d1\u96c6\u4e0a\u6821\u9a8c\n                accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, model) : evaluate(developFile, model);\n                out.printf(\"Iter#%d - \", iter);\n                printAccuracy(accuracy);\n            }\n            // \u5e73\u5747\n            model.average(total, timestamp, current);\n            accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, model) : evaluate(developFile, model);\n            out.print(\"AP - \");\n            printAccuracy(accuracy);\n            logger.start(\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, modelFile);\n            model.save(modelFile, immutableFeatureMap.featureIdMap.entrySet(), compressRatio);\n            logger.finish(\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");\n            if (compressRatio == 0) return new Result(model, accuracy);\n        }\n        else\n        {\n            // \u591a\u7ebf\u7a0b\u7528Structure Perceptron\n            StructuredPerceptron[] models = new StructuredPerceptron[threadNum];\n            for (int i = 0; i < models.length; i++)\n            {\n                models[i] = new StructuredPerceptron(immutableFeatureMap);\n            }\n\n            TrainingWorker[] workers = new TrainingWorker[threadNum];\n            int job = instances.length / threadNum;\n            for (int iter = 1; iter <= maxIteration; iter++)\n            {\n                Utility.shuffleArray(instances);\n                try\n                {\n                    for (int i = 0; i < workers.length; i++)\n                    {\n                        workers[i] = new TrainingWorker(instances, i * job,\n                                                        i == workers.length - 1 ? instances.length : (i + 1) * job,\n                                                        models[i]);\n                        workers[i].start();\n                    }\n                    for (TrainingWorker worker : workers)\n                    {\n                        worker.join();\n                    }\n                    for (int j = 0; j < models[0].parameter.length; j++)\n                    {\n                        for (int i = 1; i < models.length; i++)\n                        {\n                            models[0].parameter[j] += models[i].parameter[j];\n                        }\n                        models[0].parameter[j] /= threadNum;\n                    }\n                    accuracy = trainingFile.equals(developFile) ? IOUtility.evaluate(instances, models[0]) : evaluate(developFile, models[0]);\n                    out.printf(\"Iter#%d - \", iter);\n                    printAccuracy(accuracy);\n                }\n                catch (InterruptedException e)\n                {\n                    err.printf(\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff0c\u8bad\u7ec3\u5931\u8d25\\n\");\n                    e.printStackTrace();\n                    return null;\n                }\n            }\n            logger.start(\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, modelFile);\n            models[0].save(modelFile, immutableFeatureMap.featureIdMap.entrySet(), compressRatio, HanLP.Config.DEBUG);\n            logger.finish(\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");\n            if (compressRatio == 0) return new Result(models[0], accuracy);\n        }\n\n        LinearModel model = new LinearModel(modelFile);\n        if (compressRatio > 0)\n        {\n            accuracy = evaluate(developFile, model);\n            out.printf(\"\\n%.2f compressed model - \", compressRatio);\n            printAccuracy(accuracy);\n        }\n\n        return new Result(model, accuracy);\n    }", "code_tokens": ["public", "Result", "train", "(", "String", "trainingFile", ",", "String", "developFile", ",", "String", "modelFile", ",", "final", "double", "compressRatio", ",", "final", "int", "maxIteration", ",", "final", "int", "threadNum", ")", "throws", "IOException", "{", "if", "(", "developFile", "==", "null", ")", "{", "developFile", "=", "trainingFile", ";", "}", "// \u52a0\u8f7d\u8bad\u7ec3\u8bed\u6599", "TagSet", "tagSet", "=", "createTagSet", "(", ")", ";", "MutableFeatureMap", "mutableFeatureMap", "=", "new", "MutableFeatureMap", "(", "tagSet", ")", ";", "ConsoleLogger", "logger", "=", "new", "ConsoleLogger", "(", ")", ";", "logger", ".", "start", "(", "\"\u5f00\u59cb\u52a0\u8f7d\u8bad\u7ec3\u96c6...\\n\");", "", "", "Instance", "[", "]", "instances", "=", "loadTrainInstances", "(", "trainingFile", ",", "mutableFeatureMap", ")", ";", "tagSet", ".", "lock", "(", ")", ";", "logger", ".", "finish", "(", "\"\\n\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u5b9e\u4f8b\u4e00\u5171%d\u53e5\uff0c\u7279\u5f81\u603b\u6570%d\\n\", instances.length, mutableFea", "t", "reMap.siz", "e", "() * t", "a", "Set.size());", "", "", "", "", "", "", "", "", "", "", "", "", "// \u5f00\u59cb\u8bad\u7ec3", "ImmutableFeatureMap", "immutableFeatureMap", "=", "new", "ImmutableFeatureMap", "(", "mutableFeatureMap", ".", "featureIdMap", ",", "tagSet", ")", ";", "mutableFeatureMap", "=", "null", ";", "double", "[", "]", "accuracy", "=", "null", ";", "if", "(", "threadNum", "==", "1", ")", "{", "AveragedPerceptron", "model", ";", "model", "=", "new", "AveragedPerceptron", "(", "immutableFeatureMap", ")", ";", "final", "double", "[", "]", "total", "=", "new", "double", "[", "model", ".", "parameter", ".", "length", "]", ";", "final", "int", "[", "]", "timestamp", "=", "new", "int", "[", "model", ".", "parameter", ".", "length", "]", ";", "int", "current", "=", "0", ";", "for", "(", "int", "iter", "=", "1", ";", "iter", "<=", "maxIteration", ";", "iter", "++", ")", "{", "Utility", ".", "shuffleArray", "(", "instances", ")", ";", "for", "(", "Instance", "instance", ":", "instances", ")", "{", "++", "current", ";", "int", "[", "]", "guessLabel", "=", "new", "int", "[", "instance", ".", "length", "(", ")", "]", ";", "model", ".", "viterbiDecode", "(", "instance", ",", "guessLabel", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "instance", ".", "length", "(", ")", ";", "i", "++", ")", "{", "int", "[", "]", "featureVector", "=", "instance", ".", "getFeatureAt", "(", "i", ")", ";", "int", "[", "]", "goldFeature", "=", "new", "int", "[", "featureVector", ".", "length", "]", ";", "int", "[", "]", "predFeature", "=", "new", "int", "[", "featureVector", ".", "length", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "featureVector", ".", "length", "-", "1", ";", "j", "++", ")", "{", "goldFeature", "[", "j", "]", "=", "featureVector", "[", "j", "]", "*", "tagSet", ".", "size", "(", ")", "+", "instance", ".", "tagArray", "[", "i", "]", ";", "predFeature", "[", "j", "]", "=", "featureVector", "[", "j", "]", "*", "tagSet", ".", "size", "(", ")", "+", "guessLabel", "[", "i", "]", ";", "}", "goldFeature", "[", "featureVector", ".", "length", "-", "1", "]", "=", "(", "i", "==", "0", "?", "tagSet", ".", "bosId", "(", ")", ":", "instance", ".", "tagArray", "[", "i", "-", "1", "]", ")", "*", "tagSet", ".", "size", "(", ")", "+", "instance", ".", "tagArray", "[", "i", "]", ";", "predFeature", "[", "featureVector", ".", "length", "-", "1", "]", "=", "(", "i", "==", "0", "?", "tagSet", ".", "bosId", "(", ")", ":", "guessLabel", "[", "i", "-", "1", "]", ")", "*", "tagSet", ".", "size", "(", ")", "+", "guessLabel", "[", "i", "]", ";", "model", ".", "update", "(", "goldFeature", ",", "predFeature", ",", "total", ",", "timestamp", ",", "current", ")", ";", "}", "}", "// \u5728\u5f00\u53d1\u96c6\u4e0a\u6821\u9a8c", "accuracy", "=", "trainingFile", ".", "equals", "(", "developFile", ")", "?", "IOUtility", ".", "evaluate", "(", "instances", ",", "model", ")", ":", "evaluate", "(", "developFile", ",", "model", ")", ";", "out", ".", "printf", "(", "\"Iter#%d - \"", ",", "iter", ")", ";", "printAccuracy", "(", "accuracy", ")", ";", "}", "// \u5e73\u5747", "model", ".", "average", "(", "total", ",", "timestamp", ",", "current", ")", ";", "accuracy", "=", "trainingFile", ".", "equals", "(", "developFile", ")", "?", "IOUtility", ".", "evaluate", "(", "instances", ",", "model", ")", ":", "evaluate", "(", "developFile", ",", "model", ")", ";", "out", ".", "print", "(", "\"AP - \"", ")", ";", "printAccuracy", "(", "accuracy", ")", ";", "logger", ".", "start", "(", "\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, m", "o", "elFile);", "", "", "", "", "model", ".", "save", "(", "modelFile", ",", "immutableFeatureMap", ".", "featureIdMap", ".", "entrySet", "(", ")", ",", "compressRatio", ")", ";", "logger", ".", "finish", "(", "\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");", "", "", "if", "(", "compressRatio", "==", "0", ")", "return", "new", "Result", "(", "model", ",", "accuracy", ")", ";", "}", "else", "{", "// \u591a\u7ebf\u7a0b\u7528Structure Perceptron", "StructuredPerceptron", "[", "]", "models", "=", "new", "StructuredPerceptron", "[", "threadNum", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "models", ".", "length", ";", "i", "++", ")", "{", "models", "[", "i", "]", "=", "new", "StructuredPerceptron", "(", "immutableFeatureMap", ")", ";", "}", "TrainingWorker", "[", "]", "workers", "=", "new", "TrainingWorker", "[", "threadNum", "]", ";", "int", "job", "=", "instances", ".", "length", "/", "threadNum", ";", "for", "(", "int", "iter", "=", "1", ";", "iter", "<=", "maxIteration", ";", "iter", "++", ")", "{", "Utility", ".", "shuffleArray", "(", "instances", ")", ";", "try", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "workers", ".", "length", ";", "i", "++", ")", "{", "workers", "[", "i", "]", "=", "new", "TrainingWorker", "(", "instances", ",", "i", "*", "job", ",", "i", "==", "workers", ".", "length", "-", "1", "?", "instances", ".", "length", ":", "(", "i", "+", "1", ")", "*", "job", ",", "models", "[", "i", "]", ")", ";", "workers", "[", "i", "]", ".", "start", "(", ")", ";", "}", "for", "(", "TrainingWorker", "worker", ":", "workers", ")", "{", "worker", ".", "join", "(", ")", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "models", "[", "0", "]", ".", "parameter", ".", "length", ";", "j", "++", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "models", ".", "length", ";", "i", "++", ")", "{", "models", "[", "0", "]", ".", "parameter", "[", "j", "]", "+=", "models", "[", "i", "]", ".", "parameter", "[", "j", "]", ";", "}", "models", "[", "0", "]", ".", "parameter", "[", "j", "]", "/=", "threadNum", ";", "}", "accuracy", "=", "trainingFile", ".", "equals", "(", "developFile", ")", "?", "IOUtility", ".", "evaluate", "(", "instances", ",", "models", "[", "0", "]", ")", ":", "evaluate", "(", "developFile", ",", "models", "[", "0", "]", ")", ";", "out", ".", "printf", "(", "\"Iter#%d - \"", ",", "iter", ")", ";", "printAccuracy", "(", "accuracy", ")", ";", "}", "catch", "(", "InterruptedException", "e", ")", "{", "err", ".", "printf", "(", "\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff0c\u8bad\u7ec3\u5931\u8d25\\n\");", "", "", "e", ".", "printStackTrace", "(", ")", ";", "return", "null", ";", "}", "}", "logger", ".", "start", "(", "\"\u4ee5\u538b\u7f29\u6bd4 %.2f \u4fdd\u5b58\u6a21\u578b\u5230 %s ... \", compressRatio, m", "o", "elFile);", "", "", "", "", "models", "[", "0", "]", ".", "save", "(", "modelFile", ",", "immutableFeatureMap", ".", "featureIdMap", ".", "entrySet", "(", ")", ",", "compressRatio", ",", "HanLP", ".", "Config", ".", "DEBUG", ")", ";", "logger", ".", "finish", "(", "\" \u4fdd\u5b58\u5b8c\u6bd5\\n\");", "", "", "if", "(", "compressRatio", "==", "0", ")", "return", "new", "Result", "(", "models", "[", "0", "]", ",", "accuracy", ")", ";", "}", "LinearModel", "model", "=", "new", "LinearModel", "(", "modelFile", ")", ";", "if", "(", "compressRatio", ">", "0", ")", "{", "accuracy", "=", "evaluate", "(", "developFile", ",", "model", ")", ";", "out", ".", "printf", "(", "\"\\n%.2f compressed model - \"", ",", "compressRatio", ")", ";", "printAccuracy", "(", "accuracy", ")", ";", "}", "return", "new", "Result", "(", "model", ",", "accuracy", ")", ";", "}"], "docstring": "\u8bad\u7ec3\n\n@param trainingFile  \u8bad\u7ec3\u96c6\n@param developFile   \u5f00\u53d1\u96c6\n@param modelFile     \u6a21\u578b\u4fdd\u5b58\u8def\u5f84\n@param compressRatio \u538b\u7f29\u6bd4\n@param maxIteration  \u6700\u5927\u8fed\u4ee3\u6b21\u6570\n@param threadNum     \u7ebf\u7a0b\u6570\n@return \u4e00\u4e2a\u5305\u542b\u6a21\u578b\u548c\u7cbe\u5ea6\u7684\u7ed3\u6784\n@throws IOException", "docstring_tokens": ["\u8bad\u7ec3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronTrainer.java#L109-L238", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/pipe/LexicalAnalyzerPipeline.java", "func_name": "LexicalAnalyzerPipeline.getAnalyzer", "original_string": "public LexicalAnalyzer getAnalyzer()\n    {\n        for (Pipe<List<IWord>, List<IWord>> pipe : this)\n        {\n            if (pipe instanceof LexicalAnalyzerPipe)\n            {\n                return ((LexicalAnalyzerPipe) pipe).analyzer;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public LexicalAnalyzer getAnalyzer()\n    {\n        for (Pipe<List<IWord>, List<IWord>> pipe : this)\n        {\n            if (pipe instanceof LexicalAnalyzerPipe)\n            {\n                return ((LexicalAnalyzerPipe) pipe).analyzer;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "LexicalAnalyzer", "getAnalyzer", "(", ")", "{", "for", "(", "Pipe", "<", "List", "<", "IWord", ">", ",", "List", "<", "IWord", ">", ">", "pipe", ":", "this", ")", "{", "if", "(", "pipe", "instanceof", "LexicalAnalyzerPipe", ")", "{", "return", "(", "(", "LexicalAnalyzerPipe", ")", "pipe", ")", ".", "analyzer", ";", "}", "}", "return", "null", ";", "}"], "docstring": "\u83b7\u53d6\u4ee3\u7406\u7684\u8bcd\u6cd5\u5206\u6790\u5668\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u4ee3\u7406\u7684\u8bcd\u6cd5\u5206\u6790\u5668"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/pipe/LexicalAnalyzerPipeline.java#L67-L77", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/phrase/MutualInformationEntropyPhraseExtractor.java", "func_name": "MutualInformationEntropyPhraseExtractor.extract", "original_string": "public static List<String> extract(String text, int size)\n    {\n        IPhraseExtractor extractor = new MutualInformationEntropyPhraseExtractor();\n        return extractor.extractPhrase(text, size);\n    }", "language": "java", "code": "public static List<String> extract(String text, int size)\n    {\n        IPhraseExtractor extractor = new MutualInformationEntropyPhraseExtractor();\n        return extractor.extractPhrase(text, size);\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "extract", "(", "String", "text", ",", "int", "size", ")", "{", "IPhraseExtractor", "extractor", "=", "new", "MutualInformationEntropyPhraseExtractor", "(", ")", ";", "return", "extractor", ".", "extractPhrase", "(", "text", ",", "size", ")", ";", "}"], "docstring": "\u4e00\u53e5\u8bdd\u63d0\u53d6\n@param text\n@param size\n@return", "docstring_tokens": ["\u4e00\u53e5\u8bdd\u63d0\u53d6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/phrase/MutualInformationEntropyPhraseExtractor.java#L101-L105", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java", "func_name": "MDAGNode.getTransitionPathNodes", "original_string": "public Stack<MDAGNode> getTransitionPathNodes(String str)\n    {\n        Stack<MDAGNode> nodeStack = new Stack<MDAGNode>();\n        \n        MDAGNode currentNode = this;\n        int numberOfChars = str.length();\n        \n        //Iteratively _transition through the MDAG using the chars in str,\n        //putting each encountered node in nodeStack\n        for(int i = 0; i < numberOfChars && currentNode != null; i++)\n        {\n            currentNode = currentNode.transition(str.charAt(i));\n            nodeStack.add(currentNode);\n        }\n        /////\n         \n        return nodeStack;\n    }", "language": "java", "code": "public Stack<MDAGNode> getTransitionPathNodes(String str)\n    {\n        Stack<MDAGNode> nodeStack = new Stack<MDAGNode>();\n        \n        MDAGNode currentNode = this;\n        int numberOfChars = str.length();\n        \n        //Iteratively _transition through the MDAG using the chars in str,\n        //putting each encountered node in nodeStack\n        for(int i = 0; i < numberOfChars && currentNode != null; i++)\n        {\n            currentNode = currentNode.transition(str.charAt(i));\n            nodeStack.add(currentNode);\n        }\n        /////\n         \n        return nodeStack;\n    }", "code_tokens": ["public", "Stack", "<", "MDAGNode", ">", "getTransitionPathNodes", "(", "String", "str", ")", "{", "Stack", "<", "MDAGNode", ">", "nodeStack", "=", "new", "Stack", "<", "MDAGNode", ">", "(", ")", ";", "MDAGNode", "currentNode", "=", "this", ";", "int", "numberOfChars", "=", "str", ".", "length", "(", ")", ";", "//Iteratively _transition through the MDAG using the chars in str,", "//putting each encountered node in nodeStack", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numberOfChars", "&&", "currentNode", "!=", "null", ";", "i", "++", ")", "{", "currentNode", "=", "currentNode", ".", "transition", "(", "str", ".", "charAt", "(", "i", ")", ")", ";", "nodeStack", ".", "add", "(", "currentNode", ")", ";", "}", "/////", "return", "nodeStack", ";", "}"], "docstring": "\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8282\u70b9<br>\nRetrieves the nodes in the _transition path starting\nfrom this node corresponding to a given String .\n\n@param str       a String corresponding to a _transition path starting from this node\n@return          a Stack of MDAGNodes containing the nodes in the _transition path\ndenoted by {@code str}, in the order they are encountered in during transitioning", "docstring_tokens": ["\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8282\u70b9<br", ">", "Retrieves", "the", "nodes", "in", "the", "_transition", "path", "starting", "from", "this", "node", "corresponding", "to", "a", "given", "String", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java#L332-L349", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java", "func_name": "MDAGNode.decrementTargetIncomingTransitionCounts", "original_string": "public void decrementTargetIncomingTransitionCounts()\n    {\n        for(Entry<Character, MDAGNode> transitionKeyValuePair: outgoingTransitionTreeMap.entrySet())\n            transitionKeyValuePair.getValue().incomingTransitionCount--;\n    }", "language": "java", "code": "public void decrementTargetIncomingTransitionCounts()\n    {\n        for(Entry<Character, MDAGNode> transitionKeyValuePair: outgoingTransitionTreeMap.entrySet())\n            transitionKeyValuePair.getValue().incomingTransitionCount--;\n    }", "code_tokens": ["public", "void", "decrementTargetIncomingTransitionCounts", "(", ")", "{", "for", "(", "Entry", "<", "Character", ",", "MDAGNode", ">", "transitionKeyValuePair", ":", "outgoingTransitionTreeMap", ".", "entrySet", "(", ")", ")", "transitionKeyValuePair", ".", "getValue", "(", ")", ".", "incomingTransitionCount", "--", ";", "}"], "docstring": "\u672c\u72b6\u6001\u7684\u76ee\u6807\u72b6\u6001\u4eec\u7684\u5165\u5ea6\u51cf\u4e00\nDecrements (by 1) the incoming _transition counts of all of the nodes\nthat are targets of outgoing transitions from this node.", "docstring_tokens": ["\u672c\u72b6\u6001\u7684\u76ee\u6807\u72b6\u6001\u4eec\u7684\u5165\u5ea6\u51cf\u4e00", "Decrements", "(", "by", "1", ")", "the", "incoming", "_transition", "counts", "of", "all", "of", "the", "nodes", "that", "are", "targets", "of", "outgoing", "transitions", "from", "this", "node", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java#L371-L375", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java", "func_name": "MDAGNode.reassignOutgoingTransition", "original_string": "public void reassignOutgoingTransition(char letter, MDAGNode oldTargetNode, MDAGNode newTargetNode)\n    {\n        oldTargetNode.incomingTransitionCount--;\n        newTargetNode.incomingTransitionCount++;\n        \n        outgoingTransitionTreeMap.put(letter, newTargetNode);\n    }", "language": "java", "code": "public void reassignOutgoingTransition(char letter, MDAGNode oldTargetNode, MDAGNode newTargetNode)\n    {\n        oldTargetNode.incomingTransitionCount--;\n        newTargetNode.incomingTransitionCount++;\n        \n        outgoingTransitionTreeMap.put(letter, newTargetNode);\n    }", "code_tokens": ["public", "void", "reassignOutgoingTransition", "(", "char", "letter", ",", "MDAGNode", "oldTargetNode", ",", "MDAGNode", "newTargetNode", ")", "{", "oldTargetNode", ".", "incomingTransitionCount", "--", ";", "newTargetNode", ".", "incomingTransitionCount", "++", ";", "outgoingTransitionTreeMap", ".", "put", "(", "letter", ",", "newTargetNode", ")", ";", "}"], "docstring": "\u91cd\u65b0\u8bbe\u7f6e\u8f6c\u79fb\u72b6\u6001\u51fd\u6570\u7684\u76ee\u6807\nReassigns the target node of one of this node's outgoing transitions.\n\n@param letter            the char which labels the outgoing _transition of interest\n@param oldTargetNode     the MDAGNode that is currently the target of the _transition of interest\n@param newTargetNode     the MDAGNode that is to be the target of the _transition of interest", "docstring_tokens": ["\u91cd\u65b0\u8bbe\u7f6e\u8f6c\u79fb\u72b6\u6001\u51fd\u6570\u7684\u76ee\u6807", "Reassigns", "the", "target", "node", "of", "one", "of", "this", "node", "s", "outgoing", "transitions", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java#L387-L393", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java", "func_name": "MDAGNode.addOutgoingTransition", "original_string": "public MDAGNode addOutgoingTransition(char letter, boolean targetAcceptStateStatus)\n    {\n        MDAGNode newTargetNode = new MDAGNode(targetAcceptStateStatus);\n        newTargetNode.incomingTransitionCount++;\n        \n        outgoingTransitionTreeMap.put(letter, newTargetNode);\n        return newTargetNode;\n    }", "language": "java", "code": "public MDAGNode addOutgoingTransition(char letter, boolean targetAcceptStateStatus)\n    {\n        MDAGNode newTargetNode = new MDAGNode(targetAcceptStateStatus);\n        newTargetNode.incomingTransitionCount++;\n        \n        outgoingTransitionTreeMap.put(letter, newTargetNode);\n        return newTargetNode;\n    }", "code_tokens": ["public", "MDAGNode", "addOutgoingTransition", "(", "char", "letter", ",", "boolean", "targetAcceptStateStatus", ")", "{", "MDAGNode", "newTargetNode", "=", "new", "MDAGNode", "(", "targetAcceptStateStatus", ")", ";", "newTargetNode", ".", "incomingTransitionCount", "++", ";", "outgoingTransitionTreeMap", ".", "put", "(", "letter", ",", "newTargetNode", ")", ";", "return", "newTargetNode", ";", "}"], "docstring": "\u65b0\u5efa\u4e00\u4e2a\u8f6c\u79fb\u76ee\u6807<br>\nCreates an outgoing _transition labeled with a\ngiven char that has a new node as its target.\n\n@param letter                        a char representing the desired label of the _transition\n@param targetAcceptStateStatus       a boolean representing to-be-created _transition target node's accept status\n@return                              the (newly created) MDAGNode that is the target of the created _transition", "docstring_tokens": ["\u65b0\u5efa\u4e00\u4e2a\u8f6c\u79fb\u76ee\u6807<br", ">", "Creates", "an", "outgoing", "_transition", "labeled", "with", "a", "given", "char", "that", "has", "a", "new", "node", "as", "its", "target", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java#L406-L413", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java", "func_name": "MDAGNode.haveSameTransitions", "original_string": "public static boolean haveSameTransitions(MDAGNode node1, MDAGNode node2)\n    {\n        TreeMap<Character, MDAGNode> outgoingTransitionTreeMap1 = node1.outgoingTransitionTreeMap;\n        TreeMap<Character, MDAGNode> outgoingTransitionTreeMap2 = node2.outgoingTransitionTreeMap;\n        \n        if(outgoingTransitionTreeMap1.size() == outgoingTransitionTreeMap2.size())\n        {\n            //For each _transition in outgoingTransitionTreeMap1, get the identically lableed _transition\n            //in outgoingTransitionTreeMap2 (if present), and test the equality of the transitions' target nodes\n            for(Entry<Character, MDAGNode> transitionKeyValuePair : outgoingTransitionTreeMap1.entrySet())\n            {\n                Character currentCharKey = transitionKeyValuePair.getKey();\n                MDAGNode currentTargetNode = transitionKeyValuePair.getValue();\n                \n                if(!outgoingTransitionTreeMap2.containsKey(currentCharKey) || !outgoingTransitionTreeMap2.get(currentCharKey).equals(currentTargetNode))\n                    return false;\n            }\n            /////\n        }\n        else\n            return false;\n        \n        return true;\n    }", "language": "java", "code": "public static boolean haveSameTransitions(MDAGNode node1, MDAGNode node2)\n    {\n        TreeMap<Character, MDAGNode> outgoingTransitionTreeMap1 = node1.outgoingTransitionTreeMap;\n        TreeMap<Character, MDAGNode> outgoingTransitionTreeMap2 = node2.outgoingTransitionTreeMap;\n        \n        if(outgoingTransitionTreeMap1.size() == outgoingTransitionTreeMap2.size())\n        {\n            //For each _transition in outgoingTransitionTreeMap1, get the identically lableed _transition\n            //in outgoingTransitionTreeMap2 (if present), and test the equality of the transitions' target nodes\n            for(Entry<Character, MDAGNode> transitionKeyValuePair : outgoingTransitionTreeMap1.entrySet())\n            {\n                Character currentCharKey = transitionKeyValuePair.getKey();\n                MDAGNode currentTargetNode = transitionKeyValuePair.getValue();\n                \n                if(!outgoingTransitionTreeMap2.containsKey(currentCharKey) || !outgoingTransitionTreeMap2.get(currentCharKey).equals(currentTargetNode))\n                    return false;\n            }\n            /////\n        }\n        else\n            return false;\n        \n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "haveSameTransitions", "(", "MDAGNode", "node1", ",", "MDAGNode", "node2", ")", "{", "TreeMap", "<", "Character", ",", "MDAGNode", ">", "outgoingTransitionTreeMap1", "=", "node1", ".", "outgoingTransitionTreeMap", ";", "TreeMap", "<", "Character", ",", "MDAGNode", ">", "outgoingTransitionTreeMap2", "=", "node2", ".", "outgoingTransitionTreeMap", ";", "if", "(", "outgoingTransitionTreeMap1", ".", "size", "(", ")", "==", "outgoingTransitionTreeMap2", ".", "size", "(", ")", ")", "{", "//For each _transition in outgoingTransitionTreeMap1, get the identically lableed _transition", "//in outgoingTransitionTreeMap2 (if present), and test the equality of the transitions' target nodes", "for", "(", "Entry", "<", "Character", ",", "MDAGNode", ">", "transitionKeyValuePair", ":", "outgoingTransitionTreeMap1", ".", "entrySet", "(", ")", ")", "{", "Character", "currentCharKey", "=", "transitionKeyValuePair", ".", "getKey", "(", ")", ";", "MDAGNode", "currentTargetNode", "=", "transitionKeyValuePair", ".", "getValue", "(", ")", ";", "if", "(", "!", "outgoingTransitionTreeMap2", ".", "containsKey", "(", "currentCharKey", ")", "||", "!", "outgoingTransitionTreeMap2", ".", "get", "(", "currentCharKey", ")", ".", "equals", "(", "currentTargetNode", ")", ")", "return", "false", ";", "}", "/////", "}", "else", "return", "false", ";", "return", "true", ";", "}"], "docstring": "\u662f\u5426\u542b\u6709\u76f8\u540c\u7684\u8f6c\u79fb\u51fd\u6570\n@param node1\n@param node2\n@return", "docstring_tokens": ["\u662f\u5426\u542b\u6709\u76f8\u540c\u7684\u8f6c\u79fb\u51fd\u6570"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGNode.java#L451-L474", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java", "func_name": "CharacterBasedGenerativeModel.learn", "original_string": "public void learn(List<Word> wordList)\n    {\n        LinkedList<char[]> sentence = new LinkedList<char[]>();\n        for (IWord iWord : wordList)\n        {\n            String word = iWord.getValue();\n            if (word.length() == 1)\n            {\n                sentence.add(new char[]{word.charAt(0), 's'});\n            }\n            else\n            {\n                sentence.add(new char[]{word.charAt(0), 'b'});\n                for (int i = 1; i < word.length() - 1; ++i)\n                {\n                    sentence.add(new char[]{word.charAt(i), 'm'});\n                }\n                sentence.add(new char[]{word.charAt(word.length() - 1), 'e'});\n            }\n        }\n        // \u8f6c\u6362\u5b8c\u6bd5\uff0c\u5f00\u59cb\u7edf\u8ba1\n        char[][] now = new char[3][];   // \u5b9a\u957f3\u7684\u961f\u5217\n        now[1] = bos;\n        now[2] = bos;\n        tf.add(1, bos, bos);\n        tf.add(2, bos);\n        for (char[] i : sentence)\n        {\n            System.arraycopy(now, 1, now, 0, 2);\n            now[2] = i;\n            tf.add(1, i);   // uni\n            tf.add(1, now[1], now[2]);   // bi\n            tf.add(1, now);   // tri\n        }\n    }", "language": "java", "code": "public void learn(List<Word> wordList)\n    {\n        LinkedList<char[]> sentence = new LinkedList<char[]>();\n        for (IWord iWord : wordList)\n        {\n            String word = iWord.getValue();\n            if (word.length() == 1)\n            {\n                sentence.add(new char[]{word.charAt(0), 's'});\n            }\n            else\n            {\n                sentence.add(new char[]{word.charAt(0), 'b'});\n                for (int i = 1; i < word.length() - 1; ++i)\n                {\n                    sentence.add(new char[]{word.charAt(i), 'm'});\n                }\n                sentence.add(new char[]{word.charAt(word.length() - 1), 'e'});\n            }\n        }\n        // \u8f6c\u6362\u5b8c\u6bd5\uff0c\u5f00\u59cb\u7edf\u8ba1\n        char[][] now = new char[3][];   // \u5b9a\u957f3\u7684\u961f\u5217\n        now[1] = bos;\n        now[2] = bos;\n        tf.add(1, bos, bos);\n        tf.add(2, bos);\n        for (char[] i : sentence)\n        {\n            System.arraycopy(now, 1, now, 0, 2);\n            now[2] = i;\n            tf.add(1, i);   // uni\n            tf.add(1, now[1], now[2]);   // bi\n            tf.add(1, now);   // tri\n        }\n    }", "code_tokens": ["public", "void", "learn", "(", "List", "<", "Word", ">", "wordList", ")", "{", "LinkedList", "<", "char", "[", "]", ">", "sentence", "=", "new", "LinkedList", "<", "char", "[", "]", ">", "(", ")", ";", "for", "(", "IWord", "iWord", ":", "wordList", ")", "{", "String", "word", "=", "iWord", ".", "getValue", "(", ")", ";", "if", "(", "word", ".", "length", "(", ")", "==", "1", ")", "{", "sentence", ".", "add", "(", "new", "char", "[", "]", "{", "word", ".", "charAt", "(", "0", ")", ",", "'", "'", "}", ")", ";", "}", "else", "{", "sentence", ".", "add", "(", "new", "char", "[", "]", "{", "word", ".", "charAt", "(", "0", ")", ",", "'", "'", "}", ")", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "word", ".", "length", "(", ")", "-", "1", ";", "++", "i", ")", "{", "sentence", ".", "add", "(", "new", "char", "[", "]", "{", "word", ".", "charAt", "(", "i", ")", ",", "'", "'", "}", ")", ";", "}", "sentence", ".", "add", "(", "new", "char", "[", "]", "{", "word", ".", "charAt", "(", "word", ".", "length", "(", ")", "-", "1", ")", ",", "'", "'", "}", ")", ";", "}", "}", "// \u8f6c\u6362\u5b8c\u6bd5\uff0c\u5f00\u59cb\u7edf\u8ba1", "char", "[", "]", "[", "]", "now", "=", "new", "char", "[", "3", "]", "[", "", "]", ";", "// \u5b9a\u957f3\u7684\u961f\u5217", "now", "[", "1", "]", "=", "bos", ";", "now", "[", "2", "]", "=", "bos", ";", "tf", ".", "add", "(", "1", ",", "bos", ",", "bos", ")", ";", "tf", ".", "add", "(", "2", ",", "bos", ")", ";", "for", "(", "char", "[", "]", "i", ":", "sentence", ")", "{", "System", ".", "arraycopy", "(", "now", ",", "1", ",", "now", ",", "0", ",", "2", ")", ";", "now", "[", "2", "]", "=", "i", ";", "tf", ".", "add", "(", "1", ",", "i", ")", ";", "// uni", "tf", ".", "add", "(", "1", ",", "now", "[", "1", "]", ",", "now", "[", "2", "]", ")", ";", "// bi", "tf", ".", "add", "(", "1", ",", "now", ")", ";", "// tri", "}", "}"], "docstring": "\u8ba9\u6a21\u578b\u89c2\u6d4b\u4e00\u4e2a\u53e5\u5b50\n@param wordList", "docstring_tokens": ["\u8ba9\u6a21\u578b\u89c2\u6d4b\u4e00\u4e2a\u53e5\u5b50"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java#L78-L112", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java", "func_name": "CharacterBasedGenerativeModel.train", "original_string": "public void train()\n    {\n        double tl1 = 0.0;\n        double tl2 = 0.0;\n        double tl3 = 0.0;\n        for (String key : tf.d.keySet())\n        {\n            if (key.length() != 6) continue;    // tri samples\n            char[][] now = new char[][]\n                    {\n                            {key.charAt(0), key.charAt(1)},\n                            {key.charAt(2), key.charAt(3)},\n                            {key.charAt(4), key.charAt(5)},\n                    };\n            double c3 = div(tf.get(now) - 1, tf.get(now[0], now[1]) - 1);\n            double c2 = div(tf.get(now[1], now[2]) - 1, tf.get(now[1]) - 1);\n            double c1 = div(tf.get(now[2]) - 1, tf.getsum() - 1);\n            if (c3 >= c1 && c3 >= c2)\n                tl3 += tf.get(key.toCharArray());\n            else if (c2 >= c1 && c2 >= c3)\n                tl2 += tf.get(key.toCharArray());\n            else if (c1 >= c2 && c1 >= c3)\n                tl1 += tf.get(key.toCharArray());\n        }\n\n        l1 = div(tl1, tl1 + tl2 + tl3);\n        l2 = div(tl2, tl1 + tl2 + tl3);\n        l3 = div(tl3, tl1 + tl2 + tl3);\n    }", "language": "java", "code": "public void train()\n    {\n        double tl1 = 0.0;\n        double tl2 = 0.0;\n        double tl3 = 0.0;\n        for (String key : tf.d.keySet())\n        {\n            if (key.length() != 6) continue;    // tri samples\n            char[][] now = new char[][]\n                    {\n                            {key.charAt(0), key.charAt(1)},\n                            {key.charAt(2), key.charAt(3)},\n                            {key.charAt(4), key.charAt(5)},\n                    };\n            double c3 = div(tf.get(now) - 1, tf.get(now[0], now[1]) - 1);\n            double c2 = div(tf.get(now[1], now[2]) - 1, tf.get(now[1]) - 1);\n            double c1 = div(tf.get(now[2]) - 1, tf.getsum() - 1);\n            if (c3 >= c1 && c3 >= c2)\n                tl3 += tf.get(key.toCharArray());\n            else if (c2 >= c1 && c2 >= c3)\n                tl2 += tf.get(key.toCharArray());\n            else if (c1 >= c2 && c1 >= c3)\n                tl1 += tf.get(key.toCharArray());\n        }\n\n        l1 = div(tl1, tl1 + tl2 + tl3);\n        l2 = div(tl2, tl1 + tl2 + tl3);\n        l3 = div(tl3, tl1 + tl2 + tl3);\n    }", "code_tokens": ["public", "void", "train", "(", ")", "{", "double", "tl1", "=", "0.0", ";", "double", "tl2", "=", "0.0", ";", "double", "tl3", "=", "0.0", ";", "for", "(", "String", "key", ":", "tf", ".", "d", ".", "keySet", "(", ")", ")", "{", "if", "(", "key", ".", "length", "(", ")", "!=", "6", ")", "continue", ";", "// tri samples", "char", "[", "]", "[", "]", "now", "=", "new", "char", "[", "]", "[", "]", "{", "{", "key", ".", "charAt", "(", "0", ")", ",", "key", ".", "charAt", "(", "1", ")", "}", ",", "{", "key", ".", "charAt", "(", "2", ")", ",", "key", ".", "charAt", "(", "3", ")", "}", ",", "{", "key", ".", "charAt", "(", "4", ")", ",", "key", ".", "charAt", "(", "5", ")", "}", ",", "}", ";", "double", "c3", "=", "div", "(", "tf", ".", "get", "(", "now", ")", "-", "1", ",", "tf", ".", "get", "(", "now", "[", "0", "]", ",", "now", "[", "1", "]", ")", "-", "1", ")", ";", "double", "c2", "=", "div", "(", "tf", ".", "get", "(", "now", "[", "1", "]", ",", "now", "[", "2", "]", ")", "-", "1", ",", "tf", ".", "get", "(", "now", "[", "1", "]", ")", "-", "1", ")", ";", "double", "c1", "=", "div", "(", "tf", ".", "get", "(", "now", "[", "2", "]", ")", "-", "1", ",", "tf", ".", "getsum", "(", ")", "-", "1", ")", ";", "if", "(", "c3", ">=", "c1", "&&", "c3", ">=", "c2", ")", "tl3", "+=", "tf", ".", "get", "(", "key", ".", "toCharArray", "(", ")", ")", ";", "else", "if", "(", "c2", ">=", "c1", "&&", "c2", ">=", "c3", ")", "tl2", "+=", "tf", ".", "get", "(", "key", ".", "toCharArray", "(", ")", ")", ";", "else", "if", "(", "c1", ">=", "c2", "&&", "c1", ">=", "c3", ")", "tl1", "+=", "tf", ".", "get", "(", "key", ".", "toCharArray", "(", ")", ")", ";", "}", "l1", "=", "div", "(", "tl1", ",", "tl1", "+", "tl2", "+", "tl3", ")", ";", "l2", "=", "div", "(", "tl2", ",", "tl1", "+", "tl2", "+", "tl3", ")", ";", "l3", "=", "div", "(", "tl3", ",", "tl1", "+", "tl2", "+", "tl3", ")", ";", "}"], "docstring": "\u89c2\u6d4b\u7ed3\u675f\uff0c\u5f00\u59cb\u8bad\u7ec3", "docstring_tokens": ["\u89c2\u6d4b\u7ed3\u675f\uff0c\u5f00\u59cb\u8bad\u7ec3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java#L117-L145", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java", "func_name": "CharacterBasedGenerativeModel.log_prob", "original_string": "double log_prob(char s1, int i1, char s2, int i2, char s3, int i3)\n    {\n        if (transMatrix[i1][i2][i3] == 0)\n            return inf;\n        char t1 = id2tag[i1];\n        char t2 = id2tag[i2];\n        char t3 = id2tag[i3];\n        double uni = l1 * tf.freq(s3,t3);\n        double bi = div(l2 * tf.get(s2,t2, s3,t3), tf.get(s2,t2));\n        double tri = div(l3 * tf.get(s1,t1, s2,t2, s3,t3), tf.get(s1,t1, s2,t2));\n        if (uni + bi + tri == 0)\n            return inf;\n        return Math.log(uni + bi + tri);\n    }", "language": "java", "code": "double log_prob(char s1, int i1, char s2, int i2, char s3, int i3)\n    {\n        if (transMatrix[i1][i2][i3] == 0)\n            return inf;\n        char t1 = id2tag[i1];\n        char t2 = id2tag[i2];\n        char t3 = id2tag[i3];\n        double uni = l1 * tf.freq(s3,t3);\n        double bi = div(l2 * tf.get(s2,t2, s3,t3), tf.get(s2,t2));\n        double tri = div(l3 * tf.get(s1,t1, s2,t2, s3,t3), tf.get(s1,t1, s2,t2));\n        if (uni + bi + tri == 0)\n            return inf;\n        return Math.log(uni + bi + tri);\n    }", "code_tokens": ["double", "log_prob", "(", "char", "s1", ",", "int", "i1", ",", "char", "s2", ",", "int", "i2", ",", "char", "s3", ",", "int", "i3", ")", "{", "if", "(", "transMatrix", "[", "i1", "]", "[", "i2", "]", "[", "i3", "]", "==", "0", ")", "return", "inf", ";", "char", "t1", "=", "id2tag", "[", "i1", "]", ";", "char", "t2", "=", "id2tag", "[", "i2", "]", ";", "char", "t3", "=", "id2tag", "[", "i3", "]", ";", "double", "uni", "=", "l1", "*", "tf", ".", "freq", "(", "s3", ",", "t3", ")", ";", "double", "bi", "=", "div", "(", "l2", "*", "tf", ".", "get", "(", "s2", ",", "t2", ",", "s3", ",", "t3", ")", ",", "tf", ".", "get", "(", "s2", ",", "t2", ")", ")", ";", "double", "tri", "=", "div", "(", "l3", "*", "tf", ".", "get", "(", "s1", ",", "t1", ",", "s2", ",", "t2", ",", "s3", ",", "t3", ")", ",", "tf", ".", "get", "(", "s1", ",", "t1", ",", "s2", ",", "t2", ")", ")", ";", "if", "(", "uni", "+", "bi", "+", "tri", "==", "0", ")", "return", "inf", ";", "return", "Math", ".", "log", "(", "uni", "+", "bi", "+", "tri", ")", ";", "}"], "docstring": "\u6c42\u6982\u7387\n@param s1 \u524d2\u4e2a\u5b57\n@param s1 \u524d2\u4e2a\u72b6\u6001\u7684\u4e0b\u6807\n@param s2 \u524d1\u4e2a\u5b57\n@param s2 \u524d1\u4e2a\u72b6\u6001\u7684\u4e0b\u6807\n@param s3 \u5f53\u524d\u5b57\n@param s3 \u5f53\u524d\u72b6\u6001\u7684\u4e0b\u6807\n@return \u5e8f\u5217\u7684\u6982\u7387", "docstring_tokens": ["\u6c42\u6982\u7387"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java#L157-L170", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java", "func_name": "CharacterBasedGenerativeModel.tag", "original_string": "public char[] tag(char[] charArray)\n    {\n        if (charArray.length == 0) return new char[0];\n        if (charArray.length == 1) return new char[]{'s'};\n        char[] tag = new char[charArray.length];\n        double[][] now = new double[4][4];\n        double[] first = new double[4];\n\n        // link[i][s][t] := \u7b2ci\u4e2a\u8282\u70b9\u5728\u524d\u4e00\u4e2a\u72b6\u6001\u662fs\uff0c\u5f53\u524d\u72b6\u6001\u662ft\u65f6\uff0c\u524d2\u4e2a\u72b6\u6001\u7684tag\u7684\u503c\n        int[][][] link = new int[charArray.length][4][4];\n        // \u7b2c\u4e00\u4e2a\u5b57\uff0c\u53ea\u53ef\u80fd\u662fbs\n        for (int s = 0; s < 4; ++s)\n        {\n            double p = (s == 1 || s == 2) ? inf : log_prob(bos[0], 4, bos[0], 4, charArray[0],s);\n            first[s] = p;\n        }\n\n        // \u7b2c\u4e8c\u4e2a\u5b57\uff0c\u5c1a\u4e0d\u80fd\u5b8c\u5168\u5229\u7528TriGram\n        for (int f = 0; f < 4; ++f)\n        {\n            for (int s = 0; s < 4; ++s)\n            {\n                double p = first[f] + log_prob(bos[0],4, charArray[0],f, charArray[1],s);\n                now[f][s] = p;\n                link[1][f][s] = f;\n            }\n        }\n\n        // \u7b2c\u4e09\u4e2a\u5b57\u5f00\u59cb\uff0c\u5229\u7528TriGram\u6807\u6ce8\n        double[][] pre = new double[4][4];\n        for (int i = 2; i < charArray.length; i++)\n        {\n            // swap(now, pre)\n            double[][] _ = pre;\n            pre = now;\n            now = _;\n            // end of swap\n            for (int s = 0; s < 4; ++s)\n            {\n                for (int t = 0; t < 4; ++t)\n                {\n                    now[s][t] = -1e20;\n                    for (int f = 0; f < 4; ++f)\n                    {\n                        double p = pre[f][s] + log_prob(charArray[i - 2], f,\n                                                        charArray[i - 1], s,\n                                                        charArray[i],     t);\n                        if (p > now[s][t])\n                        {\n                            now[s][t] = p;\n                            link[i][s][t] = f;\n                        }\n                    }\n                }\n            }\n        }\n        // \u65e0\u6cd5\u4fdd\u8bc1\u6700\u4f18\u8def\u5f84\u6bcf\u4e2a\u72b6\u6001\u7684\u6982\u7387\u90fd\u662f\u975e\u6700\u5c0f\u503c, \u6240\u4ee5\u56de\u6eaf\u8def\u5f84\u5f97\u5206\u6700\u5c0f\u503c\u5fc5\u987b\u5c0f\u4e8einf\n        double score = charArray.length*inf;\n        int s = 0;\n        int t = 0;\n        for (int i = 0; i < probableTail.length; i++)\n        {\n            int [] state = probableTail[i];\n            if (now[state[0]][state[1]] > score)\n            {\n                score = now[state[0]][state[1]];\n                s = state[0];\n                t = state[1];\n            }\n        }\n        for (int i = link.length - 1; i >= 0; --i)\n        {\n            tag[i] = id2tag[t];\n            int f = link[i][s][t];\n            t = s;\n            s = f;\n        }\n        return tag;\n    }", "language": "java", "code": "public char[] tag(char[] charArray)\n    {\n        if (charArray.length == 0) return new char[0];\n        if (charArray.length == 1) return new char[]{'s'};\n        char[] tag = new char[charArray.length];\n        double[][] now = new double[4][4];\n        double[] first = new double[4];\n\n        // link[i][s][t] := \u7b2ci\u4e2a\u8282\u70b9\u5728\u524d\u4e00\u4e2a\u72b6\u6001\u662fs\uff0c\u5f53\u524d\u72b6\u6001\u662ft\u65f6\uff0c\u524d2\u4e2a\u72b6\u6001\u7684tag\u7684\u503c\n        int[][][] link = new int[charArray.length][4][4];\n        // \u7b2c\u4e00\u4e2a\u5b57\uff0c\u53ea\u53ef\u80fd\u662fbs\n        for (int s = 0; s < 4; ++s)\n        {\n            double p = (s == 1 || s == 2) ? inf : log_prob(bos[0], 4, bos[0], 4, charArray[0],s);\n            first[s] = p;\n        }\n\n        // \u7b2c\u4e8c\u4e2a\u5b57\uff0c\u5c1a\u4e0d\u80fd\u5b8c\u5168\u5229\u7528TriGram\n        for (int f = 0; f < 4; ++f)\n        {\n            for (int s = 0; s < 4; ++s)\n            {\n                double p = first[f] + log_prob(bos[0],4, charArray[0],f, charArray[1],s);\n                now[f][s] = p;\n                link[1][f][s] = f;\n            }\n        }\n\n        // \u7b2c\u4e09\u4e2a\u5b57\u5f00\u59cb\uff0c\u5229\u7528TriGram\u6807\u6ce8\n        double[][] pre = new double[4][4];\n        for (int i = 2; i < charArray.length; i++)\n        {\n            // swap(now, pre)\n            double[][] _ = pre;\n            pre = now;\n            now = _;\n            // end of swap\n            for (int s = 0; s < 4; ++s)\n            {\n                for (int t = 0; t < 4; ++t)\n                {\n                    now[s][t] = -1e20;\n                    for (int f = 0; f < 4; ++f)\n                    {\n                        double p = pre[f][s] + log_prob(charArray[i - 2], f,\n                                                        charArray[i - 1], s,\n                                                        charArray[i],     t);\n                        if (p > now[s][t])\n                        {\n                            now[s][t] = p;\n                            link[i][s][t] = f;\n                        }\n                    }\n                }\n            }\n        }\n        // \u65e0\u6cd5\u4fdd\u8bc1\u6700\u4f18\u8def\u5f84\u6bcf\u4e2a\u72b6\u6001\u7684\u6982\u7387\u90fd\u662f\u975e\u6700\u5c0f\u503c, \u6240\u4ee5\u56de\u6eaf\u8def\u5f84\u5f97\u5206\u6700\u5c0f\u503c\u5fc5\u987b\u5c0f\u4e8einf\n        double score = charArray.length*inf;\n        int s = 0;\n        int t = 0;\n        for (int i = 0; i < probableTail.length; i++)\n        {\n            int [] state = probableTail[i];\n            if (now[state[0]][state[1]] > score)\n            {\n                score = now[state[0]][state[1]];\n                s = state[0];\n                t = state[1];\n            }\n        }\n        for (int i = link.length - 1; i >= 0; --i)\n        {\n            tag[i] = id2tag[t];\n            int f = link[i][s][t];\n            t = s;\n            s = f;\n        }\n        return tag;\n    }", "code_tokens": ["public", "char", "[", "]", "tag", "(", "char", "[", "]", "charArray", ")", "{", "if", "(", "charArray", ".", "length", "==", "0", ")", "return", "new", "char", "[", "0", "]", ";", "if", "(", "charArray", ".", "length", "==", "1", ")", "return", "new", "char", "[", "]", "{", "'", "'", "}", ";", "char", "[", "]", "tag", "=", "new", "char", "[", "charArray", ".", "length", "]", ";", "double", "[", "]", "[", "]", "now", "=", "new", "double", "[", "4", "]", "[", "4", "]", ";", "double", "[", "]", "first", "=", "new", "double", "[", "4", "]", ";", "// link[i][s][t] := \u7b2ci\u4e2a\u8282\u70b9\u5728\u524d\u4e00\u4e2a\u72b6\u6001\u662fs\uff0c\u5f53\u524d\u72b6\u6001\u662ft\u65f6\uff0c\u524d2\u4e2a\u72b6\u6001\u7684tag\u7684\u503c", "int", "[", "]", "[", "]", "[", "]", "link", "=", "new", "int", "[", "charArray", ".", "length", "]", "[", "4", "]", "[", "4", "]", ";", "// \u7b2c\u4e00\u4e2a\u5b57\uff0c\u53ea\u53ef\u80fd\u662fbs", "for", "(", "int", "s", "=", "0", ";", "s", "<", "4", ";", "++", "s", ")", "{", "double", "p", "=", "(", "s", "==", "1", "||", "s", "==", "2", ")", "?", "inf", ":", "log_prob", "(", "bos", "[", "0", "]", ",", "4", ",", "bos", "[", "0", "]", ",", "4", ",", "charArray", "[", "0", "]", ",", "s", ")", ";", "first", "[", "s", "]", "=", "p", ";", "}", "// \u7b2c\u4e8c\u4e2a\u5b57\uff0c\u5c1a\u4e0d\u80fd\u5b8c\u5168\u5229\u7528TriGram", "for", "(", "int", "f", "=", "0", ";", "f", "<", "4", ";", "++", "f", ")", "{", "for", "(", "int", "s", "=", "0", ";", "s", "<", "4", ";", "++", "s", ")", "{", "double", "p", "=", "first", "[", "f", "]", "+", "log_prob", "(", "bos", "[", "0", "]", ",", "4", ",", "charArray", "[", "0", "]", ",", "f", ",", "charArray", "[", "1", "]", ",", "s", ")", ";", "now", "[", "f", "]", "[", "s", "]", "=", "p", ";", "link", "[", "1", "]", "[", "f", "]", "[", "s", "]", "=", "f", ";", "}", "}", "// \u7b2c\u4e09\u4e2a\u5b57\u5f00\u59cb\uff0c\u5229\u7528TriGram\u6807\u6ce8", "double", "[", "]", "[", "]", "pre", "=", "new", "double", "[", "4", "]", "[", "4", "]", ";", "for", "(", "int", "i", "=", "2", ";", "i", "<", "charArray", ".", "length", ";", "i", "++", ")", "{", "// swap(now, pre)", "double", "[", "]", "[", "]", "_", "=", "pre", ";", "pre", "=", "now", ";", "now", "=", "_", ";", "// end of swap", "for", "(", "int", "s", "=", "0", ";", "s", "<", "4", ";", "++", "s", ")", "{", "for", "(", "int", "t", "=", "0", ";", "t", "<", "4", ";", "++", "t", ")", "{", "now", "[", "s", "]", "[", "t", "]", "=", "-", "1e20", ";", "for", "(", "int", "f", "=", "0", ";", "f", "<", "4", ";", "++", "f", ")", "{", "double", "p", "=", "pre", "[", "f", "]", "[", "s", "]", "+", "log_prob", "(", "charArray", "[", "i", "-", "2", "]", ",", "f", ",", "charArray", "[", "i", "-", "1", "]", ",", "s", ",", "charArray", "[", "i", "]", ",", "t", ")", ";", "if", "(", "p", ">", "now", "[", "s", "]", "[", "t", "]", ")", "{", "now", "[", "s", "]", "[", "t", "]", "=", "p", ";", "link", "[", "i", "]", "[", "s", "]", "[", "t", "]", "=", "f", ";", "}", "}", "}", "}", "}", "// \u65e0\u6cd5\u4fdd\u8bc1\u6700\u4f18\u8def\u5f84\u6bcf\u4e2a\u72b6\u6001\u7684\u6982\u7387\u90fd\u662f\u975e\u6700\u5c0f\u503c, \u6240\u4ee5\u56de\u6eaf\u8def\u5f84\u5f97\u5206\u6700\u5c0f\u503c\u5fc5\u987b\u5c0f\u4e8einf", "double", "score", "=", "charArray", ".", "length", "*", "inf", ";", "int", "s", "=", "0", ";", "int", "t", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "probableTail", ".", "length", ";", "i", "++", ")", "{", "int", "[", "]", "state", "=", "probableTail", "[", "i", "]", ";", "if", "(", "now", "[", "state", "[", "0", "]", "]", "[", "state", "[", "1", "]", "]", ">", "score", ")", "{", "score", "=", "now", "[", "state", "[", "0", "]", "]", "[", "state", "[", "1", "]", "]", ";", "s", "=", "state", "[", "0", "]", ";", "t", "=", "state", "[", "1", "]", ";", "}", "}", "for", "(", "int", "i", "=", "link", ".", "length", "-", "1", ";", "i", ">=", "0", ";", "--", "i", ")", "{", "tag", "[", "i", "]", "=", "id2tag", "[", "t", "]", ";", "int", "f", "=", "link", "[", "i", "]", "[", "s", "]", "[", "t", "]", ";", "t", "=", "s", ";", "s", "=", "f", ";", "}", "return", "tag", ";", "}"], "docstring": "\u5e8f\u5217\u6807\u6ce8\n@param charArray \u89c2\u6d4b\u5e8f\u5217\n@return \u6807\u6ce8\u5e8f\u5217", "docstring_tokens": ["\u5e8f\u5217\u6807\u6ce8"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/trigram/CharacterBasedGenerativeModel.java#L177-L255", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/nr/PersonDictionary.java", "func_name": "PersonDictionary.parsePattern", "original_string": "public static void parsePattern(List<NR> nrList, List<Vertex> vertexList, final WordNet wordNetOptimum, final WordNet wordNetAll)\n    {\n        // \u62c6\u5206UV\n        ListIterator<Vertex> listIterator = vertexList.listIterator();\n        StringBuilder sbPattern = new StringBuilder(nrList.size());\n        NR preNR = NR.A;\n        boolean backUp = false;\n        int index = 0;\n        for (NR nr : nrList)\n        {\n            ++index;\n            Vertex current = listIterator.next();\n//            logger.trace(\"{}/{}\", current.realWord, nr);\n            switch (nr)\n            {\n                case U:\n                    if (!backUp)\n                    {\n                        vertexList = new ArrayList<Vertex>(vertexList);\n                        listIterator = vertexList.listIterator(index);\n                        backUp = true;\n                    }\n                    sbPattern.append(NR.K.toString());\n                    sbPattern.append(NR.B.toString());\n                    preNR = B;\n                    listIterator.previous();\n                    String nowK = current.realWord.substring(0, current.realWord.length() - 1);\n                    String nowB = current.realWord.substring(current.realWord.length() - 1);\n                    listIterator.set(new Vertex(nowK));\n                    listIterator.next();\n                    listIterator.add(new Vertex(nowB));\n                    continue;\n                case V:\n                    if (!backUp)\n                    {\n                        vertexList = new ArrayList<Vertex>(vertexList);\n                        listIterator = vertexList.listIterator(index);\n                        backUp = true;\n                    }\n                    if (preNR == B)\n                    {\n                        sbPattern.append(NR.E.toString());  //BE\n                    }\n                    else\n                    {\n                        sbPattern.append(NR.D.toString());  //CD\n                    }\n                    sbPattern.append(NR.L.toString());\n                    // \u5bf9\u4e32\u4e5f\u505a\u4e00\u4e9b\u4fee\u6539\n                    listIterator.previous();\n                    String EorD = current.realWord.substring(0, 1);\n                    String L = current.realWord.substring(1, current.realWord.length());\n                    listIterator.set(new Vertex(EorD));\n                    listIterator.next();\n                    listIterator.add(new Vertex(L));\n                    continue;\n                default:\n                    sbPattern.append(nr.toString());\n                    break;\n            }\n            preNR = nr;\n        }\n        String pattern = sbPattern.toString();\n//        logger.trace(\"\u6a21\u5f0f\u4e32\uff1a{}\", pattern);\n//        logger.trace(\"\u5bf9\u5e94\u4e32\uff1a{}\", vertexList);\n//        if (pattern.length() != vertexList.size())\n//        {\n//            logger.warn(\"\u4eba\u540d\u8bc6\u522b\u6a21\u5f0f\u4e32\u6709bug\", pattern, vertexList);\n//            return;\n//        }\n        final Vertex[] wordArray = vertexList.toArray(new Vertex[0]);\n        final int[] offsetArray = new int[wordArray.length];\n        offsetArray[0] = 0;\n        for (int i = 1; i < wordArray.length; ++i)\n        {\n            offsetArray[i] = offsetArray[i - 1] + wordArray[i - 1].realWord.length();\n        }\n        trie.parseText(pattern, new AhoCorasickDoubleArrayTrie.IHit<NRPattern>()\n        {\n            @Override\n            public void hit(int begin, int end, NRPattern value)\n            {\n//            logger.trace(\"\u5339\u914d\u5230\uff1a{}\", keyword);\n                StringBuilder sbName = new StringBuilder();\n                for (int i = begin; i < end; ++i)\n                {\n                    sbName.append(wordArray[i].realWord);\n                }\n                String name = sbName.toString();\n//            logger.trace(\"\u8bc6\u522b\u51fa\uff1a{}\", name);\n                // \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574\n                switch (value)\n                {\n                    case BCD:\n                        if (name.charAt(0) == name.charAt(2)) return; // \u59d3\u548c\u6700\u540e\u4e00\u4e2a\u540d\u4e0d\u53ef\u80fd\u76f8\u7b49\u7684\n//                        String cd = name.substring(1);\n//                        if (CoreDictionary.contains(cd))\n//                        {\n//                            EnumItem<NR> item = PersonDictionary.dictionary.get(cd);\n//                            if (item == null || !item.containsLabel(Z)) return; // \u4e09\u5b57\u540d\u5b57\u4f46\u662f\u540e\u4e24\u4e2a\u5b57\u4e0d\u5728\u8bcd\u5178\u4e2d\uff0c\u6709\u5f88\u5927\u53ef\u80fd\u6027\u662f\u8bef\u547d\u4e2d\n//                        }\n                        break;\n                }\n                if (isBadCase(name)) return;\n\n                // \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57\n                if (HanLP.Config.DEBUG)\n                {\n                    System.out.printf(\"\u8bc6\u522b\u51fa\u4eba\u540d\uff1a%s %s\\n\", name, value);\n                }\n                int offset = offsetArray[begin];\n                wordNetOptimum.insert(offset, new Vertex(Predefine.TAG_PEOPLE, name, ATTRIBUTE, WORD_ID), wordNetAll);\n            }\n        });\n    }", "language": "java", "code": "public static void parsePattern(List<NR> nrList, List<Vertex> vertexList, final WordNet wordNetOptimum, final WordNet wordNetAll)\n    {\n        // \u62c6\u5206UV\n        ListIterator<Vertex> listIterator = vertexList.listIterator();\n        StringBuilder sbPattern = new StringBuilder(nrList.size());\n        NR preNR = NR.A;\n        boolean backUp = false;\n        int index = 0;\n        for (NR nr : nrList)\n        {\n            ++index;\n            Vertex current = listIterator.next();\n//            logger.trace(\"{}/{}\", current.realWord, nr);\n            switch (nr)\n            {\n                case U:\n                    if (!backUp)\n                    {\n                        vertexList = new ArrayList<Vertex>(vertexList);\n                        listIterator = vertexList.listIterator(index);\n                        backUp = true;\n                    }\n                    sbPattern.append(NR.K.toString());\n                    sbPattern.append(NR.B.toString());\n                    preNR = B;\n                    listIterator.previous();\n                    String nowK = current.realWord.substring(0, current.realWord.length() - 1);\n                    String nowB = current.realWord.substring(current.realWord.length() - 1);\n                    listIterator.set(new Vertex(nowK));\n                    listIterator.next();\n                    listIterator.add(new Vertex(nowB));\n                    continue;\n                case V:\n                    if (!backUp)\n                    {\n                        vertexList = new ArrayList<Vertex>(vertexList);\n                        listIterator = vertexList.listIterator(index);\n                        backUp = true;\n                    }\n                    if (preNR == B)\n                    {\n                        sbPattern.append(NR.E.toString());  //BE\n                    }\n                    else\n                    {\n                        sbPattern.append(NR.D.toString());  //CD\n                    }\n                    sbPattern.append(NR.L.toString());\n                    // \u5bf9\u4e32\u4e5f\u505a\u4e00\u4e9b\u4fee\u6539\n                    listIterator.previous();\n                    String EorD = current.realWord.substring(0, 1);\n                    String L = current.realWord.substring(1, current.realWord.length());\n                    listIterator.set(new Vertex(EorD));\n                    listIterator.next();\n                    listIterator.add(new Vertex(L));\n                    continue;\n                default:\n                    sbPattern.append(nr.toString());\n                    break;\n            }\n            preNR = nr;\n        }\n        String pattern = sbPattern.toString();\n//        logger.trace(\"\u6a21\u5f0f\u4e32\uff1a{}\", pattern);\n//        logger.trace(\"\u5bf9\u5e94\u4e32\uff1a{}\", vertexList);\n//        if (pattern.length() != vertexList.size())\n//        {\n//            logger.warn(\"\u4eba\u540d\u8bc6\u522b\u6a21\u5f0f\u4e32\u6709bug\", pattern, vertexList);\n//            return;\n//        }\n        final Vertex[] wordArray = vertexList.toArray(new Vertex[0]);\n        final int[] offsetArray = new int[wordArray.length];\n        offsetArray[0] = 0;\n        for (int i = 1; i < wordArray.length; ++i)\n        {\n            offsetArray[i] = offsetArray[i - 1] + wordArray[i - 1].realWord.length();\n        }\n        trie.parseText(pattern, new AhoCorasickDoubleArrayTrie.IHit<NRPattern>()\n        {\n            @Override\n            public void hit(int begin, int end, NRPattern value)\n            {\n//            logger.trace(\"\u5339\u914d\u5230\uff1a{}\", keyword);\n                StringBuilder sbName = new StringBuilder();\n                for (int i = begin; i < end; ++i)\n                {\n                    sbName.append(wordArray[i].realWord);\n                }\n                String name = sbName.toString();\n//            logger.trace(\"\u8bc6\u522b\u51fa\uff1a{}\", name);\n                // \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574\n                switch (value)\n                {\n                    case BCD:\n                        if (name.charAt(0) == name.charAt(2)) return; // \u59d3\u548c\u6700\u540e\u4e00\u4e2a\u540d\u4e0d\u53ef\u80fd\u76f8\u7b49\u7684\n//                        String cd = name.substring(1);\n//                        if (CoreDictionary.contains(cd))\n//                        {\n//                            EnumItem<NR> item = PersonDictionary.dictionary.get(cd);\n//                            if (item == null || !item.containsLabel(Z)) return; // \u4e09\u5b57\u540d\u5b57\u4f46\u662f\u540e\u4e24\u4e2a\u5b57\u4e0d\u5728\u8bcd\u5178\u4e2d\uff0c\u6709\u5f88\u5927\u53ef\u80fd\u6027\u662f\u8bef\u547d\u4e2d\n//                        }\n                        break;\n                }\n                if (isBadCase(name)) return;\n\n                // \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57\n                if (HanLP.Config.DEBUG)\n                {\n                    System.out.printf(\"\u8bc6\u522b\u51fa\u4eba\u540d\uff1a%s %s\\n\", name, value);\n                }\n                int offset = offsetArray[begin];\n                wordNetOptimum.insert(offset, new Vertex(Predefine.TAG_PEOPLE, name, ATTRIBUTE, WORD_ID), wordNetAll);\n            }\n        });\n    }", "code_tokens": ["public", "static", "void", "parsePattern", "(", "List", "<", "NR", ">", "nrList", ",", "List", "<", "Vertex", ">", "vertexList", ",", "final", "WordNet", "wordNetOptimum", ",", "final", "WordNet", "wordNetAll", ")", "{", "// \u62c6\u5206UV", "ListIterator", "<", "Vertex", ">", "listIterator", "=", "vertexList", ".", "listIterator", "(", ")", ";", "StringBuilder", "sbPattern", "=", "new", "StringBuilder", "(", "nrList", ".", "size", "(", ")", ")", ";", "NR", "preNR", "=", "NR", ".", "A", ";", "boolean", "backUp", "=", "false", ";", "int", "index", "=", "0", ";", "for", "(", "NR", "nr", ":", "nrList", ")", "{", "++", "index", ";", "Vertex", "current", "=", "listIterator", ".", "next", "(", ")", ";", "//            logger.trace(\"{}/{}\", current.realWord, nr);", "switch", "(", "nr", ")", "{", "case", "U", ":", "if", "(", "!", "backUp", ")", "{", "vertexList", "=", "new", "ArrayList", "<", "Vertex", ">", "(", "vertexList", ")", ";", "listIterator", "=", "vertexList", ".", "listIterator", "(", "index", ")", ";", "backUp", "=", "true", ";", "}", "sbPattern", ".", "append", "(", "NR", ".", "K", ".", "toString", "(", ")", ")", ";", "sbPattern", ".", "append", "(", "NR", ".", "B", ".", "toString", "(", ")", ")", ";", "preNR", "=", "B", ";", "listIterator", ".", "previous", "(", ")", ";", "String", "nowK", "=", "current", ".", "realWord", ".", "substring", "(", "0", ",", "current", ".", "realWord", ".", "length", "(", ")", "-", "1", ")", ";", "String", "nowB", "=", "current", ".", "realWord", ".", "substring", "(", "current", ".", "realWord", ".", "length", "(", ")", "-", "1", ")", ";", "listIterator", ".", "set", "(", "new", "Vertex", "(", "nowK", ")", ")", ";", "listIterator", ".", "next", "(", ")", ";", "listIterator", ".", "add", "(", "new", "Vertex", "(", "nowB", ")", ")", ";", "continue", ";", "case", "V", ":", "if", "(", "!", "backUp", ")", "{", "vertexList", "=", "new", "ArrayList", "<", "Vertex", ">", "(", "vertexList", ")", ";", "listIterator", "=", "vertexList", ".", "listIterator", "(", "index", ")", ";", "backUp", "=", "true", ";", "}", "if", "(", "preNR", "==", "B", ")", "{", "sbPattern", ".", "append", "(", "NR", ".", "E", ".", "toString", "(", ")", ")", ";", "//BE", "}", "else", "{", "sbPattern", ".", "append", "(", "NR", ".", "D", ".", "toString", "(", ")", ")", ";", "//CD", "}", "sbPattern", ".", "append", "(", "NR", ".", "L", ".", "toString", "(", ")", ")", ";", "// \u5bf9\u4e32\u4e5f\u505a\u4e00\u4e9b\u4fee\u6539", "listIterator", ".", "previous", "(", ")", ";", "String", "EorD", "=", "current", ".", "realWord", ".", "substring", "(", "0", ",", "1", ")", ";", "String", "L", "=", "current", ".", "realWord", ".", "substring", "(", "1", ",", "current", ".", "realWord", ".", "length", "(", ")", ")", ";", "listIterator", ".", "set", "(", "new", "Vertex", "(", "EorD", ")", ")", ";", "listIterator", ".", "next", "(", ")", ";", "listIterator", ".", "add", "(", "new", "Vertex", "(", "L", ")", ")", ";", "continue", ";", "default", ":", "sbPattern", ".", "append", "(", "nr", ".", "toString", "(", ")", ")", ";", "break", ";", "}", "preNR", "=", "nr", ";", "}", "String", "pattern", "=", "sbPattern", ".", "toString", "(", ")", ";", "//        logger.trace(\"\u6a21\u5f0f\u4e32\uff1a{}\", pattern);", "//        logger.trace(\"\u5bf9\u5e94\u4e32\uff1a{}\", vertexList);", "//        if (pattern.length() != vertexList.size())", "//        {", "//            logger.warn(\"\u4eba\u540d\u8bc6\u522b\u6a21\u5f0f\u4e32\u6709bug\", pattern, vertexList);", "//            return;", "//        }", "final", "Vertex", "[", "]", "wordArray", "=", "vertexList", ".", "toArray", "(", "new", "Vertex", "[", "0", "]", ")", ";", "final", "int", "[", "]", "offsetArray", "=", "new", "int", "[", "wordArray", ".", "length", "]", ";", "offsetArray", "[", "0", "]", "=", "0", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "wordArray", ".", "length", ";", "++", "i", ")", "{", "offsetArray", "[", "i", "]", "=", "offsetArray", "[", "i", "-", "1", "]", "+", "wordArray", "[", "i", "-", "1", "]", ".", "realWord", ".", "length", "(", ")", ";", "}", "trie", ".", "parseText", "(", "pattern", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "NRPattern", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "NRPattern", "value", ")", "{", "//            logger.trace(\"\u5339\u914d\u5230\uff1a{}\", keyword);", "StringBuilder", "sbName", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "i", "=", "begin", ";", "i", "<", "end", ";", "++", "i", ")", "{", "sbName", ".", "append", "(", "wordArray", "[", "i", "]", ".", "realWord", ")", ";", "}", "String", "name", "=", "sbName", ".", "toString", "(", ")", ";", "//            logger.trace(\"\u8bc6\u522b\u51fa\uff1a{}\", name);", "// \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574", "switch", "(", "value", ")", "{", "case", "BCD", ":", "if", "(", "name", ".", "charAt", "(", "0", ")", "==", "name", ".", "charAt", "(", "2", ")", ")", "return", ";", "// \u59d3\u548c\u6700\u540e\u4e00\u4e2a\u540d\u4e0d\u53ef\u80fd\u76f8\u7b49\u7684", "//                        String cd = name.substring(1);", "//                        if (CoreDictionary.contains(cd))", "//                        {", "//                            EnumItem<NR> item = PersonDictionary.dictionary.get(cd);", "//                            if (item == null || !item.containsLabel(Z)) return; // \u4e09\u5b57\u540d\u5b57\u4f46\u662f\u540e\u4e24\u4e2a\u5b57\u4e0d\u5728\u8bcd\u5178\u4e2d\uff0c\u6709\u5f88\u5927\u53ef\u80fd\u6027\u662f\u8bef\u547d\u4e2d", "//                        }", "break", ";", "}", "if", "(", "isBadCase", "(", "name", ")", ")", "return", ";", "// \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "{", "System", ".", "out", ".", "printf", "(", "\"\u8bc6\u522b\u51fa\u4eba\u540d\uff1a%s %s\\n\", name, valu", "e", ";", "", "", "", "", "}", "int", "offset", "=", "offsetArray", "[", "begin", "]", ";", "wordNetOptimum", ".", "insert", "(", "offset", ",", "new", "Vertex", "(", "Predefine", ".", "TAG_PEOPLE", ",", "name", ",", "ATTRIBUTE", ",", "WORD_ID", ")", ",", "wordNetAll", ")", ";", "}", "}", ")", ";", "}"], "docstring": "\u6a21\u5f0f\u5339\u914d\n\n@param nrList         \u786e\u5b9a\u7684\u6807\u6ce8\u5e8f\u5217\n@param vertexList     \u539f\u59cb\u7684\u672a\u52a0\u89d2\u8272\u6807\u6ce8\u7684\u5e8f\u5217\n@param wordNetOptimum \u5f85\u4f18\u5316\u7684\u56fe\n@param wordNetAll     \u5168\u8bcd\u56fe", "docstring_tokens": ["\u6a21\u5f0f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/nr/PersonDictionary.java#L81-L195", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/nr/PersonDictionary.java", "func_name": "PersonDictionary.isBadCase", "original_string": "static boolean isBadCase(String name)\n    {\n        EnumItem<NR> nrEnumItem = dictionary.get(name);\n        if (nrEnumItem == null) return false;\n        return nrEnumItem.containsLabel(NR.A);\n    }", "language": "java", "code": "static boolean isBadCase(String name)\n    {\n        EnumItem<NR> nrEnumItem = dictionary.get(name);\n        if (nrEnumItem == null) return false;\n        return nrEnumItem.containsLabel(NR.A);\n    }", "code_tokens": ["static", "boolean", "isBadCase", "(", "String", "name", ")", "{", "EnumItem", "<", "NR", ">", "nrEnumItem", "=", "dictionary", ".", "get", "(", "name", ")", ";", "if", "(", "nrEnumItem", "==", "null", ")", "return", "false", ";", "return", "nrEnumItem", ".", "containsLabel", "(", "NR", ".", "A", ")", ";", "}"], "docstring": "\u56e0\u4e3a\u4efb\u4f55\u7b97\u6cd5\u90fd\u65e0\u6cd5\u89e3\u51b3100%\u7684\u95ee\u9898\uff0c\u603b\u662f\u6709\u4e00\u4e9bbad case\uff0c\u8fd9\u4e9bbad case\u4f1a\u4ee5\u201c\u76d6\u516c\u7ae0 A 1\u201d\u7684\u5f62\u5f0f\u52a0\u5165\u8bcd\u5178\u4e2d<BR>\n\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4eba\u540d\u662f\u5426\u662fbad case\n\n@param name\n@return", "docstring_tokens": ["\u56e0\u4e3a\u4efb\u4f55\u7b97\u6cd5\u90fd\u65e0\u6cd5\u89e3\u51b3100%\u7684\u95ee\u9898\uff0c\u603b\u662f\u6709\u4e00\u4e9bbad", "case\uff0c\u8fd9\u4e9bbad", "case\u4f1a\u4ee5\u201c\u76d6\u516c\u7ae0", "A", "1\u201d\u7684\u5f62\u5f0f\u52a0\u5165\u8bcd\u5178\u4e2d<BR", ">", "\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4eba\u540d\u662f\u5426\u662fbad", "case"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/nr/PersonDictionary.java#L204-L209", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nt/OrganizationRecognition.java", "func_name": "OrganizationRecognition.viterbiCompute", "original_string": "public static List<NT> viterbiCompute(List<EnumItem<NT>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, OrganizationDictionary.transformMatrixDictionary);\n    }", "language": "java", "code": "public static List<NT> viterbiCompute(List<EnumItem<NT>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, OrganizationDictionary.transformMatrixDictionary);\n    }", "code_tokens": ["public", "static", "List", "<", "NT", ">", "viterbiCompute", "(", "List", "<", "EnumItem", "<", "NT", ">", ">", "roleTagList", ")", "{", "return", "Viterbi", ".", "computeEnum", "(", "roleTagList", ",", "OrganizationDictionary", ".", "transformMatrixDictionary", ")", ";", "}"], "docstring": "\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e\n\n@param roleTagList\n@return", "docstring_tokens": ["\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nt/OrganizationRecognition.java#L122-L125", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java", "func_name": "DocVectorModel.addDocument", "original_string": "public Vector addDocument(int id, String content)\n    {\n        Vector result = query(content);\n        if (result == null) return null;\n        storage.put(id, result);\n        return result;\n    }", "language": "java", "code": "public Vector addDocument(int id, String content)\n    {\n        Vector result = query(content);\n        if (result == null) return null;\n        storage.put(id, result);\n        return result;\n    }", "code_tokens": ["public", "Vector", "addDocument", "(", "int", "id", ",", "String", "content", ")", "{", "Vector", "result", "=", "query", "(", "content", ")", ";", "if", "(", "result", "==", "null", ")", "return", "null", ";", "storage", ".", "put", "(", "id", ",", "result", ")", ";", "return", "result", ";", "}"], "docstring": "\u6dfb\u52a0\u6587\u6863\n\n@param id      \u6587\u6863id\n@param content \u6587\u6863\u5185\u5bb9\n@return \u6587\u6863\u5411\u91cf", "docstring_tokens": ["\u6dfb\u52a0\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java#L41-L47", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java", "func_name": "DocVectorModel.nearest", "original_string": "public List<Map.Entry<Integer, Float>> nearest(String query)\n    {\n        return queryNearest(query, 10);\n    }", "language": "java", "code": "public List<Map.Entry<Integer, Float>> nearest(String query)\n    {\n        return queryNearest(query, 10);\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "Integer", ",", "Float", ">", ">", "nearest", "(", "String", "query", ")", "{", "return", "queryNearest", "(", "query", ",", "10", ")", ";", "}"], "docstring": "\u67e5\u8be2\u6700\u76f8\u4f3c\u7684\u524d10\u4e2a\u6587\u6863\n\n@param query \u67e5\u8be2\u8bed\u53e5\uff08\u6216\u8005\u8bf4\u4e00\u4e2a\u6587\u6863\u7684\u5185\u5bb9\uff09\n@return", "docstring_tokens": ["\u67e5\u8be2\u6700\u76f8\u4f3c\u7684\u524d10\u4e2a\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java#L56-L59", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java", "func_name": "DocVectorModel.query", "original_string": "public Vector query(String content)\n    {\n        if (content == null || content.length() == 0) return null;\n        List<Term> termList = NotionalTokenizer.segment(content);\n        Vector result = new Vector(dimension());\n        int n = 0;\n        for (Term term : termList)\n        {\n            Vector vector = wordVectorModel.vector(term.word);\n            if (vector == null)\n            {\n                continue;\n            }\n            ++n;\n            result.addToSelf(vector);\n        }\n        if (n == 0)\n        {\n            return null;\n        }\n        result.normalize();\n        return result;\n    }", "language": "java", "code": "public Vector query(String content)\n    {\n        if (content == null || content.length() == 0) return null;\n        List<Term> termList = NotionalTokenizer.segment(content);\n        Vector result = new Vector(dimension());\n        int n = 0;\n        for (Term term : termList)\n        {\n            Vector vector = wordVectorModel.vector(term.word);\n            if (vector == null)\n            {\n                continue;\n            }\n            ++n;\n            result.addToSelf(vector);\n        }\n        if (n == 0)\n        {\n            return null;\n        }\n        result.normalize();\n        return result;\n    }", "code_tokens": ["public", "Vector", "query", "(", "String", "content", ")", "{", "if", "(", "content", "==", "null", "||", "content", ".", "length", "(", ")", "==", "0", ")", "return", "null", ";", "List", "<", "Term", ">", "termList", "=", "NotionalTokenizer", ".", "segment", "(", "content", ")", ";", "Vector", "result", "=", "new", "Vector", "(", "dimension", "(", ")", ")", ";", "int", "n", "=", "0", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "Vector", "vector", "=", "wordVectorModel", ".", "vector", "(", "term", ".", "word", ")", ";", "if", "(", "vector", "==", "null", ")", "{", "continue", ";", "}", "++", "n", ";", "result", ".", "addToSelf", "(", "vector", ")", ";", "}", "if", "(", "n", "==", "0", ")", "{", "return", "null", ";", "}", "result", ".", "normalize", "(", ")", ";", "return", "result", ";", "}"], "docstring": "\u5c06\u4e00\u4e2a\u6587\u6863\u8f6c\u4e3a\u5411\u91cf\n\n@param content \u6587\u6863\n@return \u5411\u91cf", "docstring_tokens": ["\u5c06\u4e00\u4e2a\u6587\u6863\u8f6c\u4e3a\u5411\u91cf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java#L68-L90", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java", "func_name": "DocVectorModel.similarity", "original_string": "public float similarity(String what, String with)\n    {\n        Vector A = query(what);\n        if (A == null) return -1f;\n        Vector B = query(with);\n        if (B == null) return -1f;\n        return A.cosineForUnitVector(B);\n    }", "language": "java", "code": "public float similarity(String what, String with)\n    {\n        Vector A = query(what);\n        if (A == null) return -1f;\n        Vector B = query(with);\n        if (B == null) return -1f;\n        return A.cosineForUnitVector(B);\n    }", "code_tokens": ["public", "float", "similarity", "(", "String", "what", ",", "String", "with", ")", "{", "Vector", "A", "=", "query", "(", "what", ")", ";", "if", "(", "A", "==", "null", ")", "return", "-", "1f", ";", "Vector", "B", "=", "query", "(", "with", ")", ";", "if", "(", "B", "==", "null", ")", "return", "-", "1f", ";", "return", "A", ".", "cosineForUnitVector", "(", "B", ")", ";", "}"], "docstring": "\u6587\u6863\u76f8\u4f3c\u5ea6\u8ba1\u7b97\n@param what\n@param with\n@return", "docstring_tokens": ["\u6587\u6863\u76f8\u4f3c\u5ea6\u8ba1\u7b97"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/DocVectorModel.java#L104-L111", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/DawgBuilder.java", "func_name": "DawgBuilder.init", "original_string": "void init()\n    {\n        _table.resize(INITIAL_TABLE_SIZE, 0);\n\n        appendNode();\n        appendUnit();\n\n        _numStates = 1;\n\n        _nodes.get(0).label = (byte) 0xFF;\n        _nodeStack.add(0);\n    }", "language": "java", "code": "void init()\n    {\n        _table.resize(INITIAL_TABLE_SIZE, 0);\n\n        appendNode();\n        appendUnit();\n\n        _numStates = 1;\n\n        _nodes.get(0).label = (byte) 0xFF;\n        _nodeStack.add(0);\n    }", "code_tokens": ["void", "init", "(", ")", "{", "_table", ".", "resize", "(", "INITIAL_TABLE_SIZE", ",", "0", ")", ";", "appendNode", "(", ")", ";", "appendUnit", "(", ")", ";", "_numStates", "=", "1", ";", "_nodes", ".", "get", "(", "0", ")", ".", "label", "=", "(", "byte", ")", "0xFF", ";", "_nodeStack", ".", "add", "(", "0", ")", ";", "}"], "docstring": "\u521d\u59cb\u5316", "docstring_tokens": ["\u521d\u59cb\u5316"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/DawgBuilder.java#L105-L116", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java", "func_name": "KBeamArcEagerDependencyParser.train", "original_string": "public static KBeamArcEagerDependencyParser train(String trainCorpus, String devCorpus, String clusterPath, String modelPath) throws InterruptedException, ExecutionException, IOException, ClassNotFoundException\n    {\n        Options options = new Options();\n        options.train = true;\n        options.inputFile = trainCorpus;\n        options.devPath = devCorpus;\n        options.clusterFile = clusterPath;\n        options.modelFile = modelPath;\n        Main.train(options);\n        return new KBeamArcEagerDependencyParser(modelPath);\n    }", "language": "java", "code": "public static KBeamArcEagerDependencyParser train(String trainCorpus, String devCorpus, String clusterPath, String modelPath) throws InterruptedException, ExecutionException, IOException, ClassNotFoundException\n    {\n        Options options = new Options();\n        options.train = true;\n        options.inputFile = trainCorpus;\n        options.devPath = devCorpus;\n        options.clusterFile = clusterPath;\n        options.modelFile = modelPath;\n        Main.train(options);\n        return new KBeamArcEagerDependencyParser(modelPath);\n    }", "code_tokens": ["public", "static", "KBeamArcEagerDependencyParser", "train", "(", "String", "trainCorpus", ",", "String", "devCorpus", ",", "String", "clusterPath", ",", "String", "modelPath", ")", "throws", "InterruptedException", ",", "ExecutionException", ",", "IOException", ",", "ClassNotFoundException", "{", "Options", "options", "=", "new", "Options", "(", ")", ";", "options", ".", "train", "=", "true", ";", "options", ".", "inputFile", "=", "trainCorpus", ";", "options", ".", "devPath", "=", "devCorpus", ";", "options", ".", "clusterFile", "=", "clusterPath", ";", "options", ".", "modelFile", "=", "modelPath", ";", "Main", ".", "train", "(", "options", ")", ";", "return", "new", "KBeamArcEagerDependencyParser", "(", "modelPath", ")", ";", "}"], "docstring": "\u8bad\u7ec3\u4f9d\u5b58\u53e5\u6cd5\u5206\u6790\u5668\n\n@param trainCorpus \u8bad\u7ec3\u96c6\n@param devCorpus   \u5f00\u53d1\u96c6\n@param clusterPath Brown\u8bcd\u805a\u7c7b\u6587\u4ef6\n@param modelPath   \u6a21\u578b\u50a8\u5b58\u8def\u5f84\n@throws InterruptedException\n@throws ExecutionException\n@throws IOException\n@throws ClassNotFoundException", "docstring_tokens": ["\u8bad\u7ec3\u4f9d\u5b58\u53e5\u6cd5\u5206\u6790\u5668"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java#L75-L85", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java", "func_name": "KBeamArcEagerDependencyParser.evaluate", "original_string": "public double[] evaluate(String testCorpus) throws IOException, ExecutionException, InterruptedException\n    {\n        Options options = parser.options;\n        options.goldFile = testCorpus;\n        File tmpTemplate = File.createTempFile(\"pred-\" + new Date().getTime(), \".conll\");\n        tmpTemplate.deleteOnExit();\n        options.predFile = tmpTemplate.getAbsolutePath();\n        options.outputFile = options.predFile;\n        File scoreFile = File.createTempFile(\"score-\" + new Date().getTime(), \".txt\");\n        scoreFile.deleteOnExit();\n        parser.parseConllFile(testCorpus, options.outputFile, options.rootFirst, options.beamWidth, true,\n                              options.lowercase, 1, false, scoreFile.getAbsolutePath());\n        return Evaluator.evaluate(options.goldFile, options.predFile, options.punctuations);\n    }", "language": "java", "code": "public double[] evaluate(String testCorpus) throws IOException, ExecutionException, InterruptedException\n    {\n        Options options = parser.options;\n        options.goldFile = testCorpus;\n        File tmpTemplate = File.createTempFile(\"pred-\" + new Date().getTime(), \".conll\");\n        tmpTemplate.deleteOnExit();\n        options.predFile = tmpTemplate.getAbsolutePath();\n        options.outputFile = options.predFile;\n        File scoreFile = File.createTempFile(\"score-\" + new Date().getTime(), \".txt\");\n        scoreFile.deleteOnExit();\n        parser.parseConllFile(testCorpus, options.outputFile, options.rootFirst, options.beamWidth, true,\n                              options.lowercase, 1, false, scoreFile.getAbsolutePath());\n        return Evaluator.evaluate(options.goldFile, options.predFile, options.punctuations);\n    }", "code_tokens": ["public", "double", "[", "]", "evaluate", "(", "String", "testCorpus", ")", "throws", "IOException", ",", "ExecutionException", ",", "InterruptedException", "{", "Options", "options", "=", "parser", ".", "options", ";", "options", ".", "goldFile", "=", "testCorpus", ";", "File", "tmpTemplate", "=", "File", ".", "createTempFile", "(", "\"pred-\"", "+", "new", "Date", "(", ")", ".", "getTime", "(", ")", ",", "\".conll\"", ")", ";", "tmpTemplate", ".", "deleteOnExit", "(", ")", ";", "options", ".", "predFile", "=", "tmpTemplate", ".", "getAbsolutePath", "(", ")", ";", "options", ".", "outputFile", "=", "options", ".", "predFile", ";", "File", "scoreFile", "=", "File", ".", "createTempFile", "(", "\"score-\"", "+", "new", "Date", "(", ")", ".", "getTime", "(", ")", ",", "\".txt\"", ")", ";", "scoreFile", ".", "deleteOnExit", "(", ")", ";", "parser", ".", "parseConllFile", "(", "testCorpus", ",", "options", ".", "outputFile", ",", "options", ".", "rootFirst", ",", "options", ".", "beamWidth", ",", "true", ",", "options", ".", "lowercase", ",", "1", ",", "false", ",", "scoreFile", ".", "getAbsolutePath", "(", ")", ")", ";", "return", "Evaluator", ".", "evaluate", "(", "options", ".", "goldFile", ",", "options", ".", "predFile", ",", "options", ".", "punctuations", ")", ";", "}"], "docstring": "\u6807\u51c6\u5316\u8bc4\u6d4b\n\n@param testCorpus \u6d4b\u8bd5\u8bed\u6599\n@return \u5305\u542bUF\u3001LF\u7684\u6570\u7ec4\n@throws IOException\n@throws ExecutionException\n@throws InterruptedException", "docstring_tokens": ["\u6807\u51c6\u5316\u8bc4\u6d4b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java#L96-L109", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java", "func_name": "KBeamArcEagerDependencyParser.parse", "original_string": "public CoNLLSentence parse(List<Term> termList, int beamWidth, int numOfThreads)\n    {\n        String[] words = new String[termList.size()];\n        String[] tags = new String[termList.size()];\n        int k = 0;\n        for (Term term : termList)\n        {\n            words[k] = term.word;\n            tags[k] = term.nature.toString();\n            ++k;\n        }\n\n        Configuration bestParse;\n        try\n        {\n            bestParse = parser.parse(words, tags, false, beamWidth, numOfThreads);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n        CoNLLWord[] wordArray = new CoNLLWord[termList.size()];\n        for (int i = 0; i < words.length; i++)\n        {\n            wordArray[i] = new CoNLLWord(i + 1, words[i], tags[i]);\n        }\n        for (int i = 0; i < words.length; i++)\n        {\n            wordArray[i].DEPREL = parser.idWord(bestParse.state.getDependent(i + 1));\n            int index = bestParse.state.getHead(i + 1) - 1;\n            if (index < 0 || index >= wordArray.length)\n            {\n                wordArray[i].HEAD = CoNLLWord.ROOT;\n            }\n            else\n            {\n                wordArray[i].HEAD = wordArray[index];\n            }\n        }\n        return new CoNLLSentence(wordArray);\n    }", "language": "java", "code": "public CoNLLSentence parse(List<Term> termList, int beamWidth, int numOfThreads)\n    {\n        String[] words = new String[termList.size()];\n        String[] tags = new String[termList.size()];\n        int k = 0;\n        for (Term term : termList)\n        {\n            words[k] = term.word;\n            tags[k] = term.nature.toString();\n            ++k;\n        }\n\n        Configuration bestParse;\n        try\n        {\n            bestParse = parser.parse(words, tags, false, beamWidth, numOfThreads);\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n        CoNLLWord[] wordArray = new CoNLLWord[termList.size()];\n        for (int i = 0; i < words.length; i++)\n        {\n            wordArray[i] = new CoNLLWord(i + 1, words[i], tags[i]);\n        }\n        for (int i = 0; i < words.length; i++)\n        {\n            wordArray[i].DEPREL = parser.idWord(bestParse.state.getDependent(i + 1));\n            int index = bestParse.state.getHead(i + 1) - 1;\n            if (index < 0 || index >= wordArray.length)\n            {\n                wordArray[i].HEAD = CoNLLWord.ROOT;\n            }\n            else\n            {\n                wordArray[i].HEAD = wordArray[index];\n            }\n        }\n        return new CoNLLSentence(wordArray);\n    }", "code_tokens": ["public", "CoNLLSentence", "parse", "(", "List", "<", "Term", ">", "termList", ",", "int", "beamWidth", ",", "int", "numOfThreads", ")", "{", "String", "[", "]", "words", "=", "new", "String", "[", "termList", ".", "size", "(", ")", "]", ";", "String", "[", "]", "tags", "=", "new", "String", "[", "termList", ".", "size", "(", ")", "]", ";", "int", "k", "=", "0", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "words", "[", "k", "]", "=", "term", ".", "word", ";", "tags", "[", "k", "]", "=", "term", ".", "nature", ".", "toString", "(", ")", ";", "++", "k", ";", "}", "Configuration", "bestParse", ";", "try", "{", "bestParse", "=", "parser", ".", "parse", "(", "words", ",", "tags", ",", "false", ",", "beamWidth", ",", "numOfThreads", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "RuntimeException", "(", "e", ")", ";", "}", "CoNLLWord", "[", "]", "wordArray", "=", "new", "CoNLLWord", "[", "termList", ".", "size", "(", ")", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "words", ".", "length", ";", "i", "++", ")", "{", "wordArray", "[", "i", "]", "=", "new", "CoNLLWord", "(", "i", "+", "1", ",", "words", "[", "i", "]", ",", "tags", "[", "i", "]", ")", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "words", ".", "length", ";", "i", "++", ")", "{", "wordArray", "[", "i", "]", ".", "DEPREL", "=", "parser", ".", "idWord", "(", "bestParse", ".", "state", ".", "getDependent", "(", "i", "+", "1", ")", ")", ";", "int", "index", "=", "bestParse", ".", "state", ".", "getHead", "(", "i", "+", "1", ")", "-", "1", ";", "if", "(", "index", "<", "0", "||", "index", ">=", "wordArray", ".", "length", ")", "{", "wordArray", "[", "i", "]", ".", "HEAD", "=", "CoNLLWord", ".", "ROOT", ";", "}", "else", "{", "wordArray", "[", "i", "]", ".", "HEAD", "=", "wordArray", "[", "index", "]", ";", "}", "}", "return", "new", "CoNLLSentence", "(", "wordArray", ")", ";", "}"], "docstring": "\u6267\u884c\u53e5\u6cd5\u5206\u6790\n\n@param termList     \u5206\u8bcd\u7ed3\u679c\n@param beamWidth    \u67f1\u641c\u7d22\u5bbd\u5ea6\n@param numOfThreads \u591a\u7ebf\u7a0b\u6570\n@return \u53e5\u6cd5\u6811", "docstring_tokens": ["\u6267\u884c\u53e5\u6cd5\u5206\u6790"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/parser/KBeamArcEagerDependencyParser.java#L125-L165", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java", "func_name": "CharacterBasedSegment.guessAttribute", "original_string": "public static CoreDictionary.Attribute guessAttribute(Term term)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.get(term.word);\n        if (attribute == null)\n        {\n            attribute = CustomDictionary.get(term.word);\n        }\n        if (attribute == null)\n        {\n            if (term.nature != null)\n            {\n                if (Nature.nx == term.nature)\n                    attribute = new CoreDictionary.Attribute(Nature.nx);\n                else if (Nature.m == term.nature)\n                    attribute = CoreDictionary.get(CoreDictionary.M_WORD_ID);\n            }\n            else if (term.word.trim().length() == 0)\n                attribute = new CoreDictionary.Attribute(Nature.x);\n            else attribute = new CoreDictionary.Attribute(Nature.nz);\n        }\n        else term.nature = attribute.nature[0];\n        return attribute;\n    }", "language": "java", "code": "public static CoreDictionary.Attribute guessAttribute(Term term)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.get(term.word);\n        if (attribute == null)\n        {\n            attribute = CustomDictionary.get(term.word);\n        }\n        if (attribute == null)\n        {\n            if (term.nature != null)\n            {\n                if (Nature.nx == term.nature)\n                    attribute = new CoreDictionary.Attribute(Nature.nx);\n                else if (Nature.m == term.nature)\n                    attribute = CoreDictionary.get(CoreDictionary.M_WORD_ID);\n            }\n            else if (term.word.trim().length() == 0)\n                attribute = new CoreDictionary.Attribute(Nature.x);\n            else attribute = new CoreDictionary.Attribute(Nature.nz);\n        }\n        else term.nature = attribute.nature[0];\n        return attribute;\n    }", "code_tokens": ["public", "static", "CoreDictionary", ".", "Attribute", "guessAttribute", "(", "Term", "term", ")", "{", "CoreDictionary", ".", "Attribute", "attribute", "=", "CoreDictionary", ".", "get", "(", "term", ".", "word", ")", ";", "if", "(", "attribute", "==", "null", ")", "{", "attribute", "=", "CustomDictionary", ".", "get", "(", "term", ".", "word", ")", ";", "}", "if", "(", "attribute", "==", "null", ")", "{", "if", "(", "term", ".", "nature", "!=", "null", ")", "{", "if", "(", "Nature", ".", "nx", "==", "term", ".", "nature", ")", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "nx", ")", ";", "else", "if", "(", "Nature", ".", "m", "==", "term", ".", "nature", ")", "attribute", "=", "CoreDictionary", ".", "get", "(", "CoreDictionary", ".", "M_WORD_ID", ")", ";", "}", "else", "if", "(", "term", ".", "word", ".", "trim", "(", ")", ".", "length", "(", ")", "==", "0", ")", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "x", ")", ";", "else", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "nz", ")", ";", "}", "else", "term", ".", "nature", "=", "attribute", ".", "nature", "[", "0", "]", ";", "return", "attribute", ";", "}"], "docstring": "\u67e5\u8be2\u6216\u731c\u6d4b\u4e00\u4e2a\u8bcd\u8bed\u7684\u5c5e\u6027\uff0c\n\u5148\u67e5\u8bcd\u5178\uff0c\u7136\u540e\u5bf9\u5b57\u6bcd\u3001\u6570\u5b57\u4e32\u7684\u5c5e\u6027\u8fdb\u884c\u5224\u65ad\uff0c\u6700\u540e\u731c\u6d4b\u672a\u767b\u5f55\u8bcd\n@param term\n@return", "docstring_tokens": ["\u67e5\u8be2\u6216\u731c\u6d4b\u4e00\u4e2a\u8bcd\u8bed\u7684\u5c5e\u6027\uff0c", "\u5148\u67e5\u8bcd\u5178\uff0c\u7136\u540e\u5bf9\u5b57\u6bcd\u3001\u6570\u5b57\u4e32\u7684\u5c5e\u6027\u8fdb\u884c\u5224\u65ad\uff0c\u6700\u540e\u731c\u6d4b\u672a\u767b\u5f55\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java#L38-L60", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java", "func_name": "CharacterBasedSegment.segSentence", "original_string": "@Override\n    protected List<Term> segSentence(char[] sentence)\n    {\n        if (sentence.length == 0) return Collections.emptyList();\n        List<Term> termList = roughSegSentence(sentence);\n        if (!(config.ner || config.useCustomDictionary || config.speechTagging))\n            return termList;\n        List<Vertex> vertexList = toVertexList(termList, true);\n        if (config.speechTagging)\n        {\n            Viterbi.compute(vertexList, CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);\n            int i = 0;\n            for (Term term : termList)\n            {\n                if (term.nature != null) term.nature = vertexList.get(i + 1).guessNature();\n                ++i;\n            }\n        }\n        if (config.useCustomDictionary)\n        {\n            combineByCustomDictionary(vertexList);\n            termList = convert(vertexList, config.offset);\n        }\n        return termList;\n    }", "language": "java", "code": "@Override\n    protected List<Term> segSentence(char[] sentence)\n    {\n        if (sentence.length == 0) return Collections.emptyList();\n        List<Term> termList = roughSegSentence(sentence);\n        if (!(config.ner || config.useCustomDictionary || config.speechTagging))\n            return termList;\n        List<Vertex> vertexList = toVertexList(termList, true);\n        if (config.speechTagging)\n        {\n            Viterbi.compute(vertexList, CoreDictionaryTransformMatrixDictionary.transformMatrixDictionary);\n            int i = 0;\n            for (Term term : termList)\n            {\n                if (term.nature != null) term.nature = vertexList.get(i + 1).guessNature();\n                ++i;\n            }\n        }\n        if (config.useCustomDictionary)\n        {\n            combineByCustomDictionary(vertexList);\n            termList = convert(vertexList, config.offset);\n        }\n        return termList;\n    }", "code_tokens": ["@", "Override", "protected", "List", "<", "Term", ">", "segSentence", "(", "char", "[", "]", "sentence", ")", "{", "if", "(", "sentence", ".", "length", "==", "0", ")", "return", "Collections", ".", "emptyList", "(", ")", ";", "List", "<", "Term", ">", "termList", "=", "roughSegSentence", "(", "sentence", ")", ";", "if", "(", "!", "(", "config", ".", "ner", "||", "config", ".", "useCustomDictionary", "||", "config", ".", "speechTagging", ")", ")", "return", "termList", ";", "List", "<", "Vertex", ">", "vertexList", "=", "toVertexList", "(", "termList", ",", "true", ")", ";", "if", "(", "config", ".", "speechTagging", ")", "{", "Viterbi", ".", "compute", "(", "vertexList", ",", "CoreDictionaryTransformMatrixDictionary", ".", "transformMatrixDictionary", ")", ";", "int", "i", "=", "0", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "if", "(", "term", ".", "nature", "!=", "null", ")", "term", ".", "nature", "=", "vertexList", ".", "get", "(", "i", "+", "1", ")", ".", "guessNature", "(", ")", ";", "++", "i", ";", "}", "}", "if", "(", "config", ".", "useCustomDictionary", ")", "{", "combineByCustomDictionary", "(", "vertexList", ")", ";", "termList", "=", "convert", "(", "vertexList", ",", "config", ".", "offset", ")", ";", "}", "return", "termList", ";", "}"], "docstring": "\u4ee5\u4e0b\u65b9\u6cd5\u7528\u4e8e\u7eaf\u5206\u8bcd\u6a21\u578b\n\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u8054\u5408\u6a21\u578b\u5219\u76f4\u63a5\u91cd\u8f7dsegSentence", "docstring_tokens": ["\u4ee5\u4e0b\u65b9\u6cd5\u7528\u4e8e\u7eaf\u5206\u8bcd\u6a21\u578b", "\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u8054\u5408\u6a21\u578b\u5219\u76f4\u63a5\u91cd\u8f7dsegSentence"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java#L67-L91", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java", "func_name": "CharacterBasedSegment.toVertexList", "original_string": "protected List<Vertex> toVertexList(List<Term> wordList, boolean appendStart)\n    {\n        ArrayList<Vertex> vertexList = new ArrayList<Vertex>(wordList.size() + 2);\n        if (appendStart) vertexList.add(Vertex.newB());\n        for (Term word : wordList)\n        {\n            CoreDictionary.Attribute attribute = guessAttribute(word);\n            Vertex vertex = new Vertex(word.word, attribute);\n            vertexList.add(vertex);\n        }\n        if (appendStart) vertexList.add(Vertex.newE());\n        return vertexList;\n    }", "language": "java", "code": "protected List<Vertex> toVertexList(List<Term> wordList, boolean appendStart)\n    {\n        ArrayList<Vertex> vertexList = new ArrayList<Vertex>(wordList.size() + 2);\n        if (appendStart) vertexList.add(Vertex.newB());\n        for (Term word : wordList)\n        {\n            CoreDictionary.Attribute attribute = guessAttribute(word);\n            Vertex vertex = new Vertex(word.word, attribute);\n            vertexList.add(vertex);\n        }\n        if (appendStart) vertexList.add(Vertex.newE());\n        return vertexList;\n    }", "code_tokens": ["protected", "List", "<", "Vertex", ">", "toVertexList", "(", "List", "<", "Term", ">", "wordList", ",", "boolean", "appendStart", ")", "{", "ArrayList", "<", "Vertex", ">", "vertexList", "=", "new", "ArrayList", "<", "Vertex", ">", "(", "wordList", ".", "size", "(", ")", "+", "2", ")", ";", "if", "(", "appendStart", ")", "vertexList", ".", "add", "(", "Vertex", ".", "newB", "(", ")", ")", ";", "for", "(", "Term", "word", ":", "wordList", ")", "{", "CoreDictionary", ".", "Attribute", "attribute", "=", "guessAttribute", "(", "word", ")", ";", "Vertex", "vertex", "=", "new", "Vertex", "(", "word", ".", "word", ",", "attribute", ")", ";", "vertexList", ".", "add", "(", "vertex", ")", ";", "}", "if", "(", "appendStart", ")", "vertexList", ".", "add", "(", "Vertex", ".", "newE", "(", ")", ")", ";", "return", "vertexList", ";", "}"], "docstring": "\u5c06\u4e2d\u95f4\u7ed3\u679c\u8f6c\u6362\u4e3a\u8bcd\u7f51\u9876\u70b9,\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u57fa\u4e8eVertex\u5f00\u53d1\u7684\u529f\u80fd, \u5982\u8bcd\u6027\u6807\u6ce8\u3001NER\u7b49\n@param wordList\n@param appendStart\n@return", "docstring_tokens": ["\u5c06\u4e2d\u95f4\u7ed3\u679c\u8f6c\u6362\u4e3a\u8bcd\u7f51\u9876\u70b9", "\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u57fa\u4e8eVertex\u5f00\u53d1\u7684\u529f\u80fd", "\u5982\u8bcd\u6027\u6807\u6ce8\u3001NER\u7b49"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/CharacterBasedSegment.java#L107-L119", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.save", "original_string": "public void save(String modelFile) throws IOException\n    {\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(modelFile)));\n        save(out);\n        out.close();\n    }", "language": "java", "code": "public void save(String modelFile) throws IOException\n    {\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(modelFile)));\n        save(out);\n        out.close();\n    }", "code_tokens": ["public", "void", "save", "(", "String", "modelFile", ")", "throws", "IOException", "{", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "new", "BufferedOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "modelFile", ")", ")", ")", ";", "save", "(", "out", ")", ";", "out", ".", "close", "(", ")", ";", "}"], "docstring": "\u4fdd\u5b58\u5230\u8def\u5f84\n\n@param modelFile\n@throws IOException", "docstring_tokens": ["\u4fdd\u5b58\u5230\u8def\u5f84"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L160-L165", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.save", "original_string": "public void save(String modelFile, final double ratio) throws IOException\n    {\n        save(modelFile, featureMap.entrySet(), ratio);\n    }", "language": "java", "code": "public void save(String modelFile, final double ratio) throws IOException\n    {\n        save(modelFile, featureMap.entrySet(), ratio);\n    }", "code_tokens": ["public", "void", "save", "(", "String", "modelFile", ",", "final", "double", "ratio", ")", "throws", "IOException", "{", "save", "(", "modelFile", ",", "featureMap", ".", "entrySet", "(", ")", ",", "ratio", ")", ";", "}"], "docstring": "\u538b\u7f29\u5e76\u4fdd\u5b58\n\n@param modelFile \u8def\u5f84\n@param ratio     \u538b\u7f29\u6bd4c\uff08\u538b\u7f29\u6389\u7684\u4f53\u79ef\uff0c\u538b\u7f29\u540e\u4f53\u79ef\u53d8\u4e3a1-c\uff09\n@throws IOException", "docstring_tokens": ["\u538b\u7f29\u5e76\u4fdd\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L174-L177", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.save", "original_string": "public void save(String modelFile, Set<Map.Entry<String, Integer>> featureIdSet, final double ratio, boolean text) throws IOException\n    {\n        float[] parameter = this.parameter;\n        this.compress(ratio, 1e-3f);\n\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(modelFile)));\n        save(out);\n        out.close();\n\n        if (text)\n        {\n            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(modelFile + \".txt\"), \"UTF-8\"));\n            TagSet tagSet = featureMap.tagSet;\n            for (Map.Entry<String, Integer> entry : featureIdSet)\n            {\n                bw.write(entry.getKey());\n                if (featureIdSet.size() == parameter.length)\n                {\n                    bw.write(\"\\t\");\n                    bw.write(String.valueOf(parameter[entry.getValue()]));\n                }\n                else\n                {\n                    for (int i = 0; i < tagSet.size(); ++i)\n                    {\n                        bw.write(\"\\t\");\n                        bw.write(String.valueOf(parameter[entry.getValue() * tagSet.size() + i]));\n                    }\n                }\n                bw.newLine();\n            }\n            bw.close();\n        }\n    }", "language": "java", "code": "public void save(String modelFile, Set<Map.Entry<String, Integer>> featureIdSet, final double ratio, boolean text) throws IOException\n    {\n        float[] parameter = this.parameter;\n        this.compress(ratio, 1e-3f);\n\n        DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(modelFile)));\n        save(out);\n        out.close();\n\n        if (text)\n        {\n            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(modelFile + \".txt\"), \"UTF-8\"));\n            TagSet tagSet = featureMap.tagSet;\n            for (Map.Entry<String, Integer> entry : featureIdSet)\n            {\n                bw.write(entry.getKey());\n                if (featureIdSet.size() == parameter.length)\n                {\n                    bw.write(\"\\t\");\n                    bw.write(String.valueOf(parameter[entry.getValue()]));\n                }\n                else\n                {\n                    for (int i = 0; i < tagSet.size(); ++i)\n                    {\n                        bw.write(\"\\t\");\n                        bw.write(String.valueOf(parameter[entry.getValue() * tagSet.size() + i]));\n                    }\n                }\n                bw.newLine();\n            }\n            bw.close();\n        }\n    }", "code_tokens": ["public", "void", "save", "(", "String", "modelFile", ",", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", ">", "featureIdSet", ",", "final", "double", "ratio", ",", "boolean", "text", ")", "throws", "IOException", "{", "float", "[", "]", "parameter", "=", "this", ".", "parameter", ";", "this", ".", "compress", "(", "ratio", ",", "1e-3f", ")", ";", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "new", "BufferedOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "modelFile", ")", ")", ")", ";", "save", "(", "out", ")", ";", "out", ".", "close", "(", ")", ";", "if", "(", "text", ")", "{", "BufferedWriter", "bw", "=", "new", "BufferedWriter", "(", "new", "OutputStreamWriter", "(", "IOUtil", ".", "newOutputStream", "(", "modelFile", "+", "\".txt\"", ")", ",", "\"UTF-8\"", ")", ")", ";", "TagSet", "tagSet", "=", "featureMap", ".", "tagSet", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "featureIdSet", ")", "{", "bw", ".", "write", "(", "entry", ".", "getKey", "(", ")", ")", ";", "if", "(", "featureIdSet", ".", "size", "(", ")", "==", "parameter", ".", "length", ")", "{", "bw", ".", "write", "(", "\"\\t\"", ")", ";", "bw", ".", "write", "(", "String", ".", "valueOf", "(", "parameter", "[", "entry", ".", "getValue", "(", ")", "]", ")", ")", ";", "}", "else", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "tagSet", ".", "size", "(", ")", ";", "++", "i", ")", "{", "bw", ".", "write", "(", "\"\\t\"", ")", ";", "bw", ".", "write", "(", "String", ".", "valueOf", "(", "parameter", "[", "entry", ".", "getValue", "(", ")", "*", "tagSet", ".", "size", "(", ")", "+", "i", "]", ")", ")", ";", "}", "}", "bw", ".", "newLine", "(", ")", ";", "}", "bw", ".", "close", "(", ")", ";", "}", "}"], "docstring": "\u4fdd\u5b58\n\n@param modelFile    \u8def\u5f84\n@param featureIdSet \u7279\u5f81\u96c6\uff08\u6709\u4e9b\u6570\u636e\u7ed3\u6784\u4e0d\u652f\u6301\u904d\u5386\uff0c\u53ef\u4ee5\u63d0\u4f9b\u6784\u9020\u65f6\u7528\u5230\u7684\u7279\u5f81\u96c6\u6765\u89c4\u907f\u8fd9\u4e2a\u7f3a\u9677\uff09\n@param ratio        \u538b\u7f29\u6bd4\n@param text         \u662f\u5426\u8f93\u51fa\u6587\u672c\u4ee5\u4f9b\u8c03\u8bd5\n@throws IOException", "docstring_tokens": ["\u4fdd\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L193-L226", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.update", "original_string": "public void update(Collection<Integer> x, int y)\n    {\n        assert y == 1 || y == -1 : \"\u611f\u77e5\u673a\u7684\u6807\u7b7ey\u5fc5\u987b\u662f\u00b11\";\n        for (Integer f : x)\n            parameter[f] += y;\n    }", "language": "java", "code": "public void update(Collection<Integer> x, int y)\n    {\n        assert y == 1 || y == -1 : \"\u611f\u77e5\u673a\u7684\u6807\u7b7ey\u5fc5\u987b\u662f\u00b11\";\n        for (Integer f : x)\n            parameter[f] += y;\n    }", "code_tokens": ["public", "void", "update", "(", "Collection", "<", "Integer", ">", "x", ",", "int", "y", ")", "{", "assert", "y", "==", "1", "||", "y", "==", "-", "1", ":", "\"\u611f\u77e5\u673a\u7684\u6807\u7b7ey\u5fc5\u987b\u662f\u00b11\";", "", "for", "(", "Integer", "f", ":", "x", ")", "parameter", "[", "]", "+=", "y", ";", "}"], "docstring": "\u53c2\u6570\u66f4\u65b0\n\n@param x \u7279\u5f81\u5411\u91cf\n@param y \u6b63\u786e\u7b54\u6848", "docstring_tokens": ["\u53c2\u6570\u66f4\u65b0"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L234-L239", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.decode", "original_string": "public int decode(Collection<Integer> x)\n    {\n        float y = 0;\n        for (Integer f : x)\n            y += parameter[f];\n        return y < 0 ? -1 : 1;\n    }", "language": "java", "code": "public int decode(Collection<Integer> x)\n    {\n        float y = 0;\n        for (Integer f : x)\n            y += parameter[f];\n        return y < 0 ? -1 : 1;\n    }", "code_tokens": ["public", "int", "decode", "(", "Collection", "<", "Integer", ">", "x", ")", "{", "float", "y", "=", "0", ";", "for", "(", "Integer", "f", ":", "x", ")", "y", "+=", "parameter", "[", "]", ";", "return", "y", "<", "0", "?", "-", "1", ":", "1", ";", "}"], "docstring": "\u5206\u79bb\u8d85\u5e73\u9762\u89e3\u7801\n\n@param x \u7279\u5f81\u5411\u91cf\n@return sign(wx)", "docstring_tokens": ["\u5206\u79bb\u8d85\u5e73\u9762\u89e3\u7801"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L247-L253", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.viterbiDecode", "original_string": "public double viterbiDecode(Instance instance, int[] guessLabel)\n    {\n        final int[] allLabel = featureMap.allLabels();\n        final int bos = featureMap.bosTag();\n        final int sentenceLength = instance.tagArray.length;\n        final int labelSize = allLabel.length;\n\n        int[][] preMatrix = new int[sentenceLength][labelSize];\n        double[][] scoreMatrix = new double[2][labelSize];\n\n        for (int i = 0; i < sentenceLength; i++)\n        {\n            int _i = i & 1;\n            int _i_1 = 1 - _i;\n            int[] allFeature = instance.getFeatureAt(i);\n            final int transitionFeatureIndex = allFeature.length - 1;\n            if (0 == i)\n            {\n                allFeature[transitionFeatureIndex] = bos;\n                for (int j = 0; j < allLabel.length; j++)\n                {\n                    preMatrix[0][j] = j;\n\n                    double score = score(allFeature, j);\n\n                    scoreMatrix[0][j] = score;\n                }\n            }\n            else\n            {\n                for (int curLabel = 0; curLabel < allLabel.length; curLabel++)\n                {\n\n                    double maxScore = Integer.MIN_VALUE;\n\n                    for (int preLabel = 0; preLabel < allLabel.length; preLabel++)\n                    {\n\n                        allFeature[transitionFeatureIndex] = preLabel;\n                        double score = score(allFeature, curLabel);\n\n                        double curScore = scoreMatrix[_i_1][preLabel] + score;\n\n                        if (maxScore < curScore)\n                        {\n                            maxScore = curScore;\n                            preMatrix[i][curLabel] = preLabel;\n                            scoreMatrix[_i][curLabel] = maxScore;\n                        }\n                    }\n                }\n\n            }\n        }\n\n        int maxIndex = 0;\n        double maxScore = scoreMatrix[(sentenceLength - 1) & 1][0];\n\n        for (int index = 1; index < allLabel.length; index++)\n        {\n            if (maxScore < scoreMatrix[(sentenceLength - 1) & 1][index])\n            {\n                maxIndex = index;\n                maxScore = scoreMatrix[(sentenceLength - 1) & 1][index];\n            }\n        }\n\n        for (int i = sentenceLength - 1; i >= 0; --i)\n        {\n            guessLabel[i] = allLabel[maxIndex];\n            maxIndex = preMatrix[i][maxIndex];\n        }\n\n        return maxScore;\n    }", "language": "java", "code": "public double viterbiDecode(Instance instance, int[] guessLabel)\n    {\n        final int[] allLabel = featureMap.allLabels();\n        final int bos = featureMap.bosTag();\n        final int sentenceLength = instance.tagArray.length;\n        final int labelSize = allLabel.length;\n\n        int[][] preMatrix = new int[sentenceLength][labelSize];\n        double[][] scoreMatrix = new double[2][labelSize];\n\n        for (int i = 0; i < sentenceLength; i++)\n        {\n            int _i = i & 1;\n            int _i_1 = 1 - _i;\n            int[] allFeature = instance.getFeatureAt(i);\n            final int transitionFeatureIndex = allFeature.length - 1;\n            if (0 == i)\n            {\n                allFeature[transitionFeatureIndex] = bos;\n                for (int j = 0; j < allLabel.length; j++)\n                {\n                    preMatrix[0][j] = j;\n\n                    double score = score(allFeature, j);\n\n                    scoreMatrix[0][j] = score;\n                }\n            }\n            else\n            {\n                for (int curLabel = 0; curLabel < allLabel.length; curLabel++)\n                {\n\n                    double maxScore = Integer.MIN_VALUE;\n\n                    for (int preLabel = 0; preLabel < allLabel.length; preLabel++)\n                    {\n\n                        allFeature[transitionFeatureIndex] = preLabel;\n                        double score = score(allFeature, curLabel);\n\n                        double curScore = scoreMatrix[_i_1][preLabel] + score;\n\n                        if (maxScore < curScore)\n                        {\n                            maxScore = curScore;\n                            preMatrix[i][curLabel] = preLabel;\n                            scoreMatrix[_i][curLabel] = maxScore;\n                        }\n                    }\n                }\n\n            }\n        }\n\n        int maxIndex = 0;\n        double maxScore = scoreMatrix[(sentenceLength - 1) & 1][0];\n\n        for (int index = 1; index < allLabel.length; index++)\n        {\n            if (maxScore < scoreMatrix[(sentenceLength - 1) & 1][index])\n            {\n                maxIndex = index;\n                maxScore = scoreMatrix[(sentenceLength - 1) & 1][index];\n            }\n        }\n\n        for (int i = sentenceLength - 1; i >= 0; --i)\n        {\n            guessLabel[i] = allLabel[maxIndex];\n            maxIndex = preMatrix[i][maxIndex];\n        }\n\n        return maxScore;\n    }", "code_tokens": ["public", "double", "viterbiDecode", "(", "Instance", "instance", ",", "int", "[", "]", "guessLabel", ")", "{", "final", "int", "[", "]", "allLabel", "=", "featureMap", ".", "allLabels", "(", ")", ";", "final", "int", "bos", "=", "featureMap", ".", "bosTag", "(", ")", ";", "final", "int", "sentenceLength", "=", "instance", ".", "tagArray", ".", "length", ";", "final", "int", "labelSize", "=", "allLabel", ".", "length", ";", "int", "[", "]", "[", "]", "preMatrix", "=", "new", "int", "[", "sentenceLength", "]", "[", "labelSize", "]", ";", "double", "[", "]", "[", "]", "scoreMatrix", "=", "new", "double", "[", "2", "]", "[", "labelSize", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "sentenceLength", ";", "i", "++", ")", "{", "int", "_i", "=", "i", "&", "1", ";", "int", "_i_1", "=", "1", "-", "_i", ";", "int", "[", "]", "allFeature", "=", "instance", ".", "getFeatureAt", "(", "i", ")", ";", "final", "int", "transitionFeatureIndex", "=", "allFeature", ".", "length", "-", "1", ";", "if", "(", "0", "==", "i", ")", "{", "allFeature", "[", "transitionFeatureIndex", "]", "=", "bos", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "allLabel", ".", "length", ";", "j", "++", ")", "{", "preMatrix", "[", "0", "]", "[", "j", "]", "=", "j", ";", "double", "score", "=", "score", "(", "allFeature", ",", "j", ")", ";", "scoreMatrix", "[", "0", "]", "[", "j", "]", "=", "score", ";", "}", "}", "else", "{", "for", "(", "int", "curLabel", "=", "0", ";", "curLabel", "<", "allLabel", ".", "length", ";", "curLabel", "++", ")", "{", "double", "maxScore", "=", "Integer", ".", "MIN_VALUE", ";", "for", "(", "int", "preLabel", "=", "0", ";", "preLabel", "<", "allLabel", ".", "length", ";", "preLabel", "++", ")", "{", "allFeature", "[", "transitionFeatureIndex", "]", "=", "preLabel", ";", "double", "score", "=", "score", "(", "allFeature", ",", "curLabel", ")", ";", "double", "curScore", "=", "scoreMatrix", "[", "_i_1", "]", "[", "preLabel", "]", "+", "score", ";", "if", "(", "maxScore", "<", "curScore", ")", "{", "maxScore", "=", "curScore", ";", "preMatrix", "[", "i", "]", "[", "curLabel", "]", "=", "preLabel", ";", "scoreMatrix", "[", "_i", "]", "[", "curLabel", "]", "=", "maxScore", ";", "}", "}", "}", "}", "}", "int", "maxIndex", "=", "0", ";", "double", "maxScore", "=", "scoreMatrix", "[", "(", "sentenceLength", "-", "1", ")", "&", "1", "]", "[", "0", "]", ";", "for", "(", "int", "index", "=", "1", ";", "index", "<", "allLabel", ".", "length", ";", "index", "++", ")", "{", "if", "(", "maxScore", "<", "scoreMatrix", "[", "(", "sentenceLength", "-", "1", ")", "&", "1", "]", "[", "index", "]", ")", "{", "maxIndex", "=", "index", ";", "maxScore", "=", "scoreMatrix", "[", "(", "sentenceLength", "-", "1", ")", "&", "1", "]", "[", "index", "]", ";", "}", "}", "for", "(", "int", "i", "=", "sentenceLength", "-", "1", ";", "i", ">=", "0", ";", "--", "i", ")", "{", "guessLabel", "[", "i", "]", "=", "allLabel", "[", "maxIndex", "]", ";", "maxIndex", "=", "preMatrix", "[", "i", "]", "[", "maxIndex", "]", ";", "}", "return", "maxScore", ";", "}"], "docstring": "\u7ef4\u7279\u6bd4\u89e3\u7801\n\n@param instance   \u5b9e\u4f8b\n@param guessLabel \u8f93\u51fa\u6807\u7b7e\n@return", "docstring_tokens": ["\u7ef4\u7279\u6bd4\u89e3\u7801"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L273-L347", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.score", "original_string": "public double score(int[] featureVector, int currentTag)\n    {\n        double score = 0;\n        for (int index : featureVector)\n        {\n            if (index == -1)\n            {\n                continue;\n            }\n            else if (index < -1 || index >= featureMap.size())\n            {\n                throw new IllegalArgumentException(\"\u5728\u6253\u5206\u65f6\u4f20\u5165\u4e86\u975e\u6cd5\u7684\u4e0b\u6807\");\n            }\n            else\n            {\n                index = index * featureMap.tagSet.size() + currentTag;\n                score += parameter[index];    // \u5176\u5b9e\u5c31\u662f\u7279\u5f81\u6743\u91cd\u7684\u7d2f\u52a0\n            }\n        }\n        return score;\n    }", "language": "java", "code": "public double score(int[] featureVector, int currentTag)\n    {\n        double score = 0;\n        for (int index : featureVector)\n        {\n            if (index == -1)\n            {\n                continue;\n            }\n            else if (index < -1 || index >= featureMap.size())\n            {\n                throw new IllegalArgumentException(\"\u5728\u6253\u5206\u65f6\u4f20\u5165\u4e86\u975e\u6cd5\u7684\u4e0b\u6807\");\n            }\n            else\n            {\n                index = index * featureMap.tagSet.size() + currentTag;\n                score += parameter[index];    // \u5176\u5b9e\u5c31\u662f\u7279\u5f81\u6743\u91cd\u7684\u7d2f\u52a0\n            }\n        }\n        return score;\n    }", "code_tokens": ["public", "double", "score", "(", "int", "[", "]", "featureVector", ",", "int", "currentTag", ")", "{", "double", "score", "=", "0", ";", "for", "(", "int", "index", ":", "featureVector", ")", "{", "if", "(", "index", "==", "-", "1", ")", "{", "continue", ";", "}", "else", "if", "(", "index", "<", "-", "1", "||", "index", ">=", "featureMap", ".", "size", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"\u5728\u6253\u5206\u65f6\u4f20\u5165\u4e86\u975e\u6cd5\u7684\u4e0b\u6807\");", "", "", "}", "else", "{", "index", "=", "index", "*", "featureMap", ".", "tagSet", ".", "size", "(", ")", "+", "currentTag", ";", "score", "+=", "parameter", "[", "index", "]", ";", "// \u5176\u5b9e\u5c31\u662f\u7279\u5f81\u6743\u91cd\u7684\u7d2f\u52a0", "}", "}", "return", "score", ";", "}"], "docstring": "\u901a\u8fc7\u547d\u4e2d\u7684\u7279\u5f81\u51fd\u6570\u8ba1\u7b97\u5f97\u5206\n\n@param featureVector \u538b\u7f29\u5f62\u5f0f\u7684\u7279\u5f81id\u6784\u6210\u7684\u7279\u5f81\u5411\u91cf\n@return", "docstring_tokens": ["\u901a\u8fc7\u547d\u4e2d\u7684\u7279\u5f81\u51fd\u6570\u8ba1\u7b97\u5f97\u5206"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L355-L375", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java", "func_name": "LinearModel.load", "original_string": "public void load(String modelFile) throws IOException\n    {\n        if (HanLP.Config.DEBUG)\n            logger.start(\"\u52a0\u8f7d %s ... \", modelFile);\n        ByteArrayStream byteArray = ByteArrayStream.createByteArrayStream(modelFile);\n        if (!load(byteArray))\n        {\n            throw new IOException(String.format(\"%s \u52a0\u8f7d\u5931\u8d25\", modelFile));\n        }\n        if (HanLP.Config.DEBUG)\n            logger.finish(\" \u52a0\u8f7d\u5b8c\u6bd5\\n\");\n    }", "language": "java", "code": "public void load(String modelFile) throws IOException\n    {\n        if (HanLP.Config.DEBUG)\n            logger.start(\"\u52a0\u8f7d %s ... \", modelFile);\n        ByteArrayStream byteArray = ByteArrayStream.createByteArrayStream(modelFile);\n        if (!load(byteArray))\n        {\n            throw new IOException(String.format(\"%s \u52a0\u8f7d\u5931\u8d25\", modelFile));\n        }\n        if (HanLP.Config.DEBUG)\n            logger.finish(\" \u52a0\u8f7d\u5b8c\u6bd5\\n\");\n    }", "code_tokens": ["public", "void", "load", "(", "String", "modelFile", ")", "throws", "IOException", "{", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "logger", ".", "start", "(", "\"\u52a0\u8f7d %s ... \", mo", "d", "lFile);", "", "", "ByteArrayStream", "byteArray", "=", "ByteArrayStream", ".", "createByteArrayStream", "(", "modelFile", ")", ";", "if", "(", "!", "load", "(", "byteArray", ")", ")", "{", "throw", "new", "IOException", "(", "String", ".", "format", "(", "\"%s \u52a0\u8f7d\u5931\u8d25\", modelF", "i", "e));", "", "", "", "}", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "logger", ".", "finish", "(", "\" \u52a0\u8f7d\u5b8c\u6bd5\\n\");", "", "", "}"], "docstring": "\u52a0\u8f7d\u6a21\u578b\n\n@param modelFile\n@throws IOException", "docstring_tokens": ["\u52a0\u8f7d\u6a21\u578b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/model/LinearModel.java#L383-L394", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.GaussCdf", "original_string": "public static double GaussCdf(double z)\n    {\n        // input = z-value (-inf to +inf)\n        // output = p under Normal curve from -inf to z\n        // e.g., if z = 0.0, function returns 0.5000\n        // ACM Algorithm #209\n        double y; // 209 scratch variable\n        double p; // result. called \u2018z\u2019 in 209\n        double w; // 209 scratch variable\n\n        if (z == 0.0)\n        {\n            p = 0.0;\n        }\n        else\n        {\n            y = Math.abs(z) / 2.0;\n            if (y >= 3.0)\n            {\n                p = 1.0;\n            }\n            else if (y < 1.0)\n            {\n                w = y * y;\n                p = ((((((((0.000124818987 * w\n                    - 0.001075204047) * w + 0.005198775019) * w\n                    - 0.019198292004) * w + 0.059054035642) * w\n                    - 0.151968751364) * w + 0.319152932694) * w\n                    - 0.531923007300) * w + 0.797884560593) * y * 2.0;\n            }\n            else\n            {\n                y = y - 2.0;\n                p = (((((((((((((-0.000045255659 * y\n                    + 0.000152529290) * y - 0.000019538132) * y\n                    - 0.000676904986) * y + 0.001390604284) * y\n                    - 0.000794620820) * y - 0.002034254874) * y\n                    + 0.006549791214) * y - 0.010557625006) * y\n                    + 0.011630447319) * y - 0.009279453341) * y\n                    + 0.005353579108) * y - 0.002141268741) * y\n                    + 0.000535310849) * y + 0.999936657524;\n            }\n        }\n\n        if (z > 0.0)\n        {\n            return (p + 1.0) / 2.0;\n        }\n\n        return (1.0 - p) / 2.0;\n    }", "language": "java", "code": "public static double GaussCdf(double z)\n    {\n        // input = z-value (-inf to +inf)\n        // output = p under Normal curve from -inf to z\n        // e.g., if z = 0.0, function returns 0.5000\n        // ACM Algorithm #209\n        double y; // 209 scratch variable\n        double p; // result. called \u2018z\u2019 in 209\n        double w; // 209 scratch variable\n\n        if (z == 0.0)\n        {\n            p = 0.0;\n        }\n        else\n        {\n            y = Math.abs(z) / 2.0;\n            if (y >= 3.0)\n            {\n                p = 1.0;\n            }\n            else if (y < 1.0)\n            {\n                w = y * y;\n                p = ((((((((0.000124818987 * w\n                    - 0.001075204047) * w + 0.005198775019) * w\n                    - 0.019198292004) * w + 0.059054035642) * w\n                    - 0.151968751364) * w + 0.319152932694) * w\n                    - 0.531923007300) * w + 0.797884560593) * y * 2.0;\n            }\n            else\n            {\n                y = y - 2.0;\n                p = (((((((((((((-0.000045255659 * y\n                    + 0.000152529290) * y - 0.000019538132) * y\n                    - 0.000676904986) * y + 0.001390604284) * y\n                    - 0.000794620820) * y - 0.002034254874) * y\n                    + 0.006549791214) * y - 0.010557625006) * y\n                    + 0.011630447319) * y - 0.009279453341) * y\n                    + 0.005353579108) * y - 0.002141268741) * y\n                    + 0.000535310849) * y + 0.999936657524;\n            }\n        }\n\n        if (z > 0.0)\n        {\n            return (p + 1.0) / 2.0;\n        }\n\n        return (1.0 - p) / 2.0;\n    }", "code_tokens": ["public", "static", "double", "GaussCdf", "(", "double", "z", ")", "{", "// input = z-value (-inf to +inf)", "// output = p under Normal curve from -inf to z", "// e.g., if z = 0.0, function returns 0.5000", "// ACM Algorithm #209", "double", "y", ";", "// 209 scratch variable", "double", "p", ";", "// result. called \u2018z\u2019 in 209", "double", "w", ";", "// 209 scratch variable", "if", "(", "z", "==", "0.0", ")", "{", "p", "=", "0.0", ";", "}", "else", "{", "y", "=", "Math", ".", "abs", "(", "z", ")", "/", "2.0", ";", "if", "(", "y", ">=", "3.0", ")", "{", "p", "=", "1.0", ";", "}", "else", "if", "(", "y", "<", "1.0", ")", "{", "w", "=", "y", "*", "y", ";", "p", "=", "(", "(", "(", "(", "(", "(", "(", "(", "0.000124818987", "*", "w", "-", "0.001075204047", ")", "*", "w", "+", "0.005198775019", ")", "*", "w", "-", "0.019198292004", ")", "*", "w", "+", "0.059054035642", ")", "*", "w", "-", "0.151968751364", ")", "*", "w", "+", "0.319152932694", ")", "*", "w", "-", "0.531923007300", ")", "*", "w", "+", "0.797884560593", ")", "*", "y", "*", "2.0", ";", "}", "else", "{", "y", "=", "y", "-", "2.0", ";", "p", "=", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "-", "0.000045255659", "*", "y", "+", "0.000152529290", ")", "*", "y", "-", "0.000019538132", ")", "*", "y", "-", "0.000676904986", ")", "*", "y", "+", "0.001390604284", ")", "*", "y", "-", "0.000794620820", ")", "*", "y", "-", "0.002034254874", ")", "*", "y", "+", "0.006549791214", ")", "*", "y", "-", "0.010557625006", ")", "*", "y", "+", "0.011630447319", ")", "*", "y", "-", "0.009279453341", ")", "*", "y", "+", "0.005353579108", ")", "*", "y", "-", "0.002141268741", ")", "*", "y", "+", "0.000535310849", ")", "*", "y", "+", "0.999936657524", ";", "}", "}", "if", "(", "z", ">", "0.0", ")", "{", "return", "(", "p", "+", "1.0", ")", "/", "2.0", ";", "}", "return", "(", "1.0", "-", "p", ")", "/", "2.0", ";", "}"], "docstring": "\u7ed9\u5b9a\u9ad8\u65af\u51fd\u6570\u7684z\u503c\uff0c\u8fd4\u56dep\u503c\uff08\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\u503c\uff09<br>\nhttp://jamesmccaffrey.wordpress.com/2010/11/05/programmatically-computing-the-area-under-the-normal-curve/\n\n@param z \u4ece\u8d1f\u65e0\u7a77\u5230\u6b63\u65e0\u7a77\u7684\u503c\n@return \u9ad8\u65af\u51fd\u6570\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\u503c", "docstring_tokens": ["\u7ed9\u5b9a\u9ad8\u65af\u51fd\u6570\u7684z\u503c\uff0c\u8fd4\u56dep\u503c\uff08\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\u503c\uff09<br", ">", "http", ":", "//", "jamesmccaffrey", ".", "wordpress", ".", "com", "/", "2010", "/", "11", "/", "05", "/", "programmatically", "-", "computing", "-", "the", "-", "area", "-", "under", "-", "the", "-", "normal", "-", "curve", "/"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L52-L102", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.LogGamma", "original_string": "public static double LogGamma(double Z)\n    {\n        double S = 1.0 + 76.18009173 / Z - 86.50532033 / (Z + 1.0) + 24.01409822 / (Z + 2.0) - 1.231739516 / (Z + 3.0) + 0.00120858003 / (Z + 4.0) - 0.00000536382 / (Z + 5.0);\n        double LG = (Z - 0.5) * Math.log(Z + 4.5) - (Z + 4.5) + Math.log(S * 2.50662827465);\n\n        return LG;\n    }", "language": "java", "code": "public static double LogGamma(double Z)\n    {\n        double S = 1.0 + 76.18009173 / Z - 86.50532033 / (Z + 1.0) + 24.01409822 / (Z + 2.0) - 1.231739516 / (Z + 3.0) + 0.00120858003 / (Z + 4.0) - 0.00000536382 / (Z + 5.0);\n        double LG = (Z - 0.5) * Math.log(Z + 4.5) - (Z + 4.5) + Math.log(S * 2.50662827465);\n\n        return LG;\n    }", "code_tokens": ["public", "static", "double", "LogGamma", "(", "double", "Z", ")", "{", "double", "S", "=", "1.0", "+", "76.18009173", "/", "Z", "-", "86.50532033", "/", "(", "Z", "+", "1.0", ")", "+", "24.01409822", "/", "(", "Z", "+", "2.0", ")", "-", "1.231739516", "/", "(", "Z", "+", "3.0", ")", "+", "0.00120858003", "/", "(", "Z", "+", "4.0", ")", "-", "0.00000536382", "/", "(", "Z", "+", "5.0", ")", ";", "double", "LG", "=", "(", "Z", "-", "0.5", ")", "*", "Math", ".", "log", "(", "Z", "+", "4.5", ")", "-", "(", "Z", "+", "4.5", ")", "+", "Math", ".", "log", "(", "S", "*", "2.50662827465", ")", ";", "return", "LG", ";", "}"], "docstring": "Log Gamma Function\n\n@param Z\n@return", "docstring_tokens": ["Log", "Gamma", "Function"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L110-L116", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.Gcf", "original_string": "protected static double Gcf(double x, double A)\n    {\n        // Good for X>A+1\n        double A0 = 0;\n        double B0 = 1;\n        double A1 = 1;\n        double B1 = x;\n        double AOLD = 0;\n        double N = 0;\n        while (Math.abs((A1 - AOLD) / A1) > .00001)\n        {\n            AOLD = A1;\n            N = N + 1;\n            A0 = A1 + (N - A) * A0;\n            B0 = B1 + (N - A) * B0;\n            A1 = x * A0 + N * A1;\n            B1 = x * B0 + N * B1;\n            A0 = A0 / B1;\n            B0 = B0 / B1;\n            A1 = A1 / B1;\n            B1 = 1;\n        }\n        double Prob = Math.exp(A * Math.log(x) - x - LogGamma(A)) * A1;\n\n        return 1.0 - Prob;\n    }", "language": "java", "code": "protected static double Gcf(double x, double A)\n    {\n        // Good for X>A+1\n        double A0 = 0;\n        double B0 = 1;\n        double A1 = 1;\n        double B1 = x;\n        double AOLD = 0;\n        double N = 0;\n        while (Math.abs((A1 - AOLD) / A1) > .00001)\n        {\n            AOLD = A1;\n            N = N + 1;\n            A0 = A1 + (N - A) * A0;\n            B0 = B1 + (N - A) * B0;\n            A1 = x * A0 + N * A1;\n            B1 = x * B0 + N * B1;\n            A0 = A0 / B1;\n            B0 = B0 / B1;\n            A1 = A1 / B1;\n            B1 = 1;\n        }\n        double Prob = Math.exp(A * Math.log(x) - x - LogGamma(A)) * A1;\n\n        return 1.0 - Prob;\n    }", "code_tokens": ["protected", "static", "double", "Gcf", "(", "double", "x", ",", "double", "A", ")", "{", "// Good for X>A+1", "double", "A0", "=", "0", ";", "double", "B0", "=", "1", ";", "double", "A1", "=", "1", ";", "double", "B1", "=", "x", ";", "double", "AOLD", "=", "0", ";", "double", "N", "=", "0", ";", "while", "(", "Math", ".", "abs", "(", "(", "A1", "-", "AOLD", ")", "/", "A1", ")", ">", ".00001", ")", "{", "AOLD", "=", "A1", ";", "N", "=", "N", "+", "1", ";", "A0", "=", "A1", "+", "(", "N", "-", "A", ")", "*", "A0", ";", "B0", "=", "B1", "+", "(", "N", "-", "A", ")", "*", "B0", ";", "A1", "=", "x", "*", "A0", "+", "N", "*", "A1", ";", "B1", "=", "x", "*", "B0", "+", "N", "*", "B1", ";", "A0", "=", "A0", "/", "B1", ";", "B0", "=", "B0", "/", "B1", ";", "A1", "=", "A1", "/", "B1", ";", "B1", "=", "1", ";", "}", "double", "Prob", "=", "Math", ".", "exp", "(", "A", "*", "Math", ".", "log", "(", "x", ")", "-", "x", "-", "LogGamma", "(", "A", ")", ")", "*", "A1", ";", "return", "1.0", "-", "Prob", ";", "}"], "docstring": "Internal function used by GammaCdf\n\n@param x\n@param A\n@return", "docstring_tokens": ["Internal", "function", "used", "by", "GammaCdf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L125-L150", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.Gser", "original_string": "protected static double Gser(double x, double A)\n    {\n        // Good for X<A+1.\n        double T9 = 1 / A;\n        double G = T9;\n        double I = 1;\n        while (T9 > G * 0.00001)\n        {\n            T9 = T9 * x / (A + I);\n            G = G + T9;\n            ++I;\n        }\n        G = G * Math.exp(A * Math.log(x) - x - LogGamma(A));\n\n        return G;\n    }", "language": "java", "code": "protected static double Gser(double x, double A)\n    {\n        // Good for X<A+1.\n        double T9 = 1 / A;\n        double G = T9;\n        double I = 1;\n        while (T9 > G * 0.00001)\n        {\n            T9 = T9 * x / (A + I);\n            G = G + T9;\n            ++I;\n        }\n        G = G * Math.exp(A * Math.log(x) - x - LogGamma(A));\n\n        return G;\n    }", "code_tokens": ["protected", "static", "double", "Gser", "(", "double", "x", ",", "double", "A", ")", "{", "// Good for X<A+1.", "double", "T9", "=", "1", "/", "A", ";", "double", "G", "=", "T9", ";", "double", "I", "=", "1", ";", "while", "(", "T9", ">", "G", "*", "0.00001", ")", "{", "T9", "=", "T9", "*", "x", "/", "(", "A", "+", "I", ")", ";", "G", "=", "G", "+", "T9", ";", "++", "I", ";", "}", "G", "=", "G", "*", "Math", ".", "exp", "(", "A", "*", "Math", ".", "log", "(", "x", ")", "-", "x", "-", "LogGamma", "(", "A", ")", ")", ";", "return", "G", ";", "}"], "docstring": "Internal function used by GammaCdf\n\n@param x\n@param A\n@return", "docstring_tokens": ["Internal", "function", "used", "by", "GammaCdf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L159-L174", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.GammaCdf", "original_string": "protected static double GammaCdf(double x, double a) throws IllegalArgumentException\n    {\n        if (x < 0)\n        {\n            throw new IllegalArgumentException();\n        }\n\n        double GI = 0;\n        if (a > 200)\n        {\n            double z = (x - a) / Math.sqrt(a);\n            double y = GaussCdf(z);\n            double b1 = 2 / Math.sqrt(a);\n            double phiz = 0.39894228 * Math.exp(-z * z / 2);\n            double w = y - b1 * (z * z - 1) * phiz / 6;  //Edgeworth1\n            double b2 = 6 / a;\n            int zXor4 = ((int) z) ^ 4;\n            double u = 3 * b2 * (z * z - 3) + b1 * b1 * (zXor4 - 10 * z * z + 15);\n            GI = w - phiz * z * u / 72;        //Edgeworth2\n        }\n        else if (x < a + 1)\n        {\n            GI = Gser(x, a);\n        }\n        else\n        {\n            GI = Gcf(x, a);\n        }\n\n        return GI;\n    }", "language": "java", "code": "protected static double GammaCdf(double x, double a) throws IllegalArgumentException\n    {\n        if (x < 0)\n        {\n            throw new IllegalArgumentException();\n        }\n\n        double GI = 0;\n        if (a > 200)\n        {\n            double z = (x - a) / Math.sqrt(a);\n            double y = GaussCdf(z);\n            double b1 = 2 / Math.sqrt(a);\n            double phiz = 0.39894228 * Math.exp(-z * z / 2);\n            double w = y - b1 * (z * z - 1) * phiz / 6;  //Edgeworth1\n            double b2 = 6 / a;\n            int zXor4 = ((int) z) ^ 4;\n            double u = 3 * b2 * (z * z - 3) + b1 * b1 * (zXor4 - 10 * z * z + 15);\n            GI = w - phiz * z * u / 72;        //Edgeworth2\n        }\n        else if (x < a + 1)\n        {\n            GI = Gser(x, a);\n        }\n        else\n        {\n            GI = Gcf(x, a);\n        }\n\n        return GI;\n    }", "code_tokens": ["protected", "static", "double", "GammaCdf", "(", "double", "x", ",", "double", "a", ")", "throws", "IllegalArgumentException", "{", "if", "(", "x", "<", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", ")", ";", "}", "double", "GI", "=", "0", ";", "if", "(", "a", ">", "200", ")", "{", "double", "z", "=", "(", "x", "-", "a", ")", "/", "Math", ".", "sqrt", "(", "a", ")", ";", "double", "y", "=", "GaussCdf", "(", "z", ")", ";", "double", "b1", "=", "2", "/", "Math", ".", "sqrt", "(", "a", ")", ";", "double", "phiz", "=", "0.39894228", "*", "Math", ".", "exp", "(", "-", "z", "*", "z", "/", "2", ")", ";", "double", "w", "=", "y", "-", "b1", "*", "(", "z", "*", "z", "-", "1", ")", "*", "phiz", "/", "6", ";", "//Edgeworth1", "double", "b2", "=", "6", "/", "a", ";", "int", "zXor4", "=", "(", "(", "int", ")", "z", ")", "^", "4", ";", "double", "u", "=", "3", "*", "b2", "*", "(", "z", "*", "z", "-", "3", ")", "+", "b1", "*", "b1", "*", "(", "zXor4", "-", "10", "*", "z", "*", "z", "+", "15", ")", ";", "GI", "=", "w", "-", "phiz", "*", "z", "*", "u", "/", "72", ";", "//Edgeworth2", "}", "else", "if", "(", "x", "<", "a", "+", "1", ")", "{", "GI", "=", "Gser", "(", "x", ",", "a", ")", ";", "}", "else", "{", "GI", "=", "Gcf", "(", "x", ",", "a", ")", ";", "}", "return", "GI", ";", "}"], "docstring": "\u4f3d\u9a6c\u51fd\u6570\n\n@param x\n@param a\n@return\n@throws IllegalArgumentException", "docstring_tokens": ["\u4f3d\u9a6c\u51fd\u6570"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L184-L214", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java", "func_name": "ContinuousDistributions.ChisquareInverseCdf", "original_string": "public static double ChisquareInverseCdf(double p, int df)\n    {\n        final double CHI_EPSILON = 0.000001;   /* Accuracy of critchi approximation */\n        final double CHI_MAX = 99999.0;        /* Maximum chi-square value */\n        double minchisq = 0.0;\n        double maxchisq = CHI_MAX;\n        double chisqval = 0.0;\n\n        if (p <= 0.0)\n        {\n            return CHI_MAX;\n        }\n        else if (p >= 1.0)\n        {\n            return 0.0;\n        }\n\n        chisqval = df / Math.sqrt(p);    /* fair first value */\n        while ((maxchisq - minchisq) > CHI_EPSILON)\n        {\n            if (1 - ChisquareCdf(chisqval, df) < p)\n            {\n                maxchisq = chisqval;\n            }\n            else\n            {\n                minchisq = chisqval;\n            }\n            chisqval = (maxchisq + minchisq) * 0.5;\n        }\n\n        return chisqval;\n    }", "language": "java", "code": "public static double ChisquareInverseCdf(double p, int df)\n    {\n        final double CHI_EPSILON = 0.000001;   /* Accuracy of critchi approximation */\n        final double CHI_MAX = 99999.0;        /* Maximum chi-square value */\n        double minchisq = 0.0;\n        double maxchisq = CHI_MAX;\n        double chisqval = 0.0;\n\n        if (p <= 0.0)\n        {\n            return CHI_MAX;\n        }\n        else if (p >= 1.0)\n        {\n            return 0.0;\n        }\n\n        chisqval = df / Math.sqrt(p);    /* fair first value */\n        while ((maxchisq - minchisq) > CHI_EPSILON)\n        {\n            if (1 - ChisquareCdf(chisqval, df) < p)\n            {\n                maxchisq = chisqval;\n            }\n            else\n            {\n                minchisq = chisqval;\n            }\n            chisqval = (maxchisq + minchisq) * 0.5;\n        }\n\n        return chisqval;\n    }", "code_tokens": ["public", "static", "double", "ChisquareInverseCdf", "(", "double", "p", ",", "int", "df", ")", "{", "final", "double", "CHI_EPSILON", "=", "0.000001", ";", "/* Accuracy of critchi approximation */", "final", "double", "CHI_MAX", "=", "99999.0", ";", "/* Maximum chi-square value */", "double", "minchisq", "=", "0.0", ";", "double", "maxchisq", "=", "CHI_MAX", ";", "double", "chisqval", "=", "0.0", ";", "if", "(", "p", "<=", "0.0", ")", "{", "return", "CHI_MAX", ";", "}", "else", "if", "(", "p", ">=", "1.0", ")", "{", "return", "0.0", ";", "}", "chisqval", "=", "df", "/", "Math", ".", "sqrt", "(", "p", ")", ";", "/* fair first value */", "while", "(", "(", "maxchisq", "-", "minchisq", ")", ">", "CHI_EPSILON", ")", "{", "if", "(", "1", "-", "ChisquareCdf", "(", "chisqval", ",", "df", ")", "<", "p", ")", "{", "maxchisq", "=", "chisqval", ";", "}", "else", "{", "minchisq", "=", "chisqval", ";", "}", "chisqval", "=", "(", "maxchisq", "+", "minchisq", ")", "*", "0.5", ";", "}", "return", "chisqval", ";", "}"], "docstring": "\u7ed9\u5b9a\u5361\u65b9\u5206\u5e03\u7684p\u503c\u548c\u81ea\u7531\u5ea6\uff0c\u8fd4\u56de\u5361\u65b9\u503c\u3002\u5185\u90e8\u91c7\u7528\u4e8c\u5206\u641c\u7d22\u5b9e\u73b0\uff0c\u79fb\u690d\u81eaJS\u4ee3\u7801\uff1a\nhttp://www.fourmilab.ch/rpkp/experiments/analysis/chiCalc.js\n\n@param p  p\u503c\uff08\u7f6e\u4fe1\u5ea6\uff09\n@param df\n@return", "docstring_tokens": ["\u7ed9\u5b9a\u5361\u65b9\u5206\u5e03\u7684p\u503c\u548c\u81ea\u7531\u5ea6\uff0c\u8fd4\u56de\u5361\u65b9\u503c\u3002\u5185\u90e8\u91c7\u7528\u4e8c\u5206\u641c\u7d22\u5b9e\u73b0\uff0c\u79fb\u690d\u81eaJS\u4ee3\u7801\uff1a", "http", ":", "//", "www", ".", "fourmilab", ".", "ch", "/", "rpkp", "/", "experiments", "/", "analysis", "/", "chiCalc", ".", "js"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/statistics/ContinuousDistributions.java#L224-L256", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/TransformMatrixDictionary.java", "func_name": "TransformMatrixDictionary.getFrequency", "original_string": "public int getFrequency(String from, String to)\n    {\n        return getFrequency(convert(from), convert(to));\n    }", "language": "java", "code": "public int getFrequency(String from, String to)\n    {\n        return getFrequency(convert(from), convert(to));\n    }", "code_tokens": ["public", "int", "getFrequency", "(", "String", "from", ",", "String", "to", ")", "{", "return", "getFrequency", "(", "convert", "(", "from", ")", ",", "convert", "(", "to", ")", ")", ";", "}"], "docstring": "\u83b7\u53d6\u8f6c\u79fb\u9891\u6b21\n\n@param from\n@param to\n@return", "docstring_tokens": ["\u83b7\u53d6\u8f6c\u79fb\u9891\u6b21"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/TransformMatrixDictionary.java#L43-L46", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/TransformMatrixDictionary.java", "func_name": "TransformMatrixDictionary.getFrequency", "original_string": "public int getFrequency(E from, E to)\n    {\n        return matrix[from.ordinal()][to.ordinal()];\n    }", "language": "java", "code": "public int getFrequency(E from, E to)\n    {\n        return matrix[from.ordinal()][to.ordinal()];\n    }", "code_tokens": ["public", "int", "getFrequency", "(", "E", "from", ",", "E", "to", ")", "{", "return", "matrix", "[", "from", ".", "ordinal", "(", ")", "]", "[", "to", ".", "ordinal", "(", ")", "]", ";", "}"], "docstring": "\u83b7\u53d6\u8f6c\u79fb\u9891\u6b21\n\n@param from\n@param to\n@return", "docstring_tokens": ["\u83b7\u53d6\u8f6c\u79fb\u9891\u6b21"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/TransformMatrixDictionary.java#L55-L58", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/NatureDictionaryMaker.java", "func_name": "NatureDictionaryMaker.makeCoreDictionary", "original_string": "static boolean makeCoreDictionary(String inPath, String outPath)\n    {\n        final DictionaryMaker dictionaryMaker = new DictionaryMaker();\n        final TreeSet<String> labelSet = new TreeSet<String>();\n\n        CorpusLoader.walk(inPath, new CorpusLoader.Handler()\n        {\n            @Override\n            public void handle(Document document)\n            {\n                for (List<Word> sentence : document.getSimpleSentenceList(true))\n                {\n                    for (Word word : sentence)\n                    {\n                        if (shouldInclude(word))\n                            dictionaryMaker.add(word);\n                    }\n                }\n//                for (List<Word> sentence : document.getSimpleSentenceList(false))\n//                {\n//                    for (Word word : sentence)\n//                    {\n//                        if (shouldInclude(word))\n//                            dictionaryMaker.add(word);\n//                    }\n//                }\n            }\n\n            /**\n             * \u662f\u5426\u5e94\u5f53\u8ba1\u7b97\u8fd9\u4e2a\u8bcd\u8bed\n             * @param word\n             * @return\n             */\n            boolean shouldInclude(Word word)\n            {\n                if (\"m\".equals(word.label) || \"mq\".equals(word.label) || \"w\".equals(word.label) || \"t\".equals(word.label))\n                {\n                    if (!TextUtility.isAllChinese(word.value)) return false;\n                }\n                else if (\"nr\".equals(word.label))\n                {\n                    return false;\n                }\n\n                return true;\n            }\n        });\n        if (outPath != null)\n        return dictionaryMaker.saveTxtTo(outPath);\n        return false;\n    }", "language": "java", "code": "static boolean makeCoreDictionary(String inPath, String outPath)\n    {\n        final DictionaryMaker dictionaryMaker = new DictionaryMaker();\n        final TreeSet<String> labelSet = new TreeSet<String>();\n\n        CorpusLoader.walk(inPath, new CorpusLoader.Handler()\n        {\n            @Override\n            public void handle(Document document)\n            {\n                for (List<Word> sentence : document.getSimpleSentenceList(true))\n                {\n                    for (Word word : sentence)\n                    {\n                        if (shouldInclude(word))\n                            dictionaryMaker.add(word);\n                    }\n                }\n//                for (List<Word> sentence : document.getSimpleSentenceList(false))\n//                {\n//                    for (Word word : sentence)\n//                    {\n//                        if (shouldInclude(word))\n//                            dictionaryMaker.add(word);\n//                    }\n//                }\n            }\n\n            /**\n             * \u662f\u5426\u5e94\u5f53\u8ba1\u7b97\u8fd9\u4e2a\u8bcd\u8bed\n             * @param word\n             * @return\n             */\n            boolean shouldInclude(Word word)\n            {\n                if (\"m\".equals(word.label) || \"mq\".equals(word.label) || \"w\".equals(word.label) || \"t\".equals(word.label))\n                {\n                    if (!TextUtility.isAllChinese(word.value)) return false;\n                }\n                else if (\"nr\".equals(word.label))\n                {\n                    return false;\n                }\n\n                return true;\n            }\n        });\n        if (outPath != null)\n        return dictionaryMaker.saveTxtTo(outPath);\n        return false;\n    }", "code_tokens": ["static", "boolean", "makeCoreDictionary", "(", "String", "inPath", ",", "String", "outPath", ")", "{", "final", "DictionaryMaker", "dictionaryMaker", "=", "new", "DictionaryMaker", "(", ")", ";", "final", "TreeSet", "<", "String", ">", "labelSet", "=", "new", "TreeSet", "<", "String", ">", "(", ")", ";", "CorpusLoader", ".", "walk", "(", "inPath", ",", "new", "CorpusLoader", ".", "Handler", "(", ")", "{", "@", "Override", "public", "void", "handle", "(", "Document", "document", ")", "{", "for", "(", "List", "<", "Word", ">", "sentence", ":", "document", ".", "getSimpleSentenceList", "(", "true", ")", ")", "{", "for", "(", "Word", "word", ":", "sentence", ")", "{", "if", "(", "shouldInclude", "(", "word", ")", ")", "dictionaryMaker", ".", "add", "(", "word", ")", ";", "}", "}", "//                for (List<Word> sentence : document.getSimpleSentenceList(false))", "//                {", "//                    for (Word word : sentence)", "//                    {", "//                        if (shouldInclude(word))", "//                            dictionaryMaker.add(word);", "//                    }", "//                }", "}", "/**\n             * \u662f\u5426\u5e94\u5f53\u8ba1\u7b97\u8fd9\u4e2a\u8bcd\u8bed\n             * @param word\n             * @return\n             */", "boolean", "shouldInclude", "(", "Word", "word", ")", "{", "if", "(", "\"m\"", ".", "equals", "(", "word", ".", "label", ")", "||", "\"mq\"", ".", "equals", "(", "word", ".", "label", ")", "||", "\"w\"", ".", "equals", "(", "word", ".", "label", ")", "||", "\"t\"", ".", "equals", "(", "word", ".", "label", ")", ")", "{", "if", "(", "!", "TextUtility", ".", "isAllChinese", "(", "word", ".", "value", ")", ")", "return", "false", ";", "}", "else", "if", "(", "\"nr\"", ".", "equals", "(", "word", ".", "label", ")", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}", "}", ")", ";", "if", "(", "outPath", "!=", "null", ")", "return", "dictionaryMaker", ".", "saveTxtTo", "(", "outPath", ")", ";", "return", "false", ";", "}"], "docstring": "\u6307\u5b9a\u8bed\u6599\u5e93\u6587\u4ef6\u5939\uff0c\u5236\u4f5c\u4e00\u4efd\u8bcd\u9891\u8bcd\u5178\n@return", "docstring_tokens": ["\u6307\u5b9a\u8bed\u6599\u5e93\u6587\u4ef6\u5939\uff0c\u5236\u4f5c\u4e00\u4efd\u8bcd\u9891\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/NatureDictionaryMaker.java#L82-L132", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.put", "original_string": "public void put(String key, V value)\n    {\n        if (key.length() == 0) return;  // \u5b89\u5168\u8d77\u89c1\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (int i = 0; i < chars.length - 1; ++i)\n        {\n            // \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u5916\uff0c\u90fd\u662f\u7ee7\u7eed\n            branch.addChild(new Node(chars[i], Status.NOT_WORD_1, null));\n            branch = branch.getChild(chars[i]);\n        }\n        // \u6700\u540e\u4e00\u4e2a\u5b57\u52a0\u5165\u65f6\u5c5e\u6027\u4e3aend\n        if (branch.addChild(new Node<V>(chars[chars.length - 1], Status.WORD_END_3, value)))\n        {\n            ++size; // \u7ef4\u62a4size\n        }\n    }", "language": "java", "code": "public void put(String key, V value)\n    {\n        if (key.length() == 0) return;  // \u5b89\u5168\u8d77\u89c1\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (int i = 0; i < chars.length - 1; ++i)\n        {\n            // \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u5916\uff0c\u90fd\u662f\u7ee7\u7eed\n            branch.addChild(new Node(chars[i], Status.NOT_WORD_1, null));\n            branch = branch.getChild(chars[i]);\n        }\n        // \u6700\u540e\u4e00\u4e2a\u5b57\u52a0\u5165\u65f6\u5c5e\u6027\u4e3aend\n        if (branch.addChild(new Node<V>(chars[chars.length - 1], Status.WORD_END_3, value)))\n        {\n            ++size; // \u7ef4\u62a4size\n        }\n    }", "code_tokens": ["public", "void", "put", "(", "String", "key", ",", "V", "value", ")", "{", "if", "(", "key", ".", "length", "(", ")", "==", "0", ")", "return", ";", "// \u5b89\u5168\u8d77\u89c1", "BaseNode", "branch", "=", "this", ";", "char", "[", "]", "chars", "=", "key", ".", "toCharArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "chars", ".", "length", "-", "1", ";", "++", "i", ")", "{", "// \u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u5916\uff0c\u90fd\u662f\u7ee7\u7eed", "branch", ".", "addChild", "(", "new", "Node", "(", "chars", "[", "i", "]", ",", "Status", ".", "NOT_WORD_1", ",", "null", ")", ")", ";", "branch", "=", "branch", ".", "getChild", "(", "chars", "[", "i", "]", ")", ";", "}", "// \u6700\u540e\u4e00\u4e2a\u5b57\u52a0\u5165\u65f6\u5c5e\u6027\u4e3aend", "if", "(", "branch", ".", "addChild", "(", "new", "Node", "<", "V", ">", "(", "chars", "[", "chars", ".", "length", "-", "1", "]", ",", "Status", ".", "WORD_END_3", ",", "value", ")", ")", ")", "{", "++", "size", ";", "// \u7ef4\u62a4size", "}", "}"], "docstring": "\u63d2\u5165\u4e00\u4e2a\u8bcd\n\n@param key\n@param value", "docstring_tokens": ["\u63d2\u5165\u4e00\u4e2a\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L56-L72", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.remove", "original_string": "public void remove(String key)\n    {\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (int i = 0; i < chars.length - 1; ++i)\n        {\n            if (branch == null) return;\n            branch = branch.getChild(chars[i]);\n        }\n        if (branch == null) return;\n        // \u6700\u540e\u4e00\u4e2a\u5b57\u8bbe\u4e3aundefined\n        if (branch.addChild(new Node(chars[chars.length - 1], Status.UNDEFINED_0, value)))\n        {\n            --size;\n        }\n    }", "language": "java", "code": "public void remove(String key)\n    {\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (int i = 0; i < chars.length - 1; ++i)\n        {\n            if (branch == null) return;\n            branch = branch.getChild(chars[i]);\n        }\n        if (branch == null) return;\n        // \u6700\u540e\u4e00\u4e2a\u5b57\u8bbe\u4e3aundefined\n        if (branch.addChild(new Node(chars[chars.length - 1], Status.UNDEFINED_0, value)))\n        {\n            --size;\n        }\n    }", "code_tokens": ["public", "void", "remove", "(", "String", "key", ")", "{", "BaseNode", "branch", "=", "this", ";", "char", "[", "]", "chars", "=", "key", ".", "toCharArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "chars", ".", "length", "-", "1", ";", "++", "i", ")", "{", "if", "(", "branch", "==", "null", ")", "return", ";", "branch", "=", "branch", ".", "getChild", "(", "chars", "[", "i", "]", ")", ";", "}", "if", "(", "branch", "==", "null", ")", "return", ";", "// \u6700\u540e\u4e00\u4e2a\u5b57\u8bbe\u4e3aundefined", "if", "(", "branch", ".", "addChild", "(", "new", "Node", "(", "chars", "[", "chars", ".", "length", "-", "1", "]", ",", "Status", ".", "UNDEFINED_0", ",", "value", ")", ")", ")", "{", "--", "size", ";", "}", "}"], "docstring": "\u5220\u9664\u4e00\u4e2a\u8bcd\n\n@param key", "docstring_tokens": ["\u5220\u9664\u4e00\u4e2a\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L105-L120", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.entrySet", "original_string": "public Set<Map.Entry<String, V>> entrySet()\n    {\n        Set<Map.Entry<String, V>> entrySet = new TreeSet<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder();\n        for (BaseNode node : child)\n        {\n            if (node == null) continue;\n            node.walk(new StringBuilder(sb.toString()), entrySet);\n        }\n        return entrySet;\n    }", "language": "java", "code": "public Set<Map.Entry<String, V>> entrySet()\n    {\n        Set<Map.Entry<String, V>> entrySet = new TreeSet<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder();\n        for (BaseNode node : child)\n        {\n            if (node == null) continue;\n            node.walk(new StringBuilder(sb.toString()), entrySet);\n        }\n        return entrySet;\n    }", "code_tokens": ["public", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", "(", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", "=", "new", "TreeSet", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "(", ")", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "BaseNode", "node", ":", "child", ")", "{", "if", "(", "node", "==", "null", ")", "continue", ";", "node", ".", "walk", "(", "new", "StringBuilder", "(", "sb", ".", "toString", "(", ")", ")", ",", "entrySet", ")", ";", "}", "return", "entrySet", ";", "}"], "docstring": "\u83b7\u53d6\u952e\u503c\u5bf9\u96c6\u5408\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u952e\u503c\u5bf9\u96c6\u5408"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L185-L195", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.keySet", "original_string": "public Set<String> keySet()\n    {\n        TreeSet<String> keySet = new TreeSet<String>();\n        for (Map.Entry<String, V> entry : entrySet())\n        {\n            keySet.add(entry.getKey());\n        }\n\n        return keySet;\n    }", "language": "java", "code": "public Set<String> keySet()\n    {\n        TreeSet<String> keySet = new TreeSet<String>();\n        for (Map.Entry<String, V> entry : entrySet())\n        {\n            keySet.add(entry.getKey());\n        }\n\n        return keySet;\n    }", "code_tokens": ["public", "Set", "<", "String", ">", "keySet", "(", ")", "{", "TreeSet", "<", "String", ">", "keySet", "=", "new", "TreeSet", "<", "String", ">", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "V", ">", "entry", ":", "entrySet", "(", ")", ")", "{", "keySet", ".", "add", "(", "entry", ".", "getKey", "(", ")", ")", ";", "}", "return", "keySet", ";", "}"], "docstring": "\u952e\u96c6\u5408\n@return", "docstring_tokens": ["\u952e\u96c6\u5408"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L201-L210", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.prefixSearch", "original_string": "public Set<Map.Entry<String, V>> prefixSearch(String key)\n    {\n        Set<Map.Entry<String, V>> entrySet = new TreeSet<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder(key.substring(0, key.length() - 1));\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (char aChar : chars)\n        {\n            if (branch == null) return entrySet;\n            branch = branch.getChild(aChar);\n        }\n\n        if (branch == null) return entrySet;\n        branch.walk(sb, entrySet);\n        return entrySet;\n    }", "language": "java", "code": "public Set<Map.Entry<String, V>> prefixSearch(String key)\n    {\n        Set<Map.Entry<String, V>> entrySet = new TreeSet<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder(key.substring(0, key.length() - 1));\n        BaseNode branch = this;\n        char[] chars = key.toCharArray();\n        for (char aChar : chars)\n        {\n            if (branch == null) return entrySet;\n            branch = branch.getChild(aChar);\n        }\n\n        if (branch == null) return entrySet;\n        branch.walk(sb, entrySet);\n        return entrySet;\n    }", "code_tokens": ["public", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "prefixSearch", "(", "String", "key", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", "=", "new", "TreeSet", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "(", ")", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "key", ".", "substring", "(", "0", ",", "key", ".", "length", "(", ")", "-", "1", ")", ")", ";", "BaseNode", "branch", "=", "this", ";", "char", "[", "]", "chars", "=", "key", ".", "toCharArray", "(", ")", ";", "for", "(", "char", "aChar", ":", "chars", ")", "{", "if", "(", "branch", "==", "null", ")", "return", "entrySet", ";", "branch", "=", "branch", ".", "getChild", "(", "aChar", ")", ";", "}", "if", "(", "branch", "==", "null", ")", "return", "entrySet", ";", "branch", ".", "walk", "(", "sb", ",", "entrySet", ")", ";", "return", "entrySet", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n\n@param key \u67e5\u8be2\u4e32\n@return \u952e\u503c\u5bf9", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L218-L233", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.commonPrefixSearchWithValue", "original_string": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(String key)\n    {\n        char[] chars = key.toCharArray();\n        return commonPrefixSearchWithValue(chars, 0);\n    }", "language": "java", "code": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(String key)\n    {\n        char[] chars = key.toCharArray();\n        return commonPrefixSearchWithValue(chars, 0);\n    }", "code_tokens": ["public", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "commonPrefixSearchWithValue", "(", "String", "key", ")", "{", "char", "[", "]", "chars", "=", "key", ".", "toCharArray", "(", ")", ";", "return", "commonPrefixSearchWithValue", "(", "chars", ",", "0", ")", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\uff0c\u5305\u542b\u503c\n\n@param key \u952e\n@return \u952e\u503c\u5bf9\u5217\u8868", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2\uff0c\u5305\u542b\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L241-L245", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.commonPrefixSearchWithValue", "original_string": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(char[] chars, int begin)\n    {\n        LinkedList<Map.Entry<String, V>> result = new LinkedList<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder();\n        BaseNode branch = this;\n        for (int i = begin; i < chars.length; ++i)\n        {\n            char aChar = chars[i];\n            branch = branch.getChild(aChar);\n            if (branch == null || branch.status == Status.UNDEFINED_0) return result;\n            sb.append(aChar);\n            if (branch.status == Status.WORD_MIDDLE_2 || branch.status == Status.WORD_END_3)\n            {\n                result.add(new AbstractMap.SimpleEntry<String, V>(sb.toString(), (V) branch.value));\n            }\n        }\n\n        return result;\n    }", "language": "java", "code": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(char[] chars, int begin)\n    {\n        LinkedList<Map.Entry<String, V>> result = new LinkedList<Map.Entry<String, V>>();\n        StringBuilder sb = new StringBuilder();\n        BaseNode branch = this;\n        for (int i = begin; i < chars.length; ++i)\n        {\n            char aChar = chars[i];\n            branch = branch.getChild(aChar);\n            if (branch == null || branch.status == Status.UNDEFINED_0) return result;\n            sb.append(aChar);\n            if (branch.status == Status.WORD_MIDDLE_2 || branch.status == Status.WORD_END_3)\n            {\n                result.add(new AbstractMap.SimpleEntry<String, V>(sb.toString(), (V) branch.value));\n            }\n        }\n\n        return result;\n    }", "code_tokens": ["public", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "commonPrefixSearchWithValue", "(", "char", "[", "]", "chars", ",", "int", "begin", ")", "{", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "result", "=", "new", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "(", ")", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "BaseNode", "branch", "=", "this", ";", "for", "(", "int", "i", "=", "begin", ";", "i", "<", "chars", ".", "length", ";", "++", "i", ")", "{", "char", "aChar", "=", "chars", "[", "i", "]", ";", "branch", "=", "branch", ".", "getChild", "(", "aChar", ")", ";", "if", "(", "branch", "==", "null", "||", "branch", ".", "status", "==", "Status", ".", "UNDEFINED_0", ")", "return", "result", ";", "sb", ".", "append", "(", "aChar", ")", ";", "if", "(", "branch", ".", "status", "==", "Status", ".", "WORD_MIDDLE_2", "||", "branch", ".", "status", "==", "Status", ".", "WORD_END_3", ")", "{", "result", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "String", ",", "V", ">", "(", "sb", ".", "toString", "(", ")", ",", "(", "V", ")", "branch", ".", "value", ")", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\uff0c\u901a\u8fc7\u5b57\u7b26\u6570\u7ec4\u6765\u8868\u793a\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f18\u5316\u8fd0\u884c\u901f\u5ea6\n\n@param chars \u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6570\u7ec4\n@param begin \u5f00\u59cb\u7684\u4e0b\u6807\n@return", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2\uff0c\u901a\u8fc7\u5b57\u7b26\u6570\u7ec4\u6765\u8868\u793a\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f18\u5316\u8fd0\u884c\u901f\u5ea6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L254-L272", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.save", "original_string": "public boolean save(DataOutputStream out)\n    {\n        try\n        {\n            for (BaseNode node : child)\n            {\n                if (node == null)\n                {\n                    out.writeInt(0);\n                }\n                else\n                {\n                    out.writeInt(1);\n                    node.walkToSave(out);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u4fdd\u5b58\u5230\" + out + \"\u5931\u8d25\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public boolean save(DataOutputStream out)\n    {\n        try\n        {\n            for (BaseNode node : child)\n            {\n                if (node == null)\n                {\n                    out.writeInt(0);\n                }\n                else\n                {\n                    out.writeInt(1);\n                    node.walkToSave(out);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u4fdd\u5b58\u5230\" + out + \"\u5931\u8d25\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "boolean", "save", "(", "DataOutputStream", "out", ")", "{", "try", "{", "for", "(", "BaseNode", "node", ":", "child", ")", "{", "if", "(", "node", "==", "null", ")", "{", "out", ".", "writeInt", "(", "0", ")", ";", "}", "else", "{", "out", ".", "writeInt", "(", "1", ")", ";", "node", ".", "walkToSave", "(", "out", ")", ";", "}", "}", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u4fdd\u5b58\u5230\" + out", "+", "\"\u5931\u8d25", " ", " TextUti", "i", "y.exception", "T", "oString(e));", "", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4fdd\u5b58\u5230\u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41\n\n@param out\n@return", "docstring_tokens": ["\u4fdd\u5b58\u5230\u4e8c\u8fdb\u5236\u8f93\u51fa\u6d41"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L379-L403", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.load", "original_string": "public boolean load(String path, V[] value)\n    {\n        byte[] bytes = IOUtil.readBytes(path);\n        if (bytes == null) return false;\n        _ValueArray valueArray = new _ValueArray(value);\n        ByteArray byteArray = new ByteArray(bytes);\n        for (int i = 0; i < child.length; ++i)\n        {\n            int flag = byteArray.nextInt();\n            if (flag == 1)\n            {\n                child[i] = new Node<V>();\n                child[i].walkToLoad(byteArray, valueArray);\n            }\n        }\n        size = value.length;\n\n        return true;\n    }", "language": "java", "code": "public boolean load(String path, V[] value)\n    {\n        byte[] bytes = IOUtil.readBytes(path);\n        if (bytes == null) return false;\n        _ValueArray valueArray = new _ValueArray(value);\n        ByteArray byteArray = new ByteArray(bytes);\n        for (int i = 0; i < child.length; ++i)\n        {\n            int flag = byteArray.nextInt();\n            if (flag == 1)\n            {\n                child[i] = new Node<V>();\n                child[i].walkToLoad(byteArray, valueArray);\n            }\n        }\n        size = value.length;\n\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "String", "path", ",", "V", "[", "]", "value", ")", "{", "byte", "[", "]", "bytes", "=", "IOUtil", ".", "readBytes", "(", "path", ")", ";", "if", "(", "bytes", "==", "null", ")", "return", "false", ";", "_ValueArray", "valueArray", "=", "new", "_ValueArray", "(", "value", ")", ";", "ByteArray", "byteArray", "=", "new", "ByteArray", "(", "bytes", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "child", ".", "length", ";", "++", "i", ")", "{", "int", "flag", "=", "byteArray", ".", "nextInt", "(", ")", ";", "if", "(", "flag", "==", "1", ")", "{", "child", "[", "i", "]", "=", "new", "Node", "<", "V", ">", "(", ")", ";", "child", "[", "i", "]", ".", "walkToLoad", "(", "byteArray", ",", "valueArray", ")", ";", "}", "}", "size", "=", "value", ".", "length", ";", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\u4e8c\u5206\u6570\u7ec4\u6811\n\n@param path  \u8def\u5f84\n@param value \u989d\u5916\u63d0\u4f9b\u7684\u503c\u6570\u7ec4\uff0c\u6309\u7167\u503c\u7684\u5b57\u5178\u5e8f\u3002\uff08\u4e4b\u6240\u4ee5\u8981\u6c42\u63d0\u4f9b\u5b83\uff0c\u662f\u56e0\u4e3a\u6cdb\u578b\u7684\u4fdd\u5b58\u4e0d\u5f52\u6811\u7ba1\u7406\uff09\n@return \u662f\u5426\u6210\u529f", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\u4e8c\u5206\u6570\u7ec4\u6811"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L412-L430", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.parseLongestText", "original_string": "public void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        int length = text.length();\n        for (int i = 0; i < length; ++i)\n        {\n            BaseNode<V> state = transition(text.charAt(i));\n            if (state != null)\n            {\n                int to = i + 1;\n                int end = to;\n                V value = state.getValue();\n                for (; to < length; ++to)\n                {\n                    state = state.transition(text.charAt(to));\n                    if (state == null) break;\n                    if (state.getValue() != null)\n                    {\n                        value = state.getValue();\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    processor.hit(i, end, value);\n                    i = end - 1;\n                }\n            }\n        }\n    }", "language": "java", "code": "public void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        int length = text.length();\n        for (int i = 0; i < length; ++i)\n        {\n            BaseNode<V> state = transition(text.charAt(i));\n            if (state != null)\n            {\n                int to = i + 1;\n                int end = to;\n                V value = state.getValue();\n                for (; to < length; ++to)\n                {\n                    state = state.transition(text.charAt(to));\n                    if (state == null) break;\n                    if (state.getValue() != null)\n                    {\n                        value = state.getValue();\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    processor.hit(i, end, value);\n                    i = end - 1;\n                }\n            }\n        }\n    }", "code_tokens": ["public", "void", "parseLongestText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "processor", ")", "{", "int", "length", "=", "text", ".", "length", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "BaseNode", "<", "V", ">", "state", "=", "transition", "(", "text", ".", "charAt", "(", "i", ")", ")", ";", "if", "(", "state", "!=", "null", ")", "{", "int", "to", "=", "i", "+", "1", ";", "int", "end", "=", "to", ";", "V", "value", "=", "state", ".", "getValue", "(", ")", ";", "for", "(", ";", "to", "<", "length", ";", "++", "to", ")", "{", "state", "=", "state", ".", "transition", "(", "text", ".", "charAt", "(", "to", ")", ")", ";", "if", "(", "state", "==", "null", ")", "break", ";", "if", "(", "state", ".", "getValue", "(", ")", "!=", "null", ")", "{", "value", "=", "state", ".", "getValue", "(", ")", ";", "end", "=", "to", "+", "1", ";", "}", "}", "if", "(", "value", "!=", "null", ")", "{", "processor", ".", "hit", "(", "i", ",", "end", ",", "value", ")", ";", "i", "=", "end", "-", "1", ";", "}", "}", "}", "}"], "docstring": "\u6700\u957f\u5339\u914d\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u6700\u957f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L523-L551", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java", "func_name": "BinTrie.parseText", "original_string": "public void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        int length = text.length();\n        int begin = 0;\n        BaseNode<V> state = this;\n\n        for (int i = begin; i < length; ++i)\n        {\n            state = state.transition(text.charAt(i));\n            if (state != null)\n            {\n                V value = state.getValue();\n                if (value != null)\n                {\n                    processor.hit(begin, i + 1, value);\n                }\n            }\n            else\n            {\n                i = begin;\n                ++begin;\n                state = this;\n            }\n        }\n    }", "language": "java", "code": "public void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        int length = text.length();\n        int begin = 0;\n        BaseNode<V> state = this;\n\n        for (int i = begin; i < length; ++i)\n        {\n            state = state.transition(text.charAt(i));\n            if (state != null)\n            {\n                V value = state.getValue();\n                if (value != null)\n                {\n                    processor.hit(begin, i + 1, value);\n                }\n            }\n            else\n            {\n                i = begin;\n                ++begin;\n                state = this;\n            }\n        }\n    }", "code_tokens": ["public", "void", "parseText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "processor", ")", "{", "int", "length", "=", "text", ".", "length", "(", ")", ";", "int", "begin", "=", "0", ";", "BaseNode", "<", "V", ">", "state", "=", "this", ";", "for", "(", "int", "i", "=", "begin", ";", "i", "<", "length", ";", "++", "i", ")", "{", "state", "=", "state", ".", "transition", "(", "text", ".", "charAt", "(", "i", ")", ")", ";", "if", "(", "state", "!=", "null", ")", "{", "V", "value", "=", "state", ".", "getValue", "(", ")", ";", "if", "(", "value", "!=", "null", ")", "{", "processor", ".", "hit", "(", "begin", ",", "i", "+", "1", ",", "value", ")", ";", "}", "}", "else", "{", "i", "=", "begin", ";", "++", "begin", ";", "state", "=", "this", ";", "}", "}", "}"], "docstring": "\u5339\u914d\u6587\u672c\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u5339\u914d\u6587\u672c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BinTrie.java#L595-L619", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/transition/parser/ArcEager.java", "func_name": "ArcEager.isTerminal", "original_string": "public static boolean isTerminal(ArrayList<Configuration> beam)\n    {\n        for (Configuration configuration : beam)\n            if (!configuration.state.isTerminalState())\n                return false;\n        return true;\n    }", "language": "java", "code": "public static boolean isTerminal(ArrayList<Configuration> beam)\n    {\n        for (Configuration configuration : beam)\n            if (!configuration.state.isTerminalState())\n                return false;\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "isTerminal", "(", "ArrayList", "<", "Configuration", ">", "beam", ")", "{", "for", "(", "Configuration", "configuration", ":", "beam", ")", "if", "(", "!", "configuration", ".", "state", ".", "isTerminalState", "(", ")", ")", "return", "false", ";", "return", "true", ";", "}"], "docstring": "Shows true if all of the configurations in the beam are in the terminal state\n\n@param beam the current beam\n@return true if all of the configurations in the beam are in the terminal state", "docstring_tokens": ["Shows", "true", "if", "all", "of", "the", "configurations", "in", "the", "beam", "are", "in", "the", "terminal", "state"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/transition/parser/ArcEager.java#L102-L108", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.preprocess", "original_string": "protected List<String> preprocess(String document)\n    {\n        List<Term> termList = segment.seg(document);\n        ListIterator<Term> listIterator = termList.listIterator();\n        while (listIterator.hasNext())\n        {\n            Term term = listIterator.next();\n            if (CoreStopWordDictionary.contains(term.word) ||\n                term.nature.startsWith(\"w\")\n                )\n            {\n                listIterator.remove();\n            }\n        }\n        List<String> wordList = new ArrayList<String>(termList.size());\n        for (Term term : termList)\n        {\n            wordList.add(term.word);\n        }\n        return wordList;\n    }", "language": "java", "code": "protected List<String> preprocess(String document)\n    {\n        List<Term> termList = segment.seg(document);\n        ListIterator<Term> listIterator = termList.listIterator();\n        while (listIterator.hasNext())\n        {\n            Term term = listIterator.next();\n            if (CoreStopWordDictionary.contains(term.word) ||\n                term.nature.startsWith(\"w\")\n                )\n            {\n                listIterator.remove();\n            }\n        }\n        List<String> wordList = new ArrayList<String>(termList.size());\n        for (Term term : termList)\n        {\n            wordList.add(term.word);\n        }\n        return wordList;\n    }", "code_tokens": ["protected", "List", "<", "String", ">", "preprocess", "(", "String", "document", ")", "{", "List", "<", "Term", ">", "termList", "=", "segment", ".", "seg", "(", "document", ")", ";", "ListIterator", "<", "Term", ">", "listIterator", "=", "termList", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "Term", "term", "=", "listIterator", ".", "next", "(", ")", ";", "if", "(", "CoreStopWordDictionary", ".", "contains", "(", "term", ".", "word", ")", "||", "term", ".", "nature", ".", "startsWith", "(", "\"w\"", ")", ")", "{", "listIterator", ".", "remove", "(", ")", ";", "}", "}", "List", "<", "String", ">", "wordList", "=", "new", "ArrayList", "<", "String", ">", "(", "termList", ".", "size", "(", ")", ")", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "wordList", ".", "add", "(", "term", ".", "word", ")", ";", "}", "return", "wordList", ";", "}"], "docstring": "\u91cd\u8f7d\u6b64\u65b9\u6cd5\u5b9e\u73b0\u81ea\u5df1\u7684\u9884\u5904\u7406\u903b\u8f91\uff08\u9884\u5904\u7406\u3001\u5206\u8bcd\u3001\u53bb\u9664\u505c\u7528\u8bcd\uff09\n\n@param document \u6587\u6863\n@return \u5355\u8bcd\u5217\u8868", "docstring_tokens": ["\u91cd\u8f7d\u6b64\u65b9\u6cd5\u5b9e\u73b0\u81ea\u5df1\u7684\u9884\u5904\u7406\u903b\u8f91\uff08\u9884\u5904\u7406\u3001\u5206\u8bcd\u3001\u53bb\u9664\u505c\u7528\u8bcd\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L65-L85", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.addDocument", "original_string": "public Document<K> addDocument(K id, String document)\n    {\n        return addDocument(id, preprocess(document));\n    }", "language": "java", "code": "public Document<K> addDocument(K id, String document)\n    {\n        return addDocument(id, preprocess(document));\n    }", "code_tokens": ["public", "Document", "<", "K", ">", "addDocument", "(", "K", "id", ",", "String", "document", ")", "{", "return", "addDocument", "(", "id", ",", "preprocess", "(", "document", ")", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u6587\u6863\n\n@param id       \u6587\u6863id\n@param document \u6587\u6863\u5185\u5bb9\n@return \u6587\u6863\u5bf9\u8c61", "docstring_tokens": ["\u6dfb\u52a0\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L114-L117", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.addDocument", "original_string": "public Document<K> addDocument(K id, List<String> document)\n    {\n        SparseVector vector = toVector(document);\n        Document<K> d = new Document<K>(id, vector);\n        return documents_.put(id, d);\n    }", "language": "java", "code": "public Document<K> addDocument(K id, List<String> document)\n    {\n        SparseVector vector = toVector(document);\n        Document<K> d = new Document<K>(id, vector);\n        return documents_.put(id, d);\n    }", "code_tokens": ["public", "Document", "<", "K", ">", "addDocument", "(", "K", "id", ",", "List", "<", "String", ">", "document", ")", "{", "SparseVector", "vector", "=", "toVector", "(", "document", ")", ";", "Document", "<", "K", ">", "d", "=", "new", "Document", "<", "K", ">", "(", "id", ",", "vector", ")", ";", "return", "documents_", ".", "put", "(", "id", ",", "d", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u6587\u6863\n\n@param id       \u6587\u6863id\n@param document \u6587\u6863\u5185\u5bb9\n@return \u6587\u6863\u5bf9\u8c61", "docstring_tokens": ["\u6dfb\u52a0\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L126-L131", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.kmeans", "original_string": "public List<Set<K>> kmeans(int nclusters)\n    {\n        Cluster<K> cluster = new Cluster<K>();\n        for (Document<K> document : documents_.values())\n        {\n            cluster.add_document(document);\n        }\n        cluster.section(nclusters);\n        refine_clusters(cluster.sectioned_clusters());\n        List<Cluster<K>> clusters_ = new ArrayList<Cluster<K>>(nclusters);\n        for (Cluster<K> s : cluster.sectioned_clusters())\n        {\n            s.refresh();\n            clusters_.add(s);\n        }\n        return toResult(clusters_);\n    }", "language": "java", "code": "public List<Set<K>> kmeans(int nclusters)\n    {\n        Cluster<K> cluster = new Cluster<K>();\n        for (Document<K> document : documents_.values())\n        {\n            cluster.add_document(document);\n        }\n        cluster.section(nclusters);\n        refine_clusters(cluster.sectioned_clusters());\n        List<Cluster<K>> clusters_ = new ArrayList<Cluster<K>>(nclusters);\n        for (Cluster<K> s : cluster.sectioned_clusters())\n        {\n            s.refresh();\n            clusters_.add(s);\n        }\n        return toResult(clusters_);\n    }", "code_tokens": ["public", "List", "<", "Set", "<", "K", ">", ">", "kmeans", "(", "int", "nclusters", ")", "{", "Cluster", "<", "K", ">", "cluster", "=", "new", "Cluster", "<", "K", ">", "(", ")", ";", "for", "(", "Document", "<", "K", ">", "document", ":", "documents_", ".", "values", "(", ")", ")", "{", "cluster", ".", "add_document", "(", "document", ")", ";", "}", "cluster", ".", "section", "(", "nclusters", ")", ";", "refine_clusters", "(", "cluster", ".", "sectioned_clusters", "(", ")", ")", ";", "List", "<", "Cluster", "<", "K", ">", ">", "clusters_", "=", "new", "ArrayList", "<", "Cluster", "<", "K", ">", ">", "(", "nclusters", ")", ";", "for", "(", "Cluster", "<", "K", ">", "s", ":", "cluster", ".", "sectioned_clusters", "(", ")", ")", "{", "s", ".", "refresh", "(", ")", ";", "clusters_", ".", "add", "(", "s", ")", ";", "}", "return", "toResult", "(", "clusters_", ")", ";", "}"], "docstring": "k-means\u805a\u7c7b\n\n@param nclusters \u7c07\u7684\u6570\u91cf\n@return \u6307\u5b9a\u6570\u91cf\u7684\u7c07\uff08Set\uff09\u6784\u6210\u7684\u96c6\u5408", "docstring_tokens": ["k", "-", "means\u805a\u7c7b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L139-L155", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.repeatedBisection", "original_string": "public List<Set<K>> repeatedBisection(int nclusters, double limit_eval)\n    {\n        Cluster<K> cluster = new Cluster<K>();\n        List<Cluster<K>> clusters_ = new ArrayList<Cluster<K>>(nclusters > 0 ? nclusters : 16);\n        for (Document<K> document : documents_.values())\n        {\n            cluster.add_document(document);\n        }\n\n        PriorityQueue<Cluster<K>> que = new PriorityQueue<Cluster<K>>();\n        cluster.section(2);\n        refine_clusters(cluster.sectioned_clusters());\n        cluster.set_sectioned_gain();\n        cluster.composite_vector().clear();\n        que.add(cluster);\n\n        while (!que.isEmpty())\n        {\n            if (nclusters > 0 && que.size() >= nclusters)\n                break;\n            cluster = que.peek();\n            if (cluster.sectioned_clusters().size() < 1)\n                break;\n            if (limit_eval > 0 && cluster.sectioned_gain() < limit_eval)\n                break;\n            que.poll();\n            List<Cluster<K>> sectioned = cluster.sectioned_clusters();\n\n            for (Cluster<K> c : sectioned)\n            {\n                c.section(2);\n                refine_clusters(c.sectioned_clusters());\n                c.set_sectioned_gain();\n                if (c.sectioned_gain() < limit_eval)\n                {\n                    for (Cluster<K> sub : c.sectioned_clusters())\n                    {\n                        sub.clear();\n                    }\n                }\n                c.composite_vector().clear();\n                que.add(c);\n            }\n        }\n        while (!que.isEmpty())\n        {\n            clusters_.add(0, que.poll());\n        }\n        return toResult(clusters_);\n    }", "language": "java", "code": "public List<Set<K>> repeatedBisection(int nclusters, double limit_eval)\n    {\n        Cluster<K> cluster = new Cluster<K>();\n        List<Cluster<K>> clusters_ = new ArrayList<Cluster<K>>(nclusters > 0 ? nclusters : 16);\n        for (Document<K> document : documents_.values())\n        {\n            cluster.add_document(document);\n        }\n\n        PriorityQueue<Cluster<K>> que = new PriorityQueue<Cluster<K>>();\n        cluster.section(2);\n        refine_clusters(cluster.sectioned_clusters());\n        cluster.set_sectioned_gain();\n        cluster.composite_vector().clear();\n        que.add(cluster);\n\n        while (!que.isEmpty())\n        {\n            if (nclusters > 0 && que.size() >= nclusters)\n                break;\n            cluster = que.peek();\n            if (cluster.sectioned_clusters().size() < 1)\n                break;\n            if (limit_eval > 0 && cluster.sectioned_gain() < limit_eval)\n                break;\n            que.poll();\n            List<Cluster<K>> sectioned = cluster.sectioned_clusters();\n\n            for (Cluster<K> c : sectioned)\n            {\n                c.section(2);\n                refine_clusters(c.sectioned_clusters());\n                c.set_sectioned_gain();\n                if (c.sectioned_gain() < limit_eval)\n                {\n                    for (Cluster<K> sub : c.sectioned_clusters())\n                    {\n                        sub.clear();\n                    }\n                }\n                c.composite_vector().clear();\n                que.add(c);\n            }\n        }\n        while (!que.isEmpty())\n        {\n            clusters_.add(0, que.poll());\n        }\n        return toResult(clusters_);\n    }", "code_tokens": ["public", "List", "<", "Set", "<", "K", ">", ">", "repeatedBisection", "(", "int", "nclusters", ",", "double", "limit_eval", ")", "{", "Cluster", "<", "K", ">", "cluster", "=", "new", "Cluster", "<", "K", ">", "(", ")", ";", "List", "<", "Cluster", "<", "K", ">", ">", "clusters_", "=", "new", "ArrayList", "<", "Cluster", "<", "K", ">", ">", "(", "nclusters", ">", "0", "?", "nclusters", ":", "16", ")", ";", "for", "(", "Document", "<", "K", ">", "document", ":", "documents_", ".", "values", "(", ")", ")", "{", "cluster", ".", "add_document", "(", "document", ")", ";", "}", "PriorityQueue", "<", "Cluster", "<", "K", ">", ">", "que", "=", "new", "PriorityQueue", "<", "Cluster", "<", "K", ">", ">", "(", ")", ";", "cluster", ".", "section", "(", "2", ")", ";", "refine_clusters", "(", "cluster", ".", "sectioned_clusters", "(", ")", ")", ";", "cluster", ".", "set_sectioned_gain", "(", ")", ";", "cluster", ".", "composite_vector", "(", ")", ".", "clear", "(", ")", ";", "que", ".", "add", "(", "cluster", ")", ";", "while", "(", "!", "que", ".", "isEmpty", "(", ")", ")", "{", "if", "(", "nclusters", ">", "0", "&&", "que", ".", "size", "(", ")", ">=", "nclusters", ")", "break", ";", "cluster", "=", "que", ".", "peek", "(", ")", ";", "if", "(", "cluster", ".", "sectioned_clusters", "(", ")", ".", "size", "(", ")", "<", "1", ")", "break", ";", "if", "(", "limit_eval", ">", "0", "&&", "cluster", ".", "sectioned_gain", "(", ")", "<", "limit_eval", ")", "break", ";", "que", ".", "poll", "(", ")", ";", "List", "<", "Cluster", "<", "K", ">", ">", "sectioned", "=", "cluster", ".", "sectioned_clusters", "(", ")", ";", "for", "(", "Cluster", "<", "K", ">", "c", ":", "sectioned", ")", "{", "c", ".", "section", "(", "2", ")", ";", "refine_clusters", "(", "c", ".", "sectioned_clusters", "(", ")", ")", ";", "c", ".", "set_sectioned_gain", "(", ")", ";", "if", "(", "c", ".", "sectioned_gain", "(", ")", "<", "limit_eval", ")", "{", "for", "(", "Cluster", "<", "K", ">", "sub", ":", "c", ".", "sectioned_clusters", "(", ")", ")", "{", "sub", ".", "clear", "(", ")", ";", "}", "}", "c", ".", "composite_vector", "(", ")", ".", "clear", "(", ")", ";", "que", ".", "add", "(", "c", ")", ";", "}", "}", "while", "(", "!", "que", ".", "isEmpty", "(", ")", ")", "{", "clusters_", ".", "add", "(", "0", ",", "que", ".", "poll", "(", ")", ")", ";", "}", "return", "toResult", "(", "clusters_", ")", ";", "}"], "docstring": "repeated bisection \u805a\u7c7b\n\n@param nclusters  \u7c07\u7684\u6570\u91cf\n@param limit_eval \u51c6\u5219\u51fd\u6570\u589e\u5e45\u9608\u503c\n@return \u6307\u5b9a\u6570\u91cf\u7684\u7c07\uff08Set\uff09\u6784\u6210\u7684\u96c6\u5408", "docstring_tokens": ["repeated", "bisection", "\u805a\u7c7b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L201-L250", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.refine_clusters", "original_string": "double refine_clusters(List<Cluster<K>> clusters)\n    {\n        double[] norms = new double[clusters.size()];\n        int offset = 0;\n        for (Cluster cluster : clusters)\n        {\n            norms[offset++] = cluster.composite_vector().norm();\n        }\n\n        double eval_cluster = 0.0;\n        int loop_count = 0;\n        while (loop_count++ < NUM_REFINE_LOOP)\n        {\n            List<int[]> items = new ArrayList<int[]>(documents_.size());\n            for (int i = 0; i < clusters.size(); i++)\n            {\n                for (int j = 0; j < clusters.get(i).documents().size(); j++)\n                {\n                    items.add(new int[]{i, j});\n                }\n            }\n            Collections.shuffle(items);\n\n            boolean changed = false;\n            for (int[] item : items)\n            {\n                int cluster_id = item[0];\n                int item_id = item[1];\n                Cluster<K> cluster = clusters.get(cluster_id);\n                Document<K> doc = cluster.documents().get(item_id);\n                double value_base = refined_vector_value(cluster.composite_vector(), doc.feature(), -1);\n                double norm_base_moved = Math.pow(norms[cluster_id], 2) + value_base;\n                norm_base_moved = norm_base_moved > 0 ? Math.sqrt(norm_base_moved) : 0.0;\n\n                double eval_max = -1.0;\n                double norm_max = 0.0;\n                int max_index = 0;\n                for (int j = 0; j < clusters.size(); j++)\n                {\n                    if (cluster_id == j)\n                        continue;\n                    Cluster<K> other = clusters.get(j);\n                    double value_target = refined_vector_value(other.composite_vector(), doc.feature(), 1);\n                    double norm_target_moved = Math.pow(norms[j], 2) + value_target;\n                    norm_target_moved = norm_target_moved > 0 ? Math.sqrt(norm_target_moved) : 0.0;\n                    double eval_moved = norm_base_moved + norm_target_moved - norms[cluster_id] - norms[j];\n                    if (eval_max < eval_moved)\n                    {\n                        eval_max = eval_moved;\n                        norm_max = norm_target_moved;\n                        max_index = j;\n                    }\n                }\n                if (eval_max > 0)\n                {\n                    eval_cluster += eval_max;\n                    clusters.get(max_index).add_document(doc);\n                    clusters.get(cluster_id).remove_document(item_id);\n                    norms[cluster_id] = norm_base_moved;\n                    norms[max_index] = norm_max;\n                    changed = true;\n                }\n            }\n            if (!changed)\n                break;\n            for (Cluster<K> cluster : clusters)\n            {\n                cluster.refresh();\n            }\n        }\n        return eval_cluster;\n    }", "language": "java", "code": "double refine_clusters(List<Cluster<K>> clusters)\n    {\n        double[] norms = new double[clusters.size()];\n        int offset = 0;\n        for (Cluster cluster : clusters)\n        {\n            norms[offset++] = cluster.composite_vector().norm();\n        }\n\n        double eval_cluster = 0.0;\n        int loop_count = 0;\n        while (loop_count++ < NUM_REFINE_LOOP)\n        {\n            List<int[]> items = new ArrayList<int[]>(documents_.size());\n            for (int i = 0; i < clusters.size(); i++)\n            {\n                for (int j = 0; j < clusters.get(i).documents().size(); j++)\n                {\n                    items.add(new int[]{i, j});\n                }\n            }\n            Collections.shuffle(items);\n\n            boolean changed = false;\n            for (int[] item : items)\n            {\n                int cluster_id = item[0];\n                int item_id = item[1];\n                Cluster<K> cluster = clusters.get(cluster_id);\n                Document<K> doc = cluster.documents().get(item_id);\n                double value_base = refined_vector_value(cluster.composite_vector(), doc.feature(), -1);\n                double norm_base_moved = Math.pow(norms[cluster_id], 2) + value_base;\n                norm_base_moved = norm_base_moved > 0 ? Math.sqrt(norm_base_moved) : 0.0;\n\n                double eval_max = -1.0;\n                double norm_max = 0.0;\n                int max_index = 0;\n                for (int j = 0; j < clusters.size(); j++)\n                {\n                    if (cluster_id == j)\n                        continue;\n                    Cluster<K> other = clusters.get(j);\n                    double value_target = refined_vector_value(other.composite_vector(), doc.feature(), 1);\n                    double norm_target_moved = Math.pow(norms[j], 2) + value_target;\n                    norm_target_moved = norm_target_moved > 0 ? Math.sqrt(norm_target_moved) : 0.0;\n                    double eval_moved = norm_base_moved + norm_target_moved - norms[cluster_id] - norms[j];\n                    if (eval_max < eval_moved)\n                    {\n                        eval_max = eval_moved;\n                        norm_max = norm_target_moved;\n                        max_index = j;\n                    }\n                }\n                if (eval_max > 0)\n                {\n                    eval_cluster += eval_max;\n                    clusters.get(max_index).add_document(doc);\n                    clusters.get(cluster_id).remove_document(item_id);\n                    norms[cluster_id] = norm_base_moved;\n                    norms[max_index] = norm_max;\n                    changed = true;\n                }\n            }\n            if (!changed)\n                break;\n            for (Cluster<K> cluster : clusters)\n            {\n                cluster.refresh();\n            }\n        }\n        return eval_cluster;\n    }", "code_tokens": ["double", "refine_clusters", "(", "List", "<", "Cluster", "<", "K", ">", ">", "clusters", ")", "{", "double", "[", "]", "norms", "=", "new", "double", "[", "clusters", ".", "size", "(", ")", "]", ";", "int", "offset", "=", "0", ";", "for", "(", "Cluster", "cluster", ":", "clusters", ")", "{", "norms", "[", "offset", "++", "]", "=", "cluster", ".", "composite_vector", "(", ")", ".", "norm", "(", ")", ";", "}", "double", "eval_cluster", "=", "0.0", ";", "int", "loop_count", "=", "0", ";", "while", "(", "loop_count", "++", "<", "NUM_REFINE_LOOP", ")", "{", "List", "<", "int", "[", "]", ">", "items", "=", "new", "ArrayList", "<", "int", "[", "]", ">", "(", "documents_", ".", "size", "(", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "clusters", ".", "size", "(", ")", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "clusters", ".", "get", "(", "i", ")", ".", "documents", "(", ")", ".", "size", "(", ")", ";", "j", "++", ")", "{", "items", ".", "add", "(", "new", "int", "[", "]", "{", "i", ",", "j", "}", ")", ";", "}", "}", "Collections", ".", "shuffle", "(", "items", ")", ";", "boolean", "changed", "=", "false", ";", "for", "(", "int", "[", "]", "item", ":", "items", ")", "{", "int", "cluster_id", "=", "item", "[", "0", "]", ";", "int", "item_id", "=", "item", "[", "1", "]", ";", "Cluster", "<", "K", ">", "cluster", "=", "clusters", ".", "get", "(", "cluster_id", ")", ";", "Document", "<", "K", ">", "doc", "=", "cluster", ".", "documents", "(", ")", ".", "get", "(", "item_id", ")", ";", "double", "value_base", "=", "refined_vector_value", "(", "cluster", ".", "composite_vector", "(", ")", ",", "doc", ".", "feature", "(", ")", ",", "-", "1", ")", ";", "double", "norm_base_moved", "=", "Math", ".", "pow", "(", "norms", "[", "cluster_id", "]", ",", "2", ")", "+", "value_base", ";", "norm_base_moved", "=", "norm_base_moved", ">", "0", "?", "Math", ".", "sqrt", "(", "norm_base_moved", ")", ":", "0.0", ";", "double", "eval_max", "=", "-", "1.0", ";", "double", "norm_max", "=", "0.0", ";", "int", "max_index", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "clusters", ".", "size", "(", ")", ";", "j", "++", ")", "{", "if", "(", "cluster_id", "==", "j", ")", "continue", ";", "Cluster", "<", "K", ">", "other", "=", "clusters", ".", "get", "(", "j", ")", ";", "double", "value_target", "=", "refined_vector_value", "(", "other", ".", "composite_vector", "(", ")", ",", "doc", ".", "feature", "(", ")", ",", "1", ")", ";", "double", "norm_target_moved", "=", "Math", ".", "pow", "(", "norms", "[", "j", "]", ",", "2", ")", "+", "value_target", ";", "norm_target_moved", "=", "norm_target_moved", ">", "0", "?", "Math", ".", "sqrt", "(", "norm_target_moved", ")", ":", "0.0", ";", "double", "eval_moved", "=", "norm_base_moved", "+", "norm_target_moved", "-", "norms", "[", "cluster_id", "]", "-", "norms", "[", "j", "]", ";", "if", "(", "eval_max", "<", "eval_moved", ")", "{", "eval_max", "=", "eval_moved", ";", "norm_max", "=", "norm_target_moved", ";", "max_index", "=", "j", ";", "}", "}", "if", "(", "eval_max", ">", "0", ")", "{", "eval_cluster", "+=", "eval_max", ";", "clusters", ".", "get", "(", "max_index", ")", ".", "add_document", "(", "doc", ")", ";", "clusters", ".", "get", "(", "cluster_id", ")", ".", "remove_document", "(", "item_id", ")", ";", "norms", "[", "cluster_id", "]", "=", "norm_base_moved", ";", "norms", "[", "max_index", "]", "=", "norm_max", ";", "changed", "=", "true", ";", "}", "}", "if", "(", "!", "changed", ")", "break", ";", "for", "(", "Cluster", "<", "K", ">", "cluster", ":", "clusters", ")", "{", "cluster", ".", "refresh", "(", ")", ";", "}", "}", "return", "eval_cluster", ";", "}"], "docstring": "\u6839\u636ek-means\u7b97\u6cd5\u8fed\u4ee3\u4f18\u5316\u805a\u7c7b\n\n@param clusters \u7c07\n@return \u51c6\u5219\u51fd\u6570\u7684\u503c", "docstring_tokens": ["\u6839\u636ek", "-", "means\u7b97\u6cd5\u8fed\u4ee3\u4f18\u5316\u805a\u7c7b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L258-L329", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.refined_vector_value", "original_string": "double refined_vector_value(SparseVector composite, SparseVector vec, int sign)\n    {\n        double sum = 0.0;\n        for (Map.Entry<Integer, Double> entry : vec.entrySet())\n        {\n            sum += Math.pow(entry.getValue(), 2) + sign * 2 * composite.get(entry.getKey()) * entry.getValue();\n        }\n        return sum;\n    }", "language": "java", "code": "double refined_vector_value(SparseVector composite, SparseVector vec, int sign)\n    {\n        double sum = 0.0;\n        for (Map.Entry<Integer, Double> entry : vec.entrySet())\n        {\n            sum += Math.pow(entry.getValue(), 2) + sign * 2 * composite.get(entry.getKey()) * entry.getValue();\n        }\n        return sum;\n    }", "code_tokens": ["double", "refined_vector_value", "(", "SparseVector", "composite", ",", "SparseVector", "vec", ",", "int", "sign", ")", "{", "double", "sum", "=", "0.0", ";", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", "entry", ":", "vec", ".", "entrySet", "(", ")", ")", "{", "sum", "+=", "Math", ".", "pow", "(", "entry", ".", "getValue", "(", ")", ",", "2", ")", "+", "sign", "*", "2", "*", "composite", ".", "get", "(", "entry", ".", "getKey", "(", ")", ")", "*", "entry", ".", "getValue", "(", ")", ";", "}", "return", "sum", ";", "}"], "docstring": "c^2 - 2c(a + c) + d^2 - 2d(b + d)\n\n@param composite (a+c,b+d)\n@param vec       (c,d)\n@param sign\n@return", "docstring_tokens": ["c^2", "-", "2c", "(", "a", "+", "c", ")", "+", "d^2", "-", "2d", "(", "b", "+", "d", ")"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L339-L347", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java", "func_name": "ClusterAnalyzer.evaluate", "original_string": "public static double evaluate(String folderPath, String algorithm)\n    {\n        if (folderPath == null) throw new IllegalArgumentException(\"\u53c2\u6570 folderPath == null\");\n        File root = new File(folderPath);\n        if (!root.exists()) throw new IllegalArgumentException(String.format(\"\u76ee\u5f55 %s \u4e0d\u5b58\u5728\", root.getAbsolutePath()));\n        if (!root.isDirectory())\n            throw new IllegalArgumentException(String.format(\"\u76ee\u5f55 %s \u4e0d\u662f\u4e00\u4e2a\u76ee\u5f55\", root.getAbsolutePath()));\n\n        ClusterAnalyzer<String> analyzer = new ClusterAnalyzer<String>();\n        File[] folders = root.listFiles();\n        if (folders == null) return 1.;\n        logger.start(\"\u6839\u76ee\u5f55:%s\\n\u52a0\u8f7d\u4e2d...\\n\", folderPath);\n        int docSize = 0;\n        int[] ni = new int[folders.length];\n        String[] cat = new String[folders.length];\n        int offset = 0;\n        for (File folder : folders)\n        {\n            if (folder.isFile()) continue;\n            File[] files = folder.listFiles();\n            if (files == null) continue;\n            String category = folder.getName();\n            cat[offset] = category;\n            logger.out(\"[%s]...\", category);\n            int b = 0;\n            int e = files.length;\n\n            int logEvery = (int) Math.ceil((e - b) / 10000f);\n            for (int i = b; i < e; i++)\n            {\n                analyzer.addDocument(folder.getName() + \" \" + files[i].getName(), IOUtil.readTxt(files[i].getAbsolutePath()));\n                if (i % logEvery == 0)\n                {\n                    logger.out(\"%c[%s]...%.2f%%\", 13, category, MathUtility.percentage(i - b + 1, e - b));\n                }\n                ++docSize;\n                ++ni[offset];\n            }\n            logger.out(\" %d \u7bc7\u6587\u6863\\n\", e - b);\n            ++offset;\n        }\n        logger.finish(\" \u52a0\u8f7d\u4e86 %d \u4e2a\u7c7b\u76ee,\u5171 %d \u7bc7\u6587\u6863\\n\", folders.length, docSize);\n        logger.start(algorithm + \"\u805a\u7c7b\u4e2d...\");\n        List<Set<String>> clusterList = algorithm.replaceAll(\"[-\\\\s]\", \"\").toLowerCase().equals(\"kmeans\") ?\n            analyzer.kmeans(ni.length) : analyzer.repeatedBisection(ni.length);\n        logger.finish(\" \u5b8c\u6bd5\u3002\\n\");\n        double[] fi = new double[ni.length];\n        for (int i = 0; i < ni.length; i++)\n        {\n            for (Set<String> j : clusterList)\n            {\n                int nij = 0;\n                for (String d : j)\n                {\n                    if (d.startsWith(cat[i]))\n                        ++nij;\n                }\n                if (nij == 0) continue;\n                double p = nij / (double) (j.size());\n                double r = nij / (double) (ni[i]);\n                double f = 2 * p * r / (p + r);\n                fi[i] = Math.max(fi[i], f);\n            }\n        }\n        double f = 0;\n        for (int i = 0; i < fi.length; i++)\n        {\n            f += fi[i] * ni[i] / docSize;\n        }\n        return f;\n    }", "language": "java", "code": "public static double evaluate(String folderPath, String algorithm)\n    {\n        if (folderPath == null) throw new IllegalArgumentException(\"\u53c2\u6570 folderPath == null\");\n        File root = new File(folderPath);\n        if (!root.exists()) throw new IllegalArgumentException(String.format(\"\u76ee\u5f55 %s \u4e0d\u5b58\u5728\", root.getAbsolutePath()));\n        if (!root.isDirectory())\n            throw new IllegalArgumentException(String.format(\"\u76ee\u5f55 %s \u4e0d\u662f\u4e00\u4e2a\u76ee\u5f55\", root.getAbsolutePath()));\n\n        ClusterAnalyzer<String> analyzer = new ClusterAnalyzer<String>();\n        File[] folders = root.listFiles();\n        if (folders == null) return 1.;\n        logger.start(\"\u6839\u76ee\u5f55:%s\\n\u52a0\u8f7d\u4e2d...\\n\", folderPath);\n        int docSize = 0;\n        int[] ni = new int[folders.length];\n        String[] cat = new String[folders.length];\n        int offset = 0;\n        for (File folder : folders)\n        {\n            if (folder.isFile()) continue;\n            File[] files = folder.listFiles();\n            if (files == null) continue;\n            String category = folder.getName();\n            cat[offset] = category;\n            logger.out(\"[%s]...\", category);\n            int b = 0;\n            int e = files.length;\n\n            int logEvery = (int) Math.ceil((e - b) / 10000f);\n            for (int i = b; i < e; i++)\n            {\n                analyzer.addDocument(folder.getName() + \" \" + files[i].getName(), IOUtil.readTxt(files[i].getAbsolutePath()));\n                if (i % logEvery == 0)\n                {\n                    logger.out(\"%c[%s]...%.2f%%\", 13, category, MathUtility.percentage(i - b + 1, e - b));\n                }\n                ++docSize;\n                ++ni[offset];\n            }\n            logger.out(\" %d \u7bc7\u6587\u6863\\n\", e - b);\n            ++offset;\n        }\n        logger.finish(\" \u52a0\u8f7d\u4e86 %d \u4e2a\u7c7b\u76ee,\u5171 %d \u7bc7\u6587\u6863\\n\", folders.length, docSize);\n        logger.start(algorithm + \"\u805a\u7c7b\u4e2d...\");\n        List<Set<String>> clusterList = algorithm.replaceAll(\"[-\\\\s]\", \"\").toLowerCase().equals(\"kmeans\") ?\n            analyzer.kmeans(ni.length) : analyzer.repeatedBisection(ni.length);\n        logger.finish(\" \u5b8c\u6bd5\u3002\\n\");\n        double[] fi = new double[ni.length];\n        for (int i = 0; i < ni.length; i++)\n        {\n            for (Set<String> j : clusterList)\n            {\n                int nij = 0;\n                for (String d : j)\n                {\n                    if (d.startsWith(cat[i]))\n                        ++nij;\n                }\n                if (nij == 0) continue;\n                double p = nij / (double) (j.size());\n                double r = nij / (double) (ni[i]);\n                double f = 2 * p * r / (p + r);\n                fi[i] = Math.max(fi[i], f);\n            }\n        }\n        double f = 0;\n        for (int i = 0; i < fi.length; i++)\n        {\n            f += fi[i] * ni[i] / docSize;\n        }\n        return f;\n    }", "code_tokens": ["public", "static", "double", "evaluate", "(", "String", "folderPath", ",", "String", "algorithm", ")", "{", "if", "(", "folderPath", "==", "null", ")", "throw", "new", "IllegalArgumentException", "(", "\"\u53c2\u6570 folderPath == null\");", "", "", "File", "root", "=", "new", "File", "(", "folderPath", ")", ";", "if", "(", "!", "root", ".", "exists", "(", ")", ")", "throw", "new", "IllegalArgumentException", "(", "String", ".", "format", "(", "\"\u76ee\u5f55 %s \u4e0d\u5b58\u5728\", root.get", "A", "solu", "t", "ePath()));", "", "", "", "", "", "if", "(", "!", "root", ".", "isDirectory", "(", ")", ")", "throw", "new", "IllegalArgumentException", "(", "String", ".", "format", "(", "\"\u76ee\u5f55 %s \u4e0d\u662f\u4e00\u4e2a\u76ee\u5f55\", root.getAbsolu", "t", "Path", "(", ")));", "", "", "", "", "", "ClusterAnalyzer", "<", "String", ">", "analyzer", "=", "new", "ClusterAnalyzer", "<", "String", ">", "(", ")", ";", "File", "[", "]", "folders", "=", "root", ".", "listFiles", "(", ")", ";", "if", "(", "folders", "==", "null", ")", "return", "1.", ";", "logger", ".", "start", "(", "\"\u6839\u76ee\u5f55:%s\\n\u52a0\u8f7d\u4e2d...\\n\", folderPath", ")", "", "", "", "int", "docSize", "=", "0", ";", "int", "[", "]", "ni", "=", "new", "int", "[", "folders", ".", "length", "]", ";", "String", "[", "]", "cat", "=", "new", "String", "[", "folders", ".", "length", "]", ";", "int", "offset", "=", "0", ";", "for", "(", "File", "folder", ":", "folders", ")", "{", "if", "(", "folder", ".", "isFile", "(", ")", ")", "continue", ";", "File", "[", "]", "files", "=", "folder", ".", "listFiles", "(", ")", ";", "if", "(", "files", "==", "null", ")", "continue", ";", "String", "category", "=", "folder", ".", "getName", "(", ")", ";", "cat", "[", "offset", "]", "=", "category", ";", "logger", ".", "out", "(", "\"[%s]...\"", ",", "category", ")", ";", "int", "b", "=", "0", ";", "int", "e", "=", "files", ".", "length", ";", "int", "logEvery", "=", "(", "int", ")", "Math", ".", "ceil", "(", "(", "e", "-", "b", ")", "/", "10000f", ")", ";", "for", "(", "int", "i", "=", "b", ";", "i", "<", "e", ";", "i", "++", ")", "{", "analyzer", ".", "addDocument", "(", "folder", ".", "getName", "(", ")", "+", "\" \"", "+", "files", "[", "i", "]", ".", "getName", "(", ")", ",", "IOUtil", ".", "readTxt", "(", "files", "[", "i", "]", ".", "getAbsolutePath", "(", ")", ")", ")", ";", "if", "(", "i", "%", "logEvery", "==", "0", ")", "{", "logger", ".", "out", "(", "\"%c[%s]...%.2f%%\"", ",", "13", ",", "category", ",", "MathUtility", ".", "percentage", "(", "i", "-", "b", "+", "1", ",", "e", "-", "b", ")", ")", ";", "}", "++", "docSize", ";", "++", "ni", "[", "offset", "]", ";", "}", "logger", ".", "out", "(", "\" %d \u7bc7\u6587\u6863\\n\", e - ", "b", ";", "", "", "", "", "++", "offset", ";", "}", "logger", ".", "finish", "(", "\" \u52a0\u8f7d\u4e86 %d \u4e2a\u7c7b\u76ee,\u5171 %d \u7bc7\u6587\u6863\\n\", folders.length, do", "c", "ize);", "", "", "", "", "", "", "logger", ".", "start", "(", "algorithm", "+", "\"\u805a\u7c7b\u4e2d...\");", "", "", "List", "<", "Set", "<", "String", ">", ">", "clusterList", "=", "algorithm", ".", "replaceAll", "(", "\"[-\\\\s]\"", ",", "\"\"", ")", ".", "toLowerCase", "(", ")", ".", "equals", "(", "\"kmeans\"", ")", "?", "analyzer", ".", "kmeans", "(", "ni", ".", "length", ")", ":", "analyzer", ".", "repeatedBisection", "(", "ni", ".", "length", ")", ";", "logger", ".", "finish", "(", "\" \u5b8c\u6bd5\u3002\\n\");", "", "", "double", "[", "]", "fi", "=", "new", "double", "[", "ni", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "ni", ".", "length", ";", "i", "++", ")", "{", "for", "(", "Set", "<", "String", ">", "j", ":", "clusterList", ")", "{", "int", "nij", "=", "0", ";", "for", "(", "String", "d", ":", "j", ")", "{", "if", "(", "d", ".", "startsWith", "(", "cat", "[", "i", "]", ")", ")", "++", "nij", ";", "}", "if", "(", "nij", "==", "0", ")", "continue", ";", "double", "p", "=", "nij", "/", "(", "double", ")", "(", "j", ".", "size", "(", ")", ")", ";", "double", "r", "=", "nij", "/", "(", "double", ")", "(", "ni", "[", "i", "]", ")", ";", "double", "f", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", ";", "fi", "[", "i", "]", "=", "Math", ".", "max", "(", "fi", "[", "i", "]", ",", "f", ")", ";", "}", "}", "double", "f", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "fi", ".", "length", ";", "i", "++", ")", "{", "f", "+=", "fi", "[", "i", "]", "*", "ni", "[", "i", "]", "/", "docSize", ";", "}", "return", "f", ";", "}"], "docstring": "\u8bad\u7ec3\u6a21\u578b\n\n@param folderPath \u5206\u7c7b\u8bed\u6599\u7684\u6839\u76ee\u5f55.\u76ee\u5f55\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u7ed3\u6784:<br>\n\u6839\u76ee\u5f55<br>\n\u251c\u2500\u2500 \u5206\u7c7bA<br>\n\u2502   \u2514\u2500\u2500 1.txt<br>\n\u2502   \u2514\u2500\u2500 2.txt<br>\n\u2502   \u2514\u2500\u2500 3.txt<br>\n\u251c\u2500\u2500 \u5206\u7c7bB<br>\n\u2502   \u2514\u2500\u2500 1.txt<br>\n\u2502   \u2514\u2500\u2500 ...<br>\n\u2514\u2500\u2500 ...<br>\n\u6587\u4ef6\u4e0d\u4e00\u5b9a\u9700\u8981\u7528\u6570\u5b57\u547d\u540d,\u4e5f\u4e0d\u9700\u8981\u4ee5txt\u4f5c\u4e3a\u540e\u7f00\u540d,\u4f46\u4e00\u5b9a\u9700\u8981\u662f\u6587\u672c\u6587\u4ef6.\n@param algorithm  kmeans \u6216 repeated bisection\n@throws IOException \u4efb\u4f55\u53ef\u80fd\u7684IO\u5f02\u5e38", "docstring_tokens": ["\u8bad\u7ec3\u6a21\u578b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/ClusterAnalyzer.java#L366-L436", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/crfpp/FeatureIndex.java", "func_name": "FeatureIndex.calcCost", "original_string": "public void calcCost(Node node)\n    {\n        node.cost = 0.0;\n        if (alphaFloat_ != null)\n        {\n            float c = 0.0f;\n            for (int i = 0; node.fVector.get(i) != -1; i++)\n            {\n                c += alphaFloat_[node.fVector.get(i) + node.y];\n            }\n            node.cost = costFactor_ * c;\n        }\n        else\n        {\n            double c = 0.0;\n            for (int i = 0; node.fVector.get(i) != -1; i++)\n            {\n                c += alpha_[node.fVector.get(i) + node.y];\n            }\n            node.cost = costFactor_ * c;\n        }\n    }", "language": "java", "code": "public void calcCost(Node node)\n    {\n        node.cost = 0.0;\n        if (alphaFloat_ != null)\n        {\n            float c = 0.0f;\n            for (int i = 0; node.fVector.get(i) != -1; i++)\n            {\n                c += alphaFloat_[node.fVector.get(i) + node.y];\n            }\n            node.cost = costFactor_ * c;\n        }\n        else\n        {\n            double c = 0.0;\n            for (int i = 0; node.fVector.get(i) != -1; i++)\n            {\n                c += alpha_[node.fVector.get(i) + node.y];\n            }\n            node.cost = costFactor_ * c;\n        }\n    }", "code_tokens": ["public", "void", "calcCost", "(", "Node", "node", ")", "{", "node", ".", "cost", "=", "0.0", ";", "if", "(", "alphaFloat_", "!=", "null", ")", "{", "float", "c", "=", "0.0f", ";", "for", "(", "int", "i", "=", "0", ";", "node", ".", "fVector", ".", "get", "(", "i", ")", "!=", "-", "1", ";", "i", "++", ")", "{", "c", "+=", "alphaFloat_", "[", "node", ".", "fVector", ".", "get", "(", "i", ")", "+", "node", ".", "y", "]", ";", "}", "node", ".", "cost", "=", "costFactor_", "*", "c", ";", "}", "else", "{", "double", "c", "=", "0.0", ";", "for", "(", "int", "i", "=", "0", ";", "node", ".", "fVector", ".", "get", "(", "i", ")", "!=", "-", "1", ";", "i", "++", ")", "{", "c", "+=", "alpha_", "[", "node", ".", "fVector", ".", "get", "(", "i", ")", "+", "node", ".", "y", "]", ";", "}", "node", ".", "cost", "=", "costFactor_", "*", "c", ";", "}", "}"], "docstring": "\u8ba1\u7b97\u72b6\u6001\u7279\u5f81\u51fd\u6570\u7684\u4ee3\u4ef7\n\n@param node", "docstring_tokens": ["\u8ba1\u7b97\u72b6\u6001\u7279\u5f81\u51fd\u6570\u7684\u4ee3\u4ef7"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/crfpp/FeatureIndex.java#L51-L72", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/crfpp/FeatureIndex.java", "func_name": "FeatureIndex.calcCost", "original_string": "public void calcCost(Path path)\n    {\n        path.cost = 0.0;\n        if (alphaFloat_ != null)\n        {\n            float c = 0.0f;\n            for (int i = 0; path.fvector.get(i) != -1; i++)\n            {\n                c += alphaFloat_[path.fvector.get(i) + path.lnode.y * y_.size() + path.rnode.y];\n            }\n            path.cost = costFactor_ * c;\n        }\n        else\n        {\n            double c = 0.0;\n            for (int i = 0; path.fvector.get(i) != -1; i++)\n            {\n                c += alpha_[path.fvector.get(i) + path.lnode.y * y_.size() + path.rnode.y];\n            }\n            path.cost = costFactor_ * c;\n        }\n    }", "language": "java", "code": "public void calcCost(Path path)\n    {\n        path.cost = 0.0;\n        if (alphaFloat_ != null)\n        {\n            float c = 0.0f;\n            for (int i = 0; path.fvector.get(i) != -1; i++)\n            {\n                c += alphaFloat_[path.fvector.get(i) + path.lnode.y * y_.size() + path.rnode.y];\n            }\n            path.cost = costFactor_ * c;\n        }\n        else\n        {\n            double c = 0.0;\n            for (int i = 0; path.fvector.get(i) != -1; i++)\n            {\n                c += alpha_[path.fvector.get(i) + path.lnode.y * y_.size() + path.rnode.y];\n            }\n            path.cost = costFactor_ * c;\n        }\n    }", "code_tokens": ["public", "void", "calcCost", "(", "Path", "path", ")", "{", "path", ".", "cost", "=", "0.0", ";", "if", "(", "alphaFloat_", "!=", "null", ")", "{", "float", "c", "=", "0.0f", ";", "for", "(", "int", "i", "=", "0", ";", "path", ".", "fvector", ".", "get", "(", "i", ")", "!=", "-", "1", ";", "i", "++", ")", "{", "c", "+=", "alphaFloat_", "[", "path", ".", "fvector", ".", "get", "(", "i", ")", "+", "path", ".", "lnode", ".", "y", "*", "y_", ".", "size", "(", ")", "+", "path", ".", "rnode", ".", "y", "]", ";", "}", "path", ".", "cost", "=", "costFactor_", "*", "c", ";", "}", "else", "{", "double", "c", "=", "0.0", ";", "for", "(", "int", "i", "=", "0", ";", "path", ".", "fvector", ".", "get", "(", "i", ")", "!=", "-", "1", ";", "i", "++", ")", "{", "c", "+=", "alpha_", "[", "path", ".", "fvector", ".", "get", "(", "i", ")", "+", "path", ".", "lnode", ".", "y", "*", "y_", ".", "size", "(", ")", "+", "path", ".", "rnode", ".", "y", "]", ";", "}", "path", ".", "cost", "=", "costFactor_", "*", "c", ";", "}", "}"], "docstring": "\u8ba1\u7b97\u8f6c\u79fb\u7279\u5f81\u51fd\u6570\u7684\u4ee3\u4ef7\n\n@param path \u8fb9", "docstring_tokens": ["\u8ba1\u7b97\u8f6c\u79fb\u7279\u5f81\u51fd\u6570\u7684\u4ee3\u4ef7"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/crfpp/FeatureIndex.java#L79-L100", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/Document.java", "func_name": "Document.getWordList", "original_string": "public List<IWord> getWordList()\n    {\n        List<IWord> wordList = new LinkedList<IWord>();\n        for (Sentence sentence : sentenceList)\n        {\n            wordList.addAll(sentence.wordList);\n        }\n        return wordList;\n    }", "language": "java", "code": "public List<IWord> getWordList()\n    {\n        List<IWord> wordList = new LinkedList<IWord>();\n        for (Sentence sentence : sentenceList)\n        {\n            wordList.addAll(sentence.wordList);\n        }\n        return wordList;\n    }", "code_tokens": ["public", "List", "<", "IWord", ">", "getWordList", "(", ")", "{", "List", "<", "IWord", ">", "wordList", "=", "new", "LinkedList", "<", "IWord", ">", "(", ")", ";", "for", "(", "Sentence", "sentence", ":", "sentenceList", ")", "{", "wordList", ".", "addAll", "(", "sentence", ".", "wordList", ")", ";", "}", "return", "wordList", ";", "}"], "docstring": "\u83b7\u53d6\u5355\u8bcd\u5e8f\u5217\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u5355\u8bcd\u5e8f\u5217"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/Document.java#L66-L74", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/Document.java", "func_name": "Document.getSimpleSentenceList", "original_string": "public List<List<Word>> getSimpleSentenceList()\n    {\n        List<List<Word>> simpleList = new LinkedList<List<Word>>();\n        for (Sentence sentence : sentenceList)\n        {\n            List<Word> wordList = new LinkedList<Word>();\n            for (IWord word : sentence.wordList)\n            {\n                if (word instanceof CompoundWord)\n                {\n                    for (Word inner : ((CompoundWord) word).innerList)\n                    {\n                        wordList.add(inner);\n                    }\n                }\n                else\n                {\n                    wordList.add((Word) word);\n                }\n            }\n            simpleList.add(wordList);\n        }\n\n        return simpleList;\n    }", "language": "java", "code": "public List<List<Word>> getSimpleSentenceList()\n    {\n        List<List<Word>> simpleList = new LinkedList<List<Word>>();\n        for (Sentence sentence : sentenceList)\n        {\n            List<Word> wordList = new LinkedList<Word>();\n            for (IWord word : sentence.wordList)\n            {\n                if (word instanceof CompoundWord)\n                {\n                    for (Word inner : ((CompoundWord) word).innerList)\n                    {\n                        wordList.add(inner);\n                    }\n                }\n                else\n                {\n                    wordList.add((Word) word);\n                }\n            }\n            simpleList.add(wordList);\n        }\n\n        return simpleList;\n    }", "code_tokens": ["public", "List", "<", "List", "<", "Word", ">", ">", "getSimpleSentenceList", "(", ")", "{", "List", "<", "List", "<", "Word", ">>", "simpleList", "=", "new", "LinkedList", "<", "List", "<", "Word", ">", ">", "(", ")", ";", "for", "(", "Sentence", "sentence", ":", "sentenceList", ")", "{", "List", "<", "Word", ">", "wordList", "=", "new", "LinkedList", "<", "Word", ">", "(", ")", ";", "for", "(", "IWord", "word", ":", "sentence", ".", "wordList", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "for", "(", "Word", "inner", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "wordList", ".", "add", "(", "inner", ")", ";", "}", "}", "else", "{", "wordList", ".", "add", "(", "(", "Word", ")", "word", ")", ";", "}", "}", "simpleList", ".", "add", "(", "wordList", ")", ";", "}", "return", "simpleList", ";", "}"], "docstring": "\u83b7\u53d6\u7b80\u5355\u7684\u53e5\u5b50\u5217\u8868\uff0c\u5176\u4e2d\u590d\u5408\u8bcd\u4f1a\u88ab\u62c6\u5206\u4e3a\u7b80\u5355\u8bcd\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u7b80\u5355\u7684\u53e5\u5b50\u5217\u8868\uff0c\u5176\u4e2d\u590d\u5408\u8bcd\u4f1a\u88ab\u62c6\u5206\u4e3a\u7b80\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/Document.java#L100-L124", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/Document.java", "func_name": "Document.getComplexSentenceList", "original_string": "public List<List<IWord>> getComplexSentenceList()\n    {\n        List<List<IWord>> complexList = new LinkedList<List<IWord>>();\n        for (Sentence sentence : sentenceList)\n        {\n            complexList.add(sentence.wordList);\n        }\n\n        return complexList;\n    }", "language": "java", "code": "public List<List<IWord>> getComplexSentenceList()\n    {\n        List<List<IWord>> complexList = new LinkedList<List<IWord>>();\n        for (Sentence sentence : sentenceList)\n        {\n            complexList.add(sentence.wordList);\n        }\n\n        return complexList;\n    }", "code_tokens": ["public", "List", "<", "List", "<", "IWord", ">", ">", "getComplexSentenceList", "(", ")", "{", "List", "<", "List", "<", "IWord", ">>", "complexList", "=", "new", "LinkedList", "<", "List", "<", "IWord", ">", ">", "(", ")", ";", "for", "(", "Sentence", "sentence", ":", "sentenceList", ")", "{", "complexList", ".", "add", "(", "sentence", ".", "wordList", ")", ";", "}", "return", "complexList", ";", "}"], "docstring": "\u83b7\u53d6\u590d\u6742\u53e5\u5b50\u5217\u8868\uff0c\u53e5\u5b50\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u6709\u53ef\u80fd\u662f\u590d\u5408\u8bcd\uff0c\u6709\u53ef\u80fd\u662f\u7b80\u5355\u8bcd\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u590d\u6742\u53e5\u5b50\u5217\u8868\uff0c\u53e5\u5b50\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u6709\u53ef\u80fd\u662f\u590d\u5408\u8bcd\uff0c\u6709\u53ef\u80fd\u662f\u7b80\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/Document.java#L131-L140", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/Document.java", "func_name": "Document.getSimpleSentenceList", "original_string": "public List<List<Word>> getSimpleSentenceList(Set<String> labelSet)\n    {\n        List<List<Word>> simpleList = new LinkedList<List<Word>>();\n        for (Sentence sentence : sentenceList)\n        {\n            List<Word> wordList = new LinkedList<Word>();\n            for (IWord word : sentence.wordList)\n            {\n                if (word instanceof CompoundWord)\n                {\n                    if (labelSet.contains(word.getLabel()))\n                    {\n                        for (Word inner : ((CompoundWord) word).innerList)\n                        {\n                            wordList.add(inner);\n                        }\n                    }\n                    else\n                    {\n                        wordList.add(((CompoundWord) word).toWord());\n                    }\n                }\n                else\n                {\n                    wordList.add((Word) word);\n                }\n            }\n            simpleList.add(wordList);\n        }\n\n        return simpleList;\n    }", "language": "java", "code": "public List<List<Word>> getSimpleSentenceList(Set<String> labelSet)\n    {\n        List<List<Word>> simpleList = new LinkedList<List<Word>>();\n        for (Sentence sentence : sentenceList)\n        {\n            List<Word> wordList = new LinkedList<Word>();\n            for (IWord word : sentence.wordList)\n            {\n                if (word instanceof CompoundWord)\n                {\n                    if (labelSet.contains(word.getLabel()))\n                    {\n                        for (Word inner : ((CompoundWord) word).innerList)\n                        {\n                            wordList.add(inner);\n                        }\n                    }\n                    else\n                    {\n                        wordList.add(((CompoundWord) word).toWord());\n                    }\n                }\n                else\n                {\n                    wordList.add((Word) word);\n                }\n            }\n            simpleList.add(wordList);\n        }\n\n        return simpleList;\n    }", "code_tokens": ["public", "List", "<", "List", "<", "Word", ">", ">", "getSimpleSentenceList", "(", "Set", "<", "String", ">", "labelSet", ")", "{", "List", "<", "List", "<", "Word", ">>", "simpleList", "=", "new", "LinkedList", "<", "List", "<", "Word", ">", ">", "(", ")", ";", "for", "(", "Sentence", "sentence", ":", "sentenceList", ")", "{", "List", "<", "Word", ">", "wordList", "=", "new", "LinkedList", "<", "Word", ">", "(", ")", ";", "for", "(", "IWord", "word", ":", "sentence", ".", "wordList", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "if", "(", "labelSet", ".", "contains", "(", "word", ".", "getLabel", "(", ")", ")", ")", "{", "for", "(", "Word", "inner", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "wordList", ".", "add", "(", "inner", ")", ";", "}", "}", "else", "{", "wordList", ".", "add", "(", "(", "(", "CompoundWord", ")", "word", ")", ".", "toWord", "(", ")", ")", ";", "}", "}", "else", "{", "wordList", ".", "add", "(", "(", "Word", ")", "word", ")", ";", "}", "}", "simpleList", ".", "add", "(", "wordList", ")", ";", "}", "return", "simpleList", ";", "}"], "docstring": "\u83b7\u53d6\u7b80\u5355\u7684\u53e5\u5b50\u5217\u8868\uff0c\u5176\u4e2d\u590d\u5408\u8bcd\u7684\u6807\u7b7e\u5982\u679c\u662fset\u4e2d\u6307\u5b9a\u7684\u8bdd\u4f1a\u88ab\u62c6\u5206\u4e3a\u7b80\u5355\u8bcd\n\n@param labelSet\n@return", "docstring_tokens": ["\u83b7\u53d6\u7b80\u5355\u7684\u53e5\u5b50\u5217\u8868\uff0c\u5176\u4e2d\u590d\u5408\u8bcd\u7684\u6807\u7b7e\u5982\u679c\u662fset\u4e2d\u6307\u5b9a\u7684\u8bdd\u4f1a\u88ab\u62c6\u5206\u4e3a\u7b80\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/Document.java#L187-L218", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/Utility.java", "func_name": "Utility.shrink", "original_string": "public static <T> T[] shrink(T[] from, T[] to)\n    {\n        assert to.length <= from.length;\n        System.arraycopy(from, 0, to, 0, to.length);\n        return to;\n    }", "language": "java", "code": "public static <T> T[] shrink(T[] from, T[] to)\n    {\n        assert to.length <= from.length;\n        System.arraycopy(from, 0, to, 0, to.length);\n        return to;\n    }", "code_tokens": ["public", "static", "<", "T", ">", "T", "[", "]", "shrink", "(", "T", "[", "]", "from", ",", "T", "[", "]", "to", ")", "{", "assert", "to", ".", "length", "<=", "from", ".", "length", ";", "System", ".", "arraycopy", "(", "from", ",", "0", ",", "to", ",", "0", ",", "to", ".", "length", ")", ";", "return", "to", ";", "}"], "docstring": "\u6570\u7ec4\u5206\u5272\n\n@param from \u6e90\n@param to   \u76ee\u6807\n@param <T>  \u7c7b\u578b\n@return \u76ee\u6807", "docstring_tokens": ["\u6570\u7ec4\u5206\u5272"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/Utility.java#L129-L134", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java", "func_name": "CoreBiGramTableDictionary.binarySearch", "original_string": "private static int binarySearch(int[] a, int fromIndex, int length, int key)\n    {\n        int low = fromIndex;\n        int high = fromIndex + length - 1;\n\n        while (low <= high)\n        {\n            int mid = (low + high) >>> 1;\n            int midVal = a[mid << 1];\n\n            if (midVal < key)\n                low = mid + 1;\n            else if (midVal > key)\n                high = mid - 1;\n            else\n                return mid; // key found\n        }\n        return -(low + 1);  // key not found.\n    }", "language": "java", "code": "private static int binarySearch(int[] a, int fromIndex, int length, int key)\n    {\n        int low = fromIndex;\n        int high = fromIndex + length - 1;\n\n        while (low <= high)\n        {\n            int mid = (low + high) >>> 1;\n            int midVal = a[mid << 1];\n\n            if (midVal < key)\n                low = mid + 1;\n            else if (midVal > key)\n                high = mid - 1;\n            else\n                return mid; // key found\n        }\n        return -(low + 1);  // key not found.\n    }", "code_tokens": ["private", "static", "int", "binarySearch", "(", "int", "[", "]", "a", ",", "int", "fromIndex", ",", "int", "length", ",", "int", "key", ")", "{", "int", "low", "=", "fromIndex", ";", "int", "high", "=", "fromIndex", "+", "length", "-", "1", ";", "while", "(", "low", "<=", "high", ")", "{", "int", "mid", "=", "(", "low", "+", "high", ")", ">>>", "1", ";", "int", "midVal", "=", "a", "[", "mid", "<<", "1", "]", ";", "if", "(", "midVal", "<", "key", ")", "low", "=", "mid", "+", "1", ";", "else", "if", "(", "midVal", ">", "key", ")", "high", "=", "mid", "-", "1", ";", "else", "return", "mid", ";", "// key found", "}", "return", "-", "(", "low", "+", "1", ")", ";", "// key not found.", "}"], "docstring": "\u4e8c\u5206\u641c\u7d22\uff0c\u7531\u4e8e\u4e8c\u5143\u63a5\u7eed\u524d\u4e00\u4e2a\u8bcd\u56fa\u5b9a\u65f6\uff0c\u540e\u4e00\u4e2a\u8bcd\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5\u4e8c\u5206\u4e5f\u80fd\u53d6\u5f97\u5f88\u9ad8\u7684\u6027\u80fd\n@param a \u76ee\u6807\u6570\u7ec4\n@param fromIndex \u5f00\u59cb\u4e0b\u6807\n@param length \u957f\u5ea6\n@param key \u8bcd\u7684id\n@return \u5171\u73b0\u9891\u6b21", "docstring_tokens": ["\u4e8c\u5206\u641c\u7d22\uff0c\u7531\u4e8e\u4e8c\u5143\u63a5\u7eed\u524d\u4e00\u4e2a\u8bcd\u56fa\u5b9a\u65f6\uff0c\u540e\u4e00\u4e2a\u8bcd\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5\u4e8c\u5206\u4e5f\u80fd\u53d6\u5f97\u5f88\u9ad8\u7684\u6027\u80fd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java#L218-L236", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java", "func_name": "CoreBiGramTableDictionary.getBiFrequency", "original_string": "public static int getBiFrequency(String a, String b)\n    {\n        int idA = CoreDictionary.trie.exactMatchSearch(a);\n        if (idA == -1)\n        {\n            return 0;\n        }\n        int idB = CoreDictionary.trie.exactMatchSearch(b);\n        if (idB == -1)\n        {\n            return 0;\n        }\n        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);\n        if (index < 0) return 0;\n        index <<= 1;\n        return pair[index + 1];\n    }", "language": "java", "code": "public static int getBiFrequency(String a, String b)\n    {\n        int idA = CoreDictionary.trie.exactMatchSearch(a);\n        if (idA == -1)\n        {\n            return 0;\n        }\n        int idB = CoreDictionary.trie.exactMatchSearch(b);\n        if (idB == -1)\n        {\n            return 0;\n        }\n        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);\n        if (index < 0) return 0;\n        index <<= 1;\n        return pair[index + 1];\n    }", "code_tokens": ["public", "static", "int", "getBiFrequency", "(", "String", "a", ",", "String", "b", ")", "{", "int", "idA", "=", "CoreDictionary", ".", "trie", ".", "exactMatchSearch", "(", "a", ")", ";", "if", "(", "idA", "==", "-", "1", ")", "{", "return", "0", ";", "}", "int", "idB", "=", "CoreDictionary", ".", "trie", ".", "exactMatchSearch", "(", "b", ")", ";", "if", "(", "idB", "==", "-", "1", ")", "{", "return", "0", ";", "}", "int", "index", "=", "binarySearch", "(", "pair", ",", "start", "[", "idA", "]", ",", "start", "[", "idA", "+", "1", "]", "-", "start", "[", "idA", "]", ",", "idB", ")", ";", "if", "(", "index", "<", "0", ")", "return", "0", ";", "index", "<<=", "1", ";", "return", "pair", "[", "index", "+", "1", "]", ";", "}"], "docstring": "\u83b7\u53d6\u5171\u73b0\u9891\u6b21\n\n@param a \u7b2c\u4e00\u4e2a\u8bcd\n@param b \u7b2c\u4e8c\u4e2a\u8bcd\n@return \u7b2c\u4e00\u4e2a\u8bcd@\u7b2c\u4e8c\u4e2a\u8bcd\u51fa\u73b0\u7684\u9891\u6b21", "docstring_tokens": ["\u83b7\u53d6\u5171\u73b0\u9891\u6b21"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java#L245-L261", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java", "func_name": "CoreBiGramTableDictionary.getBiFrequency", "original_string": "public static int getBiFrequency(int idA, int idB)\n    {\n        // \u8d1f\u6570id\u8868\u793a\u6765\u81ea\u7528\u6237\u8bcd\u5178\u7684\u8bcd\u8bed\u7684\u8bcd\u9891\uff08\u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u8bed\u6ca1\u6709id\uff09\uff0c\u8fd4\u56de\u6b63\u503c\u589e\u52a0\u5176\u4eb2\u548c\u5ea6\n        if (idA < 0)\n        {\n            return -idA;\n        }\n        if (idB < 0)\n        {\n            return -idB;\n        }\n        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);\n        if (index < 0) return 0;\n        index <<= 1;\n        return pair[index + 1];\n    }", "language": "java", "code": "public static int getBiFrequency(int idA, int idB)\n    {\n        // \u8d1f\u6570id\u8868\u793a\u6765\u81ea\u7528\u6237\u8bcd\u5178\u7684\u8bcd\u8bed\u7684\u8bcd\u9891\uff08\u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u8bed\u6ca1\u6709id\uff09\uff0c\u8fd4\u56de\u6b63\u503c\u589e\u52a0\u5176\u4eb2\u548c\u5ea6\n        if (idA < 0)\n        {\n            return -idA;\n        }\n        if (idB < 0)\n        {\n            return -idB;\n        }\n        int index = binarySearch(pair, start[idA], start[idA + 1] - start[idA], idB);\n        if (index < 0) return 0;\n        index <<= 1;\n        return pair[index + 1];\n    }", "code_tokens": ["public", "static", "int", "getBiFrequency", "(", "int", "idA", ",", "int", "idB", ")", "{", "// \u8d1f\u6570id\u8868\u793a\u6765\u81ea\u7528\u6237\u8bcd\u5178\u7684\u8bcd\u8bed\u7684\u8bcd\u9891\uff08\u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u8bed\u6ca1\u6709id\uff09\uff0c\u8fd4\u56de\u6b63\u503c\u589e\u52a0\u5176\u4eb2\u548c\u5ea6", "if", "(", "idA", "<", "0", ")", "{", "return", "-", "idA", ";", "}", "if", "(", "idB", "<", "0", ")", "{", "return", "-", "idB", ";", "}", "int", "index", "=", "binarySearch", "(", "pair", ",", "start", "[", "idA", "]", ",", "start", "[", "idA", "+", "1", "]", "-", "start", "[", "idA", "]", ",", "idB", ")", ";", "if", "(", "index", "<", "0", ")", "return", "0", ";", "index", "<<=", "1", ";", "return", "pair", "[", "index", "+", "1", "]", ";", "}"], "docstring": "\u83b7\u53d6\u5171\u73b0\u9891\u6b21\n@param idA \u7b2c\u4e00\u4e2a\u8bcd\u7684id\n@param idB \u7b2c\u4e8c\u4e2a\u8bcd\u7684id\n@return \u5171\u73b0\u9891\u6b21", "docstring_tokens": ["\u83b7\u53d6\u5171\u73b0\u9891\u6b21"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java#L269-L284", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java", "func_name": "CoreBiGramTableDictionary.reload", "original_string": "public static boolean reload()\n    {\n        String biGramDictionaryPath = HanLP.Config.BiGramDictionaryPath;\n        IOUtil.deleteFile(biGramDictionaryPath + \".table\" + Predefine.BIN_EXT);\n\n        return load(biGramDictionaryPath);\n    }", "language": "java", "code": "public static boolean reload()\n    {\n        String biGramDictionaryPath = HanLP.Config.BiGramDictionaryPath;\n        IOUtil.deleteFile(biGramDictionaryPath + \".table\" + Predefine.BIN_EXT);\n\n        return load(biGramDictionaryPath);\n    }", "code_tokens": ["public", "static", "boolean", "reload", "(", ")", "{", "String", "biGramDictionaryPath", "=", "HanLP", ".", "Config", ".", "BiGramDictionaryPath", ";", "IOUtil", ".", "deleteFile", "(", "biGramDictionaryPath", "+", "\".table\"", "+", "Predefine", ".", "BIN_EXT", ")", ";", "return", "load", "(", "biGramDictionaryPath", ")", ";", "}"], "docstring": "\u70ed\u66f4\u65b0\u4e8c\u5143\u63a5\u7eed\u8bcd\u5178<br>\n\u96c6\u7fa4\u73af\u5883\uff08\u6216\u5176\u4ed6IOAdapter\uff09\u9700\u8981\u81ea\u884c\u5220\u9664\u7f13\u5b58\u6587\u4ef6\n@return \u662f\u5426\u6210\u529f", "docstring_tokens": ["\u70ed\u66f4\u65b0\u4e8c\u5143\u63a5\u7eed\u8bcd\u5178<br", ">", "\u96c6\u7fa4\u73af\u5883\uff08\u6216\u5176\u4ed6IOAdapter\uff09\u9700\u8981\u81ea\u884c\u5220\u9664\u7f13\u5b58\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreBiGramTableDictionary.java#L302-L308", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/NGramDictionaryMaker.java", "func_name": "NGramDictionaryMaker.saveNGramToTxt", "original_string": "public boolean saveNGramToTxt(String path)\n    {\n        try\n        {\n            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(path)));\n            for (Map.Entry<String, Integer> entry : trie.entrySet())\n            {\n                bw.write(entry.getKey() + \" \" + entry.getValue());\n                bw.newLine();\n            }\n            bw.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u4fdd\u5b58NGram\u8bcd\u5178\u5230\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n            return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public boolean saveNGramToTxt(String path)\n    {\n        try\n        {\n            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(path)));\n            for (Map.Entry<String, Integer> entry : trie.entrySet())\n            {\n                bw.write(entry.getKey() + \" \" + entry.getValue());\n                bw.newLine();\n            }\n            bw.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u4fdd\u5b58NGram\u8bcd\u5178\u5230\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "boolean", "saveNGramToTxt", "(", "String", "path", ")", "{", "try", "{", "BufferedWriter", "bw", "=", "new", "BufferedWriter", "(", "new", "OutputStreamWriter", "(", "IOUtil", ".", "newOutputStream", "(", "path", ")", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "trie", ".", "entrySet", "(", ")", ")", "{", "bw", ".", "write", "(", "entry", ".", "getKey", "(", ")", "+", "\" \"", "+", "entry", ".", "getValue", "(", ")", ")", ";", "bw", ".", "newLine", "(", ")", ";", "}", "bw", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u5728\u4fdd\u5b58NGram\u8bcd\u5178\u5230\" + path + \"\u65f6", "\u751f", "\u5e38\" +", "e", ";", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4fdd\u5b58NGram\u8bcd\u5178\n\n@param path\n@return", "docstring_tokens": ["\u4fdd\u5b58NGram\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/NGramDictionaryMaker.java#L73-L92", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/TranslatedPersonRecognition.java", "func_name": "TranslatedPersonRecognition.recognition", "original_string": "public static void recognition(List<Vertex> segResult, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        StringBuilder sbName = new StringBuilder();\n        int appendTimes = 0;\n        ListIterator<Vertex> listIterator = segResult.listIterator();\n        listIterator.next();\n        int line = 1;\n        int activeLine = 1;\n        while (listIterator.hasNext())\n        {\n            Vertex vertex = listIterator.next();\n            if (appendTimes > 0)\n            {\n                if (vertex.guessNature() == Nature.nrf || TranslatedPersonDictionary.containsKey(vertex.realWord))\n                {\n                    sbName.append(vertex.realWord);\n                    ++appendTimes;\n                }\n                else\n                {\n                    // \u8bc6\u522b\u7ed3\u675f\n                    if (appendTimes > 1)\n                    {\n                        if (HanLP.Config.DEBUG)\n                        {\n                            System.out.println(\"\u97f3\u8bd1\u4eba\u540d\u8bc6\u522b\u51fa\uff1a\" + sbName.toString());\n                        }\n                        wordNetOptimum.insert(activeLine, new Vertex(Predefine.TAG_PEOPLE, sbName.toString(), new CoreDictionary.Attribute(Nature.nrf), WORD_ID), wordNetAll);\n                    }\n                    sbName.setLength(0);\n                    appendTimes = 0;\n                }\n            }\n            else\n            {\n                // nrf\u89e6\u53d1\u8bc6\u522b\n                if (vertex.guessNature() == Nature.nrf\n//                        || TranslatedPersonDictionary.containsKey(vertex.realWord)\n                        )\n                {\n                    sbName.append(vertex.realWord);\n                    ++appendTimes;\n                    activeLine = line;\n                }\n            }\n\n            line += vertex.realWord.length();\n        }\n    }", "language": "java", "code": "public static void recognition(List<Vertex> segResult, WordNet wordNetOptimum, WordNet wordNetAll)\n    {\n        StringBuilder sbName = new StringBuilder();\n        int appendTimes = 0;\n        ListIterator<Vertex> listIterator = segResult.listIterator();\n        listIterator.next();\n        int line = 1;\n        int activeLine = 1;\n        while (listIterator.hasNext())\n        {\n            Vertex vertex = listIterator.next();\n            if (appendTimes > 0)\n            {\n                if (vertex.guessNature() == Nature.nrf || TranslatedPersonDictionary.containsKey(vertex.realWord))\n                {\n                    sbName.append(vertex.realWord);\n                    ++appendTimes;\n                }\n                else\n                {\n                    // \u8bc6\u522b\u7ed3\u675f\n                    if (appendTimes > 1)\n                    {\n                        if (HanLP.Config.DEBUG)\n                        {\n                            System.out.println(\"\u97f3\u8bd1\u4eba\u540d\u8bc6\u522b\u51fa\uff1a\" + sbName.toString());\n                        }\n                        wordNetOptimum.insert(activeLine, new Vertex(Predefine.TAG_PEOPLE, sbName.toString(), new CoreDictionary.Attribute(Nature.nrf), WORD_ID), wordNetAll);\n                    }\n                    sbName.setLength(0);\n                    appendTimes = 0;\n                }\n            }\n            else\n            {\n                // nrf\u89e6\u53d1\u8bc6\u522b\n                if (vertex.guessNature() == Nature.nrf\n//                        || TranslatedPersonDictionary.containsKey(vertex.realWord)\n                        )\n                {\n                    sbName.append(vertex.realWord);\n                    ++appendTimes;\n                    activeLine = line;\n                }\n            }\n\n            line += vertex.realWord.length();\n        }\n    }", "code_tokens": ["public", "static", "void", "recognition", "(", "List", "<", "Vertex", ">", "segResult", ",", "WordNet", "wordNetOptimum", ",", "WordNet", "wordNetAll", ")", "{", "StringBuilder", "sbName", "=", "new", "StringBuilder", "(", ")", ";", "int", "appendTimes", "=", "0", ";", "ListIterator", "<", "Vertex", ">", "listIterator", "=", "segResult", ".", "listIterator", "(", ")", ";", "listIterator", ".", "next", "(", ")", ";", "int", "line", "=", "1", ";", "int", "activeLine", "=", "1", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "Vertex", "vertex", "=", "listIterator", ".", "next", "(", ")", ";", "if", "(", "appendTimes", ">", "0", ")", "{", "if", "(", "vertex", ".", "guessNature", "(", ")", "==", "Nature", ".", "nrf", "||", "TranslatedPersonDictionary", ".", "containsKey", "(", "vertex", ".", "realWord", ")", ")", "{", "sbName", ".", "append", "(", "vertex", ".", "realWord", ")", ";", "++", "appendTimes", ";", "}", "else", "{", "// \u8bc6\u522b\u7ed3\u675f", "if", "(", "appendTimes", ">", "1", ")", "{", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "{", "System", ".", "out", ".", "println", "(", "\"\u97f3\u8bd1\u4eba\u540d\u8bc6\u522b\u51fa\uff1a\" + sbName.toStri", "g", "));", "", "", "", "", "", "", "}", "wordNetOptimum", ".", "insert", "(", "activeLine", ",", "new", "Vertex", "(", "Predefine", ".", "TAG_PEOPLE", ",", "sbName", ".", "toString", "(", ")", ",", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "nrf", ")", ",", "WORD_ID", ")", ",", "wordNetAll", ")", ";", "}", "sbName", ".", "setLength", "(", "0", ")", ";", "appendTimes", "=", "0", ";", "}", "}", "else", "{", "// nrf\u89e6\u53d1\u8bc6\u522b", "if", "(", "vertex", ".", "guessNature", "(", ")", "==", "Nature", ".", "nrf", "//                        || TranslatedPersonDictionary.containsKey(vertex.realWord)", ")", "{", "sbName", ".", "append", "(", "vertex", ".", "realWord", ")", ";", "++", "appendTimes", ";", "activeLine", "=", "line", ";", "}", "}", "line", "+=", "vertex", ".", "realWord", ".", "length", "(", ")", ";", "}", "}"], "docstring": "\u6267\u884c\u8bc6\u522b\n@param segResult \u7c97\u5206\u7ed3\u679c\n@param wordNetOptimum \u7c97\u5206\u7ed3\u679c\u5bf9\u5e94\u7684\u8bcd\u56fe\n@param wordNetAll \u5168\u8bcd\u56fe", "docstring_tokens": ["\u6267\u884c\u8bc6\u522b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/TranslatedPersonRecognition.java#L39-L87", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.resize", "original_string": "private int resize(int newSize)\n    {\n        int[] base2 = new int[newSize];\n        int[] check2 = new int[newSize];\n        if (allocSize > 0)\n        {\n            System.arraycopy(base, 0, base2, 0, allocSize);\n            System.arraycopy(check, 0, check2, 0, allocSize);\n        }\n\n        base = base2;\n        check = check2;\n\n        return allocSize = newSize;\n    }", "language": "java", "code": "private int resize(int newSize)\n    {\n        int[] base2 = new int[newSize];\n        int[] check2 = new int[newSize];\n        if (allocSize > 0)\n        {\n            System.arraycopy(base, 0, base2, 0, allocSize);\n            System.arraycopy(check, 0, check2, 0, allocSize);\n        }\n\n        base = base2;\n        check = check2;\n\n        return allocSize = newSize;\n    }", "code_tokens": ["private", "int", "resize", "(", "int", "newSize", ")", "{", "int", "[", "]", "base2", "=", "new", "int", "[", "newSize", "]", ";", "int", "[", "]", "check2", "=", "new", "int", "[", "newSize", "]", ";", "if", "(", "allocSize", ">", "0", ")", "{", "System", ".", "arraycopy", "(", "base", ",", "0", ",", "base2", ",", "0", ",", "allocSize", ")", ";", "System", ".", "arraycopy", "(", "check", ",", "0", ",", "check2", ",", "0", ",", "allocSize", ")", ";", "}", "base", "=", "base2", ";", "check", "=", "check2", ";", "return", "allocSize", "=", "newSize", ";", "}"], "docstring": "\u62d3\u5c55\u6570\u7ec4\n\n@param newSize\n@return", "docstring_tokens": ["\u62d3\u5c55\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L87-L101", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.fetch", "original_string": "private int fetch(Node parent, List<Node> siblings)\n    {\n        if (error_ < 0)\n            return 0;\n\n        int prev = 0;\n\n        for (int i = parent.left; i < parent.right; i++)\n        {\n            if ((length != null ? length[i] : key.get(i).length()) < parent.depth)\n                continue;\n\n            String tmp = key.get(i);\n\n            int cur = 0;\n            if ((length != null ? length[i] : tmp.length()) != parent.depth)\n                cur = (int) tmp.charAt(parent.depth) + 1;\n\n            if (prev > cur)\n            {\n                error_ = -3;\n                return 0;\n            }\n\n            if (cur != prev || siblings.size() == 0)\n            {\n                Node tmp_node = new Node();\n                tmp_node.depth = parent.depth + 1;\n                tmp_node.code = cur;\n                tmp_node.left = i;\n                if (siblings.size() != 0)\n                    siblings.get(siblings.size() - 1).right = i;\n\n                siblings.add(tmp_node);\n            }\n\n            prev = cur;\n        }\n\n        if (siblings.size() != 0)\n            siblings.get(siblings.size() - 1).right = parent.right;\n\n        return siblings.size();\n    }", "language": "java", "code": "private int fetch(Node parent, List<Node> siblings)\n    {\n        if (error_ < 0)\n            return 0;\n\n        int prev = 0;\n\n        for (int i = parent.left; i < parent.right; i++)\n        {\n            if ((length != null ? length[i] : key.get(i).length()) < parent.depth)\n                continue;\n\n            String tmp = key.get(i);\n\n            int cur = 0;\n            if ((length != null ? length[i] : tmp.length()) != parent.depth)\n                cur = (int) tmp.charAt(parent.depth) + 1;\n\n            if (prev > cur)\n            {\n                error_ = -3;\n                return 0;\n            }\n\n            if (cur != prev || siblings.size() == 0)\n            {\n                Node tmp_node = new Node();\n                tmp_node.depth = parent.depth + 1;\n                tmp_node.code = cur;\n                tmp_node.left = i;\n                if (siblings.size() != 0)\n                    siblings.get(siblings.size() - 1).right = i;\n\n                siblings.add(tmp_node);\n            }\n\n            prev = cur;\n        }\n\n        if (siblings.size() != 0)\n            siblings.get(siblings.size() - 1).right = parent.right;\n\n        return siblings.size();\n    }", "code_tokens": ["private", "int", "fetch", "(", "Node", "parent", ",", "List", "<", "Node", ">", "siblings", ")", "{", "if", "(", "error_", "<", "0", ")", "return", "0", ";", "int", "prev", "=", "0", ";", "for", "(", "int", "i", "=", "parent", ".", "left", ";", "i", "<", "parent", ".", "right", ";", "i", "++", ")", "{", "if", "(", "(", "length", "!=", "null", "?", "length", "[", "i", "]", ":", "key", ".", "get", "(", "i", ")", ".", "length", "(", ")", ")", "<", "parent", ".", "depth", ")", "continue", ";", "String", "tmp", "=", "key", ".", "get", "(", "i", ")", ";", "int", "cur", "=", "0", ";", "if", "(", "(", "length", "!=", "null", "?", "length", "[", "i", "]", ":", "tmp", ".", "length", "(", ")", ")", "!=", "parent", ".", "depth", ")", "cur", "=", "(", "int", ")", "tmp", ".", "charAt", "(", "parent", ".", "depth", ")", "+", "1", ";", "if", "(", "prev", ">", "cur", ")", "{", "error_", "=", "-", "3", ";", "return", "0", ";", "}", "if", "(", "cur", "!=", "prev", "||", "siblings", ".", "size", "(", ")", "==", "0", ")", "{", "Node", "tmp_node", "=", "new", "Node", "(", ")", ";", "tmp_node", ".", "depth", "=", "parent", ".", "depth", "+", "1", ";", "tmp_node", ".", "code", "=", "cur", ";", "tmp_node", ".", "left", "=", "i", ";", "if", "(", "siblings", ".", "size", "(", ")", "!=", "0", ")", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "right", "=", "i", ";", "siblings", ".", "add", "(", "tmp_node", ")", ";", "}", "prev", "=", "cur", ";", "}", "if", "(", "siblings", ".", "size", "(", ")", "!=", "0", ")", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "right", "=", "parent", ".", "right", ";", "return", "siblings", ".", "size", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u76f4\u63a5\u76f8\u8fde\u7684\u5b50\u8282\u70b9\n\n@param parent   \u7236\u8282\u70b9\n@param siblings \uff08\u5b50\uff09\u5144\u5f1f\u8282\u70b9\n@return \u5144\u5f1f\u8282\u70b9\u4e2a\u6570", "docstring_tokens": ["\u83b7\u53d6\u76f4\u63a5\u76f8\u8fde\u7684\u5b50\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L110-L153", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.insert", "original_string": "private int insert(List<Node> siblings, BitSet used)\n    {\n        if (error_ < 0)\n            return 0;\n\n        int begin = 0;\n        int pos = Math.max(siblings.get(0).code + 1, nextCheckPos) - 1;\n        int nonzero_num = 0;\n        int first = 0;\n\n        if (allocSize <= pos)\n            resize(pos + 1);\n\n        outer:\n        // \u6b64\u5faa\u73af\u4f53\u7684\u76ee\u6807\u662f\u627e\u51fa\u6ee1\u8db3base[begin + a1...an]  == 0\u7684n\u4e2a\u7a7a\u95f2\u7a7a\u95f4,a1...an\u662fsiblings\u4e2d\u7684n\u4e2a\u8282\u70b9\n        while (true)\n        {\n            pos++;\n\n            if (allocSize <= pos)\n                resize(pos + 1);\n\n            if (check[pos] != 0)\n            {\n                nonzero_num++;\n                continue;\n            }\n            else if (first == 0)\n            {\n                nextCheckPos = pos;\n                first = 1;\n            }\n\n            begin = pos - siblings.get(0).code; // \u5f53\u524d\u4f4d\u7f6e\u79bb\u7b2c\u4e00\u4e2a\u5144\u5f1f\u8282\u70b9\u7684\u8ddd\u79bb\n            if (allocSize <= (begin + siblings.get(siblings.size() - 1).code))\n            {\n                resize(begin + siblings.get(siblings.size() - 1).code + Character.MAX_VALUE);\n            }\n\n            //if (used[begin])\n             //   continue;\n            if(used.get(begin)){\n            \tcontinue;\n            }\n\n            for (int i = 1; i < siblings.size(); i++)\n                if (check[begin + siblings.get(i).code] != 0)\n                    continue outer;\n\n            break;\n        }\n\n        // -- Simple heuristics --\n        // if the percentage of non-empty contents in check between the\n        // index\n        // 'next_check_pos' and 'check' is greater than some constant value\n        // (e.g. 0.9),\n        // new 'next_check_pos' index is written by 'check'.\n        if (1.0 * nonzero_num / (pos - nextCheckPos + 1) >= 0.95)\n            nextCheckPos = pos; // \u4ece\u4f4d\u7f6e next_check_pos \u5f00\u59cb\u5230 pos \u95f4\uff0c\u5982\u679c\u5df2\u5360\u7528\u7684\u7a7a\u95f4\u572895%\u4ee5\u4e0a\uff0c\u4e0b\u6b21\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u76f4\u63a5\u4ece pos \u4f4d\u7f6e\u5904\u5f00\u59cb\u67e5\u627e\n\n        //used[begin] = true;\n        used.set(begin);\n        \n        size = (size > begin + siblings.get(siblings.size() - 1).code + 1) ? size\n                : begin + siblings.get(siblings.size() - 1).code + 1;\n\n        for (int i = 0; i < siblings.size(); i++)\n        {\n            check[begin + siblings.get(i).code] = begin;\n//            System.out.println(this);\n        }\n\n        for (int i = 0; i < siblings.size(); i++)\n        {\n            List<Node> new_siblings = new ArrayList<Node>();\n\n            if (fetch(siblings.get(i), new_siblings) == 0)  // \u4e00\u4e2a\u8bcd\u7684\u7ec8\u6b62\u4e14\u4e0d\u4e3a\u5176\u4ed6\u8bcd\u7684\u524d\u7f00\n            {\n                base[begin + siblings.get(i).code] = (value != null) ? (-value[siblings\n                        .get(i).left] - 1) : (-siblings.get(i).left - 1);\n//                System.out.println(this);\n\n                if (value != null && (-value[siblings.get(i).left] - 1) >= 0)\n                {\n                    error_ = -2;\n                    return 0;\n                }\n\n                progress++;\n                // if (progress_func_) (*progress_func_) (progress,\n                // keySize);\n            }\n            else\n            {\n                int h = insert(new_siblings, used);   // dfs\n                base[begin + siblings.get(i).code] = h;\n//                System.out.println(this);\n            }\n        }\n        return begin;\n    }", "language": "java", "code": "private int insert(List<Node> siblings, BitSet used)\n    {\n        if (error_ < 0)\n            return 0;\n\n        int begin = 0;\n        int pos = Math.max(siblings.get(0).code + 1, nextCheckPos) - 1;\n        int nonzero_num = 0;\n        int first = 0;\n\n        if (allocSize <= pos)\n            resize(pos + 1);\n\n        outer:\n        // \u6b64\u5faa\u73af\u4f53\u7684\u76ee\u6807\u662f\u627e\u51fa\u6ee1\u8db3base[begin + a1...an]  == 0\u7684n\u4e2a\u7a7a\u95f2\u7a7a\u95f4,a1...an\u662fsiblings\u4e2d\u7684n\u4e2a\u8282\u70b9\n        while (true)\n        {\n            pos++;\n\n            if (allocSize <= pos)\n                resize(pos + 1);\n\n            if (check[pos] != 0)\n            {\n                nonzero_num++;\n                continue;\n            }\n            else if (first == 0)\n            {\n                nextCheckPos = pos;\n                first = 1;\n            }\n\n            begin = pos - siblings.get(0).code; // \u5f53\u524d\u4f4d\u7f6e\u79bb\u7b2c\u4e00\u4e2a\u5144\u5f1f\u8282\u70b9\u7684\u8ddd\u79bb\n            if (allocSize <= (begin + siblings.get(siblings.size() - 1).code))\n            {\n                resize(begin + siblings.get(siblings.size() - 1).code + Character.MAX_VALUE);\n            }\n\n            //if (used[begin])\n             //   continue;\n            if(used.get(begin)){\n            \tcontinue;\n            }\n\n            for (int i = 1; i < siblings.size(); i++)\n                if (check[begin + siblings.get(i).code] != 0)\n                    continue outer;\n\n            break;\n        }\n\n        // -- Simple heuristics --\n        // if the percentage of non-empty contents in check between the\n        // index\n        // 'next_check_pos' and 'check' is greater than some constant value\n        // (e.g. 0.9),\n        // new 'next_check_pos' index is written by 'check'.\n        if (1.0 * nonzero_num / (pos - nextCheckPos + 1) >= 0.95)\n            nextCheckPos = pos; // \u4ece\u4f4d\u7f6e next_check_pos \u5f00\u59cb\u5230 pos \u95f4\uff0c\u5982\u679c\u5df2\u5360\u7528\u7684\u7a7a\u95f4\u572895%\u4ee5\u4e0a\uff0c\u4e0b\u6b21\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u76f4\u63a5\u4ece pos \u4f4d\u7f6e\u5904\u5f00\u59cb\u67e5\u627e\n\n        //used[begin] = true;\n        used.set(begin);\n        \n        size = (size > begin + siblings.get(siblings.size() - 1).code + 1) ? size\n                : begin + siblings.get(siblings.size() - 1).code + 1;\n\n        for (int i = 0; i < siblings.size(); i++)\n        {\n            check[begin + siblings.get(i).code] = begin;\n//            System.out.println(this);\n        }\n\n        for (int i = 0; i < siblings.size(); i++)\n        {\n            List<Node> new_siblings = new ArrayList<Node>();\n\n            if (fetch(siblings.get(i), new_siblings) == 0)  // \u4e00\u4e2a\u8bcd\u7684\u7ec8\u6b62\u4e14\u4e0d\u4e3a\u5176\u4ed6\u8bcd\u7684\u524d\u7f00\n            {\n                base[begin + siblings.get(i).code] = (value != null) ? (-value[siblings\n                        .get(i).left] - 1) : (-siblings.get(i).left - 1);\n//                System.out.println(this);\n\n                if (value != null && (-value[siblings.get(i).left] - 1) >= 0)\n                {\n                    error_ = -2;\n                    return 0;\n                }\n\n                progress++;\n                // if (progress_func_) (*progress_func_) (progress,\n                // keySize);\n            }\n            else\n            {\n                int h = insert(new_siblings, used);   // dfs\n                base[begin + siblings.get(i).code] = h;\n//                System.out.println(this);\n            }\n        }\n        return begin;\n    }", "code_tokens": ["private", "int", "insert", "(", "List", "<", "Node", ">", "siblings", ",", "BitSet", "used", ")", "{", "if", "(", "error_", "<", "0", ")", "return", "0", ";", "int", "begin", "=", "0", ";", "int", "pos", "=", "Math", ".", "max", "(", "siblings", ".", "get", "(", "0", ")", ".", "code", "+", "1", ",", "nextCheckPos", ")", "-", "1", ";", "int", "nonzero_num", "=", "0", ";", "int", "first", "=", "0", ";", "if", "(", "allocSize", "<=", "pos", ")", "resize", "(", "pos", "+", "1", ")", ";", "outer", ":", "// \u6b64\u5faa\u73af\u4f53\u7684\u76ee\u6807\u662f\u627e\u51fa\u6ee1\u8db3base[begin + a1...an]  == 0\u7684n\u4e2a\u7a7a\u95f2\u7a7a\u95f4,a1...an\u662fsiblings\u4e2d\u7684n\u4e2a\u8282\u70b9", "while", "(", "true", ")", "{", "pos", "++", ";", "if", "(", "allocSize", "<=", "pos", ")", "resize", "(", "pos", "+", "1", ")", ";", "if", "(", "check", "[", "pos", "]", "!=", "0", ")", "{", "nonzero_num", "++", ";", "continue", ";", "}", "else", "if", "(", "first", "==", "0", ")", "{", "nextCheckPos", "=", "pos", ";", "first", "=", "1", ";", "}", "begin", "=", "pos", "-", "siblings", ".", "get", "(", "0", ")", ".", "code", ";", "// \u5f53\u524d\u4f4d\u7f6e\u79bb\u7b2c\u4e00\u4e2a\u5144\u5f1f\u8282\u70b9\u7684\u8ddd\u79bb", "if", "(", "allocSize", "<=", "(", "begin", "+", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "code", ")", ")", "{", "resize", "(", "begin", "+", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "code", "+", "Character", ".", "MAX_VALUE", ")", ";", "}", "//if (used[begin])", "//   continue;", "if", "(", "used", ".", "get", "(", "begin", ")", ")", "{", "continue", ";", "}", "for", "(", "int", "i", "=", "1", ";", "i", "<", "siblings", ".", "size", "(", ")", ";", "i", "++", ")", "if", "(", "check", "[", "begin", "+", "siblings", ".", "get", "(", "i", ")", ".", "code", "]", "!=", "0", ")", "continue", "outer", ";", "break", ";", "}", "// -- Simple heuristics --", "// if the percentage of non-empty contents in check between the", "// index", "// 'next_check_pos' and 'check' is greater than some constant value", "// (e.g. 0.9),", "// new 'next_check_pos' index is written by 'check'.", "if", "(", "1.0", "*", "nonzero_num", "/", "(", "pos", "-", "nextCheckPos", "+", "1", ")", ">=", "0.95", ")", "nextCheckPos", "=", "pos", ";", "// \u4ece\u4f4d\u7f6e next_check_pos \u5f00\u59cb\u5230 pos \u95f4\uff0c\u5982\u679c\u5df2\u5360\u7528\u7684\u7a7a\u95f4\u572895%\u4ee5\u4e0a\uff0c\u4e0b\u6b21\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u76f4\u63a5\u4ece pos \u4f4d\u7f6e\u5904\u5f00\u59cb\u67e5\u627e", "//used[begin] = true;", "used", ".", "set", "(", "begin", ")", ";", "size", "=", "(", "size", ">", "begin", "+", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "code", "+", "1", ")", "?", "size", ":", "begin", "+", "siblings", ".", "get", "(", "siblings", ".", "size", "(", ")", "-", "1", ")", ".", "code", "+", "1", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "siblings", ".", "size", "(", ")", ";", "i", "++", ")", "{", "check", "[", "begin", "+", "siblings", ".", "get", "(", "i", ")", ".", "code", "]", "=", "begin", ";", "//            System.out.println(this);", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "siblings", ".", "size", "(", ")", ";", "i", "++", ")", "{", "List", "<", "Node", ">", "new_siblings", "=", "new", "ArrayList", "<", "Node", ">", "(", ")", ";", "if", "(", "fetch", "(", "siblings", ".", "get", "(", "i", ")", ",", "new_siblings", ")", "==", "0", ")", "// \u4e00\u4e2a\u8bcd\u7684\u7ec8\u6b62\u4e14\u4e0d\u4e3a\u5176\u4ed6\u8bcd\u7684\u524d\u7f00", "{", "base", "[", "begin", "+", "siblings", ".", "get", "(", "i", ")", ".", "code", "]", "=", "(", "value", "!=", "null", ")", "?", "(", "-", "value", "[", "siblings", ".", "get", "(", "i", ")", ".", "left", "]", "-", "1", ")", ":", "(", "-", "siblings", ".", "get", "(", "i", ")", ".", "left", "-", "1", ")", ";", "//                System.out.println(this);", "if", "(", "value", "!=", "null", "&&", "(", "-", "value", "[", "siblings", ".", "get", "(", "i", ")", ".", "left", "]", "-", "1", ")", ">=", "0", ")", "{", "error_", "=", "-", "2", ";", "return", "0", ";", "}", "progress", "++", ";", "// if (progress_func_) (*progress_func_) (progress,", "// keySize);", "}", "else", "{", "int", "h", "=", "insert", "(", "new_siblings", ",", "used", ")", ";", "// dfs", "base", "[", "begin", "+", "siblings", ".", "get", "(", "i", ")", ".", "code", "]", "=", "h", ";", "//                System.out.println(this);", "}", "}", "return", "begin", ";", "}"], "docstring": "\u63d2\u5165\u8282\u70b9\n\n@param siblings \u7b49\u5f85\u63d2\u5165\u7684\u5144\u5f1f\u8282\u70b9\n@return \u63d2\u5165\u4f4d\u7f6e", "docstring_tokens": ["\u63d2\u5165\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L161-L262", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.build", "original_string": "public int build(Set<Map.Entry<String, V>> entrySet)\n    {\n        List<String> keyList = new ArrayList<String>(entrySet.size());\n        List<V> valueList = new ArrayList<V>(entrySet.size());\n        for (Map.Entry<String, V> entry : entrySet)\n        {\n            keyList.add(entry.getKey());\n            valueList.add(entry.getValue());\n        }\n\n        return build(keyList, valueList);\n    }", "language": "java", "code": "public int build(Set<Map.Entry<String, V>> entrySet)\n    {\n        List<String> keyList = new ArrayList<String>(entrySet.size());\n        List<V> valueList = new ArrayList<V>(entrySet.size());\n        for (Map.Entry<String, V> entry : entrySet)\n        {\n            keyList.add(entry.getKey());\n            valueList.add(entry.getValue());\n        }\n\n        return build(keyList, valueList);\n    }", "code_tokens": ["public", "int", "build", "(", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", ")", "{", "List", "<", "String", ">", "keyList", "=", "new", "ArrayList", "<", "String", ">", "(", "entrySet", ".", "size", "(", ")", ")", ";", "List", "<", "V", ">", "valueList", "=", "new", "ArrayList", "<", "V", ">", "(", "entrySet", ".", "size", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "V", ">", "entry", ":", "entrySet", ")", "{", "keyList", ".", "add", "(", "entry", ".", "getKey", "(", ")", ")", ";", "valueList", ".", "add", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "return", "build", "(", "keyList", ",", "valueList", ")", ";", "}"], "docstring": "\u6784\u5efaDAT\n\n@param entrySet \u6ce8\u610f\u6b64entrySet\u4e00\u5b9a\u8981\u662f\u5b57\u5178\u5e8f\u7684\uff01\u5426\u5219\u4f1a\u5931\u8d25\n@return", "docstring_tokens": ["\u6784\u5efaDAT"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L352-L363", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.build", "original_string": "public int build(TreeMap<String, V> keyValueMap)\n    {\n        assert keyValueMap != null;\n        Set<Map.Entry<String, V>> entrySet = keyValueMap.entrySet();\n        return build(entrySet);\n    }", "language": "java", "code": "public int build(TreeMap<String, V> keyValueMap)\n    {\n        assert keyValueMap != null;\n        Set<Map.Entry<String, V>> entrySet = keyValueMap.entrySet();\n        return build(entrySet);\n    }", "code_tokens": ["public", "int", "build", "(", "TreeMap", "<", "String", ",", "V", ">", "keyValueMap", ")", "{", "assert", "keyValueMap", "!=", "null", ";", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", "=", "keyValueMap", ".", "entrySet", "(", ")", ";", "return", "build", "(", "entrySet", ")", ";", "}"], "docstring": "\u65b9\u4fbf\u5730\u6784\u9020\u4e00\u4e2a\u53cc\u6570\u7ec4trie\u6811\n\n@param keyValueMap \u5347\u5e8f\u952e\u503c\u5bf9map\n@return \u6784\u9020\u7ed3\u679c", "docstring_tokens": ["\u65b9\u4fbf\u5730\u6784\u9020\u4e00\u4e2a\u53cc\u6570\u7ec4trie\u6811"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L371-L376", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.build", "original_string": "public int build(List<String> _key, int _length[], int _value[],\n                     int _keySize)\n    {\n        if (_key == null || _keySize > _key.size())\n            return 0;\n\n        // progress_func_ = progress_func;\n        key = _key;\n        length = _length;\n        keySize = _keySize;\n        value = _value;\n        progress = 0;\n        allocSize = 0;\n\n        resize(65536 * 32); // 32\u4e2a\u53cc\u5b57\u8282\n\n        base[0] = 1;\n        nextCheckPos = 0;\n\n        Node root_node = new Node();\n        root_node.left = 0;\n        root_node.right = keySize;\n        root_node.depth = 0;\n\n        List<Node> siblings = new ArrayList<Node>();\n        fetch(root_node, siblings);\n        insert(siblings, new BitSet());\n        shrink();\n\n        // size += (1 << 8 * 2) + 1; // ???\n        // if (size >= allocSize) resize (size);\n\n        key = null;\n        length = null;\n\n        return error_;\n    }", "language": "java", "code": "public int build(List<String> _key, int _length[], int _value[],\n                     int _keySize)\n    {\n        if (_key == null || _keySize > _key.size())\n            return 0;\n\n        // progress_func_ = progress_func;\n        key = _key;\n        length = _length;\n        keySize = _keySize;\n        value = _value;\n        progress = 0;\n        allocSize = 0;\n\n        resize(65536 * 32); // 32\u4e2a\u53cc\u5b57\u8282\n\n        base[0] = 1;\n        nextCheckPos = 0;\n\n        Node root_node = new Node();\n        root_node.left = 0;\n        root_node.right = keySize;\n        root_node.depth = 0;\n\n        List<Node> siblings = new ArrayList<Node>();\n        fetch(root_node, siblings);\n        insert(siblings, new BitSet());\n        shrink();\n\n        // size += (1 << 8 * 2) + 1; // ???\n        // if (size >= allocSize) resize (size);\n\n        key = null;\n        length = null;\n\n        return error_;\n    }", "code_tokens": ["public", "int", "build", "(", "List", "<", "String", ">", "_key", ",", "int", "_length", "[", "]", ",", "int", "_value", "[", "]", ",", "int", "_keySize", ")", "{", "if", "(", "_key", "==", "null", "||", "_keySize", ">", "_key", ".", "size", "(", ")", ")", "return", "0", ";", "// progress_func_ = progress_func;", "key", "=", "_key", ";", "length", "=", "_length", ";", "keySize", "=", "_keySize", ";", "value", "=", "_value", ";", "progress", "=", "0", ";", "allocSize", "=", "0", ";", "resize", "(", "65536", "*", "32", ")", ";", "// 32\u4e2a\u53cc\u5b57\u8282", "base", "[", "0", "]", "=", "1", ";", "nextCheckPos", "=", "0", ";", "Node", "root_node", "=", "new", "Node", "(", ")", ";", "root_node", ".", "left", "=", "0", ";", "root_node", ".", "right", "=", "keySize", ";", "root_node", ".", "depth", "=", "0", ";", "List", "<", "Node", ">", "siblings", "=", "new", "ArrayList", "<", "Node", ">", "(", ")", ";", "fetch", "(", "root_node", ",", "siblings", ")", ";", "insert", "(", "siblings", ",", "new", "BitSet", "(", ")", ")", ";", "shrink", "(", ")", ";", "// size += (1 << 8 * 2) + 1; // ???", "// if (size >= allocSize) resize (size);", "key", "=", "null", ";", "length", "=", "null", ";", "return", "error_", ";", "}"], "docstring": "\u552f\u4e00\u7684\u6784\u5efa\u65b9\u6cd5\n\n@param _key     \u503cset\uff0c\u5fc5\u987b\u5b57\u5178\u5e8f\n@param _length  \u5bf9\u5e94\u6bcf\u4e2akey\u7684\u957f\u5ea6\uff0c\u7559\u7a7a\u52a8\u6001\u83b7\u53d6\n@param _value   \u6bcf\u4e2akey\u5bf9\u5e94\u7684\u503c\uff0c\u7559\u7a7a\u4f7f\u7528key\u7684\u4e0b\u6807\u4f5c\u4e3a\u503c\n@param _keySize key\u7684\u957f\u5ea6\uff0c\u5e94\u8be5\u8bbe\u4e3a_key.size\n@return \u662f\u5426\u51fa\u9519", "docstring_tokens": ["\u552f\u4e00\u7684\u6784\u5efa\u65b9\u6cd5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L387-L423", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.save", "original_string": "public boolean save(DataOutputStream out)\n    {\n        try\n        {\n            out.writeInt(size);\n            for (int i = 0; i < size; i++)\n            {\n                out.writeInt(base[i]);\n                out.writeInt(check[i]);\n            }\n        }\n        catch (Exception e)\n        {\n            return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public boolean save(DataOutputStream out)\n    {\n        try\n        {\n            out.writeInt(size);\n            for (int i = 0; i < size; i++)\n            {\n                out.writeInt(base[i]);\n                out.writeInt(check[i]);\n            }\n        }\n        catch (Exception e)\n        {\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "boolean", "save", "(", "DataOutputStream", "out", ")", "{", "try", "{", "out", ".", "writeInt", "(", "size", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "out", ".", "writeInt", "(", "base", "[", "i", "]", ")", ";", "out", ".", "writeInt", "(", "check", "[", "i", "]", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u5c06base\u548ccheck\u4fdd\u5b58\u4e0b\u6765\n\n@param out\n@return", "docstring_tokens": ["\u5c06base\u548ccheck\u4fdd\u5b58\u4e0b\u6765"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L478-L495", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.load", "original_string": "public boolean load(String path, List<V> value)\n    {\n        if (!loadBaseAndCheck(path)) return false;\n        v = (V[]) value.toArray();\n        return true;\n    }", "language": "java", "code": "public boolean load(String path, List<V> value)\n    {\n        if (!loadBaseAndCheck(path)) return false;\n        v = (V[]) value.toArray();\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "String", "path", ",", "List", "<", "V", ">", "value", ")", "{", "if", "(", "!", "loadBaseAndCheck", "(", "path", ")", ")", "return", "false", ";", "v", "=", "(", "V", "[", "]", ")", "value", ".", "toArray", "(", ")", ";", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\uff0c\u9700\u8981\u989d\u5916\u63d0\u4f9b\u503c\n\n@param path\n@param value\n@return", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\uff0c\u9700\u8981\u989d\u5916\u63d0\u4f9b\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L510-L515", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.load", "original_string": "public boolean load(String path, V[] value)\n    {\n        if (!(IOAdapter == null ? loadBaseAndCheckByFileChannel(path) :\n        load(ByteArrayStream.createByteArrayStream(path), value)\n        )) return false;\n        v = value;\n        return true;\n    }", "language": "java", "code": "public boolean load(String path, V[] value)\n    {\n        if (!(IOAdapter == null ? loadBaseAndCheckByFileChannel(path) :\n        load(ByteArrayStream.createByteArrayStream(path), value)\n        )) return false;\n        v = value;\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "String", "path", ",", "V", "[", "]", "value", ")", "{", "if", "(", "!", "(", "IOAdapter", "==", "null", "?", "loadBaseAndCheckByFileChannel", "(", "path", ")", ":", "load", "(", "ByteArrayStream", ".", "createByteArrayStream", "(", "path", ")", ",", "value", ")", ")", ")", "return", "false", ";", "v", "=", "value", ";", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\uff0c\u9700\u8981\u989d\u5916\u63d0\u4f9b\u503c\n\n@param path\n@param value\n@return", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\uff0c\u9700\u8981\u989d\u5916\u63d0\u4f9b\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L524-L531", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.load", "original_string": "public boolean load(byte[] bytes, int offset, V[] value)\n    {\n        if (bytes == null) return false;\n        size = ByteUtil.bytesHighFirstToInt(bytes, offset);\n        offset += 4;\n        base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n        check = new int[size + 65535];\n        for (int i = 0; i < size; i++)\n        {\n            base[i] = ByteUtil.bytesHighFirstToInt(bytes, offset);\n            offset += 4;\n            check[i] = ByteUtil.bytesHighFirstToInt(bytes, offset);\n            offset += 4;\n        }\n        v = value;\n        return true;\n    }", "language": "java", "code": "public boolean load(byte[] bytes, int offset, V[] value)\n    {\n        if (bytes == null) return false;\n        size = ByteUtil.bytesHighFirstToInt(bytes, offset);\n        offset += 4;\n        base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n        check = new int[size + 65535];\n        for (int i = 0; i < size; i++)\n        {\n            base[i] = ByteUtil.bytesHighFirstToInt(bytes, offset);\n            offset += 4;\n            check[i] = ByteUtil.bytesHighFirstToInt(bytes, offset);\n            offset += 4;\n        }\n        v = value;\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "byte", "[", "]", "bytes", ",", "int", "offset", ",", "V", "[", "]", "value", ")", "{", "if", "(", "bytes", "==", "null", ")", "return", "false", ";", "size", "=", "ByteUtil", ".", "bytesHighFirstToInt", "(", "bytes", ",", "offset", ")", ";", "offset", "+=", "4", ";", "base", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "// \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c", "check", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "base", "[", "i", "]", "=", "ByteUtil", ".", "bytesHighFirstToInt", "(", "bytes", ",", "offset", ")", ";", "offset", "+=", "4", ";", "check", "[", "i", "]", "=", "ByteUtil", ".", "bytesHighFirstToInt", "(", "bytes", ",", "offset", ")", ";", "offset", "+=", "4", ";", "}", "v", "=", "value", ";", "return", "true", ";", "}"], "docstring": "\u4ece\u5b57\u8282\u6570\u7ec4\u52a0\u8f7d\uff08\u53d1\u73b0\u5728MacOS\u4e0a\uff0c\u6b64\u65b9\u6cd5\u6bd4ByteArray\u66f4\u5feb\uff09\n@param bytes\n@param offset\n@param value\n@return", "docstring_tokens": ["\u4ece\u5b57\u8282\u6570\u7ec4\u52a0\u8f7d\uff08\u53d1\u73b0\u5728MacOS\u4e0a\uff0c\u6b64\u65b9\u6cd5\u6bd4ByteArray\u66f4\u5feb\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L555-L571", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.loadBaseAndCheck", "original_string": "private boolean loadBaseAndCheck(String path)\n    {\n        try\n        {\n            DataInputStream in = new DataInputStream(new BufferedInputStream(IOAdapter == null ?\n                                                                                     new FileInputStream(path) :\n                    IOAdapter.open(path)\n            ));\n            size = in.readInt();\n            base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n            check = new int[size + 65535];\n            for (int i = 0; i < size; i++)\n            {\n                base[i] = in.readInt();\n                check[i] = in.readInt();\n            }\n        }\n        catch (Exception e)\n        {\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "private boolean loadBaseAndCheck(String path)\n    {\n        try\n        {\n            DataInputStream in = new DataInputStream(new BufferedInputStream(IOAdapter == null ?\n                                                                                     new FileInputStream(path) :\n                    IOAdapter.open(path)\n            ));\n            size = in.readInt();\n            base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n            check = new int[size + 65535];\n            for (int i = 0; i < size; i++)\n            {\n                base[i] = in.readInt();\n                check[i] = in.readInt();\n            }\n        }\n        catch (Exception e)\n        {\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["private", "boolean", "loadBaseAndCheck", "(", "String", "path", ")", "{", "try", "{", "DataInputStream", "in", "=", "new", "DataInputStream", "(", "new", "BufferedInputStream", "(", "IOAdapter", "==", "null", "?", "new", "FileInputStream", "(", "path", ")", ":", "IOAdapter", ".", "open", "(", "path", ")", ")", ")", ";", "size", "=", "in", ".", "readInt", "(", ")", ";", "base", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "// \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c", "check", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "base", "[", "i", "]", "=", "in", ".", "readInt", "(", ")", ";", "check", "[", "i", "]", "=", "in", ".", "readInt", "(", ")", ";", "}", "}", "catch", "(", "Exception", "e", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4\n\n@param path\n@return", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L590-L612", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.serializeTo", "original_string": "public boolean serializeTo(String path)\n    {\n        ObjectOutputStream out = null;\n        try\n        {\n            out = new ObjectOutputStream(IOUtil.newOutputStream(path));\n            out.writeObject(this);\n        }\n        catch (Exception e)\n        {\n//            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "public boolean serializeTo(String path)\n    {\n        ObjectOutputStream out = null;\n        try\n        {\n            out = new ObjectOutputStream(IOUtil.newOutputStream(path));\n            out.writeObject(this);\n        }\n        catch (Exception e)\n        {\n//            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["public", "boolean", "serializeTo", "(", "String", "path", ")", "{", "ObjectOutputStream", "out", "=", "null", ";", "try", "{", "out", "=", "new", "ObjectOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "path", ")", ")", ";", "out", ".", "writeObject", "(", "this", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "//            e.printStackTrace();", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u5c06\u81ea\u5df1\u5e8f\u5217\u5316\u5230\n\n@param path\n@return", "docstring_tokens": ["\u5c06\u81ea\u5df1\u5e8f\u5217\u5316\u5230"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L665-L679", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.exactMatchSearch", "original_string": "public int exactMatchSearch(char[] keyChars, int pos, int len, int nodePos)\n    {\n        int result = -1;\n\n        int b = base[nodePos];\n        int p;\n\n        for (int i = pos; i < len; i++)\n        {\n            p = b + (int) (keyChars[i]) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return result;\n        }\n\n        p = b;\n        int n = base[p];\n        if (b == check[p] && n < 0)\n        {\n            result = -n - 1;\n        }\n        return result;\n    }", "language": "java", "code": "public int exactMatchSearch(char[] keyChars, int pos, int len, int nodePos)\n    {\n        int result = -1;\n\n        int b = base[nodePos];\n        int p;\n\n        for (int i = pos; i < len; i++)\n        {\n            p = b + (int) (keyChars[i]) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return result;\n        }\n\n        p = b;\n        int n = base[p];\n        if (b == check[p] && n < 0)\n        {\n            result = -n - 1;\n        }\n        return result;\n    }", "code_tokens": ["public", "int", "exactMatchSearch", "(", "char", "[", "]", "keyChars", ",", "int", "pos", ",", "int", "len", ",", "int", "nodePos", ")", "{", "int", "result", "=", "-", "1", ";", "int", "b", "=", "base", "[", "nodePos", "]", ";", "int", "p", ";", "for", "(", "int", "i", "=", "pos", ";", "i", "<", "len", ";", "i", "++", ")", "{", "p", "=", "b", "+", "(", "int", ")", "(", "keyChars", "[", "i", "]", ")", "+", "1", ";", "if", "(", "b", "==", "check", "[", "p", "]", ")", "b", "=", "base", "[", "p", "]", ";", "else", "return", "result", ";", "}", "p", "=", "b", ";", "int", "n", "=", "base", "[", "p", "]", ";", "if", "(", "b", "==", "check", "[", "p", "]", "&&", "n", "<", "0", ")", "{", "result", "=", "-", "n", "-", "1", ";", "}", "return", "result", ";", "}"], "docstring": "\u7cbe\u786e\u67e5\u8be2\n\n@param keyChars \u952e\u7684char\u6570\u7ec4\n@param pos      char\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\n@param len      \u952e\u7684\u957f\u5ea6\n@param nodePos  \u5f00\u59cb\u67e5\u627e\u7684\u4f4d\u7f6e\uff08\u672c\u53c2\u6570\u5141\u8bb8\u4ece\u975e\u6839\u8282\u70b9\u67e5\u8be2\uff09\n@return \u67e5\u5230\u7684\u8282\u70b9\u4ee3\u8868\u7684value ID\uff0c\u8d1f\u6570\u8868\u793a\u4e0d\u5b58\u5728", "docstring_tokens": ["\u7cbe\u786e\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L746-L769", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.commonPrefixSearch", "original_string": "public List<Integer> commonPrefixSearch(String key, int pos, int len, int nodePos)\n    {\n        if (len <= 0)\n            len = key.length();\n        if (nodePos <= 0)\n            nodePos = 0;\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        char[] keyChars = key.toCharArray();\n\n        int b = base[nodePos];\n        int n;\n        int p;\n\n        for (int i = pos; i < len; i++)\n        {\n            p = b + (int) (keyChars[i]) + 1;    // \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1\n            if (b == check[p])                  // base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]\n                b = base[p];\n            else\n                return result;\n            p = b;\n            n = base[p];\n            if (b == check[p] && n < 0)         // base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd\n            {\n                result.add(-n - 1);\n            }\n        }\n\n        return result;\n    }", "language": "java", "code": "public List<Integer> commonPrefixSearch(String key, int pos, int len, int nodePos)\n    {\n        if (len <= 0)\n            len = key.length();\n        if (nodePos <= 0)\n            nodePos = 0;\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        char[] keyChars = key.toCharArray();\n\n        int b = base[nodePos];\n        int n;\n        int p;\n\n        for (int i = pos; i < len; i++)\n        {\n            p = b + (int) (keyChars[i]) + 1;    // \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1\n            if (b == check[p])                  // base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]\n                b = base[p];\n            else\n                return result;\n            p = b;\n            n = base[p];\n            if (b == check[p] && n < 0)         // base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd\n            {\n                result.add(-n - 1);\n            }\n        }\n\n        return result;\n    }", "code_tokens": ["public", "List", "<", "Integer", ">", "commonPrefixSearch", "(", "String", "key", ",", "int", "pos", ",", "int", "len", ",", "int", "nodePos", ")", "{", "if", "(", "len", "<=", "0", ")", "len", "=", "key", ".", "length", "(", ")", ";", "if", "(", "nodePos", "<=", "0", ")", "nodePos", "=", "0", ";", "List", "<", "Integer", ">", "result", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "char", "[", "]", "keyChars", "=", "key", ".", "toCharArray", "(", ")", ";", "int", "b", "=", "base", "[", "nodePos", "]", ";", "int", "n", ";", "int", "p", ";", "for", "(", "int", "i", "=", "pos", ";", "i", "<", "len", ";", "i", "++", ")", "{", "p", "=", "b", "+", "(", "int", ")", "(", "keyChars", "[", "i", "]", ")", "+", "1", ";", "// \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1", "if", "(", "b", "==", "check", "[", "p", "]", ")", "// base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]", "b", "=", "base", "[", "p", "]", ";", "else", "return", "result", ";", "p", "=", "b", ";", "n", "=", "base", "[", "p", "]", ";", "if", "(", "b", "==", "check", "[", "p", "]", "&&", "n", "<", "0", ")", "// base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd", "{", "result", ".", "add", "(", "-", "n", "-", "1", ")", ";", "}", "}", "return", "result", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n\n@param key     \u67e5\u8be2\u5b57\u4e32\n@param pos     \u5b57\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\n@param len     \u5b57\u4e32\u957f\u5ea6\n@param nodePos base\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\n@return \u4e00\u4e2a\u542b\u6709\u6240\u6709\u4e0b\u6807\u7684list", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L785-L816", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.commonPrefixSearchWithValue", "original_string": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(char[] keyChars, int begin)\n    {\n        int len = keyChars.length;\n        LinkedList<Map.Entry<String, V>> result = new LinkedList<Map.Entry<String, V>>();\n        int b = base[0];\n        int n;\n        int p;\n\n        for (int i = begin; i < len; ++i)\n        {\n            p = b;\n            n = base[p];\n            if (b == check[p] && n < 0)         // base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd\n            {\n                result.add(new AbstractMap.SimpleEntry<String, V>(new String(keyChars, begin, i - begin), v[-n - 1]));\n            }\n\n            p = b + (int) (keyChars[i]) + 1;    // \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1\n            // \u4e0b\u9762\u8fd9\u53e5\u53ef\u80fd\u4ea7\u751f\u4e0b\u6807\u8d8a\u754c\uff0c\u4e0d\u5982\u6539\u4e3aif (p < size && b == check[p])\uff0c\u6216\u8005\u591a\u5206\u914d\u4e00\u4e9b\u5185\u5b58\n            if (b == check[p])                  // base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]\n                b = base[p];\n            else\n                return result;\n        }\n\n        p = b;\n        n = base[p];\n\n        if (b == check[p] && n < 0)\n        {\n            result.add(new AbstractMap.SimpleEntry<String, V>(new String(keyChars, begin, len - begin), v[-n - 1]));\n        }\n\n        return result;\n    }", "language": "java", "code": "public LinkedList<Map.Entry<String, V>> commonPrefixSearchWithValue(char[] keyChars, int begin)\n    {\n        int len = keyChars.length;\n        LinkedList<Map.Entry<String, V>> result = new LinkedList<Map.Entry<String, V>>();\n        int b = base[0];\n        int n;\n        int p;\n\n        for (int i = begin; i < len; ++i)\n        {\n            p = b;\n            n = base[p];\n            if (b == check[p] && n < 0)         // base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd\n            {\n                result.add(new AbstractMap.SimpleEntry<String, V>(new String(keyChars, begin, i - begin), v[-n - 1]));\n            }\n\n            p = b + (int) (keyChars[i]) + 1;    // \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1\n            // \u4e0b\u9762\u8fd9\u53e5\u53ef\u80fd\u4ea7\u751f\u4e0b\u6807\u8d8a\u754c\uff0c\u4e0d\u5982\u6539\u4e3aif (p < size && b == check[p])\uff0c\u6216\u8005\u591a\u5206\u914d\u4e00\u4e9b\u5185\u5b58\n            if (b == check[p])                  // base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]\n                b = base[p];\n            else\n                return result;\n        }\n\n        p = b;\n        n = base[p];\n\n        if (b == check[p] && n < 0)\n        {\n            result.add(new AbstractMap.SimpleEntry<String, V>(new String(keyChars, begin, len - begin), v[-n - 1]));\n        }\n\n        return result;\n    }", "code_tokens": ["public", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "commonPrefixSearchWithValue", "(", "char", "[", "]", "keyChars", ",", "int", "begin", ")", "{", "int", "len", "=", "keyChars", ".", "length", ";", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "result", "=", "new", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "(", ")", ";", "int", "b", "=", "base", "[", "0", "]", ";", "int", "n", ";", "int", "p", ";", "for", "(", "int", "i", "=", "begin", ";", "i", "<", "len", ";", "++", "i", ")", "{", "p", "=", "b", ";", "n", "=", "base", "[", "p", "]", ";", "if", "(", "b", "==", "check", "[", "p", "]", "&&", "n", "<", "0", ")", "// base[p] == check[p] && base[p] < 0 \u67e5\u5230\u4e00\u4e2a\u8bcd", "{", "result", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "String", ",", "V", ">", "(", "new", "String", "(", "keyChars", ",", "begin", ",", "i", "-", "begin", ")", ",", "v", "[", "-", "n", "-", "1", "]", ")", ")", ";", "}", "p", "=", "b", "+", "(", "int", ")", "(", "keyChars", "[", "i", "]", ")", "+", "1", ";", "// \u72b6\u6001\u8f6c\u79fb p = base[char[i-1]] + char[i] + 1", "// \u4e0b\u9762\u8fd9\u53e5\u53ef\u80fd\u4ea7\u751f\u4e0b\u6807\u8d8a\u754c\uff0c\u4e0d\u5982\u6539\u4e3aif (p < size && b == check[p])\uff0c\u6216\u8005\u591a\u5206\u914d\u4e00\u4e9b\u5185\u5b58", "if", "(", "b", "==", "check", "[", "p", "]", ")", "// base[char[i-1]] == check[base[char[i-1]] + char[i] + 1]", "b", "=", "base", "[", "p", "]", ";", "else", "return", "result", ";", "}", "p", "=", "b", ";", "n", "=", "base", "[", "p", "]", ";", "if", "(", "b", "==", "check", "[", "p", "]", "&&", "n", "<", "0", ")", "{", "result", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "String", ",", "V", ">", "(", "new", "String", "(", "keyChars", ",", "begin", ",", "len", "-", "begin", ")", ",", "v", "[", "-", "n", "-", "1", "]", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "\u4f18\u5316\u7684\u524d\u7f00\u67e5\u8be2\uff0c\u53ef\u4ee5\u590d\u7528\u5b57\u7b26\u6570\u7ec4\n\n@param keyChars\n@param begin\n@return", "docstring_tokens": ["\u4f18\u5316\u7684\u524d\u7f00\u67e5\u8be2\uff0c\u53ef\u4ee5\u590d\u7528\u5b57\u7b26\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L869-L903", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.get", "original_string": "public V get(String key)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            return getValueAt(index);\n        }\n\n        return null;\n    }", "language": "java", "code": "public V get(String key)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            return getValueAt(index);\n        }\n\n        return null;\n    }", "code_tokens": ["public", "V", "get", "(", "String", "key", ")", "{", "int", "index", "=", "exactMatchSearch", "(", "key", ")", ";", "if", "(", "index", ">=", "0", ")", "{", "return", "getValueAt", "(", "index", ")", ";", "}", "return", "null", ";", "}"], "docstring": "\u7cbe\u786e\u67e5\u8be2\n\n@param key \u952e\n@return \u503c", "docstring_tokens": ["\u7cbe\u786e\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L989-L998", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.transition", "original_string": "protected int transition(char[] path)\n    {\n        int b = base[0];\n        int p;\n\n        for (int i = 0; i < path.length; ++i)\n        {\n            p = b + (int) (path[i]) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return -1;\n        }\n\n        p = b;\n        return p;\n    }", "language": "java", "code": "protected int transition(char[] path)\n    {\n        int b = base[0];\n        int p;\n\n        for (int i = 0; i < path.length; ++i)\n        {\n            p = b + (int) (path[i]) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return -1;\n        }\n\n        p = b;\n        return p;\n    }", "code_tokens": ["protected", "int", "transition", "(", "char", "[", "]", "path", ")", "{", "int", "b", "=", "base", "[", "0", "]", ";", "int", "p", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "path", ".", "length", ";", "++", "i", ")", "{", "p", "=", "b", "+", "(", "int", ")", "(", "path", "[", "i", "]", ")", "+", "1", ";", "if", "(", "b", "==", "check", "[", "p", "]", ")", "b", "=", "base", "[", "p", "]", ";", "else", "return", "-", "1", ";", "}", "p", "=", "b", ";", "return", "p", ";", "}"], "docstring": "\u6cbf\u7740\u8282\u70b9\u8f6c\u79fb\u72b6\u6001\n\n@param path\n@return", "docstring_tokens": ["\u6cbf\u7740\u8282\u70b9\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1044-L1060", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.transition", "original_string": "public int transition(String path, int from)\n    {\n        int b = from;\n        int p;\n\n        for (int i = 0; i < path.length(); ++i)\n        {\n            p = b + (int) (path.charAt(i)) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return -1;\n        }\n\n        p = b;\n        return p;\n    }", "language": "java", "code": "public int transition(String path, int from)\n    {\n        int b = from;\n        int p;\n\n        for (int i = 0; i < path.length(); ++i)\n        {\n            p = b + (int) (path.charAt(i)) + 1;\n            if (b == check[p])\n                b = base[p];\n            else\n                return -1;\n        }\n\n        p = b;\n        return p;\n    }", "code_tokens": ["public", "int", "transition", "(", "String", "path", ",", "int", "from", ")", "{", "int", "b", "=", "from", ";", "int", "p", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "path", ".", "length", "(", ")", ";", "++", "i", ")", "{", "p", "=", "b", "+", "(", "int", ")", "(", "path", ".", "charAt", "(", "i", ")", ")", "+", "1", ";", "if", "(", "b", "==", "check", "[", "p", "]", ")", "b", "=", "base", "[", "p", "]", ";", "else", "return", "-", "1", ";", "}", "p", "=", "b", ";", "return", "p", ";", "}"], "docstring": "\u6cbf\u7740\u8def\u5f84\u8f6c\u79fb\u72b6\u6001\n\n@param path \u8def\u5f84\n@param from \u8d77\u70b9\uff08\u6839\u8d77\u70b9\u4e3abase[0]=1\uff09\n@return \u8f6c\u79fb\u540e\u7684\u72b6\u6001\uff08\u53cc\u6570\u7ec4\u4e0b\u6807\uff09", "docstring_tokens": ["\u6cbf\u7740\u8def\u5f84\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1069-L1085", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.transition", "original_string": "public int transition(char c, int from)\n    {\n        int b = from;\n        int p;\n\n        p = b + (int) (c) + 1;\n        if (b == check[p])\n            b = base[p];\n        else\n            return -1;\n\n        return b;\n    }", "language": "java", "code": "public int transition(char c, int from)\n    {\n        int b = from;\n        int p;\n\n        p = b + (int) (c) + 1;\n        if (b == check[p])\n            b = base[p];\n        else\n            return -1;\n\n        return b;\n    }", "code_tokens": ["public", "int", "transition", "(", "char", "c", ",", "int", "from", ")", "{", "int", "b", "=", "from", ";", "int", "p", ";", "p", "=", "b", "+", "(", "int", ")", "(", "c", ")", "+", "1", ";", "if", "(", "b", "==", "check", "[", "p", "]", ")", "b", "=", "base", "[", "p", "]", ";", "else", "return", "-", "1", ";", "return", "b", ";", "}"], "docstring": "\u8f6c\u79fb\u72b6\u6001\n@param c\n@param from\n@return", "docstring_tokens": ["\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1093-L1105", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.output", "original_string": "public V output(int state)\n    {\n        if (state < 0) return null;\n        int n = base[state];\n        if (state == check[state] && n < 0)\n        {\n            return v[-n - 1];\n        }\n        return null;\n    }", "language": "java", "code": "public V output(int state)\n    {\n        if (state < 0) return null;\n        int n = base[state];\n        if (state == check[state] && n < 0)\n        {\n            return v[-n - 1];\n        }\n        return null;\n    }", "code_tokens": ["public", "V", "output", "(", "int", "state", ")", "{", "if", "(", "state", "<", "0", ")", "return", "null", ";", "int", "n", "=", "base", "[", "state", "]", ";", "if", "(", "state", "==", "check", "[", "state", "]", "&&", "n", "<", "0", ")", "{", "return", "v", "[", "-", "n", "-", "1", "]", ";", "}", "return", "null", ";", "}"], "docstring": "\u68c0\u67e5\u72b6\u6001\u662f\u5426\u5bf9\u5e94\u8f93\u51fa\n\n@param state \u53cc\u6570\u7ec4\u4e0b\u6807\n@return \u5bf9\u5e94\u7684\u503c\uff0cnull\u8868\u793a\u4e0d\u8f93\u51fa", "docstring_tokens": ["\u68c0\u67e5\u72b6\u6001\u662f\u5426\u5bf9\u5e94\u8f93\u51fa"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1113-L1122", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.parseText", "original_string": "public void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        Searcher searcher = getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "language": "java", "code": "public void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        Searcher searcher = getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "code_tokens": ["public", "void", "parseText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "processor", ")", "{", "Searcher", "searcher", "=", "getSearcher", "(", "text", ",", "0", ")", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "processor", ".", "hit", "(", "searcher", ".", "begin", ",", "searcher", ".", "begin", "+", "searcher", ".", "length", ",", "searcher", ".", "value", ")", ";", "}", "}"], "docstring": "\u5168\u5207\u5206\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u5168\u5207\u5206"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1347-L1354", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.parseLongestText", "original_string": "public void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        LongestSearcher searcher = getLongestSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "language": "java", "code": "public void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<V> processor)\n    {\n        LongestSearcher searcher = getLongestSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "code_tokens": ["public", "void", "parseLongestText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "processor", ")", "{", "LongestSearcher", "searcher", "=", "getLongestSearcher", "(", "text", ",", "0", ")", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "processor", ".", "hit", "(", "searcher", ".", "begin", ",", "searcher", ".", "begin", "+", "searcher", ".", "length", ",", "searcher", ".", "value", ")", ";", "}", "}"], "docstring": "\u6700\u957f\u5339\u914d\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u6700\u957f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1372-L1379", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.set", "original_string": "public boolean set(String key, V value)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            v[index] = value;\n            return true;\n        }\n\n        return false;\n    }", "language": "java", "code": "public boolean set(String key, V value)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            v[index] = value;\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "boolean", "set", "(", "String", "key", ",", "V", "value", ")", "{", "int", "index", "=", "exactMatchSearch", "(", "key", ")", ";", "if", "(", "index", ">=", "0", ")", "{", "v", "[", "index", "]", "=", "value", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "\u66f4\u65b0\u67d0\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\n\n@param key   \u952e\n@param value \u503c\n@return \u662f\u5426\u6210\u529f\uff08\u5931\u8d25\u7684\u539f\u56e0\u662f\u6ca1\u6709\u8fd9\u4e2a\u952e\uff09", "docstring_tokens": ["\u66f4\u65b0\u67d0\u4e2a\u952e\u5bf9\u5e94\u7684\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1410-L1420", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java", "func_name": "DoubleArrayTrie.shrink", "original_string": "private void shrink()\n    {\n//        if (HanLP.Config.DEBUG)\n//        {\n//            System.err.printf(\"\u91ca\u653e\u5185\u5b58 %d bytes\\n\", base.length - size - 65535);\n//        }\n        int nbase[] = new int[size + 65535];\n        System.arraycopy(base, 0, nbase, 0, size);\n        base = nbase;\n\n        int ncheck[] = new int[size + 65535];\n        System.arraycopy(check, 0, ncheck, 0, size);\n        check = ncheck;\n    }", "language": "java", "code": "private void shrink()\n    {\n//        if (HanLP.Config.DEBUG)\n//        {\n//            System.err.printf(\"\u91ca\u653e\u5185\u5b58 %d bytes\\n\", base.length - size - 65535);\n//        }\n        int nbase[] = new int[size + 65535];\n        System.arraycopy(base, 0, nbase, 0, size);\n        base = nbase;\n\n        int ncheck[] = new int[size + 65535];\n        System.arraycopy(check, 0, ncheck, 0, size);\n        check = ncheck;\n    }", "code_tokens": ["private", "void", "shrink", "(", ")", "{", "//        if (HanLP.Config.DEBUG)", "//        {", "//            System.err.printf(\"\u91ca\u653e\u5185\u5b58 %d bytes\\n\", base.length - size - 65535);", "//        }", "int", "nbase", "[", "]", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "System", ".", "arraycopy", "(", "base", ",", "0", ",", "nbase", ",", "0", ",", "size", ")", ";", "base", "=", "nbase", ";", "int", "ncheck", "[", "]", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "System", ".", "arraycopy", "(", "check", ",", "0", ",", "ncheck", ",", "0", ",", "size", ")", ";", "check", "=", "ncheck", ";", "}"], "docstring": "\u91ca\u653e\u7a7a\u95f2\u7684\u5185\u5b58", "docstring_tokens": ["\u91ca\u653e\u7a7a\u95f2\u7684\u5185\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/DoubleArrayTrie.java#L1437-L1450", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Dijkstra/DijkstraSegment.java", "func_name": "DijkstraSegment.dijkstra", "original_string": "private static List<Vertex> dijkstra(Graph graph)\n    {\n        List<Vertex> resultList = new LinkedList<Vertex>();\n        Vertex[] vertexes = graph.getVertexes();\n        List<EdgeFrom>[] edgesTo = graph.getEdgesTo();\n        double[] d = new double[vertexes.length];\n        Arrays.fill(d, Double.MAX_VALUE);\n        d[d.length - 1] = 0;\n        int[] path = new int[vertexes.length];\n        Arrays.fill(path, -1);\n        PriorityQueue<State> que = new PriorityQueue<State>();\n        que.add(new State(0, vertexes.length - 1));\n        while (!que.isEmpty())\n        {\n            State p = que.poll();\n            if (d[p.vertex] < p.cost) continue;\n            for (EdgeFrom edgeFrom : edgesTo[p.vertex])\n            {\n                if (d[edgeFrom.from] > d[p.vertex] + edgeFrom.weight)\n                {\n                    d[edgeFrom.from] = d[p.vertex] + edgeFrom.weight;\n                    que.add(new State(d[edgeFrom.from], edgeFrom.from));\n                    path[edgeFrom.from] = p.vertex;\n                }\n            }\n        }\n        for (int t = 0; t != -1; t = path[t])\n        {\n            resultList.add(vertexes[t]);\n        }\n        return resultList;\n    }", "language": "java", "code": "private static List<Vertex> dijkstra(Graph graph)\n    {\n        List<Vertex> resultList = new LinkedList<Vertex>();\n        Vertex[] vertexes = graph.getVertexes();\n        List<EdgeFrom>[] edgesTo = graph.getEdgesTo();\n        double[] d = new double[vertexes.length];\n        Arrays.fill(d, Double.MAX_VALUE);\n        d[d.length - 1] = 0;\n        int[] path = new int[vertexes.length];\n        Arrays.fill(path, -1);\n        PriorityQueue<State> que = new PriorityQueue<State>();\n        que.add(new State(0, vertexes.length - 1));\n        while (!que.isEmpty())\n        {\n            State p = que.poll();\n            if (d[p.vertex] < p.cost) continue;\n            for (EdgeFrom edgeFrom : edgesTo[p.vertex])\n            {\n                if (d[edgeFrom.from] > d[p.vertex] + edgeFrom.weight)\n                {\n                    d[edgeFrom.from] = d[p.vertex] + edgeFrom.weight;\n                    que.add(new State(d[edgeFrom.from], edgeFrom.from));\n                    path[edgeFrom.from] = p.vertex;\n                }\n            }\n        }\n        for (int t = 0; t != -1; t = path[t])\n        {\n            resultList.add(vertexes[t]);\n        }\n        return resultList;\n    }", "code_tokens": ["private", "static", "List", "<", "Vertex", ">", "dijkstra", "(", "Graph", "graph", ")", "{", "List", "<", "Vertex", ">", "resultList", "=", "new", "LinkedList", "<", "Vertex", ">", "(", ")", ";", "Vertex", "[", "]", "vertexes", "=", "graph", ".", "getVertexes", "(", ")", ";", "List", "<", "EdgeFrom", ">", "[", "]", "edgesTo", "=", "graph", ".", "getEdgesTo", "(", ")", ";", "double", "[", "]", "d", "=", "new", "double", "[", "vertexes", ".", "length", "]", ";", "Arrays", ".", "fill", "(", "d", ",", "Double", ".", "MAX_VALUE", ")", ";", "d", "[", "d", ".", "length", "-", "1", "]", "=", "0", ";", "int", "[", "]", "path", "=", "new", "int", "[", "vertexes", ".", "length", "]", ";", "Arrays", ".", "fill", "(", "path", ",", "-", "1", ")", ";", "PriorityQueue", "<", "State", ">", "que", "=", "new", "PriorityQueue", "<", "State", ">", "(", ")", ";", "que", ".", "add", "(", "new", "State", "(", "0", ",", "vertexes", ".", "length", "-", "1", ")", ")", ";", "while", "(", "!", "que", ".", "isEmpty", "(", ")", ")", "{", "State", "p", "=", "que", ".", "poll", "(", ")", ";", "if", "(", "d", "[", "p", ".", "vertex", "]", "<", "p", ".", "cost", ")", "continue", ";", "for", "(", "EdgeFrom", "edgeFrom", ":", "edgesTo", "[", "p", ".", "vertex", "]", ")", "{", "if", "(", "d", "[", "edgeFrom", ".", "from", "]", ">", "d", "[", "p", ".", "vertex", "]", "+", "edgeFrom", ".", "weight", ")", "{", "d", "[", "edgeFrom", ".", "from", "]", "=", "d", "[", "p", ".", "vertex", "]", "+", "edgeFrom", ".", "weight", ";", "que", ".", "add", "(", "new", "State", "(", "d", "[", "edgeFrom", ".", "from", "]", ",", "edgeFrom", ".", "from", ")", ")", ";", "path", "[", "edgeFrom", ".", "from", "]", "=", "p", ".", "vertex", ";", "}", "}", "}", "for", "(", "int", "t", "=", "0", ";", "t", "!=", "-", "1", ";", "t", "=", "path", "[", "t", "]", ")", "{", "resultList", ".", "add", "(", "vertexes", "[", "t", "]", ")", ";", "}", "return", "resultList", ";", "}"], "docstring": "dijkstra\u6700\u77ed\u8def\u5f84\n@param graph\n@return", "docstring_tokens": ["dijkstra\u6700\u77ed\u8def\u5f84"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Dijkstra/DijkstraSegment.java#L129-L160", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/TonePinyinString2PinyinConverter.java", "func_name": "TonePinyinString2PinyinConverter.valid", "original_string": "public static boolean valid(String[] pinyinStringArray)\n    {\n        for (String p : pinyinStringArray)\n        {\n            if (!valid(p)) return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public static boolean valid(String[] pinyinStringArray)\n    {\n        for (String p : pinyinStringArray)\n        {\n            if (!valid(p)) return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "valid", "(", "String", "[", "]", "pinyinStringArray", ")", "{", "for", "(", "String", "p", ":", "pinyinStringArray", ")", "{", "if", "(", "!", "valid", "(", "p", ")", ")", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u8fd9\u4e9b\u62fc\u97f3\u662f\u5426\u5168\u90e8\u5408\u683c\n@param pinyinStringArray\n@return", "docstring_tokens": ["\u8fd9\u4e9b\u62fc\u97f3\u662f\u5426\u5168\u90e8\u5408\u683c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/TonePinyinString2PinyinConverter.java#L108-L116", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ArrayCompare.java", "func_name": "ArrayCompare.compare", "original_string": "public static int compare(Long[] arrayA, Long[] arrayB)\n    {\n        int len1 = arrayA.length;\n        int len2 = arrayB.length;\n        int lim = Math.min(len1, len2);\n\n        int k = 0;\n        while (k < lim)\n        {\n            Long c1 = arrayA[k];\n            Long c2 = arrayB[k];\n            if (!c1.equals(c2))\n            {\n                return c1.compareTo(c2);\n            }\n            ++k;\n        }\n        return len1 - len2;\n    }", "language": "java", "code": "public static int compare(Long[] arrayA, Long[] arrayB)\n    {\n        int len1 = arrayA.length;\n        int len2 = arrayB.length;\n        int lim = Math.min(len1, len2);\n\n        int k = 0;\n        while (k < lim)\n        {\n            Long c1 = arrayA[k];\n            Long c2 = arrayB[k];\n            if (!c1.equals(c2))\n            {\n                return c1.compareTo(c2);\n            }\n            ++k;\n        }\n        return len1 - len2;\n    }", "code_tokens": ["public", "static", "int", "compare", "(", "Long", "[", "]", "arrayA", ",", "Long", "[", "]", "arrayB", ")", "{", "int", "len1", "=", "arrayA", ".", "length", ";", "int", "len2", "=", "arrayB", ".", "length", ";", "int", "lim", "=", "Math", ".", "min", "(", "len1", ",", "len2", ")", ";", "int", "k", "=", "0", ";", "while", "(", "k", "<", "lim", ")", "{", "Long", "c1", "=", "arrayA", "[", "k", "]", ";", "Long", "c2", "=", "arrayB", "[", "k", "]", ";", "if", "(", "!", "c1", ".", "equals", "(", "c2", ")", ")", "{", "return", "c1", ".", "compareTo", "(", "c2", ")", ";", "}", "++", "k", ";", "}", "return", "len1", "-", "len2", ";", "}"], "docstring": "\u6bd4\u8f83\u6570\u7ec4A\u4e0eB\u7684\u5927\u5c0f\u5173\u7cfb\n@param arrayA\n@param arrayB\n@return", "docstring_tokens": ["\u6bd4\u8f83\u6570\u7ec4A\u4e0eB\u7684\u5927\u5c0f\u5173\u7cfb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ArrayCompare.java#L26-L44", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/datrie/IntArrayList.java", "func_name": "IntArrayList.append", "original_string": "public void append(int element)\n    {\n        if (this.size == this.data.length)\n        {\n            expand();\n        }\n        this.data[this.size] = element;\n        this.size += 1;\n    }", "language": "java", "code": "public void append(int element)\n    {\n        if (this.size == this.data.length)\n        {\n            expand();\n        }\n        this.data[this.size] = element;\n        this.size += 1;\n    }", "code_tokens": ["public", "void", "append", "(", "int", "element", ")", "{", "if", "(", "this", ".", "size", "==", "this", ".", "data", ".", "length", ")", "{", "expand", "(", ")", ";", "}", "this", ".", "data", "[", "this", ".", "size", "]", "=", "element", ";", "this", ".", "size", "+=", "1", ";", "}"], "docstring": "\u5728\u6570\u7ec4\u5c3e\u90e8\u65b0\u589e\u4e00\u4e2a\u5143\u7d20\n\n@param element", "docstring_tokens": ["\u5728\u6570\u7ec4\u5c3e\u90e8\u65b0\u589e\u4e00\u4e2a\u5143\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/datrie/IntArrayList.java#L95-L103", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/datrie/IntArrayList.java", "func_name": "IntArrayList.loseWeight", "original_string": "public void loseWeight()\n    {\n        if (size == data.length)\n        {\n            return;\n        }\n        int[] newData = new int[size];\n        System.arraycopy(this.data, 0, newData, 0, size);\n        this.data = newData;\n    }", "language": "java", "code": "public void loseWeight()\n    {\n        if (size == data.length)\n        {\n            return;\n        }\n        int[] newData = new int[size];\n        System.arraycopy(this.data, 0, newData, 0, size);\n        this.data = newData;\n    }", "code_tokens": ["public", "void", "loseWeight", "(", ")", "{", "if", "(", "size", "==", "data", ".", "length", ")", "{", "return", ";", "}", "int", "[", "]", "newData", "=", "new", "int", "[", "size", "]", ";", "System", ".", "arraycopy", "(", "this", ".", "data", ",", "0", ",", "newData", ",", "0", ",", "size", ")", ";", "this", ".", "data", "=", "newData", ";", "}"], "docstring": "\u53bb\u6389\u591a\u4f59\u7684buffer", "docstring_tokens": ["\u53bb\u6389\u591a\u4f59\u7684buffer"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/datrie/IntArrayList.java#L108-L117", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.simpleAtomSegment", "original_string": "protected static List<AtomNode> simpleAtomSegment(char[] charArray, int start, int end)\n    {\n        List<AtomNode> atomNodeList = new LinkedList<AtomNode>();\n        atomNodeList.add(new AtomNode(new String(charArray, start, end - start), CharType.CT_LETTER));\n        return atomNodeList;\n    }", "language": "java", "code": "protected static List<AtomNode> simpleAtomSegment(char[] charArray, int start, int end)\n    {\n        List<AtomNode> atomNodeList = new LinkedList<AtomNode>();\n        atomNodeList.add(new AtomNode(new String(charArray, start, end - start), CharType.CT_LETTER));\n        return atomNodeList;\n    }", "code_tokens": ["protected", "static", "List", "<", "AtomNode", ">", "simpleAtomSegment", "(", "char", "[", "]", "charArray", ",", "int", "start", ",", "int", "end", ")", "{", "List", "<", "AtomNode", ">", "atomNodeList", "=", "new", "LinkedList", "<", "AtomNode", ">", "(", ")", ";", "atomNodeList", ".", "add", "(", "new", "AtomNode", "(", "new", "String", "(", "charArray", ",", "start", ",", "end", "-", "start", ")", ",", "CharType", ".", "CT_LETTER", ")", ")", ";", "return", "atomNodeList", ";", "}"], "docstring": "\u7b80\u6613\u539f\u5b50\u5206\u8bcd\uff0c\u5c06\u6240\u6709\u5b57\u653e\u5230\u4e00\u8d77\u4f5c\u4e3a\u4e00\u4e2a\u8bcd\n\n@param charArray\n@param start\n@param end\n@return", "docstring_tokens": ["\u7b80\u6613\u539f\u5b50\u5206\u8bcd\uff0c\u5c06\u6240\u6709\u5b57\u653e\u5230\u4e00\u8d77\u4f5c\u4e3a\u4e00\u4e2a\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L143-L148", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.quickAtomSegment", "original_string": "protected static List<AtomNode> quickAtomSegment(char[] charArray, int start, int end)\n    {\n        List<AtomNode> atomNodeList = new LinkedList<AtomNode>();\n        int offsetAtom = start;\n        int preType = CharType.get(charArray[offsetAtom]);\n        int curType;\n        while (++offsetAtom < end)\n        {\n            curType = CharType.get(charArray[offsetAtom]);\n            if (curType != preType)\n            {\n                // \u6d6e\u70b9\u6570\u8bc6\u522b\n                if (preType == CharType.CT_NUM && \"\uff0c,\uff0e.\".indexOf(charArray[offsetAtom]) != -1)\n                {\n                    if (offsetAtom+1 < end)\n                    {\n                        int nextType = CharType.get(charArray[offsetAtom+1]);\n                        if (nextType == CharType.CT_NUM)\n                        {\n                            continue;\n                        }\n                    }\n                }\n                atomNodeList.add(new AtomNode(new String(charArray, start, offsetAtom - start), preType));\n                start = offsetAtom;\n            }\n            preType = curType;\n        }\n        if (offsetAtom == end)\n            atomNodeList.add(new AtomNode(new String(charArray, start, offsetAtom - start), preType));\n\n        return atomNodeList;\n    }", "language": "java", "code": "protected static List<AtomNode> quickAtomSegment(char[] charArray, int start, int end)\n    {\n        List<AtomNode> atomNodeList = new LinkedList<AtomNode>();\n        int offsetAtom = start;\n        int preType = CharType.get(charArray[offsetAtom]);\n        int curType;\n        while (++offsetAtom < end)\n        {\n            curType = CharType.get(charArray[offsetAtom]);\n            if (curType != preType)\n            {\n                // \u6d6e\u70b9\u6570\u8bc6\u522b\n                if (preType == CharType.CT_NUM && \"\uff0c,\uff0e.\".indexOf(charArray[offsetAtom]) != -1)\n                {\n                    if (offsetAtom+1 < end)\n                    {\n                        int nextType = CharType.get(charArray[offsetAtom+1]);\n                        if (nextType == CharType.CT_NUM)\n                        {\n                            continue;\n                        }\n                    }\n                }\n                atomNodeList.add(new AtomNode(new String(charArray, start, offsetAtom - start), preType));\n                start = offsetAtom;\n            }\n            preType = curType;\n        }\n        if (offsetAtom == end)\n            atomNodeList.add(new AtomNode(new String(charArray, start, offsetAtom - start), preType));\n\n        return atomNodeList;\n    }", "code_tokens": ["protected", "static", "List", "<", "AtomNode", ">", "quickAtomSegment", "(", "char", "[", "]", "charArray", ",", "int", "start", ",", "int", "end", ")", "{", "List", "<", "AtomNode", ">", "atomNodeList", "=", "new", "LinkedList", "<", "AtomNode", ">", "(", ")", ";", "int", "offsetAtom", "=", "start", ";", "int", "preType", "=", "CharType", ".", "get", "(", "charArray", "[", "offsetAtom", "]", ")", ";", "int", "curType", ";", "while", "(", "++", "offsetAtom", "<", "end", ")", "{", "curType", "=", "CharType", ".", "get", "(", "charArray", "[", "offsetAtom", "]", ")", ";", "if", "(", "curType", "!=", "preType", ")", "{", "// \u6d6e\u70b9\u6570\u8bc6\u522b", "if", "(", "preType", "==", "CharType", ".", "CT_NUM", "&&", "\"\uff0c,\uff0e.\".ind", "e", "xOf(cha", "r", "Array[off", "s", "etAtom]) !", "=", " ", "1)", "", "", "", "{", "if", "(", "offsetAtom", "+", "1", "<", "end", ")", "{", "int", "nextType", "=", "CharType", ".", "get", "(", "charArray", "[", "offsetAtom", "+", "1", "]", ")", ";", "if", "(", "nextType", "==", "CharType", ".", "CT_NUM", ")", "{", "continue", ";", "}", "}", "}", "atomNodeList", ".", "add", "(", "new", "AtomNode", "(", "new", "String", "(", "charArray", ",", "start", ",", "offsetAtom", "-", "start", ")", ",", "preType", ")", ")", ";", "start", "=", "offsetAtom", ";", "}", "preType", "=", "curType", ";", "}", "if", "(", "offsetAtom", "==", "end", ")", "atomNodeList", ".", "add", "(", "new", "AtomNode", "(", "new", "String", "(", "charArray", ",", "start", ",", "offsetAtom", "-", "start", ")", ",", "preType", ")", ")", ";", "return", "atomNodeList", ";", "}"], "docstring": "\u5feb\u901f\u539f\u5b50\u5206\u8bcd\uff0c\u5e0c\u671b\u7528\u8fd9\u4e2a\u65b9\u6cd5\u66ff\u6362\u6389\u539f\u6765\u7f13\u6162\u7684\u65b9\u6cd5\n\n@param charArray\n@param start\n@param end\n@return", "docstring_tokens": ["\u5feb\u901f\u539f\u5b50\u5206\u8bcd\uff0c\u5e0c\u671b\u7528\u8fd9\u4e2a\u65b9\u6cd5\u66ff\u6362\u6389\u539f\u6765\u7f13\u6162\u7684\u65b9\u6cd5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L158-L190", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.combineByCustomDictionary", "original_string": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList)\n    {\n        return combineByCustomDictionary(vertexList, CustomDictionary.dat);\n    }", "language": "java", "code": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList)\n    {\n        return combineByCustomDictionary(vertexList, CustomDictionary.dat);\n    }", "code_tokens": ["protected", "static", "List", "<", "Vertex", ">", "combineByCustomDictionary", "(", "List", "<", "Vertex", ">", "vertexList", ")", "{", "return", "combineByCustomDictionary", "(", "vertexList", ",", "CustomDictionary", ".", "dat", ")", ";", "}"], "docstring": "\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\n@param vertexList \u7c97\u5206\u7ed3\u679c\n@return \u5408\u5e76\u540e\u7684\u7ed3\u679c", "docstring_tokens": ["\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L197-L200", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.combineByCustomDictionary", "original_string": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, DoubleArrayTrie<CoreDictionary.Attribute> dat)\n    {\n        assert vertexList.size() >= 2 : \"vertexList\u81f3\u5c11\u5305\u542b \u59cb##\u59cb \u548c \u672b##\u672b\";\n        Vertex[] wordNet = new Vertex[vertexList.size()];\n        vertexList.toArray(wordNet);\n        // DAT\u5408\u5e76\n        int length = wordNet.length - 1; // \u8df3\u8fc7\u9996\u5c3e\n        for (int i = 1; i < length; ++i)\n        {\n            int state = 1;\n            state = dat.transition(wordNet[i].realWord, state);\n            if (state > 0)\n            {\n                int to = i + 1;\n                int end = to;\n                CoreDictionary.Attribute value = dat.output(state);\n                for (; to < length; ++to)\n                {\n                    state = dat.transition(wordNet[to].realWord, state);\n                    if (state < 0) break;\n                    CoreDictionary.Attribute output = dat.output(state);\n                    if (output != null)\n                    {\n                        value = output;\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    combineWords(wordNet, i, end, value);\n                    i = end - 1;\n                }\n            }\n        }\n        // BinTrie\u5408\u5e76\n        if (CustomDictionary.trie != null)\n        {\n            for (int i = 1; i < length; ++i)\n            {\n                if (wordNet[i] == null) continue;\n                BaseNode<CoreDictionary.Attribute> state = CustomDictionary.trie.transition(wordNet[i].realWord.toCharArray(), 0);\n                if (state != null)\n                {\n                    int to = i + 1;\n                    int end = to;\n                    CoreDictionary.Attribute value = state.getValue();\n                    for (; to < length; ++to)\n                    {\n                        if (wordNet[to] == null) continue;\n                        state = state.transition(wordNet[to].realWord.toCharArray(), 0);\n                        if (state == null) break;\n                        if (state.getValue() != null)\n                        {\n                            value = state.getValue();\n                            end = to + 1;\n                        }\n                    }\n                    if (value != null)\n                    {\n                        combineWords(wordNet, i, end, value);\n                        i = end - 1;\n                    }\n                }\n            }\n        }\n        vertexList.clear();\n        for (Vertex vertex : wordNet)\n        {\n            if (vertex != null) vertexList.add(vertex);\n        }\n        return vertexList;\n    }", "language": "java", "code": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, DoubleArrayTrie<CoreDictionary.Attribute> dat)\n    {\n        assert vertexList.size() >= 2 : \"vertexList\u81f3\u5c11\u5305\u542b \u59cb##\u59cb \u548c \u672b##\u672b\";\n        Vertex[] wordNet = new Vertex[vertexList.size()];\n        vertexList.toArray(wordNet);\n        // DAT\u5408\u5e76\n        int length = wordNet.length - 1; // \u8df3\u8fc7\u9996\u5c3e\n        for (int i = 1; i < length; ++i)\n        {\n            int state = 1;\n            state = dat.transition(wordNet[i].realWord, state);\n            if (state > 0)\n            {\n                int to = i + 1;\n                int end = to;\n                CoreDictionary.Attribute value = dat.output(state);\n                for (; to < length; ++to)\n                {\n                    state = dat.transition(wordNet[to].realWord, state);\n                    if (state < 0) break;\n                    CoreDictionary.Attribute output = dat.output(state);\n                    if (output != null)\n                    {\n                        value = output;\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    combineWords(wordNet, i, end, value);\n                    i = end - 1;\n                }\n            }\n        }\n        // BinTrie\u5408\u5e76\n        if (CustomDictionary.trie != null)\n        {\n            for (int i = 1; i < length; ++i)\n            {\n                if (wordNet[i] == null) continue;\n                BaseNode<CoreDictionary.Attribute> state = CustomDictionary.trie.transition(wordNet[i].realWord.toCharArray(), 0);\n                if (state != null)\n                {\n                    int to = i + 1;\n                    int end = to;\n                    CoreDictionary.Attribute value = state.getValue();\n                    for (; to < length; ++to)\n                    {\n                        if (wordNet[to] == null) continue;\n                        state = state.transition(wordNet[to].realWord.toCharArray(), 0);\n                        if (state == null) break;\n                        if (state.getValue() != null)\n                        {\n                            value = state.getValue();\n                            end = to + 1;\n                        }\n                    }\n                    if (value != null)\n                    {\n                        combineWords(wordNet, i, end, value);\n                        i = end - 1;\n                    }\n                }\n            }\n        }\n        vertexList.clear();\n        for (Vertex vertex : wordNet)\n        {\n            if (vertex != null) vertexList.add(vertex);\n        }\n        return vertexList;\n    }", "code_tokens": ["protected", "static", "List", "<", "Vertex", ">", "combineByCustomDictionary", "(", "List", "<", "Vertex", ">", "vertexList", ",", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", "dat", ")", "{", "assert", "vertexList", ".", "size", "(", ")", ">=", "2", ":", "\"vertexList\u81f3\u5c11\u5305\u542b \u59cb##\u59cb \u548c \u672b##\u672b\";", "", "Vertex", "[", "]", "wordNet", "=", "new", "Vertex", "[", "vertexList", ".", "size", "(", ")", "]", ";", "vertexList", ".", "toArray", "(", "wordNet", ")", ";", "// DAT\u5408\u5e76", "int", "length", "=", "wordNet", ".", "length", "-", "1", ";", "// \u8df3\u8fc7\u9996\u5c3e", "for", "(", "int", "i", "=", "1", ";", "i", "<", "length", ";", "++", "i", ")", "{", "int", "state", "=", "1", ";", "state", "=", "dat", ".", "transition", "(", "wordNet", "[", "i", "]", ".", "realWord", ",", "state", ")", ";", "if", "(", "state", ">", "0", ")", "{", "int", "to", "=", "i", "+", "1", ";", "int", "end", "=", "to", ";", "CoreDictionary", ".", "Attribute", "value", "=", "dat", ".", "output", "(", "state", ")", ";", "for", "(", ";", "to", "<", "length", ";", "++", "to", ")", "{", "state", "=", "dat", ".", "transition", "(", "wordNet", "[", "to", "]", ".", "realWord", ",", "state", ")", ";", "if", "(", "state", "<", "0", ")", "break", ";", "CoreDictionary", ".", "Attribute", "output", "=", "dat", ".", "output", "(", "state", ")", ";", "if", "(", "output", "!=", "null", ")", "{", "value", "=", "output", ";", "end", "=", "to", "+", "1", ";", "}", "}", "if", "(", "value", "!=", "null", ")", "{", "combineWords", "(", "wordNet", ",", "i", ",", "end", ",", "value", ")", ";", "i", "=", "end", "-", "1", ";", "}", "}", "}", "// BinTrie\u5408\u5e76", "if", "(", "CustomDictionary", ".", "trie", "!=", "null", ")", "{", "for", "(", "int", "i", "=", "1", ";", "i", "<", "length", ";", "++", "i", ")", "{", "if", "(", "wordNet", "[", "i", "]", "==", "null", ")", "continue", ";", "BaseNode", "<", "CoreDictionary", ".", "Attribute", ">", "state", "=", "CustomDictionary", ".", "trie", ".", "transition", "(", "wordNet", "[", "i", "]", ".", "realWord", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "if", "(", "state", "!=", "null", ")", "{", "int", "to", "=", "i", "+", "1", ";", "int", "end", "=", "to", ";", "CoreDictionary", ".", "Attribute", "value", "=", "state", ".", "getValue", "(", ")", ";", "for", "(", ";", "to", "<", "length", ";", "++", "to", ")", "{", "if", "(", "wordNet", "[", "to", "]", "==", "null", ")", "continue", ";", "state", "=", "state", ".", "transition", "(", "wordNet", "[", "to", "]", ".", "realWord", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "if", "(", "state", "==", "null", ")", "break", ";", "if", "(", "state", ".", "getValue", "(", ")", "!=", "null", ")", "{", "value", "=", "state", ".", "getValue", "(", ")", ";", "end", "=", "to", "+", "1", ";", "}", "}", "if", "(", "value", "!=", "null", ")", "{", "combineWords", "(", "wordNet", ",", "i", ",", "end", ",", "value", ")", ";", "i", "=", "end", "-", "1", ";", "}", "}", "}", "}", "vertexList", ".", "clear", "(", ")", ";", "for", "(", "Vertex", "vertex", ":", "wordNet", ")", "{", "if", "(", "vertex", "!=", "null", ")", "vertexList", ".", "add", "(", "vertex", ")", ";", "}", "return", "vertexList", ";", "}"], "docstring": "\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\n@param vertexList \u7c97\u5206\u7ed3\u679c\n@param dat \u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u5178\n@return \u5408\u5e76\u540e\u7684\u7ed3\u679c", "docstring_tokens": ["\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L208-L279", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.combineByCustomDictionary", "original_string": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, final WordNet wordNetAll)\n    {\n        return combineByCustomDictionary(vertexList, CustomDictionary.dat, wordNetAll);\n    }", "language": "java", "code": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, final WordNet wordNetAll)\n    {\n        return combineByCustomDictionary(vertexList, CustomDictionary.dat, wordNetAll);\n    }", "code_tokens": ["protected", "static", "List", "<", "Vertex", ">", "combineByCustomDictionary", "(", "List", "<", "Vertex", ">", "vertexList", ",", "final", "WordNet", "wordNetAll", ")", "{", "return", "combineByCustomDictionary", "(", "vertexList", ",", "CustomDictionary", ".", "dat", ",", "wordNetAll", ")", ";", "}"], "docstring": "\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\uff0c\u5e76\u5c06\u7528\u6237\u8bcd\u8bed\u6536\u96c6\u5230\u5168\u8bcd\u56fe\u4e2d\n@param vertexList \u7c97\u5206\u7ed3\u679c\n@param wordNetAll \u6536\u96c6\u7528\u6237\u8bcd\u8bed\u5230\u5168\u8bcd\u56fe\u4e2d\n@return \u5408\u5e76\u540e\u7684\u7ed3\u679c", "docstring_tokens": ["\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\uff0c\u5e76\u5c06\u7528\u6237\u8bcd\u8bed\u6536\u96c6\u5230\u5168\u8bcd\u56fe\u4e2d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L287-L290", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.combineByCustomDictionary", "original_string": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, DoubleArrayTrie<CoreDictionary.Attribute> dat, final WordNet wordNetAll)\n    {\n        List<Vertex> outputList = combineByCustomDictionary(vertexList, dat);\n        int line = 0;\n        for (final Vertex vertex : outputList)\n        {\n            final int parentLength = vertex.realWord.length();\n            final int currentLine = line;\n            if (parentLength >= 3)\n            {\n                CustomDictionary.parseText(vertex.realWord, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n                {\n                    @Override\n                    public void hit(int begin, int end, CoreDictionary.Attribute value)\n                    {\n                        if (end - begin == parentLength) return;\n                        wordNetAll.add(currentLine + begin, new Vertex(vertex.realWord.substring(begin, end), value));\n                    }\n                });\n            }\n            line += parentLength;\n        }\n        return outputList;\n    }", "language": "java", "code": "protected static List<Vertex> combineByCustomDictionary(List<Vertex> vertexList, DoubleArrayTrie<CoreDictionary.Attribute> dat, final WordNet wordNetAll)\n    {\n        List<Vertex> outputList = combineByCustomDictionary(vertexList, dat);\n        int line = 0;\n        for (final Vertex vertex : outputList)\n        {\n            final int parentLength = vertex.realWord.length();\n            final int currentLine = line;\n            if (parentLength >= 3)\n            {\n                CustomDictionary.parseText(vertex.realWord, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n                {\n                    @Override\n                    public void hit(int begin, int end, CoreDictionary.Attribute value)\n                    {\n                        if (end - begin == parentLength) return;\n                        wordNetAll.add(currentLine + begin, new Vertex(vertex.realWord.substring(begin, end), value));\n                    }\n                });\n            }\n            line += parentLength;\n        }\n        return outputList;\n    }", "code_tokens": ["protected", "static", "List", "<", "Vertex", ">", "combineByCustomDictionary", "(", "List", "<", "Vertex", ">", "vertexList", ",", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", "dat", ",", "final", "WordNet", "wordNetAll", ")", "{", "List", "<", "Vertex", ">", "outputList", "=", "combineByCustomDictionary", "(", "vertexList", ",", "dat", ")", ";", "int", "line", "=", "0", ";", "for", "(", "final", "Vertex", "vertex", ":", "outputList", ")", "{", "final", "int", "parentLength", "=", "vertex", ".", "realWord", ".", "length", "(", ")", ";", "final", "int", "currentLine", "=", "line", ";", "if", "(", "parentLength", ">=", "3", ")", "{", "CustomDictionary", ".", "parseText", "(", "vertex", ".", "realWord", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "if", "(", "end", "-", "begin", "==", "parentLength", ")", "return", ";", "wordNetAll", ".", "add", "(", "currentLine", "+", "begin", ",", "new", "Vertex", "(", "vertex", ".", "realWord", ".", "substring", "(", "begin", ",", "end", ")", ",", "value", ")", ")", ";", "}", "}", ")", ";", "}", "line", "+=", "parentLength", ";", "}", "return", "outputList", ";", "}"], "docstring": "\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\uff0c\u5e76\u5c06\u7528\u6237\u8bcd\u8bed\u6536\u96c6\u5230\u5168\u8bcd\u56fe\u4e2d\n@param vertexList \u7c97\u5206\u7ed3\u679c\n@param dat \u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u5178\n@param wordNetAll \u6536\u96c6\u7528\u6237\u8bcd\u8bed\u5230\u5168\u8bcd\u56fe\u4e2d\n@return \u5408\u5e76\u540e\u7684\u7ed3\u679c", "docstring_tokens": ["\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\uff0c\u5e76\u5c06\u7528\u6237\u8bcd\u8bed\u6536\u96c6\u5230\u5168\u8bcd\u56fe\u4e2d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L299-L322", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.combineWords", "original_string": "private static void combineWords(Vertex[] wordNet, int start, int end, CoreDictionary.Attribute value)\n    {\n        if (start + 1 == end)   // \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027\n        {\n            wordNet[start].attribute = value;\n        }\n        else\n        {\n            StringBuilder sbTerm = new StringBuilder();\n            for (int j = start; j < end; ++j)\n            {\n                if (wordNet[j] == null) continue;\n                String realWord = wordNet[j].realWord;\n                sbTerm.append(realWord);\n                wordNet[j] = null;\n            }\n            wordNet[start] = new Vertex(sbTerm.toString(), value);\n        }\n    }", "language": "java", "code": "private static void combineWords(Vertex[] wordNet, int start, int end, CoreDictionary.Attribute value)\n    {\n        if (start + 1 == end)   // \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027\n        {\n            wordNet[start].attribute = value;\n        }\n        else\n        {\n            StringBuilder sbTerm = new StringBuilder();\n            for (int j = start; j < end; ++j)\n            {\n                if (wordNet[j] == null) continue;\n                String realWord = wordNet[j].realWord;\n                sbTerm.append(realWord);\n                wordNet[j] = null;\n            }\n            wordNet[start] = new Vertex(sbTerm.toString(), value);\n        }\n    }", "code_tokens": ["private", "static", "void", "combineWords", "(", "Vertex", "[", "]", "wordNet", ",", "int", "start", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "if", "(", "start", "+", "1", "==", "end", ")", "// \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027", "{", "wordNet", "[", "start", "]", ".", "attribute", "=", "value", ";", "}", "else", "{", "StringBuilder", "sbTerm", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "j", "=", "start", ";", "j", "<", "end", ";", "++", "j", ")", "{", "if", "(", "wordNet", "[", "j", "]", "==", "null", ")", "continue", ";", "String", "realWord", "=", "wordNet", "[", "j", "]", ".", "realWord", ";", "sbTerm", ".", "append", "(", "realWord", ")", ";", "wordNet", "[", "j", "]", "=", "null", ";", "}", "wordNet", "[", "start", "]", "=", "new", "Vertex", "(", "sbTerm", ".", "toString", "(", ")", ",", "value", ")", ";", "}", "}"], "docstring": "\u5c06\u8fde\u7eed\u7684\u8bcd\u8bed\u5408\u5e76\u4e3a\u4e00\u4e2a\n@param wordNet \u8bcd\u56fe\n@param start \u8d77\u59cb\u4e0b\u6807\uff08\u5305\u542b\uff09\n@param end \u7ed3\u675f\u4e0b\u6807\uff08\u4e0d\u5305\u542b\uff09\n@param value \u65b0\u7684\u5c5e\u6027", "docstring_tokens": ["\u5c06\u8fde\u7eed\u7684\u8bcd\u8bed\u5408\u5e76\u4e3a\u4e00\u4e2a"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L331-L349", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.convert", "original_string": "protected static List<Term> convert(List<Vertex> vertexList, boolean offsetEnabled)\n    {\n        assert vertexList != null;\n        assert vertexList.size() >= 2 : \"\u8fd9\u6761\u8def\u5f84\u4e0d\u5e94\u5f53\u77ed\u4e8e2\" + vertexList.toString();\n        int length = vertexList.size() - 2;\n        List<Term> resultList = new ArrayList<Term>(length);\n        Iterator<Vertex> iterator = vertexList.iterator();\n        iterator.next();\n        if (offsetEnabled)\n        {\n            int offset = 0;\n            for (int i = 0; i < length; ++i)\n            {\n                Vertex vertex = iterator.next();\n                Term term = convert(vertex);\n                term.offset = offset;\n                offset += term.length();\n                resultList.add(term);\n            }\n        }\n        else\n        {\n            for (int i = 0; i < length; ++i)\n            {\n                Vertex vertex = iterator.next();\n                Term term = convert(vertex);\n                resultList.add(term);\n            }\n        }\n        return resultList;\n    }", "language": "java", "code": "protected static List<Term> convert(List<Vertex> vertexList, boolean offsetEnabled)\n    {\n        assert vertexList != null;\n        assert vertexList.size() >= 2 : \"\u8fd9\u6761\u8def\u5f84\u4e0d\u5e94\u5f53\u77ed\u4e8e2\" + vertexList.toString();\n        int length = vertexList.size() - 2;\n        List<Term> resultList = new ArrayList<Term>(length);\n        Iterator<Vertex> iterator = vertexList.iterator();\n        iterator.next();\n        if (offsetEnabled)\n        {\n            int offset = 0;\n            for (int i = 0; i < length; ++i)\n            {\n                Vertex vertex = iterator.next();\n                Term term = convert(vertex);\n                term.offset = offset;\n                offset += term.length();\n                resultList.add(term);\n            }\n        }\n        else\n        {\n            for (int i = 0; i < length; ++i)\n            {\n                Vertex vertex = iterator.next();\n                Term term = convert(vertex);\n                resultList.add(term);\n            }\n        }\n        return resultList;\n    }", "code_tokens": ["protected", "static", "List", "<", "Term", ">", "convert", "(", "List", "<", "Vertex", ">", "vertexList", ",", "boolean", "offsetEnabled", ")", "{", "assert", "vertexList", "!=", "null", ";", "assert", "vertexList", ".", "size", "(", ")", ">=", "2", ":", "\"\u8fd9\u6761\u8def\u5f84\u4e0d\u5e94\u5f53\u77ed\u4e8e2\" + vertexList.toSt", "i", "g();", "", "", "", "", "", "int", "length", "=", "vertexList", ".", "size", "(", ")", "-", "2", ";", "List", "<", "Term", ">", "resultList", "=", "new", "ArrayList", "<", "Term", ">", "(", "length", ")", ";", "Iterator", "<", "Vertex", ">", "iterator", "=", "vertexList", ".", "iterator", "(", ")", ";", "iterator", ".", "next", "(", ")", ";", "if", "(", "offsetEnabled", ")", "{", "int", "offset", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "Vertex", "vertex", "=", "iterator", ".", "next", "(", ")", ";", "Term", "term", "=", "convert", "(", "vertex", ")", ";", "term", ".", "offset", "=", "offset", ";", "offset", "+=", "term", ".", "length", "(", ")", ";", "resultList", ".", "add", "(", "term", ")", ";", "}", "}", "else", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "Vertex", "vertex", "=", "iterator", ".", "next", "(", ")", ";", "Term", "term", "=", "convert", "(", "vertex", ")", ";", "resultList", ".", "add", "(", "term", ")", ";", "}", "}", "return", "resultList", ";", "}"], "docstring": "\u5c06\u4e00\u6761\u8def\u5f84\u8f6c\u4e3a\u6700\u7ec8\u7ed3\u679c\n\n@param vertexList\n@param offsetEnabled \u662f\u5426\u8ba1\u7b97offset\n@return", "docstring_tokens": ["\u5c06\u4e00\u6761\u8def\u5f84\u8f6c\u4e3a\u6700\u7ec8\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L358-L388", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.mergeNumberQuantifier", "original_string": "protected void mergeNumberQuantifier(List<Vertex> termList, WordNet wordNetAll, Config config)\n    {\n        if (termList.size() < 4) return;\n        StringBuilder sbQuantifier = new StringBuilder();\n        ListIterator<Vertex> iterator = termList.listIterator();\n        iterator.next();\n        int line = 1;\n        while (iterator.hasNext())\n        {\n            Vertex pre = iterator.next();\n            if (pre.hasNature(Nature.m))\n            {\n                sbQuantifier.append(pre.realWord);\n                Vertex cur = null;\n                while (iterator.hasNext() && (cur = iterator.next()).hasNature(Nature.m))\n                {\n                    sbQuantifier.append(cur.realWord);\n                    iterator.remove();\n                    removeFromWordNet(cur, wordNetAll, line, sbQuantifier.length());\n                }\n                if (cur != null)\n                {\n                    if ((cur.hasNature(Nature.q) || cur.hasNature(Nature.qv) || cur.hasNature(Nature.qt)))\n                    {\n                        if (config.indexMode > 0)\n                        {\n                            wordNetAll.add(line, new Vertex(sbQuantifier.toString(), new CoreDictionary.Attribute(Nature.m)));\n                        }\n                        sbQuantifier.append(cur.realWord);\n                        iterator.remove();\n                        removeFromWordNet(cur, wordNetAll, line, sbQuantifier.length());\n                    }\n                    else\n                    {\n                        line += cur.realWord.length();   // (cur = iterator.next()).hasNature(Nature.m) \u6700\u540e\u4e00\u4e2anext\u53ef\u80fd\u4e0d\u542bq\u8bcd\u6027\n                    }\n                }\n                if (sbQuantifier.length() != pre.realWord.length())\n                {\n                    for (Vertex vertex : wordNetAll.get(line + pre.realWord.length()))\n                    {\n                        vertex.from = null;\n                    }\n                    pre.realWord = sbQuantifier.toString();\n                    pre.word = Predefine.TAG_NUMBER;\n                    pre.attribute = new CoreDictionary.Attribute(Nature.mq);\n                    pre.wordID = CoreDictionary.M_WORD_ID;\n                    sbQuantifier.setLength(0);\n                }\n            }\n            sbQuantifier.setLength(0);\n            line += pre.realWord.length();\n        }\n//        System.out.println(wordNetAll);\n    }", "language": "java", "code": "protected void mergeNumberQuantifier(List<Vertex> termList, WordNet wordNetAll, Config config)\n    {\n        if (termList.size() < 4) return;\n        StringBuilder sbQuantifier = new StringBuilder();\n        ListIterator<Vertex> iterator = termList.listIterator();\n        iterator.next();\n        int line = 1;\n        while (iterator.hasNext())\n        {\n            Vertex pre = iterator.next();\n            if (pre.hasNature(Nature.m))\n            {\n                sbQuantifier.append(pre.realWord);\n                Vertex cur = null;\n                while (iterator.hasNext() && (cur = iterator.next()).hasNature(Nature.m))\n                {\n                    sbQuantifier.append(cur.realWord);\n                    iterator.remove();\n                    removeFromWordNet(cur, wordNetAll, line, sbQuantifier.length());\n                }\n                if (cur != null)\n                {\n                    if ((cur.hasNature(Nature.q) || cur.hasNature(Nature.qv) || cur.hasNature(Nature.qt)))\n                    {\n                        if (config.indexMode > 0)\n                        {\n                            wordNetAll.add(line, new Vertex(sbQuantifier.toString(), new CoreDictionary.Attribute(Nature.m)));\n                        }\n                        sbQuantifier.append(cur.realWord);\n                        iterator.remove();\n                        removeFromWordNet(cur, wordNetAll, line, sbQuantifier.length());\n                    }\n                    else\n                    {\n                        line += cur.realWord.length();   // (cur = iterator.next()).hasNature(Nature.m) \u6700\u540e\u4e00\u4e2anext\u53ef\u80fd\u4e0d\u542bq\u8bcd\u6027\n                    }\n                }\n                if (sbQuantifier.length() != pre.realWord.length())\n                {\n                    for (Vertex vertex : wordNetAll.get(line + pre.realWord.length()))\n                    {\n                        vertex.from = null;\n                    }\n                    pre.realWord = sbQuantifier.toString();\n                    pre.word = Predefine.TAG_NUMBER;\n                    pre.attribute = new CoreDictionary.Attribute(Nature.mq);\n                    pre.wordID = CoreDictionary.M_WORD_ID;\n                    sbQuantifier.setLength(0);\n                }\n            }\n            sbQuantifier.setLength(0);\n            line += pre.realWord.length();\n        }\n//        System.out.println(wordNetAll);\n    }", "code_tokens": ["protected", "void", "mergeNumberQuantifier", "(", "List", "<", "Vertex", ">", "termList", ",", "WordNet", "wordNetAll", ",", "Config", "config", ")", "{", "if", "(", "termList", ".", "size", "(", ")", "<", "4", ")", "return", ";", "StringBuilder", "sbQuantifier", "=", "new", "StringBuilder", "(", ")", ";", "ListIterator", "<", "Vertex", ">", "iterator", "=", "termList", ".", "listIterator", "(", ")", ";", "iterator", ".", "next", "(", ")", ";", "int", "line", "=", "1", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Vertex", "pre", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "pre", ".", "hasNature", "(", "Nature", ".", "m", ")", ")", "{", "sbQuantifier", ".", "append", "(", "pre", ".", "realWord", ")", ";", "Vertex", "cur", "=", "null", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", "&&", "(", "cur", "=", "iterator", ".", "next", "(", ")", ")", ".", "hasNature", "(", "Nature", ".", "m", ")", ")", "{", "sbQuantifier", ".", "append", "(", "cur", ".", "realWord", ")", ";", "iterator", ".", "remove", "(", ")", ";", "removeFromWordNet", "(", "cur", ",", "wordNetAll", ",", "line", ",", "sbQuantifier", ".", "length", "(", ")", ")", ";", "}", "if", "(", "cur", "!=", "null", ")", "{", "if", "(", "(", "cur", ".", "hasNature", "(", "Nature", ".", "q", ")", "||", "cur", ".", "hasNature", "(", "Nature", ".", "qv", ")", "||", "cur", ".", "hasNature", "(", "Nature", ".", "qt", ")", ")", ")", "{", "if", "(", "config", ".", "indexMode", ">", "0", ")", "{", "wordNetAll", ".", "add", "(", "line", ",", "new", "Vertex", "(", "sbQuantifier", ".", "toString", "(", ")", ",", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "m", ")", ")", ")", ";", "}", "sbQuantifier", ".", "append", "(", "cur", ".", "realWord", ")", ";", "iterator", ".", "remove", "(", ")", ";", "removeFromWordNet", "(", "cur", ",", "wordNetAll", ",", "line", ",", "sbQuantifier", ".", "length", "(", ")", ")", ";", "}", "else", "{", "line", "+=", "cur", ".", "realWord", ".", "length", "(", ")", ";", "// (cur = iterator.next()).hasNature(Nature.m) \u6700\u540e\u4e00\u4e2anext\u53ef\u80fd\u4e0d\u542bq\u8bcd\u6027", "}", "}", "if", "(", "sbQuantifier", ".", "length", "(", ")", "!=", "pre", ".", "realWord", ".", "length", "(", ")", ")", "{", "for", "(", "Vertex", "vertex", ":", "wordNetAll", ".", "get", "(", "line", "+", "pre", ".", "realWord", ".", "length", "(", ")", ")", ")", "{", "vertex", ".", "from", "=", "null", ";", "}", "pre", ".", "realWord", "=", "sbQuantifier", ".", "toString", "(", ")", ";", "pre", ".", "word", "=", "Predefine", ".", "TAG_NUMBER", ";", "pre", ".", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "mq", ")", ";", "pre", ".", "wordID", "=", "CoreDictionary", ".", "M_WORD_ID", ";", "sbQuantifier", ".", "setLength", "(", "0", ")", ";", "}", "}", "sbQuantifier", ".", "setLength", "(", "0", ")", ";", "line", "+=", "pre", ".", "realWord", ".", "length", "(", ")", ";", "}", "//        System.out.println(wordNetAll);", "}"], "docstring": "\u5408\u5e76\u6570\u5b57\n@param termList", "docstring_tokens": ["\u5408\u5e76\u6570\u5b57"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L405-L459", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.removeFromWordNet", "original_string": "private static void removeFromWordNet(Vertex cur, WordNet wordNetAll, int line, int length)\n    {\n        LinkedList<Vertex>[] vertexes = wordNetAll.getVertexes();\n        // \u5c06\u5176\u4ecewordNet\u4e2d\u5220\u9664\n        for (Vertex vertex : vertexes[line + length])\n        {\n            if (vertex.from == cur)\n                vertex.from = null;\n        }\n        ListIterator<Vertex> iterator = vertexes[line + length - cur.realWord.length()].listIterator();\n        while (iterator.hasNext())\n        {\n            Vertex vertex = iterator.next();\n            if (vertex == cur) iterator.remove();\n        }\n    }", "language": "java", "code": "private static void removeFromWordNet(Vertex cur, WordNet wordNetAll, int line, int length)\n    {\n        LinkedList<Vertex>[] vertexes = wordNetAll.getVertexes();\n        // \u5c06\u5176\u4ecewordNet\u4e2d\u5220\u9664\n        for (Vertex vertex : vertexes[line + length])\n        {\n            if (vertex.from == cur)\n                vertex.from = null;\n        }\n        ListIterator<Vertex> iterator = vertexes[line + length - cur.realWord.length()].listIterator();\n        while (iterator.hasNext())\n        {\n            Vertex vertex = iterator.next();\n            if (vertex == cur) iterator.remove();\n        }\n    }", "code_tokens": ["private", "static", "void", "removeFromWordNet", "(", "Vertex", "cur", ",", "WordNet", "wordNetAll", ",", "int", "line", ",", "int", "length", ")", "{", "LinkedList", "<", "Vertex", ">", "[", "]", "vertexes", "=", "wordNetAll", ".", "getVertexes", "(", ")", ";", "// \u5c06\u5176\u4ecewordNet\u4e2d\u5220\u9664", "for", "(", "Vertex", "vertex", ":", "vertexes", "[", "line", "+", "length", "]", ")", "{", "if", "(", "vertex", ".", "from", "==", "cur", ")", "vertex", ".", "from", "=", "null", ";", "}", "ListIterator", "<", "Vertex", ">", "iterator", "=", "vertexes", "[", "line", "+", "length", "-", "cur", ".", "realWord", ".", "length", "(", ")", "]", ".", "listIterator", "(", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Vertex", "vertex", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "vertex", "==", "cur", ")", "iterator", ".", "remove", "(", ")", ";", "}", "}"], "docstring": "\u5c06\u4e00\u4e2a\u8bcd\u8bed\u4ece\u8bcd\u7f51\u4e2d\u5f7b\u5e95\u62b9\u9664\n@param cur \u8bcd\u8bed\n@param wordNetAll \u8bcd\u7f51\n@param line \u5f53\u524d\u626b\u63cf\u7684\u884c\u6570\n@param length \u5f53\u524d\u7f13\u51b2\u533a\u7684\u957f\u5ea6", "docstring_tokens": ["\u5c06\u4e00\u4e2a\u8bcd\u8bed\u4ece\u8bcd\u7f51\u4e2d\u5f7b\u5e95\u62b9\u9664"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L468-L483", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.seg", "original_string": "public List<Term> seg(String text)\n    {\n        char[] charArray = text.toCharArray();\n        if (HanLP.Config.Normalization)\n        {\n            CharTable.normalization(charArray);\n        }\n        if (config.threadNumber > 1 && charArray.length > 10000)    // \u5c0f\u6587\u672c\u591a\u7ebf\u7a0b\u6ca1\u610f\u4e49\uff0c\u53cd\u800c\u53d8\u6162\u4e86\n        {\n            List<String> sentenceList = SentencesUtil.toSentenceList(charArray);\n            String[] sentenceArray = new String[sentenceList.size()];\n            sentenceList.toArray(sentenceArray);\n            //noinspection unchecked\n            List<Term>[] termListArray = new List[sentenceArray.length];\n            final int per = sentenceArray.length / config.threadNumber;\n            WorkThread[] threadArray = new WorkThread[config.threadNumber];\n            for (int i = 0; i < config.threadNumber - 1; ++i)\n            {\n                int from = i * per;\n                threadArray[i] = new WorkThread(sentenceArray, termListArray, from, from + per);\n                threadArray[i].start();\n            }\n            threadArray[config.threadNumber - 1] = new WorkThread(sentenceArray, termListArray, (config.threadNumber - 1) * per, sentenceArray.length);\n            threadArray[config.threadNumber - 1].start();\n            try\n            {\n                for (WorkThread thread : threadArray)\n                {\n                    thread.join();\n                }\n            }\n            catch (InterruptedException e)\n            {\n                logger.severe(\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff1a\" + TextUtility.exceptionToString(e));\n                return Collections.emptyList();\n            }\n            List<Term> termList = new LinkedList<Term>();\n            if (config.offset || config.indexMode > 0)  // \u7531\u4e8e\u5206\u5272\u4e86\u53e5\u5b50\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u6821\u6b63offset\n            {\n                int sentenceOffset = 0;\n                for (int i = 0; i < sentenceArray.length; ++i)\n                {\n                    for (Term term : termListArray[i])\n                    {\n                        term.offset += sentenceOffset;\n                        termList.add(term);\n                    }\n                    sentenceOffset += sentenceArray[i].length();\n                }\n            }\n            else\n            {\n                for (List<Term> list : termListArray)\n                {\n                    termList.addAll(list);\n                }\n            }\n\n            return termList;\n        }\n//        if (text.length() > 10000)  // \u9488\u5bf9\u5927\u6587\u672c\uff0c\u5148\u62c6\u6210\u53e5\u5b50\uff0c\u540e\u5206\u8bcd\uff0c\u907f\u514d\u5185\u5b58\u5cf0\u503c\u592a\u5927\n//        {\n//            List<Term> termList = new LinkedList<Term>();\n//            if (config.offset || config.indexMode)\n//            {\n//                int sentenceOffset = 0;\n//                for (String sentence : SentencesUtil.toSentenceList(charArray))\n//                {\n//                    List<Term> termOfSentence = segSentence(sentence.toCharArray());\n//                    for (Term term : termOfSentence)\n//                    {\n//                        term.offset += sentenceOffset;\n//                        termList.add(term);\n//                    }\n//                    sentenceOffset += sentence.length();\n//                }\n//            }\n//            else\n//            {\n//                for (String sentence : SentencesUtil.toSentenceList(charArray))\n//                {\n//                    termList.addAll(segSentence(sentence.toCharArray()));\n//                }\n//            }\n//\n//            return termList;\n//        }\n        return segSentence(charArray);\n    }", "language": "java", "code": "public List<Term> seg(String text)\n    {\n        char[] charArray = text.toCharArray();\n        if (HanLP.Config.Normalization)\n        {\n            CharTable.normalization(charArray);\n        }\n        if (config.threadNumber > 1 && charArray.length > 10000)    // \u5c0f\u6587\u672c\u591a\u7ebf\u7a0b\u6ca1\u610f\u4e49\uff0c\u53cd\u800c\u53d8\u6162\u4e86\n        {\n            List<String> sentenceList = SentencesUtil.toSentenceList(charArray);\n            String[] sentenceArray = new String[sentenceList.size()];\n            sentenceList.toArray(sentenceArray);\n            //noinspection unchecked\n            List<Term>[] termListArray = new List[sentenceArray.length];\n            final int per = sentenceArray.length / config.threadNumber;\n            WorkThread[] threadArray = new WorkThread[config.threadNumber];\n            for (int i = 0; i < config.threadNumber - 1; ++i)\n            {\n                int from = i * per;\n                threadArray[i] = new WorkThread(sentenceArray, termListArray, from, from + per);\n                threadArray[i].start();\n            }\n            threadArray[config.threadNumber - 1] = new WorkThread(sentenceArray, termListArray, (config.threadNumber - 1) * per, sentenceArray.length);\n            threadArray[config.threadNumber - 1].start();\n            try\n            {\n                for (WorkThread thread : threadArray)\n                {\n                    thread.join();\n                }\n            }\n            catch (InterruptedException e)\n            {\n                logger.severe(\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff1a\" + TextUtility.exceptionToString(e));\n                return Collections.emptyList();\n            }\n            List<Term> termList = new LinkedList<Term>();\n            if (config.offset || config.indexMode > 0)  // \u7531\u4e8e\u5206\u5272\u4e86\u53e5\u5b50\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u6821\u6b63offset\n            {\n                int sentenceOffset = 0;\n                for (int i = 0; i < sentenceArray.length; ++i)\n                {\n                    for (Term term : termListArray[i])\n                    {\n                        term.offset += sentenceOffset;\n                        termList.add(term);\n                    }\n                    sentenceOffset += sentenceArray[i].length();\n                }\n            }\n            else\n            {\n                for (List<Term> list : termListArray)\n                {\n                    termList.addAll(list);\n                }\n            }\n\n            return termList;\n        }\n//        if (text.length() > 10000)  // \u9488\u5bf9\u5927\u6587\u672c\uff0c\u5148\u62c6\u6210\u53e5\u5b50\uff0c\u540e\u5206\u8bcd\uff0c\u907f\u514d\u5185\u5b58\u5cf0\u503c\u592a\u5927\n//        {\n//            List<Term> termList = new LinkedList<Term>();\n//            if (config.offset || config.indexMode)\n//            {\n//                int sentenceOffset = 0;\n//                for (String sentence : SentencesUtil.toSentenceList(charArray))\n//                {\n//                    List<Term> termOfSentence = segSentence(sentence.toCharArray());\n//                    for (Term term : termOfSentence)\n//                    {\n//                        term.offset += sentenceOffset;\n//                        termList.add(term);\n//                    }\n//                    sentenceOffset += sentence.length();\n//                }\n//            }\n//            else\n//            {\n//                for (String sentence : SentencesUtil.toSentenceList(charArray))\n//                {\n//                    termList.addAll(segSentence(sentence.toCharArray()));\n//                }\n//            }\n//\n//            return termList;\n//        }\n        return segSentence(charArray);\n    }", "code_tokens": ["public", "List", "<", "Term", ">", "seg", "(", "String", "text", ")", "{", "char", "[", "]", "charArray", "=", "text", ".", "toCharArray", "(", ")", ";", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "{", "CharTable", ".", "normalization", "(", "charArray", ")", ";", "}", "if", "(", "config", ".", "threadNumber", ">", "1", "&&", "charArray", ".", "length", ">", "10000", ")", "// \u5c0f\u6587\u672c\u591a\u7ebf\u7a0b\u6ca1\u610f\u4e49\uff0c\u53cd\u800c\u53d8\u6162\u4e86", "{", "List", "<", "String", ">", "sentenceList", "=", "SentencesUtil", ".", "toSentenceList", "(", "charArray", ")", ";", "String", "[", "]", "sentenceArray", "=", "new", "String", "[", "sentenceList", ".", "size", "(", ")", "]", ";", "sentenceList", ".", "toArray", "(", "sentenceArray", ")", ";", "//noinspection unchecked", "List", "<", "Term", ">", "[", "]", "termListArray", "=", "new", "List", "[", "sentenceArray", ".", "length", "]", ";", "final", "int", "per", "=", "sentenceArray", ".", "length", "/", "config", ".", "threadNumber", ";", "WorkThread", "[", "]", "threadArray", "=", "new", "WorkThread", "[", "config", ".", "threadNumber", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "config", ".", "threadNumber", "-", "1", ";", "++", "i", ")", "{", "int", "from", "=", "i", "*", "per", ";", "threadArray", "[", "i", "]", "=", "new", "WorkThread", "(", "sentenceArray", ",", "termListArray", ",", "from", ",", "from", "+", "per", ")", ";", "threadArray", "[", "i", "]", ".", "start", "(", ")", ";", "}", "threadArray", "[", "config", ".", "threadNumber", "-", "1", "]", "=", "new", "WorkThread", "(", "sentenceArray", ",", "termListArray", ",", "(", "config", ".", "threadNumber", "-", "1", ")", "*", "per", ",", "sentenceArray", ".", "length", ")", ";", "threadArray", "[", "config", ".", "threadNumber", "-", "1", "]", ".", "start", "(", ")", ";", "try", "{", "for", "(", "WorkThread", "thread", ":", "threadArray", ")", "{", "thread", ".", "join", "(", ")", ";", "}", "}", "catch", "(", "InterruptedException", "e", ")", "{", "logger", ".", "severe", "(", "\"\u7ebf\u7a0b\u540c\u6b65\u5f02\u5e38\uff1a\" + TextUtility", "e", "ceptionToSt", "r", "ing(e));", "", "", "", "", "", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "List", "<", "Term", ">", "termList", "=", "new", "LinkedList", "<", "Term", ">", "(", ")", ";", "if", "(", "config", ".", "offset", "||", "config", ".", "indexMode", ">", "0", ")", "// \u7531\u4e8e\u5206\u5272\u4e86\u53e5\u5b50\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u6821\u6b63offset", "{", "int", "sentenceOffset", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "sentenceArray", ".", "length", ";", "++", "i", ")", "{", "for", "(", "Term", "term", ":", "termListArray", "[", "i", "]", ")", "{", "term", ".", "offset", "+=", "sentenceOffset", ";", "termList", ".", "add", "(", "term", ")", ";", "}", "sentenceOffset", "+=", "sentenceArray", "[", "i", "]", ".", "length", "(", ")", ";", "}", "}", "else", "{", "for", "(", "List", "<", "Term", ">", "list", ":", "termListArray", ")", "{", "termList", ".", "addAll", "(", "list", ")", ";", "}", "}", "return", "termList", ";", "}", "//        if (text.length() > 10000)  // \u9488\u5bf9\u5927\u6587\u672c\uff0c\u5148\u62c6\u6210\u53e5\u5b50\uff0c\u540e\u5206\u8bcd\uff0c\u907f\u514d\u5185\u5b58\u5cf0\u503c\u592a\u5927", "//        {", "//            List<Term> termList = new LinkedList<Term>();", "//            if (config.offset || config.indexMode)", "//            {", "//                int sentenceOffset = 0;", "//                for (String sentence : SentencesUtil.toSentenceList(charArray))", "//                {", "//                    List<Term> termOfSentence = segSentence(sentence.toCharArray());", "//                    for (Term term : termOfSentence)", "//                    {", "//                        term.offset += sentenceOffset;", "//                        termList.add(term);", "//                    }", "//                    sentenceOffset += sentence.length();", "//                }", "//            }", "//            else", "//            {", "//                for (String sentence : SentencesUtil.toSentenceList(charArray))", "//                {", "//                    termList.addAll(segSentence(sentence.toCharArray()));", "//                }", "//            }", "//", "//            return termList;", "//        }", "return", "segSentence", "(", "charArray", ")", ";", "}"], "docstring": "\u5206\u8bcd<br>\n\u6b64\u65b9\u6cd5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\n\n@param text \u5f85\u5206\u8bcd\u6587\u672c\n@return \u5355\u8bcd\u5217\u8868", "docstring_tokens": ["\u5206\u8bcd<br", ">", "\u6b64\u65b9\u6cd5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L492-L580", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.seg", "original_string": "public List<Term> seg(char[] text)\n    {\n        assert text != null;\n        if (HanLP.Config.Normalization)\n        {\n            CharTable.normalization(text);\n        }\n        return segSentence(text);\n    }", "language": "java", "code": "public List<Term> seg(char[] text)\n    {\n        assert text != null;\n        if (HanLP.Config.Normalization)\n        {\n            CharTable.normalization(text);\n        }\n        return segSentence(text);\n    }", "code_tokens": ["public", "List", "<", "Term", ">", "seg", "(", "char", "[", "]", "text", ")", "{", "assert", "text", "!=", "null", ";", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "{", "CharTable", ".", "normalization", "(", "text", ")", ";", "}", "return", "segSentence", "(", "text", ")", ";", "}"], "docstring": "\u5206\u8bcd\n\n@param text \u5f85\u5206\u8bcd\u6587\u672c\n@return \u5355\u8bcd\u5217\u8868", "docstring_tokens": ["\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L588-L596", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.seg2sentence", "original_string": "public List<List<Term>> seg2sentence(String text, boolean shortest)\n    {\n        List<List<Term>> resultList = new LinkedList<List<Term>>();\n        {\n            for (String sentence : SentencesUtil.toSentenceList(text, shortest))\n            {\n                resultList.add(segSentence(sentence.toCharArray()));\n            }\n        }\n\n        return resultList;\n    }", "language": "java", "code": "public List<List<Term>> seg2sentence(String text, boolean shortest)\n    {\n        List<List<Term>> resultList = new LinkedList<List<Term>>();\n        {\n            for (String sentence : SentencesUtil.toSentenceList(text, shortest))\n            {\n                resultList.add(segSentence(sentence.toCharArray()));\n            }\n        }\n\n        return resultList;\n    }", "code_tokens": ["public", "List", "<", "List", "<", "Term", ">", ">", "seg2sentence", "(", "String", "text", ",", "boolean", "shortest", ")", "{", "List", "<", "List", "<", "Term", ">>", "resultList", "=", "new", "LinkedList", "<", "List", "<", "Term", ">", ">", "(", ")", ";", "{", "for", "(", "String", "sentence", ":", "SentencesUtil", ".", "toSentenceList", "(", "text", ",", "shortest", ")", ")", "{", "resultList", ".", "add", "(", "segSentence", "(", "sentence", ".", "toCharArray", "(", ")", ")", ")", ";", "}", "}", "return", "resultList", ";", "}"], "docstring": "\u5206\u8bcd\u65ad\u53e5 \u8f93\u51fa\u53e5\u5b50\u5f62\u5f0f\n\n@param text     \u5f85\u5206\u8bcd\u53e5\u5b50\n@param shortest \u662f\u5426\u65ad\u53e5\u4e3a\u6700\u7ec6\u7684\u5b50\u53e5\uff08\u5c06\u9017\u53f7\u4e5f\u89c6\u4f5c\u5206\u9694\u7b26\uff09\n@return \u53e5\u5b50\u5217\u8868\uff0c\u6bcf\u4e2a\u53e5\u5b50\u7531\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u7ec4\u6210", "docstring_tokens": ["\u5206\u8bcd\u65ad\u53e5", "\u8f93\u51fa\u53e5\u5b50\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L616-L627", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Segment.java", "func_name": "Segment.enableMultithreading", "original_string": "public Segment enableMultithreading(boolean enable)\n    {\n        if (enable) config.threadNumber = Runtime.getRuntime().availableProcessors();\n        else config.threadNumber = 1;\n        return this;\n    }", "language": "java", "code": "public Segment enableMultithreading(boolean enable)\n    {\n        if (enable) config.threadNumber = Runtime.getRuntime().availableProcessors();\n        else config.threadNumber = 1;\n        return this;\n    }", "code_tokens": ["public", "Segment", "enableMultithreading", "(", "boolean", "enable", ")", "{", "if", "(", "enable", ")", "config", ".", "threadNumber", "=", "Runtime", ".", "getRuntime", "(", ")", ".", "availableProcessors", "(", ")", ";", "else", "config", ".", "threadNumber", "=", "1", ";", "return", "this", ";", "}"], "docstring": "\u5f00\u542f\u591a\u7ebf\u7a0b\n@param enable true\u8868\u793a\u5f00\u542f[\u7cfb\u7edfCPU\u6838\u5fc3\u6570]\u4e2a\u7ebf\u7a0b\uff0cfalse\u8868\u793a\u5355\u7ebf\u7a0b\n@return", "docstring_tokens": ["\u5f00\u542f\u591a\u7ebf\u7a0b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Segment.java#L838-L843", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toStringWithoutLabels", "original_string": "public String toStringWithoutLabels()\n    {\n        StringBuilder sb = new StringBuilder(size() * 4);\n        int i = 1;\n        for (IWord word : wordList)\n        {\n            if (word instanceof CompoundWord)\n            {\n                int j = 0;\n                for (Word w : ((CompoundWord) word).innerList)\n                {\n                    sb.append(w.getValue());\n                    if (++j != ((CompoundWord) word).innerList.size())\n                        sb.append(' ');\n                }\n            }\n            else\n                sb.append(word.getValue());\n            if (i != wordList.size()) sb.append(' ');\n            ++i;\n        }\n        return sb.toString();\n    }", "language": "java", "code": "public String toStringWithoutLabels()\n    {\n        StringBuilder sb = new StringBuilder(size() * 4);\n        int i = 1;\n        for (IWord word : wordList)\n        {\n            if (word instanceof CompoundWord)\n            {\n                int j = 0;\n                for (Word w : ((CompoundWord) word).innerList)\n                {\n                    sb.append(w.getValue());\n                    if (++j != ((CompoundWord) word).innerList.size())\n                        sb.append(' ');\n                }\n            }\n            else\n                sb.append(word.getValue());\n            if (i != wordList.size()) sb.append(' ');\n            ++i;\n        }\n        return sb.toString();\n    }", "code_tokens": ["public", "String", "toStringWithoutLabels", "(", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "size", "(", ")", "*", "4", ")", ";", "int", "i", "=", "1", ";", "for", "(", "IWord", "word", ":", "wordList", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "int", "j", "=", "0", ";", "for", "(", "Word", "w", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "sb", ".", "append", "(", "w", ".", "getValue", "(", ")", ")", ";", "if", "(", "++", "j", "!=", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ".", "size", "(", ")", ")", "sb", ".", "append", "(", "'", "'", ")", ";", "}", "}", "else", "sb", ".", "append", "(", "word", ".", "getValue", "(", ")", ")", ";", "if", "(", "i", "!=", "wordList", ".", "size", "(", ")", ")", "sb", ".", "append", "(", "'", "'", ")", ";", "++", "i", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "\u8f6c\u6362\u4e3a\u7a7a\u683c\u5206\u5272\u65e0\u6807\u7b7e\u7684String\n\n@return", "docstring_tokens": ["\u8f6c\u6362\u4e3a\u7a7a\u683c\u5206\u5272\u65e0\u6807\u7b7e\u7684String"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L68-L90", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toStandoff", "original_string": "public String toStandoff(boolean withComment)\n    {\n        StringBuilder sb = new StringBuilder(size() * 4);\n        String delimiter = \" \";\n        String text = text(delimiter);\n        sb.append(text).append('\\n');\n        int i = 1;\n        int offset = 0;\n        for (IWord word : wordList)\n        {\n            assert text.charAt(offset) == word.getValue().charAt(0);\n            printWord(word, sb, i, offset, withComment);\n            ++i;\n            if (word instanceof CompoundWord)\n            {\n                int offsetChild = offset;\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    printWord(child, sb, i, offsetChild, withComment);\n                    offsetChild += child.length();\n                    offsetChild += delimiter.length();\n                    ++i;\n                }\n                offset += delimiter.length() * ((CompoundWord) word).innerList.size();\n            }\n            else\n            {\n                offset += delimiter.length();\n            }\n            offset += word.length();\n        }\n        return sb.toString();\n    }", "language": "java", "code": "public String toStandoff(boolean withComment)\n    {\n        StringBuilder sb = new StringBuilder(size() * 4);\n        String delimiter = \" \";\n        String text = text(delimiter);\n        sb.append(text).append('\\n');\n        int i = 1;\n        int offset = 0;\n        for (IWord word : wordList)\n        {\n            assert text.charAt(offset) == word.getValue().charAt(0);\n            printWord(word, sb, i, offset, withComment);\n            ++i;\n            if (word instanceof CompoundWord)\n            {\n                int offsetChild = offset;\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    printWord(child, sb, i, offsetChild, withComment);\n                    offsetChild += child.length();\n                    offsetChild += delimiter.length();\n                    ++i;\n                }\n                offset += delimiter.length() * ((CompoundWord) word).innerList.size();\n            }\n            else\n            {\n                offset += delimiter.length();\n            }\n            offset += word.length();\n        }\n        return sb.toString();\n    }", "code_tokens": ["public", "String", "toStandoff", "(", "boolean", "withComment", ")", "{", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "size", "(", ")", "*", "4", ")", ";", "String", "delimiter", "=", "\" \"", ";", "String", "text", "=", "text", "(", "delimiter", ")", ";", "sb", ".", "append", "(", "text", ")", ".", "append", "(", "'", "'", ")", ";", "int", "i", "=", "1", ";", "int", "offset", "=", "0", ";", "for", "(", "IWord", "word", ":", "wordList", ")", "{", "assert", "text", ".", "charAt", "(", "offset", ")", "==", "word", ".", "getValue", "(", ")", ".", "charAt", "(", "0", ")", ";", "printWord", "(", "word", ",", "sb", ",", "i", ",", "offset", ",", "withComment", ")", ";", "++", "i", ";", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "int", "offsetChild", "=", "offset", ";", "for", "(", "Word", "child", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "printWord", "(", "child", ",", "sb", ",", "i", ",", "offsetChild", ",", "withComment", ")", ";", "offsetChild", "+=", "child", ".", "length", "(", ")", ";", "offsetChild", "+=", "delimiter", ".", "length", "(", ")", ";", "++", "i", ";", "}", "offset", "+=", "delimiter", ".", "length", "(", ")", "*", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ".", "size", "(", ")", ";", "}", "else", "{", "offset", "+=", "delimiter", ".", "length", "(", ")", ";", "}", "offset", "+=", "word", ".", "length", "(", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "brat standoff format<br>\nhttp://brat.nlplab.org/standoff.html\n\n@param withComment\n@return", "docstring_tokens": ["brat", "standoff", "format<br", ">", "http", ":", "//", "brat", ".", "nlplab", ".", "org", "/", "standoff", ".", "html"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L110-L142", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.translateLabels", "original_string": "public Sentence translateLabels()\n    {\n        for (IWord word : wordList)\n        {\n            word.setLabel(PartOfSpeechTagDictionary.translate(word.getLabel()));\n            if (word instanceof CompoundWord)\n            {\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    child.setLabel(PartOfSpeechTagDictionary.translate(child.getLabel()));\n                }\n            }\n        }\n        return this;\n    }", "language": "java", "code": "public Sentence translateLabels()\n    {\n        for (IWord word : wordList)\n        {\n            word.setLabel(PartOfSpeechTagDictionary.translate(word.getLabel()));\n            if (word instanceof CompoundWord)\n            {\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    child.setLabel(PartOfSpeechTagDictionary.translate(child.getLabel()));\n                }\n            }\n        }\n        return this;\n    }", "code_tokens": ["public", "Sentence", "translateLabels", "(", ")", "{", "for", "(", "IWord", "word", ":", "wordList", ")", "{", "word", ".", "setLabel", "(", "PartOfSpeechTagDictionary", ".", "translate", "(", "word", ".", "getLabel", "(", ")", ")", ")", ";", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "for", "(", "Word", "child", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "child", ".", "setLabel", "(", "PartOfSpeechTagDictionary", ".", "translate", "(", "child", ".", "getLabel", "(", ")", ")", ")", ";", "}", "}", "}", "return", "this", ";", "}"], "docstring": "\u6309\u7167 PartOfSpeechTagDictionary \u6307\u5b9a\u7684\u6620\u5c04\u8868\u5c06\u8bcd\u8bed\u8bcd\u6027\u7ffb\u8bd1\u8fc7\u53bb\n\n@return", "docstring_tokens": ["\u6309\u7167", "PartOfSpeechTagDictionary", "\u6307\u5b9a\u7684\u6620\u5c04\u8868\u5c06\u8bcd\u8bed\u8bcd\u6027\u7ffb\u8bd1\u8fc7\u53bb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L149-L163", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.translateCompoundWordLabels", "original_string": "public Sentence translateCompoundWordLabels()\n    {\n        for (IWord word : wordList)\n        {\n            if (word instanceof CompoundWord)\n                word.setLabel(PartOfSpeechTagDictionary.translate(word.getLabel()));\n        }\n        return this;\n    }", "language": "java", "code": "public Sentence translateCompoundWordLabels()\n    {\n        for (IWord word : wordList)\n        {\n            if (word instanceof CompoundWord)\n                word.setLabel(PartOfSpeechTagDictionary.translate(word.getLabel()));\n        }\n        return this;\n    }", "code_tokens": ["public", "Sentence", "translateCompoundWordLabels", "(", ")", "{", "for", "(", "IWord", "word", ":", "wordList", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "word", ".", "setLabel", "(", "PartOfSpeechTagDictionary", ".", "translate", "(", "word", ".", "getLabel", "(", ")", ")", ")", ";", "}", "return", "this", ";", "}"], "docstring": "\u6309\u7167 PartOfSpeechTagDictionary \u6307\u5b9a\u7684\u6620\u5c04\u8868\u5c06\u590d\u5408\u8bcd\u8bcd\u8bed\u8bcd\u6027\u7ffb\u8bd1\u8fc7\u53bb\n\n@return", "docstring_tokens": ["\u6309\u7167", "PartOfSpeechTagDictionary", "\u6307\u5b9a\u7684\u6620\u5c04\u8868\u5c06\u590d\u5408\u8bcd\u8bcd\u8bed\u8bcd\u6027\u7ffb\u8bd1\u8fc7\u53bb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L170-L178", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.create", "original_string": "public static Sentence create(String param)\n    {\n        if (param == null)\n        {\n            return null;\n        }\n        param = param.trim();\n        if (param.isEmpty())\n        {\n            return null;\n        }\n        Pattern pattern = Pattern.compile(\"(\\\\[(([^\\\\s]+/[0-9a-zA-Z]+)\\\\s+)+?([^\\\\s]+/[0-9a-zA-Z]+)]/?[0-9a-zA-Z]+)|([^\\\\s]+/[0-9a-zA-Z]+)\");\n        Matcher matcher = pattern.matcher(param);\n        List<IWord> wordList = new LinkedList<IWord>();\n        while (matcher.find())\n        {\n            String single = matcher.group();\n            IWord word = WordFactory.create(single);\n            if (word == null)\n            {\n                logger.warning(\"\u5728\u7528 \" + single + \" \u6784\u9020\u5355\u8bcd\u65f6\u5931\u8d25\uff0c\u53e5\u5b50\u6784\u9020\u53c2\u6570\u4e3a \" + param);\n                return null;\n            }\n            wordList.add(word);\n        }\n        if (wordList.isEmpty()) // \u6309\u7167\u65e0\u8bcd\u6027\u6765\u89e3\u6790\n        {\n            for (String w : param.split(\"\\\\s+\"))\n            {\n                wordList.add(new Word(w, null));\n            }\n        }\n\n        return new Sentence(wordList);\n    }", "language": "java", "code": "public static Sentence create(String param)\n    {\n        if (param == null)\n        {\n            return null;\n        }\n        param = param.trim();\n        if (param.isEmpty())\n        {\n            return null;\n        }\n        Pattern pattern = Pattern.compile(\"(\\\\[(([^\\\\s]+/[0-9a-zA-Z]+)\\\\s+)+?([^\\\\s]+/[0-9a-zA-Z]+)]/?[0-9a-zA-Z]+)|([^\\\\s]+/[0-9a-zA-Z]+)\");\n        Matcher matcher = pattern.matcher(param);\n        List<IWord> wordList = new LinkedList<IWord>();\n        while (matcher.find())\n        {\n            String single = matcher.group();\n            IWord word = WordFactory.create(single);\n            if (word == null)\n            {\n                logger.warning(\"\u5728\u7528 \" + single + \" \u6784\u9020\u5355\u8bcd\u65f6\u5931\u8d25\uff0c\u53e5\u5b50\u6784\u9020\u53c2\u6570\u4e3a \" + param);\n                return null;\n            }\n            wordList.add(word);\n        }\n        if (wordList.isEmpty()) // \u6309\u7167\u65e0\u8bcd\u6027\u6765\u89e3\u6790\n        {\n            for (String w : param.split(\"\\\\s+\"))\n            {\n                wordList.add(new Word(w, null));\n            }\n        }\n\n        return new Sentence(wordList);\n    }", "code_tokens": ["public", "static", "Sentence", "create", "(", "String", "param", ")", "{", "if", "(", "param", "==", "null", ")", "{", "return", "null", ";", "}", "param", "=", "param", ".", "trim", "(", ")", ";", "if", "(", "param", ".", "isEmpty", "(", ")", ")", "{", "return", "null", ";", "}", "Pattern", "pattern", "=", "Pattern", ".", "compile", "(", "\"(\\\\[(([^\\\\s]+/[0-9a-zA-Z]+)\\\\s+)+?([^\\\\s]+/[0-9a-zA-Z]+)]/?[0-9a-zA-Z]+)|([^\\\\s]+/[0-9a-zA-Z]+)\"", ")", ";", "Matcher", "matcher", "=", "pattern", ".", "matcher", "(", "param", ")", ";", "List", "<", "IWord", ">", "wordList", "=", "new", "LinkedList", "<", "IWord", ">", "(", ")", ";", "while", "(", "matcher", ".", "find", "(", ")", ")", "{", "String", "single", "=", "matcher", ".", "group", "(", ")", ";", "IWord", "word", "=", "WordFactory", ".", "create", "(", "single", ")", ";", "if", "(", "word", "==", "null", ")", "{", "logger", ".", "warning", "(", "\"\u5728\u7528 \" + s", "n", "le + \"", "\u6784", "\u5355\u8bcd\u65f6\u5931\u8d25\uff0c\u53e5\u5b50\u6784\u9020\u53c2\u6570\u4e3a \" + param);", "", "", "", "", "return", "null", ";", "}", "wordList", ".", "add", "(", "word", ")", ";", "}", "if", "(", "wordList", ".", "isEmpty", "(", ")", ")", "// \u6309\u7167\u65e0\u8bcd\u6027\u6765\u89e3\u6790", "{", "for", "(", "String", "w", ":", "param", ".", "split", "(", "\"\\\\s+\"", ")", ")", "{", "wordList", ".", "add", "(", "new", "Word", "(", "w", ",", "null", ")", ")", ";", "}", "}", "return", "new", "Sentence", "(", "wordList", ")", ";", "}"], "docstring": "\u4ee5\u4eba\u6c11\u65e5\u62a52014\u8bed\u6599\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5316\u53e5\u5b50\n\n@param param\n@return", "docstring_tokens": ["\u4ee5\u4eba\u6c11\u65e5\u62a52014\u8bed\u6599\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5316\u53e5\u5b50"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L213-L247", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.text", "original_string": "public String text(String delimiter)\n    {\n        if (delimiter == null) delimiter = \"\";\n        StringBuilder sb = new StringBuilder(size() * 3);\n        for (IWord word : this)\n        {\n            if (word instanceof CompoundWord)\n            {\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    sb.append(child.getValue()).append(delimiter);\n                }\n            }\n            else\n            {\n                sb.append(word.getValue()).append(delimiter);\n            }\n        }\n        sb.setLength(sb.length() - delimiter.length());\n\n        return sb.toString();\n    }", "language": "java", "code": "public String text(String delimiter)\n    {\n        if (delimiter == null) delimiter = \"\";\n        StringBuilder sb = new StringBuilder(size() * 3);\n        for (IWord word : this)\n        {\n            if (word instanceof CompoundWord)\n            {\n                for (Word child : ((CompoundWord) word).innerList)\n                {\n                    sb.append(child.getValue()).append(delimiter);\n                }\n            }\n            else\n            {\n                sb.append(word.getValue()).append(delimiter);\n            }\n        }\n        sb.setLength(sb.length() - delimiter.length());\n\n        return sb.toString();\n    }", "code_tokens": ["public", "String", "text", "(", "String", "delimiter", ")", "{", "if", "(", "delimiter", "==", "null", ")", "delimiter", "=", "\"\"", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", "size", "(", ")", "*", "3", ")", ";", "for", "(", "IWord", "word", ":", "this", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "for", "(", "Word", "child", ":", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", "{", "sb", ".", "append", "(", "child", ".", "getValue", "(", ")", ")", ".", "append", "(", "delimiter", ")", ";", "}", "}", "else", "{", "sb", ".", "append", "(", "word", ".", "getValue", "(", ")", ")", ".", "append", "(", "delimiter", ")", ";", "}", "}", "sb", ".", "setLength", "(", "sb", ".", "length", "(", ")", "-", "delimiter", ".", "length", "(", ")", ")", ";", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "\u539f\u59cb\u6587\u672c\u5f62\u5f0f\uff08\u65e0\u6807\u6ce8\uff0craw text\uff09\n\n@param delimiter \u8bcd\u8bed\u4e4b\u95f4\u7684\u5206\u9694\u7b26\n@return", "docstring_tokens": ["\u539f\u59cb\u6587\u672c\u5f62\u5f0f\uff08\u65e0\u6807\u6ce8\uff0craw", "text\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L291-L312", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.findWordsByLabel", "original_string": "public List<IWord> findWordsByLabel(String label)\n    {\n        List<IWord> wordList = new LinkedList<IWord>();\n        for (IWord word : this)\n        {\n            if (label.equals(word.getLabel()))\n            {\n                wordList.add(word);\n            }\n        }\n        return wordList;\n    }", "language": "java", "code": "public List<IWord> findWordsByLabel(String label)\n    {\n        List<IWord> wordList = new LinkedList<IWord>();\n        for (IWord word : this)\n        {\n            if (label.equals(word.getLabel()))\n            {\n                wordList.add(word);\n            }\n        }\n        return wordList;\n    }", "code_tokens": ["public", "List", "<", "IWord", ">", "findWordsByLabel", "(", "String", "label", ")", "{", "List", "<", "IWord", ">", "wordList", "=", "new", "LinkedList", "<", "IWord", ">", "(", ")", ";", "for", "(", "IWord", "word", ":", "this", ")", "{", "if", "(", "label", ".", "equals", "(", "word", ".", "getLabel", "(", ")", ")", ")", "{", "wordList", ".", "add", "(", "word", ")", ";", "}", "}", "return", "wordList", ";", "}"], "docstring": "\u627e\u51fa\u6240\u6709\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09\n\n@param label\n@return", "docstring_tokens": ["\u627e\u51fa\u6240\u6709\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L326-L337", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.findFirstWordByLabel", "original_string": "public IWord findFirstWordByLabel(String label)\n    {\n        for (IWord word : this)\n        {\n            if (label.equals(word.getLabel()))\n            {\n                return word;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public IWord findFirstWordByLabel(String label)\n    {\n        for (IWord word : this)\n        {\n            if (label.equals(word.getLabel()))\n            {\n                return word;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "IWord", "findFirstWordByLabel", "(", "String", "label", ")", "{", "for", "(", "IWord", "word", ":", "this", ")", "{", "if", "(", "label", ".", "equals", "(", "word", ".", "getLabel", "(", ")", ")", ")", "{", "return", "word", ";", "}", "}", "return", "null", ";", "}"], "docstring": "\u627e\u51fa\u7b2c\u4e00\u4e2a\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09\n\n@param label\n@return", "docstring_tokens": ["\u627e\u51fa\u7b2c\u4e00\u4e2a\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L345-L355", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.findFirstWordIteratorByLabel", "original_string": "public ListIterator<IWord> findFirstWordIteratorByLabel(String label)\n    {\n        ListIterator<IWord> listIterator = this.wordList.listIterator();\n        while (listIterator.hasNext())\n        {\n            IWord word = listIterator.next();\n            if (label.equals(word.getLabel()))\n            {\n                return listIterator;\n            }\n        }\n        return null;\n    }", "language": "java", "code": "public ListIterator<IWord> findFirstWordIteratorByLabel(String label)\n    {\n        ListIterator<IWord> listIterator = this.wordList.listIterator();\n        while (listIterator.hasNext())\n        {\n            IWord word = listIterator.next();\n            if (label.equals(word.getLabel()))\n            {\n                return listIterator;\n            }\n        }\n        return null;\n    }", "code_tokens": ["public", "ListIterator", "<", "IWord", ">", "findFirstWordIteratorByLabel", "(", "String", "label", ")", "{", "ListIterator", "<", "IWord", ">", "listIterator", "=", "this", ".", "wordList", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "IWord", "word", "=", "listIterator", ".", "next", "(", ")", ";", "if", "(", "label", ".", "equals", "(", "word", ".", "getLabel", "(", ")", ")", ")", "{", "return", "listIterator", ";", "}", "}", "return", "null", ";", "}"], "docstring": "\u627e\u51fa\u7b2c\u4e00\u4e2a\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\u7684\u6307\u9488\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09<br>\n\u82e5\u8981\u67e5\u770b\u8be5\u5355\u8bcd\uff0c\u8bf7\u8c03\u7528 previous<br>\n\u82e5\u8981\u5220\u9664\u8be5\u5355\u8bcd\uff0c\u8bf7\u8c03\u7528 remove<br>\n\n@param label\n@return", "docstring_tokens": ["\u627e\u51fa\u7b2c\u4e00\u4e2a\u8bcd\u6027\u4e3alabel\u7684\u5355\u8bcd\u7684\u6307\u9488\uff08\u4e0d\u68c0\u67e5\u590d\u5408\u8bcd\u5185\u90e8\u7684\u7b80\u5355\u8bcd\uff09<br", ">", "\u82e5\u8981\u67e5\u770b\u8be5\u5355\u8bcd\uff0c\u8bf7\u8c03\u7528", "previous<br", ">", "\u82e5\u8981\u5220\u9664\u8be5\u5355\u8bcd\uff0c\u8bf7\u8c03\u7528", "remove<br", ">"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L365-L377", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toSimpleWordList", "original_string": "public List<Word> toSimpleWordList()\n    {\n        List<Word> wordList = new LinkedList<Word>();\n        for (IWord word : this.wordList)\n        {\n            if (word instanceof CompoundWord)\n            {\n                wordList.addAll(((CompoundWord) word).innerList);\n            }\n            else\n            {\n                wordList.add((Word) word);\n            }\n        }\n\n        return wordList;\n    }", "language": "java", "code": "public List<Word> toSimpleWordList()\n    {\n        List<Word> wordList = new LinkedList<Word>();\n        for (IWord word : this.wordList)\n        {\n            if (word instanceof CompoundWord)\n            {\n                wordList.addAll(((CompoundWord) word).innerList);\n            }\n            else\n            {\n                wordList.add((Word) word);\n            }\n        }\n\n        return wordList;\n    }", "code_tokens": ["public", "List", "<", "Word", ">", "toSimpleWordList", "(", ")", "{", "List", "<", "Word", ">", "wordList", "=", "new", "LinkedList", "<", "Word", ">", "(", ")", ";", "for", "(", "IWord", "word", ":", "this", ".", "wordList", ")", "{", "if", "(", "word", "instanceof", "CompoundWord", ")", "{", "wordList", ".", "addAll", "(", "(", "(", "CompoundWord", ")", "word", ")", ".", "innerList", ")", ";", "}", "else", "{", "wordList", ".", "add", "(", "(", "Word", ")", "word", ")", ";", "}", "}", "return", "wordList", ";", "}"], "docstring": "\u8f6c\u6362\u4e3a\u7b80\u5355\u5355\u8bcd\u5217\u8868\n\n@return", "docstring_tokens": ["\u8f6c\u6362\u4e3a\u7b80\u5355\u5355\u8bcd\u5217\u8868"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L395-L411", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toWordArray", "original_string": "public String[] toWordArray()\n    {\n        List<Word> wordList = toSimpleWordList();\n        String[] wordArray = new String[wordList.size()];\n        Iterator<Word> iterator = wordList.iterator();\n        for (int i = 0; i < wordArray.length; i++)\n        {\n            wordArray[i] = iterator.next().value;\n        }\n        return wordArray;\n    }", "language": "java", "code": "public String[] toWordArray()\n    {\n        List<Word> wordList = toSimpleWordList();\n        String[] wordArray = new String[wordList.size()];\n        Iterator<Word> iterator = wordList.iterator();\n        for (int i = 0; i < wordArray.length; i++)\n        {\n            wordArray[i] = iterator.next().value;\n        }\n        return wordArray;\n    }", "code_tokens": ["public", "String", "[", "]", "toWordArray", "(", ")", "{", "List", "<", "Word", ">", "wordList", "=", "toSimpleWordList", "(", ")", ";", "String", "[", "]", "wordArray", "=", "new", "String", "[", "wordList", ".", "size", "(", ")", "]", ";", "Iterator", "<", "Word", ">", "iterator", "=", "wordList", ".", "iterator", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "wordArray", ".", "length", ";", "i", "++", ")", "{", "wordArray", "[", "i", "]", "=", "iterator", ".", "next", "(", ")", ".", "value", ";", "}", "return", "wordArray", ";", "}"], "docstring": "\u83b7\u53d6\u6240\u6709\u5355\u8bcd\u6784\u6210\u7684\u6570\u7ec4\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u6240\u6709\u5355\u8bcd\u6784\u6210\u7684\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L418-L428", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toWordTagArray", "original_string": "public String[][] toWordTagArray()\n    {\n        List<Word> wordList = toSimpleWordList();\n        String[][] pair = new String[2][wordList.size()];\n        Iterator<Word> iterator = wordList.iterator();\n        for (int i = 0; i < pair[0].length; i++)\n        {\n            Word word = iterator.next();\n            pair[0][i] = word.value;\n            pair[1][i] = word.label;\n        }\n        return pair;\n    }", "language": "java", "code": "public String[][] toWordTagArray()\n    {\n        List<Word> wordList = toSimpleWordList();\n        String[][] pair = new String[2][wordList.size()];\n        Iterator<Word> iterator = wordList.iterator();\n        for (int i = 0; i < pair[0].length; i++)\n        {\n            Word word = iterator.next();\n            pair[0][i] = word.value;\n            pair[1][i] = word.label;\n        }\n        return pair;\n    }", "code_tokens": ["public", "String", "[", "]", "[", "]", "toWordTagArray", "(", ")", "{", "List", "<", "Word", ">", "wordList", "=", "toSimpleWordList", "(", ")", ";", "String", "[", "]", "[", "]", "pair", "=", "new", "String", "[", "2", "]", "[", "wordList", ".", "size", "(", ")", "]", ";", "Iterator", "<", "Word", ">", "iterator", "=", "wordList", ".", "iterator", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "pair", "[", "0", "]", ".", "length", ";", "i", "++", ")", "{", "Word", "word", "=", "iterator", ".", "next", "(", ")", ";", "pair", "[", "0", "]", "[", "i", "]", "=", "word", ".", "value", ";", "pair", "[", "1", "]", "[", "i", "]", "=", "word", ".", "label", ";", "}", "return", "pair", ";", "}"], "docstring": "word pos\n\n@return", "docstring_tokens": ["word", "pos"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L435-L447", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java", "func_name": "Sentence.toWordTagNerArray", "original_string": "public String[][] toWordTagNerArray(NERTagSet tagSet)\n    {\n        List<String[]> tupleList = Utility.convertSentenceToNER(this, tagSet);\n        String[][] result = new String[3][tupleList.size()];\n        Iterator<String[]> iterator = tupleList.iterator();\n        for (int i = 0; i < result[0].length; i++)\n        {\n            String[] tuple = iterator.next();\n            for (int j = 0; j < 3; ++j)\n            {\n                result[j][i] = tuple[j];\n            }\n        }\n        return result;\n    }", "language": "java", "code": "public String[][] toWordTagNerArray(NERTagSet tagSet)\n    {\n        List<String[]> tupleList = Utility.convertSentenceToNER(this, tagSet);\n        String[][] result = new String[3][tupleList.size()];\n        Iterator<String[]> iterator = tupleList.iterator();\n        for (int i = 0; i < result[0].length; i++)\n        {\n            String[] tuple = iterator.next();\n            for (int j = 0; j < 3; ++j)\n            {\n                result[j][i] = tuple[j];\n            }\n        }\n        return result;\n    }", "code_tokens": ["public", "String", "[", "]", "[", "]", "toWordTagNerArray", "(", "NERTagSet", "tagSet", ")", "{", "List", "<", "String", "[", "]", ">", "tupleList", "=", "Utility", ".", "convertSentenceToNER", "(", "this", ",", "tagSet", ")", ";", "String", "[", "]", "[", "]", "result", "=", "new", "String", "[", "3", "]", "[", "tupleList", ".", "size", "(", ")", "]", ";", "Iterator", "<", "String", "[", "]", ">", "iterator", "=", "tupleList", ".", "iterator", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "result", "[", "0", "]", ".", "length", ";", "i", "++", ")", "{", "String", "[", "]", "tuple", "=", "iterator", ".", "next", "(", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "3", ";", "++", "j", ")", "{", "result", "[", "j", "]", "[", "i", "]", "=", "tuple", "[", "j", "]", ";", "}", "}", "return", "result", ";", "}"], "docstring": "word pos ner\n\n@param tagSet\n@return", "docstring_tokens": ["word", "pos", "ner"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/Sentence.java#L455-L469", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/GlobalObjectPool.java", "func_name": "GlobalObjectPool.get", "original_string": "public synchronized static <T> T get(Object id)\n    {\n        SoftReference reference = pool.get(id);\n        if (reference == null) return null;\n        return (T) reference.get();\n    }", "language": "java", "code": "public synchronized static <T> T get(Object id)\n    {\n        SoftReference reference = pool.get(id);\n        if (reference == null) return null;\n        return (T) reference.get();\n    }", "code_tokens": ["public", "synchronized", "static", "<", "T", ">", "T", "get", "(", "Object", "id", ")", "{", "SoftReference", "reference", "=", "pool", ".", "get", "(", "id", ")", ";", "if", "(", "reference", "==", "null", ")", "return", "null", ";", "return", "(", "T", ")", "reference", ".", "get", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u5bf9\u8c61\n@param id \u5bf9\u8c61\u7684id\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u5168\u5c40\u552f\u4e00\u7684\u6807\u793a\u7b26\n@param <T> \u5bf9\u8c61\u7c7b\u578b\n@return \u5bf9\u8c61", "docstring_tokens": ["\u83b7\u53d6\u5bf9\u8c61"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/GlobalObjectPool.java#L39-L44", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/GlobalObjectPool.java", "func_name": "GlobalObjectPool.put", "original_string": "public synchronized static <T> T put(Object id, T value)\n    {\n        SoftReference old = pool.put(id, new SoftReference(value));\n        return old == null ? null : (T) old.get();\n    }", "language": "java", "code": "public synchronized static <T> T put(Object id, T value)\n    {\n        SoftReference old = pool.put(id, new SoftReference(value));\n        return old == null ? null : (T) old.get();\n    }", "code_tokens": ["public", "synchronized", "static", "<", "T", ">", "T", "put", "(", "Object", "id", ",", "T", "value", ")", "{", "SoftReference", "old", "=", "pool", ".", "put", "(", "id", ",", "new", "SoftReference", "(", "value", ")", ")", ";", "return", "old", "==", "null", "?", "null", ":", "(", "T", ")", "old", ".", "get", "(", ")", ";", "}"], "docstring": "\u5b58\u653e\u5168\u5c40\u53d8\u91cf\n@param id\n@param <T>\n@return", "docstring_tokens": ["\u5b58\u653e\u5168\u5c40\u53d8\u91cf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/GlobalObjectPool.java#L52-L56", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGMap.java", "func_name": "MDAGMap.commonPrefixSearchWithValue", "original_string": "public LinkedList<Entry<String, V>> commonPrefixSearchWithValue(char[] key, int begin)\n    {\n        LinkedList<Entry<String, Integer>> valueIndex = mdag.commonPrefixSearchWithValueIndex(key, begin);\n        LinkedList<Entry<String, V>> entryList = new LinkedList<Entry<String, V>>();\n        for (Entry<String, Integer> entry : valueIndex)\n        {\n            entryList.add(new SimpleEntry<String, V>(entry.getKey(), valueList.get(entry.getValue())));\n        }\n\n        return entryList;\n    }", "language": "java", "code": "public LinkedList<Entry<String, V>> commonPrefixSearchWithValue(char[] key, int begin)\n    {\n        LinkedList<Entry<String, Integer>> valueIndex = mdag.commonPrefixSearchWithValueIndex(key, begin);\n        LinkedList<Entry<String, V>> entryList = new LinkedList<Entry<String, V>>();\n        for (Entry<String, Integer> entry : valueIndex)\n        {\n            entryList.add(new SimpleEntry<String, V>(entry.getKey(), valueList.get(entry.getValue())));\n        }\n\n        return entryList;\n    }", "code_tokens": ["public", "LinkedList", "<", "Entry", "<", "String", ",", "V", ">", ">", "commonPrefixSearchWithValue", "(", "char", "[", "]", "key", ",", "int", "begin", ")", "{", "LinkedList", "<", "Entry", "<", "String", ",", "Integer", ">", ">", "valueIndex", "=", "mdag", ".", "commonPrefixSearchWithValueIndex", "(", "key", ",", "begin", ")", ";", "LinkedList", "<", "Entry", "<", "String", ",", "V", ">", ">", "entryList", "=", "new", "LinkedList", "<", "Entry", "<", "String", ",", "V", ">", ">", "(", ")", ";", "for", "(", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "valueIndex", ")", "{", "entryList", ".", "add", "(", "new", "SimpleEntry", "<", "String", ",", "V", ">", "(", "entry", ".", "getKey", "(", ")", ",", "valueList", ".", "get", "(", "entry", ".", "getValue", "(", ")", ")", ")", ")", ";", "}", "return", "entryList", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n@param key\n@param begin\n@return", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGMap.java#L88-L98", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGMap.java", "func_name": "MDAGMap.commonPrefixSearchWithValue", "original_string": "public LinkedList<Entry<String, V>> commonPrefixSearchWithValue(String key)\n    {\n        return commonPrefixSearchWithValue(key.toCharArray(), 0);\n    }", "language": "java", "code": "public LinkedList<Entry<String, V>> commonPrefixSearchWithValue(String key)\n    {\n        return commonPrefixSearchWithValue(key.toCharArray(), 0);\n    }", "code_tokens": ["public", "LinkedList", "<", "Entry", "<", "String", ",", "V", ">", ">", "commonPrefixSearchWithValue", "(", "String", "key", ")", "{", "return", "commonPrefixSearchWithValue", "(", "key", ".", "toCharArray", "(", ")", ",", "0", ")", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n@param key\n@return", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/MDAG/MDAGMap.java#L105-L108", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java", "func_name": "Viterbi.compute", "original_string": "public static int[] compute(int[] obs, int[] states, double[] start_p, double[][] trans_p, double[][] emit_p)\n    {\n        int _max_states_value = 0;\n        for (int s : states)\n        {\n            _max_states_value = Math.max(_max_states_value, s);\n        }\n        ++_max_states_value;\n        double[][] V = new double[obs.length][_max_states_value];\n        int[][] path = new int[_max_states_value][obs.length];\n\n        for (int y : states)\n        {\n            V[0][y] = start_p[y] + emit_p[y][obs[0]];\n            path[y][0] = y;\n        }\n\n        for (int t = 1; t < obs.length; ++t)\n        {\n            int[][] newpath = new int[_max_states_value][obs.length];\n\n            for (int y : states)\n            {\n                double prob = Double.MAX_VALUE;\n                int state;\n                for (int y0 : states)\n                {\n                    double nprob = V[t - 1][y0] + trans_p[y0][y] + emit_p[y][obs[t]];\n                    if (nprob < prob)\n                    {\n                        prob = nprob;\n                        state = y0;\n                        // \u8bb0\u5f55\u6700\u5927\u6982\u7387\n                        V[t][y] = prob;\n                        // \u8bb0\u5f55\u8def\u5f84\n                        System.arraycopy(path[state], 0, newpath[y], 0, t);\n                        newpath[y][t] = y;\n                    }\n                }\n            }\n\n            path = newpath;\n        }\n\n        double prob = Double.MAX_VALUE;\n        int state = 0;\n        for (int y : states)\n        {\n            if (V[obs.length - 1][y] < prob)\n            {\n                prob = V[obs.length - 1][y];\n                state = y;\n            }\n        }\n\n        return path[state];\n    }", "language": "java", "code": "public static int[] compute(int[] obs, int[] states, double[] start_p, double[][] trans_p, double[][] emit_p)\n    {\n        int _max_states_value = 0;\n        for (int s : states)\n        {\n            _max_states_value = Math.max(_max_states_value, s);\n        }\n        ++_max_states_value;\n        double[][] V = new double[obs.length][_max_states_value];\n        int[][] path = new int[_max_states_value][obs.length];\n\n        for (int y : states)\n        {\n            V[0][y] = start_p[y] + emit_p[y][obs[0]];\n            path[y][0] = y;\n        }\n\n        for (int t = 1; t < obs.length; ++t)\n        {\n            int[][] newpath = new int[_max_states_value][obs.length];\n\n            for (int y : states)\n            {\n                double prob = Double.MAX_VALUE;\n                int state;\n                for (int y0 : states)\n                {\n                    double nprob = V[t - 1][y0] + trans_p[y0][y] + emit_p[y][obs[t]];\n                    if (nprob < prob)\n                    {\n                        prob = nprob;\n                        state = y0;\n                        // \u8bb0\u5f55\u6700\u5927\u6982\u7387\n                        V[t][y] = prob;\n                        // \u8bb0\u5f55\u8def\u5f84\n                        System.arraycopy(path[state], 0, newpath[y], 0, t);\n                        newpath[y][t] = y;\n                    }\n                }\n            }\n\n            path = newpath;\n        }\n\n        double prob = Double.MAX_VALUE;\n        int state = 0;\n        for (int y : states)\n        {\n            if (V[obs.length - 1][y] < prob)\n            {\n                prob = V[obs.length - 1][y];\n                state = y;\n            }\n        }\n\n        return path[state];\n    }", "code_tokens": ["public", "static", "int", "[", "]", "compute", "(", "int", "[", "]", "obs", ",", "int", "[", "]", "states", ",", "double", "[", "]", "start_p", ",", "double", "[", "]", "[", "]", "trans_p", ",", "double", "[", "]", "[", "]", "emit_p", ")", "{", "int", "_max_states_value", "=", "0", ";", "for", "(", "int", "s", ":", "states", ")", "{", "_max_states_value", "=", "Math", ".", "max", "(", "_max_states_value", ",", "s", ")", ";", "}", "++", "_max_states_value", ";", "double", "[", "]", "[", "]", "V", "=", "new", "double", "[", "obs", ".", "length", "]", "[", "_max_states_value", "]", ";", "int", "[", "]", "[", "]", "path", "=", "new", "int", "[", "_max_states_value", "]", "[", "obs", ".", "length", "]", ";", "for", "(", "int", "y", ":", "states", ")", "{", "V", "[", "0", "]", "[", "y", "]", "=", "start_p", "[", "y", "]", "+", "emit_p", "[", "y", "]", "[", "obs", "[", "0", "]", "]", ";", "path", "[", "y", "]", "[", "0", "]", "=", "y", ";", "}", "for", "(", "int", "t", "=", "1", ";", "t", "<", "obs", ".", "length", ";", "++", "t", ")", "{", "int", "[", "]", "[", "]", "newpath", "=", "new", "int", "[", "_max_states_value", "]", "[", "obs", ".", "length", "]", ";", "for", "(", "int", "y", ":", "states", ")", "{", "double", "prob", "=", "Double", ".", "MAX_VALUE", ";", "int", "state", ";", "for", "(", "int", "y0", ":", "states", ")", "{", "double", "nprob", "=", "V", "[", "t", "-", "1", "]", "[", "y0", "]", "+", "trans_p", "[", "y0", "]", "[", "y", "]", "+", "emit_p", "[", "y", "]", "[", "obs", "[", "t", "]", "]", ";", "if", "(", "nprob", "<", "prob", ")", "{", "prob", "=", "nprob", ";", "state", "=", "y0", ";", "// \u8bb0\u5f55\u6700\u5927\u6982\u7387", "V", "[", "t", "]", "[", "y", "]", "=", "prob", ";", "// \u8bb0\u5f55\u8def\u5f84", "System", ".", "arraycopy", "(", "path", "[", "state", "]", ",", "0", ",", "newpath", "[", "y", "]", ",", "0", ",", "t", ")", ";", "newpath", "[", "y", "]", "[", "t", "]", "=", "y", ";", "}", "}", "}", "path", "=", "newpath", ";", "}", "double", "prob", "=", "Double", ".", "MAX_VALUE", ";", "int", "state", "=", "0", ";", "for", "(", "int", "y", ":", "states", ")", "{", "if", "(", "V", "[", "obs", ".", "length", "-", "1", "]", "[", "y", "]", "<", "prob", ")", "{", "prob", "=", "V", "[", "obs", ".", "length", "-", "1", "]", "[", "y", "]", ";", "state", "=", "y", ";", "}", "}", "return", "path", "[", "state", "]", ";", "}"], "docstring": "\u6c42\u89e3HMM\u6a21\u578b\uff0c\u6240\u6709\u6982\u7387\u8bf7\u63d0\u524d\u53d6\u5bf9\u6570\n\n@param obs     \u89c2\u6d4b\u5e8f\u5217\n@param states  \u9690\u72b6\u6001\n@param start_p \u521d\u59cb\u6982\u7387\uff08\u9690\u72b6\u6001\uff09\n@param trans_p \u8f6c\u79fb\u6982\u7387\uff08\u9690\u72b6\u6001\uff09\n@param emit_p  \u53d1\u5c04\u6982\u7387 \uff08\u9690\u72b6\u6001\u8868\u73b0\u4e3a\u663e\u72b6\u6001\u7684\u6982\u7387\uff09\n@return \u6700\u53ef\u80fd\u7684\u5e8f\u5217", "docstring_tokens": ["\u6c42\u89e3HMM\u6a21\u578b\uff0c\u6240\u6709\u6982\u7387\u8bf7\u63d0\u524d\u53d6\u5bf9\u6570"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java#L39-L95", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java", "func_name": "Viterbi.compute", "original_string": "public static void compute(List<Vertex> vertexList, TransformMatrix transformMatrixDictionary)\n    {\n        if (Nature.values().length != transformMatrixDictionary.states.length)\n            transformMatrixDictionary.extend(Nature.values().length);\n        int length = vertexList.size() - 1;\n        double[][] cost = new double[2][];  // \u6eda\u52a8\u6570\u7ec4\n        Iterator<Vertex> iterator = vertexList.iterator();\n        Vertex start = iterator.next();\n        Nature pre = start.attribute.nature[0];\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n//        start.confirmNature(pre);\n        // \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765\n        Vertex preItem;\n        Nature[] preTagSet;\n        {\n            Vertex item = iterator.next();\n            cost[0] = new double[item.attribute.nature.length];\n            int j = 0;\n            int curIndex = 0;\n            for (Nature cur : item.attribute.nature)\n            {\n                cost[0][j] = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.attribute.frequency[curIndex] + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur.ordinal()));\n                ++j;\n                ++curIndex;\n            }\n            preTagSet = item.attribute.nature;\n            preItem = item;\n        }\n        // \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b\n        for (int i = 1; i < length; ++i)\n        {\n            int index_i = i & 1;\n            int index_i_1 = 1 - index_i;\n            Vertex item = iterator.next();\n            cost[index_i] = new double[item.attribute.nature.length];\n            double perfect_cost_line = Double.MAX_VALUE;\n            int k = 0;\n            Nature[] curTagSet = item.attribute.nature;\n            for (Nature cur : curTagSet)\n            {\n                cost[index_i][k] = Double.MAX_VALUE;\n                int j = 0;\n                for (Nature p : preTagSet)\n                {\n                    double now = cost[index_i_1][j] + transformMatrixDictionary.transititon_probability[p.ordinal()][cur.ordinal()] - Math.log((item.attribute.frequency[k] + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur.ordinal()));\n                    if (now < cost[index_i][k])\n                    {\n                        cost[index_i][k] = now;\n                        if (now < perfect_cost_line)\n                        {\n                            perfect_cost_line = now;\n                            pre = p;\n                        }\n                    }\n                    ++j;\n                }\n                ++k;\n            }\n            preItem.confirmNature(pre);\n            preTagSet = curTagSet;\n            preItem = item;\n        }\n    }", "language": "java", "code": "public static void compute(List<Vertex> vertexList, TransformMatrix transformMatrixDictionary)\n    {\n        if (Nature.values().length != transformMatrixDictionary.states.length)\n            transformMatrixDictionary.extend(Nature.values().length);\n        int length = vertexList.size() - 1;\n        double[][] cost = new double[2][];  // \u6eda\u52a8\u6570\u7ec4\n        Iterator<Vertex> iterator = vertexList.iterator();\n        Vertex start = iterator.next();\n        Nature pre = start.attribute.nature[0];\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n//        start.confirmNature(pre);\n        // \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765\n        Vertex preItem;\n        Nature[] preTagSet;\n        {\n            Vertex item = iterator.next();\n            cost[0] = new double[item.attribute.nature.length];\n            int j = 0;\n            int curIndex = 0;\n            for (Nature cur : item.attribute.nature)\n            {\n                cost[0][j] = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.attribute.frequency[curIndex] + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur.ordinal()));\n                ++j;\n                ++curIndex;\n            }\n            preTagSet = item.attribute.nature;\n            preItem = item;\n        }\n        // \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b\n        for (int i = 1; i < length; ++i)\n        {\n            int index_i = i & 1;\n            int index_i_1 = 1 - index_i;\n            Vertex item = iterator.next();\n            cost[index_i] = new double[item.attribute.nature.length];\n            double perfect_cost_line = Double.MAX_VALUE;\n            int k = 0;\n            Nature[] curTagSet = item.attribute.nature;\n            for (Nature cur : curTagSet)\n            {\n                cost[index_i][k] = Double.MAX_VALUE;\n                int j = 0;\n                for (Nature p : preTagSet)\n                {\n                    double now = cost[index_i_1][j] + transformMatrixDictionary.transititon_probability[p.ordinal()][cur.ordinal()] - Math.log((item.attribute.frequency[k] + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur.ordinal()));\n                    if (now < cost[index_i][k])\n                    {\n                        cost[index_i][k] = now;\n                        if (now < perfect_cost_line)\n                        {\n                            perfect_cost_line = now;\n                            pre = p;\n                        }\n                    }\n                    ++j;\n                }\n                ++k;\n            }\n            preItem.confirmNature(pre);\n            preTagSet = curTagSet;\n            preItem = item;\n        }\n    }", "code_tokens": ["public", "static", "void", "compute", "(", "List", "<", "Vertex", ">", "vertexList", ",", "TransformMatrix", "transformMatrixDictionary", ")", "{", "if", "(", "Nature", ".", "values", "(", ")", ".", "length", "!=", "transformMatrixDictionary", ".", "states", ".", "length", ")", "transformMatrixDictionary", ".", "extend", "(", "Nature", ".", "values", "(", ")", ".", "length", ")", ";", "int", "length", "=", "vertexList", ".", "size", "(", ")", "-", "1", ";", "double", "[", "]", "[", "]", "cost", "=", "new", "double", "[", "2", "]", "[", "", "]", ";", "// \u6eda\u52a8\u6570\u7ec4", "Iterator", "<", "Vertex", ">", "iterator", "=", "vertexList", ".", "iterator", "(", ")", ";", "Vertex", "start", "=", "iterator", ".", "next", "(", ")", ";", "Nature", "pre", "=", "start", ".", "attribute", ".", "nature", "[", "0", "]", ";", "// \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684", "//        start.confirmNature(pre);", "// \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765", "Vertex", "preItem", ";", "Nature", "[", "]", "preTagSet", ";", "{", "Vertex", "item", "=", "iterator", ".", "next", "(", ")", ";", "cost", "[", "0", "]", "=", "new", "double", "[", "item", ".", "attribute", ".", "nature", ".", "length", "]", ";", "int", "j", "=", "0", ";", "int", "curIndex", "=", "0", ";", "for", "(", "Nature", "cur", ":", "item", ".", "attribute", ".", "nature", ")", "{", "cost", "[", "0", "]", "[", "j", "]", "=", "transformMatrixDictionary", ".", "transititon_probability", "[", "pre", ".", "ordinal", "(", ")", "]", "[", "cur", ".", "ordinal", "(", ")", "]", "-", "Math", ".", "log", "(", "(", "item", ".", "attribute", ".", "frequency", "[", "curIndex", "]", "+", "1e-8", ")", "/", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "cur", ".", "ordinal", "(", ")", ")", ")", ";", "++", "j", ";", "++", "curIndex", ";", "}", "preTagSet", "=", "item", ".", "attribute", ".", "nature", ";", "preItem", "=", "item", ";", "}", "// \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b", "for", "(", "int", "i", "=", "1", ";", "i", "<", "length", ";", "++", "i", ")", "{", "int", "index_i", "=", "i", "&", "1", ";", "int", "index_i_1", "=", "1", "-", "index_i", ";", "Vertex", "item", "=", "iterator", ".", "next", "(", ")", ";", "cost", "[", "index_i", "]", "=", "new", "double", "[", "item", ".", "attribute", ".", "nature", ".", "length", "]", ";", "double", "perfect_cost_line", "=", "Double", ".", "MAX_VALUE", ";", "int", "k", "=", "0", ";", "Nature", "[", "]", "curTagSet", "=", "item", ".", "attribute", ".", "nature", ";", "for", "(", "Nature", "cur", ":", "curTagSet", ")", "{", "cost", "[", "index_i", "]", "[", "k", "]", "=", "Double", ".", "MAX_VALUE", ";", "int", "j", "=", "0", ";", "for", "(", "Nature", "p", ":", "preTagSet", ")", "{", "double", "now", "=", "cost", "[", "index_i_1", "]", "[", "j", "]", "+", "transformMatrixDictionary", ".", "transititon_probability", "[", "p", ".", "ordinal", "(", ")", "]", "[", "cur", ".", "ordinal", "(", ")", "]", "-", "Math", ".", "log", "(", "(", "item", ".", "attribute", ".", "frequency", "[", "k", "]", "+", "1e-8", ")", "/", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "cur", ".", "ordinal", "(", ")", ")", ")", ";", "if", "(", "now", "<", "cost", "[", "index_i", "]", "[", "k", "]", ")", "{", "cost", "[", "index_i", "]", "[", "k", "]", "=", "now", ";", "if", "(", "now", "<", "perfect_cost_line", ")", "{", "perfect_cost_line", "=", "now", ";", "pre", "=", "p", ";", "}", "}", "++", "j", ";", "}", "++", "k", ";", "}", "preItem", ".", "confirmNature", "(", "pre", ")", ";", "preTagSet", "=", "curTagSet", ";", "preItem", "=", "item", ";", "}", "}"], "docstring": "\u7279\u5316\u7248\u7684\u6c42\u89e3HMM\u6a21\u578b\n\n@param vertexList                \u5305\u542bVertex.B\u8282\u70b9\u7684\u8def\u5f84\n@param transformMatrixDictionary \u8bcd\u5178\u5bf9\u5e94\u7684\u8f6c\u79fb\u77e9\u9635", "docstring_tokens": ["\u7279\u5316\u7248\u7684\u6c42\u89e3HMM\u6a21\u578b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java#L103-L165", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java", "func_name": "Viterbi.computeEnum", "original_string": "public static <E extends Enum<E>> List<E> computeEnum(List<EnumItem<E>> roleTagList, TransformMatrixDictionary<E> transformMatrixDictionary)\n    {\n        int length = roleTagList.size() - 1;\n        List<E> tagList = new ArrayList<E>(roleTagList.size());\n        double[][] cost = new double[2][];  // \u6eda\u52a8\u6570\u7ec4\n        Iterator<EnumItem<E>> iterator = roleTagList.iterator();\n        EnumItem<E> start = iterator.next();\n        E pre = start.labelMap.entrySet().iterator().next().getKey();\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n        tagList.add(pre);\n        // \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765\n        Set<E> preTagSet;\n        {\n            EnumItem<E> item = iterator.next();\n            cost[0] = new double[item.labelMap.size()];\n            int j = 0;\n            for (E cur : item.labelMap.keySet())\n            {\n                cost[0][j] = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                ++j;\n            }\n            preTagSet = item.labelMap.keySet();\n        }\n        // \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b\n        for (int i = 1; i < length; ++i)\n        {\n            int index_i = i & 1;\n            int index_i_1 = 1 - index_i;\n            EnumItem<E> item = iterator.next();\n            cost[index_i] = new double[item.labelMap.size()];\n            double perfect_cost_line = Double.MAX_VALUE;\n            int k = 0;\n            Set<E> curTagSet = item.labelMap.keySet();\n            for (E cur : curTagSet)\n            {\n                cost[index_i][k] = Double.MAX_VALUE;\n                int j = 0;\n                for (E p : preTagSet)\n                {\n                    double now = cost[index_i_1][j] + transformMatrixDictionary.transititon_probability[p.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                    if (now < cost[index_i][k])\n                    {\n                        cost[index_i][k] = now;\n                        if (now < perfect_cost_line)\n                        {\n                            perfect_cost_line = now;\n                            pre = p;\n                        }\n                    }\n                    ++j;\n                }\n                ++k;\n            }\n            tagList.add(pre);\n            preTagSet = curTagSet;\n        }\n        tagList.add(tagList.get(0));    // \u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a##\u672b##\n        return tagList;\n    }", "language": "java", "code": "public static <E extends Enum<E>> List<E> computeEnum(List<EnumItem<E>> roleTagList, TransformMatrixDictionary<E> transformMatrixDictionary)\n    {\n        int length = roleTagList.size() - 1;\n        List<E> tagList = new ArrayList<E>(roleTagList.size());\n        double[][] cost = new double[2][];  // \u6eda\u52a8\u6570\u7ec4\n        Iterator<EnumItem<E>> iterator = roleTagList.iterator();\n        EnumItem<E> start = iterator.next();\n        E pre = start.labelMap.entrySet().iterator().next().getKey();\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n        tagList.add(pre);\n        // \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765\n        Set<E> preTagSet;\n        {\n            EnumItem<E> item = iterator.next();\n            cost[0] = new double[item.labelMap.size()];\n            int j = 0;\n            for (E cur : item.labelMap.keySet())\n            {\n                cost[0][j] = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                ++j;\n            }\n            preTagSet = item.labelMap.keySet();\n        }\n        // \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b\n        for (int i = 1; i < length; ++i)\n        {\n            int index_i = i & 1;\n            int index_i_1 = 1 - index_i;\n            EnumItem<E> item = iterator.next();\n            cost[index_i] = new double[item.labelMap.size()];\n            double perfect_cost_line = Double.MAX_VALUE;\n            int k = 0;\n            Set<E> curTagSet = item.labelMap.keySet();\n            for (E cur : curTagSet)\n            {\n                cost[index_i][k] = Double.MAX_VALUE;\n                int j = 0;\n                for (E p : preTagSet)\n                {\n                    double now = cost[index_i_1][j] + transformMatrixDictionary.transititon_probability[p.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                    if (now < cost[index_i][k])\n                    {\n                        cost[index_i][k] = now;\n                        if (now < perfect_cost_line)\n                        {\n                            perfect_cost_line = now;\n                            pre = p;\n                        }\n                    }\n                    ++j;\n                }\n                ++k;\n            }\n            tagList.add(pre);\n            preTagSet = curTagSet;\n        }\n        tagList.add(tagList.get(0));    // \u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a##\u672b##\n        return tagList;\n    }", "code_tokens": ["public", "static", "<", "E", "extends", "Enum", "<", "E", ">", ">", "List", "<", "E", ">", "computeEnum", "(", "List", "<", "EnumItem", "<", "E", ">", ">", "roleTagList", ",", "TransformMatrixDictionary", "<", "E", ">", "transformMatrixDictionary", ")", "{", "int", "length", "=", "roleTagList", ".", "size", "(", ")", "-", "1", ";", "List", "<", "E", ">", "tagList", "=", "new", "ArrayList", "<", "E", ">", "(", "roleTagList", ".", "size", "(", ")", ")", ";", "double", "[", "]", "[", "]", "cost", "=", "new", "double", "[", "2", "]", "[", "", "]", ";", "// \u6eda\u52a8\u6570\u7ec4", "Iterator", "<", "EnumItem", "<", "E", ">", ">", "iterator", "=", "roleTagList", ".", "iterator", "(", ")", ";", "EnumItem", "<", "E", ">", "start", "=", "iterator", ".", "next", "(", ")", ";", "E", "pre", "=", "start", ".", "labelMap", ".", "entrySet", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ".", "getKey", "(", ")", ";", "// \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684", "tagList", ".", "add", "(", "pre", ")", ";", "// \u7b2c\u4e8c\u4e2a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u7b97\u51fa\u6765", "Set", "<", "E", ">", "preTagSet", ";", "{", "EnumItem", "<", "E", ">", "item", "=", "iterator", ".", "next", "(", ")", ";", "cost", "[", "0", "]", "=", "new", "double", "[", "item", ".", "labelMap", ".", "size", "(", ")", "]", ";", "int", "j", "=", "0", ";", "for", "(", "E", "cur", ":", "item", ".", "labelMap", ".", "keySet", "(", ")", ")", "{", "cost", "[", "0", "]", "[", "j", "]", "=", "transformMatrixDictionary", ".", "transititon_probability", "[", "pre", ".", "ordinal", "(", ")", "]", "[", "cur", ".", "ordinal", "(", ")", "]", "-", "Math", ".", "log", "(", "(", "item", ".", "getFrequency", "(", "cur", ")", "+", "1e-8", ")", "/", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "cur", ")", ")", ";", "++", "j", ";", "}", "preTagSet", "=", "item", ".", "labelMap", ".", "keySet", "(", ")", ";", "}", "// \u7b2c\u4e09\u4e2a\u5f00\u59cb\u590d\u6742\u4e00\u4e9b", "for", "(", "int", "i", "=", "1", ";", "i", "<", "length", ";", "++", "i", ")", "{", "int", "index_i", "=", "i", "&", "1", ";", "int", "index_i_1", "=", "1", "-", "index_i", ";", "EnumItem", "<", "E", ">", "item", "=", "iterator", ".", "next", "(", ")", ";", "cost", "[", "index_i", "]", "=", "new", "double", "[", "item", ".", "labelMap", ".", "size", "(", ")", "]", ";", "double", "perfect_cost_line", "=", "Double", ".", "MAX_VALUE", ";", "int", "k", "=", "0", ";", "Set", "<", "E", ">", "curTagSet", "=", "item", ".", "labelMap", ".", "keySet", "(", ")", ";", "for", "(", "E", "cur", ":", "curTagSet", ")", "{", "cost", "[", "index_i", "]", "[", "k", "]", "=", "Double", ".", "MAX_VALUE", ";", "int", "j", "=", "0", ";", "for", "(", "E", "p", ":", "preTagSet", ")", "{", "double", "now", "=", "cost", "[", "index_i_1", "]", "[", "j", "]", "+", "transformMatrixDictionary", ".", "transititon_probability", "[", "p", ".", "ordinal", "(", ")", "]", "[", "cur", ".", "ordinal", "(", ")", "]", "-", "Math", ".", "log", "(", "(", "item", ".", "getFrequency", "(", "cur", ")", "+", "1e-8", ")", "/", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "cur", ")", ")", ";", "if", "(", "now", "<", "cost", "[", "index_i", "]", "[", "k", "]", ")", "{", "cost", "[", "index_i", "]", "[", "k", "]", "=", "now", ";", "if", "(", "now", "<", "perfect_cost_line", ")", "{", "perfect_cost_line", "=", "now", ";", "pre", "=", "p", ";", "}", "}", "++", "j", ";", "}", "++", "k", ";", "}", "tagList", ".", "add", "(", "pre", ")", ";", "preTagSet", "=", "curTagSet", ";", "}", "tagList", ".", "add", "(", "tagList", ".", "get", "(", "0", ")", ")", ";", "// \u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a##\u672b##", "return", "tagList", ";", "}"], "docstring": "\u6807\u51c6\u7248\u7684Viterbi\u7b97\u6cd5\uff0c\u67e5\u51c6\u7387\u9ad8\uff0c\u6548\u7387\u7a0d\u4f4e\n\n@param roleTagList               \u89c2\u6d4b\u5e8f\u5217\n@param transformMatrixDictionary \u8f6c\u79fb\u77e9\u9635\n@param <E>                       EnumItem\u7684\u5177\u4f53\u7c7b\u578b\n@return \u9884\u6d4b\u7ed3\u679c", "docstring_tokens": ["\u6807\u51c6\u7248\u7684Viterbi\u7b97\u6cd5\uff0c\u67e5\u51c6\u7387\u9ad8\uff0c\u6548\u7387\u7a0d\u4f4e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java#L175-L233", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java", "func_name": "Viterbi.computeEnumSimply", "original_string": "public static <E extends Enum<E>> List<E> computeEnumSimply(List<EnumItem<E>> roleTagList, TransformMatrixDictionary<E> transformMatrixDictionary)\n    {\n        int length = roleTagList.size() - 1;\n        List<E> tagList = new LinkedList<E>();\n        Iterator<EnumItem<E>> iterator = roleTagList.iterator();\n        EnumItem<E> start = iterator.next();\n        E pre = start.labelMap.entrySet().iterator().next().getKey();\n        E perfect_tag = pre;\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n        tagList.add(pre);\n        for (int i = 0; i < length; ++i)\n        {\n            double perfect_cost = Double.MAX_VALUE;\n            EnumItem<E> item = iterator.next();\n            for (E cur : item.labelMap.keySet())\n            {\n                double now = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                if (perfect_cost > now)\n                {\n                    perfect_cost = now;\n                    perfect_tag = cur;\n                }\n            }\n            pre = perfect_tag;\n            tagList.add(pre);\n        }\n        return tagList;\n    }", "language": "java", "code": "public static <E extends Enum<E>> List<E> computeEnumSimply(List<EnumItem<E>> roleTagList, TransformMatrixDictionary<E> transformMatrixDictionary)\n    {\n        int length = roleTagList.size() - 1;\n        List<E> tagList = new LinkedList<E>();\n        Iterator<EnumItem<E>> iterator = roleTagList.iterator();\n        EnumItem<E> start = iterator.next();\n        E pre = start.labelMap.entrySet().iterator().next().getKey();\n        E perfect_tag = pre;\n        // \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684\n        tagList.add(pre);\n        for (int i = 0; i < length; ++i)\n        {\n            double perfect_cost = Double.MAX_VALUE;\n            EnumItem<E> item = iterator.next();\n            for (E cur : item.labelMap.keySet())\n            {\n                double now = transformMatrixDictionary.transititon_probability[pre.ordinal()][cur.ordinal()] - Math.log((item.getFrequency(cur) + 1e-8) / transformMatrixDictionary.getTotalFrequency(cur));\n                if (perfect_cost > now)\n                {\n                    perfect_cost = now;\n                    perfect_tag = cur;\n                }\n            }\n            pre = perfect_tag;\n            tagList.add(pre);\n        }\n        return tagList;\n    }", "code_tokens": ["public", "static", "<", "E", "extends", "Enum", "<", "E", ">", ">", "List", "<", "E", ">", "computeEnumSimply", "(", "List", "<", "EnumItem", "<", "E", ">", ">", "roleTagList", ",", "TransformMatrixDictionary", "<", "E", ">", "transformMatrixDictionary", ")", "{", "int", "length", "=", "roleTagList", ".", "size", "(", ")", "-", "1", ";", "List", "<", "E", ">", "tagList", "=", "new", "LinkedList", "<", "E", ">", "(", ")", ";", "Iterator", "<", "EnumItem", "<", "E", ">", ">", "iterator", "=", "roleTagList", ".", "iterator", "(", ")", ";", "EnumItem", "<", "E", ">", "start", "=", "iterator", ".", "next", "(", ")", ";", "E", "pre", "=", "start", ".", "labelMap", ".", "entrySet", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ".", "getKey", "(", ")", ";", "E", "perfect_tag", "=", "pre", ";", "// \u7b2c\u4e00\u4e2a\u662f\u786e\u5b9a\u7684", "tagList", ".", "add", "(", "pre", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "double", "perfect_cost", "=", "Double", ".", "MAX_VALUE", ";", "EnumItem", "<", "E", ">", "item", "=", "iterator", ".", "next", "(", ")", ";", "for", "(", "E", "cur", ":", "item", ".", "labelMap", ".", "keySet", "(", ")", ")", "{", "double", "now", "=", "transformMatrixDictionary", ".", "transititon_probability", "[", "pre", ".", "ordinal", "(", ")", "]", "[", "cur", ".", "ordinal", "(", ")", "]", "-", "Math", ".", "log", "(", "(", "item", ".", "getFrequency", "(", "cur", ")", "+", "1e-8", ")", "/", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "cur", ")", ")", ";", "if", "(", "perfect_cost", ">", "now", ")", "{", "perfect_cost", "=", "now", ";", "perfect_tag", "=", "cur", ";", "}", "}", "pre", "=", "perfect_tag", ";", "tagList", ".", "add", "(", "pre", ")", ";", "}", "return", "tagList", ";", "}"], "docstring": "\u4ec5\u4ec5\u5229\u7528\u4e86\u8f6c\u79fb\u77e9\u9635\u7684\u201c\u7ef4\u7279\u6bd4\u201d\u7b97\u6cd5\n\n@param roleTagList               \u89c2\u6d4b\u5e8f\u5217\n@param transformMatrixDictionary \u8f6c\u79fb\u77e9\u9635\n@param <E>                       EnumItem\u7684\u5177\u4f53\u7c7b\u578b\n@return \u9884\u6d4b\u7ed3\u679c", "docstring_tokens": ["\u4ec5\u4ec5\u5229\u7528\u4e86\u8f6c\u79fb\u77e9\u9635\u7684\u201c\u7ef4\u7279\u6bd4\u201d\u7b97\u6cd5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/Viterbi.java#L243-L270", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.getTopSentence", "original_string": "public int[] getTopSentence(int size)\n    {\n        Collection<Integer> values = top.values();\n        size = Math.min(size, values.size());\n        int[] indexArray = new int[size];\n        Iterator<Integer> it = values.iterator();\n        for (int i = 0; i < size; ++i)\n        {\n            indexArray[i] = it.next();\n        }\n        return indexArray;\n    }", "language": "java", "code": "public int[] getTopSentence(int size)\n    {\n        Collection<Integer> values = top.values();\n        size = Math.min(size, values.size());\n        int[] indexArray = new int[size];\n        Iterator<Integer> it = values.iterator();\n        for (int i = 0; i < size; ++i)\n        {\n            indexArray[i] = it.next();\n        }\n        return indexArray;\n    }", "code_tokens": ["public", "int", "[", "]", "getTopSentence", "(", "int", "size", ")", "{", "Collection", "<", "Integer", ">", "values", "=", "top", ".", "values", "(", ")", ";", "size", "=", "Math", ".", "min", "(", "size", ",", "values", ".", "size", "(", ")", ")", ";", "int", "[", "]", "indexArray", "=", "new", "int", "[", "size", "]", ";", "Iterator", "<", "Integer", ">", "it", "=", "values", ".", "iterator", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "++", "i", ")", "{", "indexArray", "[", "i", "]", "=", "it", ".", "next", "(", ")", ";", "}", "return", "indexArray", ";", "}"], "docstring": "\u83b7\u53d6\u524d\u51e0\u4e2a\u5173\u952e\u53e5\u5b50\n\n@param size \u8981\u51e0\u4e2a\n@return \u5173\u952e\u53e5\u5b50\u7684\u4e0b\u6807", "docstring_tokens": ["\u83b7\u53d6\u524d\u51e0\u4e2a\u5173\u952e\u53e5\u5b50"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L129-L140", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.splitSentence", "original_string": "static List<String> splitSentence(String document, String sentence_separator)\n    {\n        List<String> sentences = new ArrayList<String>();\n        for (String line : document.split(\"[\\r\\n]\"))\n        {\n            line = line.trim();\n            if (line.length() == 0) continue;\n            for (String sent : line.split(sentence_separator))\t\t// [\uff0c,\u3002:\uff1a\u201c\u201d\uff1f?\uff01!\uff1b;]\n            {\n                sent = sent.trim();\n                if (sent.length() == 0) continue;\n                sentences.add(sent);\n            }\n        }\n\n        return sentences;\n    }", "language": "java", "code": "static List<String> splitSentence(String document, String sentence_separator)\n    {\n        List<String> sentences = new ArrayList<String>();\n        for (String line : document.split(\"[\\r\\n]\"))\n        {\n            line = line.trim();\n            if (line.length() == 0) continue;\n            for (String sent : line.split(sentence_separator))\t\t// [\uff0c,\u3002:\uff1a\u201c\u201d\uff1f?\uff01!\uff1b;]\n            {\n                sent = sent.trim();\n                if (sent.length() == 0) continue;\n                sentences.add(sent);\n            }\n        }\n\n        return sentences;\n    }", "code_tokens": ["static", "List", "<", "String", ">", "splitSentence", "(", "String", "document", ",", "String", "sentence_separator", ")", "{", "List", "<", "String", ">", "sentences", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "for", "(", "String", "line", ":", "document", ".", "split", "(", "\"[\\r\\n]\"", ")", ")", "{", "line", "=", "line", ".", "trim", "(", ")", ";", "if", "(", "line", ".", "length", "(", ")", "==", "0", ")", "continue", ";", "for", "(", "String", "sent", ":", "line", ".", "split", "(", "sentence_separator", ")", ")", "// [\uff0c,\u3002:\uff1a\u201c\u201d\uff1f?\uff01!\uff1b;]", "{", "sent", "=", "sent", ".", "trim", "(", ")", ";", "if", "(", "sent", ".", "length", "(", ")", "==", "0", ")", "continue", ";", "sentences", ".", "add", "(", "sent", ")", ";", "}", "}", "return", "sentences", ";", "}"], "docstring": "\u5c06\u6587\u7ae0\u5206\u5272\u4e3a\u53e5\u5b50\n\n@param document \u5f85\u5206\u5272\u7684\u6587\u6863\n@param sentence_separator \u53e5\u5b50\u5206\u9694\u7b26\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5982\uff1a   [\u3002:\uff1f?\uff01!\uff1b;]\n@return", "docstring_tokens": ["\u5c06\u6587\u7ae0\u5206\u5272\u4e3a\u53e5\u5b50"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L177-L193", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.convertSentenceListToDocument", "original_string": "private static List<List<String>> convertSentenceListToDocument(List<String> sentenceList)\n    {\n        List<List<String>> docs = new ArrayList<List<String>>(sentenceList.size());\n        for (String sentence : sentenceList)\n        {\n            List<Term> termList = StandardTokenizer.segment(sentence.toCharArray());\n            List<String> wordList = new LinkedList<String>();\n            for (Term term : termList)\n            {\n                if (CoreStopWordDictionary.shouldInclude(term))\n                {\n                    wordList.add(term.word);\n                }\n            }\n            docs.add(wordList);\n        }\n        return docs;\n    }", "language": "java", "code": "private static List<List<String>> convertSentenceListToDocument(List<String> sentenceList)\n    {\n        List<List<String>> docs = new ArrayList<List<String>>(sentenceList.size());\n        for (String sentence : sentenceList)\n        {\n            List<Term> termList = StandardTokenizer.segment(sentence.toCharArray());\n            List<String> wordList = new LinkedList<String>();\n            for (Term term : termList)\n            {\n                if (CoreStopWordDictionary.shouldInclude(term))\n                {\n                    wordList.add(term.word);\n                }\n            }\n            docs.add(wordList);\n        }\n        return docs;\n    }", "code_tokens": ["private", "static", "List", "<", "List", "<", "String", ">", ">", "convertSentenceListToDocument", "(", "List", "<", "String", ">", "sentenceList", ")", "{", "List", "<", "List", "<", "String", ">>", "docs", "=", "new", "ArrayList", "<", "List", "<", "String", ">", ">", "(", "sentenceList", ".", "size", "(", ")", ")", ";", "for", "(", "String", "sentence", ":", "sentenceList", ")", "{", "List", "<", "Term", ">", "termList", "=", "StandardTokenizer", ".", "segment", "(", "sentence", ".", "toCharArray", "(", ")", ")", ";", "List", "<", "String", ">", "wordList", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "if", "(", "CoreStopWordDictionary", ".", "shouldInclude", "(", "term", ")", ")", "{", "wordList", ".", "add", "(", "term", ".", "word", ")", ";", "}", "}", "docs", ".", "add", "(", "wordList", ")", ";", "}", "return", "docs", ";", "}"], "docstring": "\u5c06\u53e5\u5b50\u5217\u8868\u8f6c\u5316\u4e3a\u6587\u6863\n\n@param sentenceList\n@return", "docstring_tokens": ["\u5c06\u53e5\u5b50\u5217\u8868\u8f6c\u5316\u4e3a\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L201-L218", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.getTopSentenceList", "original_string": "public static List<String> getTopSentenceList(String document, int size)\n    {\n    \treturn getTopSentenceList(document, size, default_sentence_separator);\n    }", "language": "java", "code": "public static List<String> getTopSentenceList(String document, int size)\n    {\n    \treturn getTopSentenceList(document, size, default_sentence_separator);\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "getTopSentenceList", "(", "String", "document", ",", "int", "size", ")", "{", "return", "getTopSentenceList", "(", "document", ",", "size", ",", "default_sentence_separator", ")", ";", "}"], "docstring": "\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3\n\n@param document \u76ee\u6807\u6587\u6863\n@param size     \u9700\u8981\u7684\u5173\u952e\u53e5\u7684\u4e2a\u6570\n@return \u5173\u952e\u53e5\u5217\u8868", "docstring_tokens": ["\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L227-L230", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.getTopSentenceList", "original_string": "public static List<String> getTopSentenceList(String document, int size, String sentence_separator)\n    {\n        List<String> sentenceList = splitSentence(document, sentence_separator);\n        List<List<String>> docs = convertSentenceListToDocument(sentenceList);\n        TextRankSentence textRank = new TextRankSentence(docs);\n        int[] topSentence = textRank.getTopSentence(size);\n        List<String> resultList = new LinkedList<String>();\n        for (int i : topSentence)\n        {\n            resultList.add(sentenceList.get(i));\n        }\n        return resultList;\n    }", "language": "java", "code": "public static List<String> getTopSentenceList(String document, int size, String sentence_separator)\n    {\n        List<String> sentenceList = splitSentence(document, sentence_separator);\n        List<List<String>> docs = convertSentenceListToDocument(sentenceList);\n        TextRankSentence textRank = new TextRankSentence(docs);\n        int[] topSentence = textRank.getTopSentence(size);\n        List<String> resultList = new LinkedList<String>();\n        for (int i : topSentence)\n        {\n            resultList.add(sentenceList.get(i));\n        }\n        return resultList;\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "getTopSentenceList", "(", "String", "document", ",", "int", "size", ",", "String", "sentence_separator", ")", "{", "List", "<", "String", ">", "sentenceList", "=", "splitSentence", "(", "document", ",", "sentence_separator", ")", ";", "List", "<", "List", "<", "String", ">", ">", "docs", "=", "convertSentenceListToDocument", "(", "sentenceList", ")", ";", "TextRankSentence", "textRank", "=", "new", "TextRankSentence", "(", "docs", ")", ";", "int", "[", "]", "topSentence", "=", "textRank", ".", "getTopSentence", "(", "size", ")", ";", "List", "<", "String", ">", "resultList", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "for", "(", "int", "i", ":", "topSentence", ")", "{", "resultList", ".", "add", "(", "sentenceList", ".", "get", "(", "i", ")", ")", ";", "}", "return", "resultList", ";", "}"], "docstring": "\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3\n\n@param document \u76ee\u6807\u6587\u6863\n@param size     \u9700\u8981\u7684\u5173\u952e\u53e5\u7684\u4e2a\u6570\n@param sentence_separator \u53e5\u5b50\u5206\u9694\u7b26\uff0c\u6b63\u5219\u683c\u5f0f\uff0c \u5982\uff1a[\u3002\uff1f?\uff01!\uff1b;]\n@return \u5173\u952e\u53e5\u5217\u8868", "docstring_tokens": ["\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L240-L252", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java", "func_name": "TextRankSentence.getSummary", "original_string": "public static String getSummary(String document, int max_length, String sentence_separator)\n    {\n        List<String> sentenceList = splitSentence(document, sentence_separator);\n\n        int sentence_count = sentenceList.size();\n        int document_length = document.length();\n        int sentence_length_avg = document_length / sentence_count;\n        int size = max_length / sentence_length_avg + 1;\n        List<List<String>> docs = convertSentenceListToDocument(sentenceList);\n        TextRankSentence textRank = new TextRankSentence(docs);\n        int[] topSentence = textRank.getTopSentence(size);\n        List<String> resultList = new LinkedList<String>();\n        for (int i : topSentence)\n        {\n            resultList.add(sentenceList.get(i));\n        }\n\n        resultList = permutation(resultList, sentenceList);\n        resultList = pick_sentences(resultList, max_length);\n        return TextUtility.join(\"\u3002\", resultList);\n    }", "language": "java", "code": "public static String getSummary(String document, int max_length, String sentence_separator)\n    {\n        List<String> sentenceList = splitSentence(document, sentence_separator);\n\n        int sentence_count = sentenceList.size();\n        int document_length = document.length();\n        int sentence_length_avg = document_length / sentence_count;\n        int size = max_length / sentence_length_avg + 1;\n        List<List<String>> docs = convertSentenceListToDocument(sentenceList);\n        TextRankSentence textRank = new TextRankSentence(docs);\n        int[] topSentence = textRank.getTopSentence(size);\n        List<String> resultList = new LinkedList<String>();\n        for (int i : topSentence)\n        {\n            resultList.add(sentenceList.get(i));\n        }\n\n        resultList = permutation(resultList, sentenceList);\n        resultList = pick_sentences(resultList, max_length);\n        return TextUtility.join(\"\u3002\", resultList);\n    }", "code_tokens": ["public", "static", "String", "getSummary", "(", "String", "document", ",", "int", "max_length", ",", "String", "sentence_separator", ")", "{", "List", "<", "String", ">", "sentenceList", "=", "splitSentence", "(", "document", ",", "sentence_separator", ")", ";", "int", "sentence_count", "=", "sentenceList", ".", "size", "(", ")", ";", "int", "document_length", "=", "document", ".", "length", "(", ")", ";", "int", "sentence_length_avg", "=", "document_length", "/", "sentence_count", ";", "int", "size", "=", "max_length", "/", "sentence_length_avg", "+", "1", ";", "List", "<", "List", "<", "String", ">", ">", "docs", "=", "convertSentenceListToDocument", "(", "sentenceList", ")", ";", "TextRankSentence", "textRank", "=", "new", "TextRankSentence", "(", "docs", ")", ";", "int", "[", "]", "topSentence", "=", "textRank", ".", "getTopSentence", "(", "size", ")", ";", "List", "<", "String", ">", "resultList", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "for", "(", "int", "i", ":", "topSentence", ")", "{", "resultList", ".", "add", "(", "sentenceList", ".", "get", "(", "i", ")", ")", ";", "}", "resultList", "=", "permutation", "(", "resultList", ",", "sentenceList", ")", ";", "resultList", "=", "pick_sentences", "(", "resultList", ",", "max_length", ")", ";", "return", "TextUtility", ".", "join", "(", "\"\u3002\", ", "r", "sultList);", "", "", "}"], "docstring": "\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3\n\n@param document   \u76ee\u6807\u6587\u6863\n@param max_length \u9700\u8981\u6458\u8981\u7684\u957f\u5ea6\n@param sentence_separator \u53e5\u5b50\u5206\u9694\u7b26\uff0c\u6b63\u5219\u683c\u5f0f\uff0c \u5982\uff1a[\u3002\uff1f?\uff01!\uff1b;]\n@return \u6458\u8981\u6587\u672c", "docstring_tokens": ["\u4e00\u53e5\u8bdd\u8c03\u7528\u63a5\u53e3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/TextRankSentence.java#L274-L294", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java", "func_name": "ByteArray.createByteArray", "original_string": "public static ByteArray createByteArray(String path)\n    {\n        byte[] bytes = IOUtil.readBytes(path);\n        if (bytes == null) return null;\n        return new ByteArray(bytes);\n    }", "language": "java", "code": "public static ByteArray createByteArray(String path)\n    {\n        byte[] bytes = IOUtil.readBytes(path);\n        if (bytes == null) return null;\n        return new ByteArray(bytes);\n    }", "code_tokens": ["public", "static", "ByteArray", "createByteArray", "(", "String", "path", ")", "{", "byte", "[", "]", "bytes", "=", "IOUtil", ".", "readBytes", "(", "path", ")", ";", "if", "(", "bytes", "==", "null", ")", "return", "null", ";", "return", "new", "ByteArray", "(", "bytes", ")", ";", "}"], "docstring": "\u4ece\u6587\u4ef6\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\n\n@param path\n@return", "docstring_tokens": ["\u4ece\u6587\u4ef6\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java#L45-L50", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java", "func_name": "ByteArray.nextString", "original_string": "public String nextString()\n    {\n        char[] buffer = new char[nextInt()];\n        for (int i = 0; i < buffer.length; ++i)\n        {\n            buffer[i] = nextChar();\n        }\n        return new String(buffer);\n    }", "language": "java", "code": "public String nextString()\n    {\n        char[] buffer = new char[nextInt()];\n        for (int i = 0; i < buffer.length; ++i)\n        {\n            buffer[i] = nextChar();\n        }\n        return new String(buffer);\n    }", "code_tokens": ["public", "String", "nextString", "(", ")", "{", "char", "[", "]", "buffer", "=", "new", "char", "[", "nextInt", "(", ")", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "buffer", ".", "length", ";", "++", "i", ")", "{", "buffer", "[", "i", "]", "=", "nextChar", "(", ")", ";", "}", "return", "new", "String", "(", "buffer", ")", ";", "}"], "docstring": "\u8bfb\u53d6\u4e00\u4e2aString\uff0c\u6ce8\u610f\u8fd9\u4e2aString\u662f\u53cc\u5b57\u8282\u7248\u7684\uff0c\u5728\u5b57\u7b26\u4e4b\u524d\u6709\u4e00\u4e2a\u6574\u578b\u8868\u793a\u957f\u5ea6\n\n@return", "docstring_tokens": ["\u8bfb\u53d6\u4e00\u4e2aString\uff0c\u6ce8\u610f\u8fd9\u4e2aString\u662f\u53cc\u5b57\u8282\u7248\u7684\uff0c\u5728\u5b57\u7b26\u4e4b\u524d\u6709\u4e00\u4e2a\u6574\u578b\u8868\u793a\u957f\u5ea6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java#L121-L129", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java", "func_name": "ByteArray.nextUTF", "original_string": "public String nextUTF()\n    {\n        int utflen = nextUnsignedShort();\n        byte[] bytearr = null;\n        char[] chararr = null;\n        bytearr = new byte[utflen];\n        chararr = new char[utflen];\n\n        int c, char2, char3;\n        int count = 0;\n        int chararr_count = 0;\n\n        for (int i = 0; i < utflen; ++i)\n        {\n            bytearr[i] = nextByte();\n        }\n\n        while (count < utflen)\n        {\n            c = (int) bytearr[count] & 0xff;\n            if (c > 127) break;\n            count++;\n            chararr[chararr_count++] = (char) c;\n        }\n\n        while (count < utflen)\n        {\n            c = (int) bytearr[count] & 0xff;\n            switch (c >> 4)\n            {\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    /* 0xxxxxxx*/\n                    count++;\n                    chararr[chararr_count++] = (char) c;\n                    break;\n                case 12:\n                case 13:\n                    /* 110x xxxx   10xx xxxx*/\n                    count += 2;\n                    if (count > utflen)\n                        logger.severe(\n                                \"malformed input: partial character at end\");\n                    char2 = (int) bytearr[count - 1];\n                    if ((char2 & 0xC0) != 0x80)\n                        logger.severe(\n                                \"malformed input around byte \" + count);\n                    chararr[chararr_count++] = (char) (((c & 0x1F) << 6) |\n                            (char2 & 0x3F));\n                    break;\n                case 14:\n                    /* 1110 xxxx  10xx xxxx  10xx xxxx */\n                    count += 3;\n                    if (count > utflen)\n                        logger.severe(\n                                \"malformed input: partial character at end\");\n                    char2 = (int) bytearr[count - 2];\n                    char3 = (int) bytearr[count - 1];\n                    if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80))\n                        logger.severe(\n                                \"malformed input around byte \" + (count - 1));\n                    chararr[chararr_count++] = (char) (((c & 0x0F) << 12) |\n                            ((char2 & 0x3F) << 6) |\n                            ((char3 & 0x3F) << 0));\n                    break;\n                default:\n                    /* 10xx xxxx,  1111 xxxx */\n                    logger.severe(\n                            \"malformed input around byte \" + count);\n            }\n        }\n        // The number of chars produced may be less than utflen\n        return new String(chararr, 0, chararr_count);\n    }", "language": "java", "code": "public String nextUTF()\n    {\n        int utflen = nextUnsignedShort();\n        byte[] bytearr = null;\n        char[] chararr = null;\n        bytearr = new byte[utflen];\n        chararr = new char[utflen];\n\n        int c, char2, char3;\n        int count = 0;\n        int chararr_count = 0;\n\n        for (int i = 0; i < utflen; ++i)\n        {\n            bytearr[i] = nextByte();\n        }\n\n        while (count < utflen)\n        {\n            c = (int) bytearr[count] & 0xff;\n            if (c > 127) break;\n            count++;\n            chararr[chararr_count++] = (char) c;\n        }\n\n        while (count < utflen)\n        {\n            c = (int) bytearr[count] & 0xff;\n            switch (c >> 4)\n            {\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    /* 0xxxxxxx*/\n                    count++;\n                    chararr[chararr_count++] = (char) c;\n                    break;\n                case 12:\n                case 13:\n                    /* 110x xxxx   10xx xxxx*/\n                    count += 2;\n                    if (count > utflen)\n                        logger.severe(\n                                \"malformed input: partial character at end\");\n                    char2 = (int) bytearr[count - 1];\n                    if ((char2 & 0xC0) != 0x80)\n                        logger.severe(\n                                \"malformed input around byte \" + count);\n                    chararr[chararr_count++] = (char) (((c & 0x1F) << 6) |\n                            (char2 & 0x3F));\n                    break;\n                case 14:\n                    /* 1110 xxxx  10xx xxxx  10xx xxxx */\n                    count += 3;\n                    if (count > utflen)\n                        logger.severe(\n                                \"malformed input: partial character at end\");\n                    char2 = (int) bytearr[count - 2];\n                    char3 = (int) bytearr[count - 1];\n                    if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80))\n                        logger.severe(\n                                \"malformed input around byte \" + (count - 1));\n                    chararr[chararr_count++] = (char) (((c & 0x0F) << 12) |\n                            ((char2 & 0x3F) << 6) |\n                            ((char3 & 0x3F) << 0));\n                    break;\n                default:\n                    /* 10xx xxxx,  1111 xxxx */\n                    logger.severe(\n                            \"malformed input around byte \" + count);\n            }\n        }\n        // The number of chars produced may be less than utflen\n        return new String(chararr, 0, chararr_count);\n    }", "code_tokens": ["public", "String", "nextUTF", "(", ")", "{", "int", "utflen", "=", "nextUnsignedShort", "(", ")", ";", "byte", "[", "]", "bytearr", "=", "null", ";", "char", "[", "]", "chararr", "=", "null", ";", "bytearr", "=", "new", "byte", "[", "utflen", "]", ";", "chararr", "=", "new", "char", "[", "utflen", "]", ";", "int", "c", ",", "char2", ",", "char3", ";", "int", "count", "=", "0", ";", "int", "chararr_count", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "utflen", ";", "++", "i", ")", "{", "bytearr", "[", "i", "]", "=", "nextByte", "(", ")", ";", "}", "while", "(", "count", "<", "utflen", ")", "{", "c", "=", "(", "int", ")", "bytearr", "[", "count", "]", "&", "0xff", ";", "if", "(", "c", ">", "127", ")", "break", ";", "count", "++", ";", "chararr", "[", "chararr_count", "++", "]", "=", "(", "char", ")", "c", ";", "}", "while", "(", "count", "<", "utflen", ")", "{", "c", "=", "(", "int", ")", "bytearr", "[", "count", "]", "&", "0xff", ";", "switch", "(", "c", ">>", "4", ")", "{", "case", "0", ":", "case", "1", ":", "case", "2", ":", "case", "3", ":", "case", "4", ":", "case", "5", ":", "case", "6", ":", "case", "7", ":", "/* 0xxxxxxx*/", "count", "++", ";", "chararr", "[", "chararr_count", "++", "]", "=", "(", "char", ")", "c", ";", "break", ";", "case", "12", ":", "case", "13", ":", "/* 110x xxxx   10xx xxxx*/", "count", "+=", "2", ";", "if", "(", "count", ">", "utflen", ")", "logger", ".", "severe", "(", "\"malformed input: partial character at end\"", ")", ";", "char2", "=", "(", "int", ")", "bytearr", "[", "count", "-", "1", "]", ";", "if", "(", "(", "char2", "&", "0xC0", ")", "!=", "0x80", ")", "logger", ".", "severe", "(", "\"malformed input around byte \"", "+", "count", ")", ";", "chararr", "[", "chararr_count", "++", "]", "=", "(", "char", ")", "(", "(", "(", "c", "&", "0x1F", ")", "<<", "6", ")", "|", "(", "char2", "&", "0x3F", ")", ")", ";", "break", ";", "case", "14", ":", "/* 1110 xxxx  10xx xxxx  10xx xxxx */", "count", "+=", "3", ";", "if", "(", "count", ">", "utflen", ")", "logger", ".", "severe", "(", "\"malformed input: partial character at end\"", ")", ";", "char2", "=", "(", "int", ")", "bytearr", "[", "count", "-", "2", "]", ";", "char3", "=", "(", "int", ")", "bytearr", "[", "count", "-", "1", "]", ";", "if", "(", "(", "(", "char2", "&", "0xC0", ")", "!=", "0x80", ")", "||", "(", "(", "char3", "&", "0xC0", ")", "!=", "0x80", ")", ")", "logger", ".", "severe", "(", "\"malformed input around byte \"", "+", "(", "count", "-", "1", ")", ")", ";", "chararr", "[", "chararr_count", "++", "]", "=", "(", "char", ")", "(", "(", "(", "c", "&", "0x0F", ")", "<<", "12", ")", "|", "(", "(", "char2", "&", "0x3F", ")", "<<", "6", ")", "|", "(", "(", "char3", "&", "0x3F", ")", "<<", "0", ")", ")", ";", "break", ";", "default", ":", "/* 10xx xxxx,  1111 xxxx */", "logger", ".", "severe", "(", "\"malformed input around byte \"", "+", "count", ")", ";", "}", "}", "// The number of chars produced may be less than utflen", "return", "new", "String", "(", "chararr", ",", "0", ",", "chararr_count", ")", ";", "}"], "docstring": "\u8bfb\u53d6\u4e00\u4e2aUTF\u5b57\u7b26\u4e32\n@return", "docstring_tokens": ["\u8bfb\u53d6\u4e00\u4e2aUTF\u5b57\u7b26\u4e32"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/ByteArray.java#L153-L232", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/accessories/CoNLLReader.java", "func_name": "CoNLLReader.createIndices", "original_string": "public static IndexMaps createIndices(String conllPath, boolean labeled, boolean lowercased, String clusterFile) throws IOException\n    {\n        HashMap<String, Integer> wordMap = new HashMap<String, Integer>();\n        HashMap<Integer, Integer> labels = new HashMap<Integer, Integer>();\n        HashMap<String, Integer> clusterMap = new HashMap<String, Integer>();\n        HashMap<Integer, Integer> cluster4Map = new HashMap<Integer, Integer>();\n        HashMap<Integer, Integer> cluster6Map = new HashMap<Integer, Integer>();\n\n        String rootString = \"ROOT\";\n\n        wordMap.put(\"ROOT\", 0);\n        labels.put(0, 0);\n\n        // \u6240\u6709label\u7684id\u5fc5\u987b\u4ece\u96f6\u5f00\u59cb\u5e76\u4e14\u8fde\u7eed\n        BufferedReader reader = new BufferedReader(new FileReader(conllPath));\n        String line;\n        while ((line = reader.readLine()) != null)\n        {\n            String[] args = line.trim().split(\"\\t\");\n            if (args.length > 7)\n            {\n                String label = args[7];\n                int head = Integer.parseInt(args[6]);\n                if (head == 0)\n                    rootString = label;\n\n                if (!labeled)\n                    label = \"~\";\n                else if (label.equals(\"_\"))\n                    label = \"-\";\n\n                if (!wordMap.containsKey(label))\n                {\n                    labels.put(wordMap.size(), labels.size());\n                    wordMap.put(label, wordMap.size());\n                }\n            }\n        }\n\n        reader = new BufferedReader(new FileReader(conllPath));\n        while ((line = reader.readLine()) != null)\n        {\n            String[] cells = line.trim().split(\"\\t\");\n            if (cells.length > 7)\n            {\n                String pos = cells[3];\n                if (!wordMap.containsKey(pos))\n                {\n                    wordMap.put(pos, wordMap.size());\n                }\n            }\n        }\n\n        if (clusterFile.length() > 0)\n        {\n            reader = new BufferedReader(new FileReader(clusterFile));\n            while ((line = reader.readLine()) != null)\n            {\n                String[] cells = line.trim().split(\"\\t\");\n                if (cells.length > 2)\n                {\n                    String cluster = cells[0];\n                    String word = cells[1];\n                    String prefix4 = cluster.substring(0, Math.min(4, cluster.length()));\n                    String prefix6 = cluster.substring(0, Math.min(6, cluster.length()));\n                    int clusterId = wordMap.size();\n\n                    if (!wordMap.containsKey(cluster))\n                    {\n                        clusterMap.put(word, wordMap.size());\n                        wordMap.put(cluster, wordMap.size());\n                    }\n                    else\n                    {\n                        clusterId = wordMap.get(cluster);\n                        clusterMap.put(word, clusterId);\n                    }\n\n                    int pref4Id = wordMap.size();\n                    if (!wordMap.containsKey(prefix4))\n                    {\n                        wordMap.put(prefix4, wordMap.size());\n                    }\n                    else\n                    {\n                        pref4Id = wordMap.get(prefix4);\n                    }\n\n                    int pref6Id = wordMap.size();\n                    if (!wordMap.containsKey(prefix6))\n                    {\n                        wordMap.put(prefix6, wordMap.size());\n                    }\n                    else\n                    {\n                        pref6Id = wordMap.get(prefix6);\n                    }\n\n                    cluster4Map.put(clusterId, pref4Id);\n                    cluster6Map.put(clusterId, pref6Id);\n                }\n            }\n        }\n\n        reader = new BufferedReader(new FileReader(conllPath));\n        while ((line = reader.readLine()) != null)\n        {\n            String[] cells = line.trim().split(\"\\t\");\n            if (cells.length > 7)\n            {\n                String word = cells[1];\n                if (lowercased)\n                    word = word.toLowerCase();\n                if (!wordMap.containsKey(word))\n                {\n                    wordMap.put(word, wordMap.size());\n                }\n            }\n        }\n\n        return new IndexMaps(wordMap, labels, rootString, cluster4Map, cluster6Map, clusterMap);\n    }", "language": "java", "code": "public static IndexMaps createIndices(String conllPath, boolean labeled, boolean lowercased, String clusterFile) throws IOException\n    {\n        HashMap<String, Integer> wordMap = new HashMap<String, Integer>();\n        HashMap<Integer, Integer> labels = new HashMap<Integer, Integer>();\n        HashMap<String, Integer> clusterMap = new HashMap<String, Integer>();\n        HashMap<Integer, Integer> cluster4Map = new HashMap<Integer, Integer>();\n        HashMap<Integer, Integer> cluster6Map = new HashMap<Integer, Integer>();\n\n        String rootString = \"ROOT\";\n\n        wordMap.put(\"ROOT\", 0);\n        labels.put(0, 0);\n\n        // \u6240\u6709label\u7684id\u5fc5\u987b\u4ece\u96f6\u5f00\u59cb\u5e76\u4e14\u8fde\u7eed\n        BufferedReader reader = new BufferedReader(new FileReader(conllPath));\n        String line;\n        while ((line = reader.readLine()) != null)\n        {\n            String[] args = line.trim().split(\"\\t\");\n            if (args.length > 7)\n            {\n                String label = args[7];\n                int head = Integer.parseInt(args[6]);\n                if (head == 0)\n                    rootString = label;\n\n                if (!labeled)\n                    label = \"~\";\n                else if (label.equals(\"_\"))\n                    label = \"-\";\n\n                if (!wordMap.containsKey(label))\n                {\n                    labels.put(wordMap.size(), labels.size());\n                    wordMap.put(label, wordMap.size());\n                }\n            }\n        }\n\n        reader = new BufferedReader(new FileReader(conllPath));\n        while ((line = reader.readLine()) != null)\n        {\n            String[] cells = line.trim().split(\"\\t\");\n            if (cells.length > 7)\n            {\n                String pos = cells[3];\n                if (!wordMap.containsKey(pos))\n                {\n                    wordMap.put(pos, wordMap.size());\n                }\n            }\n        }\n\n        if (clusterFile.length() > 0)\n        {\n            reader = new BufferedReader(new FileReader(clusterFile));\n            while ((line = reader.readLine()) != null)\n            {\n                String[] cells = line.trim().split(\"\\t\");\n                if (cells.length > 2)\n                {\n                    String cluster = cells[0];\n                    String word = cells[1];\n                    String prefix4 = cluster.substring(0, Math.min(4, cluster.length()));\n                    String prefix6 = cluster.substring(0, Math.min(6, cluster.length()));\n                    int clusterId = wordMap.size();\n\n                    if (!wordMap.containsKey(cluster))\n                    {\n                        clusterMap.put(word, wordMap.size());\n                        wordMap.put(cluster, wordMap.size());\n                    }\n                    else\n                    {\n                        clusterId = wordMap.get(cluster);\n                        clusterMap.put(word, clusterId);\n                    }\n\n                    int pref4Id = wordMap.size();\n                    if (!wordMap.containsKey(prefix4))\n                    {\n                        wordMap.put(prefix4, wordMap.size());\n                    }\n                    else\n                    {\n                        pref4Id = wordMap.get(prefix4);\n                    }\n\n                    int pref6Id = wordMap.size();\n                    if (!wordMap.containsKey(prefix6))\n                    {\n                        wordMap.put(prefix6, wordMap.size());\n                    }\n                    else\n                    {\n                        pref6Id = wordMap.get(prefix6);\n                    }\n\n                    cluster4Map.put(clusterId, pref4Id);\n                    cluster6Map.put(clusterId, pref6Id);\n                }\n            }\n        }\n\n        reader = new BufferedReader(new FileReader(conllPath));\n        while ((line = reader.readLine()) != null)\n        {\n            String[] cells = line.trim().split(\"\\t\");\n            if (cells.length > 7)\n            {\n                String word = cells[1];\n                if (lowercased)\n                    word = word.toLowerCase();\n                if (!wordMap.containsKey(word))\n                {\n                    wordMap.put(word, wordMap.size());\n                }\n            }\n        }\n\n        return new IndexMaps(wordMap, labels, rootString, cluster4Map, cluster6Map, clusterMap);\n    }", "code_tokens": ["public", "static", "IndexMaps", "createIndices", "(", "String", "conllPath", ",", "boolean", "labeled", ",", "boolean", "lowercased", ",", "String", "clusterFile", ")", "throws", "IOException", "{", "HashMap", "<", "String", ",", "Integer", ">", "wordMap", "=", "new", "HashMap", "<", "String", ",", "Integer", ">", "(", ")", ";", "HashMap", "<", "Integer", ",", "Integer", ">", "labels", "=", "new", "HashMap", "<", "Integer", ",", "Integer", ">", "(", ")", ";", "HashMap", "<", "String", ",", "Integer", ">", "clusterMap", "=", "new", "HashMap", "<", "String", ",", "Integer", ">", "(", ")", ";", "HashMap", "<", "Integer", ",", "Integer", ">", "cluster4Map", "=", "new", "HashMap", "<", "Integer", ",", "Integer", ">", "(", ")", ";", "HashMap", "<", "Integer", ",", "Integer", ">", "cluster6Map", "=", "new", "HashMap", "<", "Integer", ",", "Integer", ">", "(", ")", ";", "String", "rootString", "=", "\"ROOT\"", ";", "wordMap", ".", "put", "(", "\"ROOT\"", ",", "0", ")", ";", "labels", ".", "put", "(", "0", ",", "0", ")", ";", "// \u6240\u6709label\u7684id\u5fc5\u987b\u4ece\u96f6\u5f00\u59cb\u5e76\u4e14\u8fde\u7eed", "BufferedReader", "reader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "conllPath", ")", ")", ";", "String", "line", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "[", "]", "args", "=", "line", ".", "trim", "(", ")", ".", "split", "(", "\"\\t\"", ")", ";", "if", "(", "args", ".", "length", ">", "7", ")", "{", "String", "label", "=", "args", "[", "7", "]", ";", "int", "head", "=", "Integer", ".", "parseInt", "(", "args", "[", "6", "]", ")", ";", "if", "(", "head", "==", "0", ")", "rootString", "=", "label", ";", "if", "(", "!", "labeled", ")", "label", "=", "\"~\"", ";", "else", "if", "(", "label", ".", "equals", "(", "\"_\"", ")", ")", "label", "=", "\"-\"", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "label", ")", ")", "{", "labels", ".", "put", "(", "wordMap", ".", "size", "(", ")", ",", "labels", ".", "size", "(", ")", ")", ";", "wordMap", ".", "put", "(", "label", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "}", "}", "reader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "conllPath", ")", ")", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "[", "]", "cells", "=", "line", ".", "trim", "(", ")", ".", "split", "(", "\"\\t\"", ")", ";", "if", "(", "cells", ".", "length", ">", "7", ")", "{", "String", "pos", "=", "cells", "[", "3", "]", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "pos", ")", ")", "{", "wordMap", ".", "put", "(", "pos", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "}", "}", "if", "(", "clusterFile", ".", "length", "(", ")", ">", "0", ")", "{", "reader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "clusterFile", ")", ")", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "[", "]", "cells", "=", "line", ".", "trim", "(", ")", ".", "split", "(", "\"\\t\"", ")", ";", "if", "(", "cells", ".", "length", ">", "2", ")", "{", "String", "cluster", "=", "cells", "[", "0", "]", ";", "String", "word", "=", "cells", "[", "1", "]", ";", "String", "prefix4", "=", "cluster", ".", "substring", "(", "0", ",", "Math", ".", "min", "(", "4", ",", "cluster", ".", "length", "(", ")", ")", ")", ";", "String", "prefix6", "=", "cluster", ".", "substring", "(", "0", ",", "Math", ".", "min", "(", "6", ",", "cluster", ".", "length", "(", ")", ")", ")", ";", "int", "clusterId", "=", "wordMap", ".", "size", "(", ")", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "cluster", ")", ")", "{", "clusterMap", ".", "put", "(", "word", ",", "wordMap", ".", "size", "(", ")", ")", ";", "wordMap", ".", "put", "(", "cluster", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "else", "{", "clusterId", "=", "wordMap", ".", "get", "(", "cluster", ")", ";", "clusterMap", ".", "put", "(", "word", ",", "clusterId", ")", ";", "}", "int", "pref4Id", "=", "wordMap", ".", "size", "(", ")", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "prefix4", ")", ")", "{", "wordMap", ".", "put", "(", "prefix4", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "else", "{", "pref4Id", "=", "wordMap", ".", "get", "(", "prefix4", ")", ";", "}", "int", "pref6Id", "=", "wordMap", ".", "size", "(", ")", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "prefix6", ")", ")", "{", "wordMap", ".", "put", "(", "prefix6", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "else", "{", "pref6Id", "=", "wordMap", ".", "get", "(", "prefix6", ")", ";", "}", "cluster4Map", ".", "put", "(", "clusterId", ",", "pref4Id", ")", ";", "cluster6Map", ".", "put", "(", "clusterId", ",", "pref6Id", ")", ";", "}", "}", "}", "reader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "conllPath", ")", ")", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "[", "]", "cells", "=", "line", ".", "trim", "(", ")", ".", "split", "(", "\"\\t\"", ")", ";", "if", "(", "cells", ".", "length", ">", "7", ")", "{", "String", "word", "=", "cells", "[", "1", "]", ";", "if", "(", "lowercased", ")", "word", "=", "word", ".", "toLowerCase", "(", ")", ";", "if", "(", "!", "wordMap", ".", "containsKey", "(", "word", ")", ")", "{", "wordMap", ".", "put", "(", "word", ",", "wordMap", ".", "size", "(", ")", ")", ";", "}", "}", "}", "return", "new", "IndexMaps", "(", "wordMap", ",", "labels", ",", "rootString", ",", "cluster4Map", ",", "cluster6Map", ",", "clusterMap", ")", ";", "}"], "docstring": "\u8bfb\u53d6CoNLL\u6587\u4ef6\uff0c\u521b\u5efa\u7d22\u5f15\n\n@param conllPath\n@param labeled\n@param lowercased\n@param clusterFile\n@return\n@throws Exception", "docstring_tokens": ["\u8bfb\u53d6CoNLL\u6587\u4ef6\uff0c\u521b\u5efa\u7d22\u5f15"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/accessories/CoNLLReader.java#L48-L169", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/accessories/CoNLLReader.java", "func_name": "CoNLLReader.readData", "original_string": "public ArrayList<Instance> readData(int limit, boolean keepNonProjective, boolean labeled, boolean rootFirst, boolean lowerCased, IndexMaps maps) throws IOException\n    {\n        HashMap<String, Integer> wordMap = maps.getWordId();\n        ArrayList<Instance> instanceList = new ArrayList<Instance>();\n\n        String line;\n        ArrayList<Integer> tokens = new ArrayList<Integer>();\n        ArrayList<Integer> tags = new ArrayList<Integer>();\n        ArrayList<Integer> cluster4Ids = new ArrayList<Integer>();\n        ArrayList<Integer> cluster6Ids = new ArrayList<Integer>();\n        ArrayList<Integer> clusterIds = new ArrayList<Integer>();\n\n        HashMap<Integer, Edge> goldDependencies = new HashMap<Integer, Edge>();\n        int sentenceCounter = 0;\n        while ((line = fileReader.readLine()) != null)\n        {\n            line = line.trim();\n            if (line.length() == 0) // \u53e5\u5b50\u5206\u9694\u7a7a\u767d\u884c\n            {\n                if (tokens.size() > 0)\n                {\n                    sentenceCounter++;\n                    if (!rootFirst)\n                    {\n                        for (Edge edge : goldDependencies.values())\n                        {\n                            if (edge.headIndex == 0)\n                                edge.headIndex = tokens.size() + 1;\n                        }\n                        tokens.add(0);\n                        tags.add(0);\n                        cluster4Ids.add(0);\n                        cluster6Ids.add(0);\n                        clusterIds.add(0);\n                    }\n                    Sentence currentSentence = new Sentence(tokens, tags, cluster4Ids, cluster6Ids, clusterIds);\n                    Instance instance = new Instance(currentSentence, goldDependencies);\n                    if (keepNonProjective || !instance.isNonprojective())\n                        instanceList.add(instance);\n                    goldDependencies = new HashMap<Integer, Edge>();\n                    tokens = new ArrayList<Integer>();\n                    tags = new ArrayList<Integer>();\n                    cluster4Ids = new ArrayList<Integer>();\n                    cluster6Ids = new ArrayList<Integer>();\n                    clusterIds = new ArrayList<Integer>();\n                }\n                else\n                {\n                    goldDependencies = new HashMap<Integer, Edge>();\n                    tokens = new ArrayList<Integer>();\n                    tags = new ArrayList<Integer>();\n                    cluster4Ids = new ArrayList<Integer>();\n                    cluster6Ids = new ArrayList<Integer>();\n                    clusterIds = new ArrayList<Integer>();\n                }\n                if (sentenceCounter >= limit)\n                {\n                    System.out.println(\"buffer full...\" + instanceList.size());\n                    break;\n                }\n            }\n            else\n            {\n                String[] cells = line.split(\"\\t\");\n                if (cells.length < 8)\n                    throw new IllegalArgumentException(\"invalid conll format\");\n                int wordIndex = Integer.parseInt(cells[0]);\n                String word = cells[1].trim();\n                if (lowerCased)\n                    word = word.toLowerCase();\n                String pos = cells[3].trim();\n\n                int wi = getId(word, wordMap);\n                int pi = getId(pos, wordMap);\n\n                tags.add(pi);\n                tokens.add(wi);\n\n                int headIndex = Integer.parseInt(cells[6]);\n                String relation = cells[7];\n                if (!labeled)\n                    relation = \"~\";\n                else if (relation.equals(\"_\"))\n                    relation = \"-\";\n\n                if (headIndex == 0)\n                    relation = \"ROOT\";\n\n                int ri = getId(relation, wordMap);\n                if (headIndex == -1)\n                    ri = -1;\n\n                int[] ids = maps.clusterId(word);\n                clusterIds.add(ids[0]);\n                cluster4Ids.add(ids[1]);\n                cluster6Ids.add(ids[2]);\n\n                if (headIndex >= 0)\n                    goldDependencies.put(wordIndex, new Edge(headIndex, ri));\n            }\n        }\n        if (tokens.size() > 0)\n        {\n            if (!rootFirst)\n            {\n                for (int gold : goldDependencies.keySet())\n                {\n                    if (goldDependencies.get(gold).headIndex == 0)\n                        goldDependencies.get(gold).headIndex = goldDependencies.size() + 1;\n                }\n                tokens.add(0);\n                tags.add(0);\n                cluster4Ids.add(0);\n                cluster6Ids.add(0);\n                clusterIds.add(0);\n            }\n            sentenceCounter++;\n            Sentence currentSentence = new Sentence(tokens, tags, cluster4Ids, cluster6Ids, clusterIds);\n            instanceList.add(new Instance(currentSentence, goldDependencies));\n        }\n\n        return instanceList;\n    }", "language": "java", "code": "public ArrayList<Instance> readData(int limit, boolean keepNonProjective, boolean labeled, boolean rootFirst, boolean lowerCased, IndexMaps maps) throws IOException\n    {\n        HashMap<String, Integer> wordMap = maps.getWordId();\n        ArrayList<Instance> instanceList = new ArrayList<Instance>();\n\n        String line;\n        ArrayList<Integer> tokens = new ArrayList<Integer>();\n        ArrayList<Integer> tags = new ArrayList<Integer>();\n        ArrayList<Integer> cluster4Ids = new ArrayList<Integer>();\n        ArrayList<Integer> cluster6Ids = new ArrayList<Integer>();\n        ArrayList<Integer> clusterIds = new ArrayList<Integer>();\n\n        HashMap<Integer, Edge> goldDependencies = new HashMap<Integer, Edge>();\n        int sentenceCounter = 0;\n        while ((line = fileReader.readLine()) != null)\n        {\n            line = line.trim();\n            if (line.length() == 0) // \u53e5\u5b50\u5206\u9694\u7a7a\u767d\u884c\n            {\n                if (tokens.size() > 0)\n                {\n                    sentenceCounter++;\n                    if (!rootFirst)\n                    {\n                        for (Edge edge : goldDependencies.values())\n                        {\n                            if (edge.headIndex == 0)\n                                edge.headIndex = tokens.size() + 1;\n                        }\n                        tokens.add(0);\n                        tags.add(0);\n                        cluster4Ids.add(0);\n                        cluster6Ids.add(0);\n                        clusterIds.add(0);\n                    }\n                    Sentence currentSentence = new Sentence(tokens, tags, cluster4Ids, cluster6Ids, clusterIds);\n                    Instance instance = new Instance(currentSentence, goldDependencies);\n                    if (keepNonProjective || !instance.isNonprojective())\n                        instanceList.add(instance);\n                    goldDependencies = new HashMap<Integer, Edge>();\n                    tokens = new ArrayList<Integer>();\n                    tags = new ArrayList<Integer>();\n                    cluster4Ids = new ArrayList<Integer>();\n                    cluster6Ids = new ArrayList<Integer>();\n                    clusterIds = new ArrayList<Integer>();\n                }\n                else\n                {\n                    goldDependencies = new HashMap<Integer, Edge>();\n                    tokens = new ArrayList<Integer>();\n                    tags = new ArrayList<Integer>();\n                    cluster4Ids = new ArrayList<Integer>();\n                    cluster6Ids = new ArrayList<Integer>();\n                    clusterIds = new ArrayList<Integer>();\n                }\n                if (sentenceCounter >= limit)\n                {\n                    System.out.println(\"buffer full...\" + instanceList.size());\n                    break;\n                }\n            }\n            else\n            {\n                String[] cells = line.split(\"\\t\");\n                if (cells.length < 8)\n                    throw new IllegalArgumentException(\"invalid conll format\");\n                int wordIndex = Integer.parseInt(cells[0]);\n                String word = cells[1].trim();\n                if (lowerCased)\n                    word = word.toLowerCase();\n                String pos = cells[3].trim();\n\n                int wi = getId(word, wordMap);\n                int pi = getId(pos, wordMap);\n\n                tags.add(pi);\n                tokens.add(wi);\n\n                int headIndex = Integer.parseInt(cells[6]);\n                String relation = cells[7];\n                if (!labeled)\n                    relation = \"~\";\n                else if (relation.equals(\"_\"))\n                    relation = \"-\";\n\n                if (headIndex == 0)\n                    relation = \"ROOT\";\n\n                int ri = getId(relation, wordMap);\n                if (headIndex == -1)\n                    ri = -1;\n\n                int[] ids = maps.clusterId(word);\n                clusterIds.add(ids[0]);\n                cluster4Ids.add(ids[1]);\n                cluster6Ids.add(ids[2]);\n\n                if (headIndex >= 0)\n                    goldDependencies.put(wordIndex, new Edge(headIndex, ri));\n            }\n        }\n        if (tokens.size() > 0)\n        {\n            if (!rootFirst)\n            {\n                for (int gold : goldDependencies.keySet())\n                {\n                    if (goldDependencies.get(gold).headIndex == 0)\n                        goldDependencies.get(gold).headIndex = goldDependencies.size() + 1;\n                }\n                tokens.add(0);\n                tags.add(0);\n                cluster4Ids.add(0);\n                cluster6Ids.add(0);\n                clusterIds.add(0);\n            }\n            sentenceCounter++;\n            Sentence currentSentence = new Sentence(tokens, tags, cluster4Ids, cluster6Ids, clusterIds);\n            instanceList.add(new Instance(currentSentence, goldDependencies));\n        }\n\n        return instanceList;\n    }", "code_tokens": ["public", "ArrayList", "<", "Instance", ">", "readData", "(", "int", "limit", ",", "boolean", "keepNonProjective", ",", "boolean", "labeled", ",", "boolean", "rootFirst", ",", "boolean", "lowerCased", ",", "IndexMaps", "maps", ")", "throws", "IOException", "{", "HashMap", "<", "String", ",", "Integer", ">", "wordMap", "=", "maps", ".", "getWordId", "(", ")", ";", "ArrayList", "<", "Instance", ">", "instanceList", "=", "new", "ArrayList", "<", "Instance", ">", "(", ")", ";", "String", "line", ";", "ArrayList", "<", "Integer", ">", "tokens", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "tags", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "cluster4Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "cluster6Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "clusterIds", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "HashMap", "<", "Integer", ",", "Edge", ">", "goldDependencies", "=", "new", "HashMap", "<", "Integer", ",", "Edge", ">", "(", ")", ";", "int", "sentenceCounter", "=", "0", ";", "while", "(", "(", "line", "=", "fileReader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "line", "=", "line", ".", "trim", "(", ")", ";", "if", "(", "line", ".", "length", "(", ")", "==", "0", ")", "// \u53e5\u5b50\u5206\u9694\u7a7a\u767d\u884c", "{", "if", "(", "tokens", ".", "size", "(", ")", ">", "0", ")", "{", "sentenceCounter", "++", ";", "if", "(", "!", "rootFirst", ")", "{", "for", "(", "Edge", "edge", ":", "goldDependencies", ".", "values", "(", ")", ")", "{", "if", "(", "edge", ".", "headIndex", "==", "0", ")", "edge", ".", "headIndex", "=", "tokens", ".", "size", "(", ")", "+", "1", ";", "}", "tokens", ".", "add", "(", "0", ")", ";", "tags", ".", "add", "(", "0", ")", ";", "cluster4Ids", ".", "add", "(", "0", ")", ";", "cluster6Ids", ".", "add", "(", "0", ")", ";", "clusterIds", ".", "add", "(", "0", ")", ";", "}", "Sentence", "currentSentence", "=", "new", "Sentence", "(", "tokens", ",", "tags", ",", "cluster4Ids", ",", "cluster6Ids", ",", "clusterIds", ")", ";", "Instance", "instance", "=", "new", "Instance", "(", "currentSentence", ",", "goldDependencies", ")", ";", "if", "(", "keepNonProjective", "||", "!", "instance", ".", "isNonprojective", "(", ")", ")", "instanceList", ".", "add", "(", "instance", ")", ";", "goldDependencies", "=", "new", "HashMap", "<", "Integer", ",", "Edge", ">", "(", ")", ";", "tokens", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "tags", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "cluster4Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "cluster6Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "clusterIds", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "}", "else", "{", "goldDependencies", "=", "new", "HashMap", "<", "Integer", ",", "Edge", ">", "(", ")", ";", "tokens", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "tags", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "cluster4Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "cluster6Ids", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "clusterIds", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "}", "if", "(", "sentenceCounter", ">=", "limit", ")", "{", "System", ".", "out", ".", "println", "(", "\"buffer full...\"", "+", "instanceList", ".", "size", "(", ")", ")", ";", "break", ";", "}", "}", "else", "{", "String", "[", "]", "cells", "=", "line", ".", "split", "(", "\"\\t\"", ")", ";", "if", "(", "cells", ".", "length", "<", "8", ")", "throw", "new", "IllegalArgumentException", "(", "\"invalid conll format\"", ")", ";", "int", "wordIndex", "=", "Integer", ".", "parseInt", "(", "cells", "[", "0", "]", ")", ";", "String", "word", "=", "cells", "[", "1", "]", ".", "trim", "(", ")", ";", "if", "(", "lowerCased", ")", "word", "=", "word", ".", "toLowerCase", "(", ")", ";", "String", "pos", "=", "cells", "[", "3", "]", ".", "trim", "(", ")", ";", "int", "wi", "=", "getId", "(", "word", ",", "wordMap", ")", ";", "int", "pi", "=", "getId", "(", "pos", ",", "wordMap", ")", ";", "tags", ".", "add", "(", "pi", ")", ";", "tokens", ".", "add", "(", "wi", ")", ";", "int", "headIndex", "=", "Integer", ".", "parseInt", "(", "cells", "[", "6", "]", ")", ";", "String", "relation", "=", "cells", "[", "7", "]", ";", "if", "(", "!", "labeled", ")", "relation", "=", "\"~\"", ";", "else", "if", "(", "relation", ".", "equals", "(", "\"_\"", ")", ")", "relation", "=", "\"-\"", ";", "if", "(", "headIndex", "==", "0", ")", "relation", "=", "\"ROOT\"", ";", "int", "ri", "=", "getId", "(", "relation", ",", "wordMap", ")", ";", "if", "(", "headIndex", "==", "-", "1", ")", "ri", "=", "-", "1", ";", "int", "[", "]", "ids", "=", "maps", ".", "clusterId", "(", "word", ")", ";", "clusterIds", ".", "add", "(", "ids", "[", "0", "]", ")", ";", "cluster4Ids", ".", "add", "(", "ids", "[", "1", "]", ")", ";", "cluster6Ids", ".", "add", "(", "ids", "[", "2", "]", ")", ";", "if", "(", "headIndex", ">=", "0", ")", "goldDependencies", ".", "put", "(", "wordIndex", ",", "new", "Edge", "(", "headIndex", ",", "ri", ")", ")", ";", "}", "}", "if", "(", "tokens", ".", "size", "(", ")", ">", "0", ")", "{", "if", "(", "!", "rootFirst", ")", "{", "for", "(", "int", "gold", ":", "goldDependencies", ".", "keySet", "(", ")", ")", "{", "if", "(", "goldDependencies", ".", "get", "(", "gold", ")", ".", "headIndex", "==", "0", ")", "goldDependencies", ".", "get", "(", "gold", ")", ".", "headIndex", "=", "goldDependencies", ".", "size", "(", ")", "+", "1", ";", "}", "tokens", ".", "add", "(", "0", ")", ";", "tags", ".", "add", "(", "0", ")", ";", "cluster4Ids", ".", "add", "(", "0", ")", ";", "cluster6Ids", ".", "add", "(", "0", ")", ";", "clusterIds", ".", "add", "(", "0", ")", ";", "}", "sentenceCounter", "++", ";", "Sentence", "currentSentence", "=", "new", "Sentence", "(", "tokens", ",", "tags", ",", "cluster4Ids", ",", "cluster6Ids", ",", "clusterIds", ")", ";", "instanceList", ".", "add", "(", "new", "Instance", "(", "currentSentence", ",", "goldDependencies", ")", ")", ";", "}", "return", "instanceList", ";", "}"], "docstring": "\u8bfb\u53d6\u53e5\u5b50\n\n@param limit             \u6700\u5927\u591a\u5c11\u53e5\n@param keepNonProjective \u4fdd\u7559\u975e\u6295\u5f71\n@param labeled\n@param rootFirst         \u662f\u5426\u628aroot\u653e\u5230\u6700\u524d\u9762\n@param lowerCased\n@param maps              feature id map\n@return\n@throws Exception", "docstring_tokens": ["\u8bfb\u53d6\u53e5\u5b50"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/accessories/CoNLLReader.java#L183-L305", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/common/Graph.java", "func_name": "Graph.connect", "original_string": "public void connect(int from, int to, double weight)\n    {\n        edgesTo[to].add(new EdgeFrom(from, weight, vertexes[from].word + '@' + vertexes[to].word));\n    }", "language": "java", "code": "public void connect(int from, int to, double weight)\n    {\n        edgesTo[to].add(new EdgeFrom(from, weight, vertexes[from].word + '@' + vertexes[to].word));\n    }", "code_tokens": ["public", "void", "connect", "(", "int", "from", ",", "int", "to", ",", "double", "weight", ")", "{", "edgesTo", "[", "to", "]", ".", "add", "(", "new", "EdgeFrom", "(", "from", ",", "weight", ",", "vertexes", "[", "from", "]", ".", "word", "+", "'", "'", "+", "vertexes", "[", "to", "]", ".", "word", ")", ")", ";", "}"], "docstring": "\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9\n@param from \u8d77\u70b9\n@param to \u7ec8\u70b9\n@param weight \u82b1\u8d39", "docstring_tokens": ["\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/common/Graph.java#L54-L57", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/common/Graph.java", "func_name": "Graph.parsePath", "original_string": "public List<Vertex> parsePath(int[] path)\n    {\n        List<Vertex> vertexList = new LinkedList<Vertex>();\n        for (int i : path)\n        {\n            vertexList.add(vertexes[i]);\n        }\n\n        return vertexList;\n    }", "language": "java", "code": "public List<Vertex> parsePath(int[] path)\n    {\n        List<Vertex> vertexList = new LinkedList<Vertex>();\n        for (int i : path)\n        {\n            vertexList.add(vertexes[i]);\n        }\n\n        return vertexList;\n    }", "code_tokens": ["public", "List", "<", "Vertex", ">", "parsePath", "(", "int", "[", "]", "path", ")", "{", "List", "<", "Vertex", ">", "vertexList", "=", "new", "LinkedList", "<", "Vertex", ">", "(", ")", ";", "for", "(", "int", "i", ":", "path", ")", "{", "vertexList", ".", "add", "(", "vertexes", "[", "i", "]", ")", ";", "}", "return", "vertexList", ";", "}"], "docstring": "\u6839\u636e\u8282\u70b9\u4e0b\u6807\u6570\u7ec4\u89e3\u91ca\u51fa\u5bf9\u5e94\u7684\u8def\u5f84\n@param path\n@return", "docstring_tokens": ["\u6839\u636e\u8282\u70b9\u4e0b\u6807\u6570\u7ec4\u89e3\u91ca\u51fa\u5bf9\u5e94\u7684\u8def\u5f84"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/common/Graph.java#L100-L109", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/common/Graph.java", "func_name": "Graph.parseResult", "original_string": "public static String parseResult(List<Vertex> path)\n    {\n        if (path.size() < 2)\n        {\n            throw new RuntimeException(\"\u8def\u5f84\u8282\u70b9\u6570\u5c0f\u4e8e2:\" + path);\n        }\n        StringBuffer sb = new StringBuffer();\n\n        for (int i = 1; i < path.size() - 1; ++i)\n        {\n            Vertex v = path.get(i);\n            sb.append(v.getRealWord() + \" \");\n        }\n\n        return sb.toString();\n    }", "language": "java", "code": "public static String parseResult(List<Vertex> path)\n    {\n        if (path.size() < 2)\n        {\n            throw new RuntimeException(\"\u8def\u5f84\u8282\u70b9\u6570\u5c0f\u4e8e2:\" + path);\n        }\n        StringBuffer sb = new StringBuffer();\n\n        for (int i = 1; i < path.size() - 1; ++i)\n        {\n            Vertex v = path.get(i);\n            sb.append(v.getRealWord() + \" \");\n        }\n\n        return sb.toString();\n    }", "code_tokens": ["public", "static", "String", "parseResult", "(", "List", "<", "Vertex", ">", "path", ")", "{", "if", "(", "path", ".", "size", "(", ")", "<", "2", ")", "{", "throw", "new", "RuntimeException", "(", "\"\u8def\u5f84\u8282\u70b9\u6570\u5c0f\u4e8e2:\" + path);", "", "", "", "", "}", "StringBuffer", "sb", "=", "new", "StringBuffer", "(", ")", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "path", ".", "size", "(", ")", "-", "1", ";", "++", "i", ")", "{", "Vertex", "v", "=", "path", ".", "get", "(", "i", ")", ";", "sb", ".", "append", "(", "v", ".", "getRealWord", "(", ")", "+", "\" \"", ")", ";", "}", "return", "sb", ".", "toString", "(", ")", ";", "}"], "docstring": "\u4ece\u4e00\u4e2a\u8def\u5f84\u4e2d\u8f6c\u6362\u51fa\u7a7a\u683c\u9694\u5f00\u7684\u7ed3\u679c\n@param path\n@return", "docstring_tokens": ["\u4ece\u4e00\u4e2a\u8def\u5f84\u4e2d\u8f6c\u6362\u51fa\u7a7a\u683c\u9694\u5f00\u7684\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/common/Graph.java#L116-L131", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/CommonDictionaryMaker.java", "func_name": "CommonDictionaryMaker.learn", "original_string": "public void learn(List<Sentence> sentenceList)\n    {\n        List<List<IWord>> s = new ArrayList<List<IWord>>(sentenceList.size());\n        for (Sentence sentence : sentenceList)\n        {\n            s.add(sentence.wordList);\n        }\n        compute(s);\n    }", "language": "java", "code": "public void learn(List<Sentence> sentenceList)\n    {\n        List<List<IWord>> s = new ArrayList<List<IWord>>(sentenceList.size());\n        for (Sentence sentence : sentenceList)\n        {\n            s.add(sentence.wordList);\n        }\n        compute(s);\n    }", "code_tokens": ["public", "void", "learn", "(", "List", "<", "Sentence", ">", "sentenceList", ")", "{", "List", "<", "List", "<", "IWord", ">>", "s", "=", "new", "ArrayList", "<", "List", "<", "IWord", ">", ">", "(", "sentenceList", ".", "size", "(", ")", ")", ";", "for", "(", "Sentence", "sentence", ":", "sentenceList", ")", "{", "s", ".", "add", "(", "sentence", ".", "wordList", ")", ";", "}", "compute", "(", "s", ")", ";", "}"], "docstring": "\u540ccompute\n@param sentenceList", "docstring_tokens": ["\u540ccompute"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/CommonDictionaryMaker.java#L77-L85", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/CommonDictionaryMaker.java", "func_name": "CommonDictionaryMaker.train", "original_string": "public void train(String corpus)\n    {\n        CorpusLoader.walk(corpus, new CorpusLoader.Handler()\n        {\n            @Override\n            public void handle(Document document)\n            {\n                List<List<Word>> simpleSentenceList = document.getSimpleSentenceList();\n                List<List<IWord>> compatibleList = new LinkedList<List<IWord>>();\n                for (List<Word> wordList : simpleSentenceList)\n                {\n                    compatibleList.add(new LinkedList<IWord>(wordList));\n                }\n                CommonDictionaryMaker.this.compute(compatibleList);\n            }\n        });\n    }", "language": "java", "code": "public void train(String corpus)\n    {\n        CorpusLoader.walk(corpus, new CorpusLoader.Handler()\n        {\n            @Override\n            public void handle(Document document)\n            {\n                List<List<Word>> simpleSentenceList = document.getSimpleSentenceList();\n                List<List<IWord>> compatibleList = new LinkedList<List<IWord>>();\n                for (List<Word> wordList : simpleSentenceList)\n                {\n                    compatibleList.add(new LinkedList<IWord>(wordList));\n                }\n                CommonDictionaryMaker.this.compute(compatibleList);\n            }\n        });\n    }", "code_tokens": ["public", "void", "train", "(", "String", "corpus", ")", "{", "CorpusLoader", ".", "walk", "(", "corpus", ",", "new", "CorpusLoader", ".", "Handler", "(", ")", "{", "@", "Override", "public", "void", "handle", "(", "Document", "document", ")", "{", "List", "<", "List", "<", "Word", ">>", "simpleSentenceList", "=", "document", ".", "getSimpleSentenceList", "(", ")", ";", "List", "<", "List", "<", "IWord", ">", ">", "compatibleList", "=", "new", "LinkedList", "<", "List", "<", "IWord", ">", ">", "(", ")", ";", "for", "(", "List", "<", "Word", ">", "wordList", ":", "simpleSentenceList", ")", "{", "compatibleList", ".", "add", "(", "new", "LinkedList", "<", "IWord", ">", "(", "wordList", ")", ")", ";", "}", "CommonDictionaryMaker", ".", "this", ".", "compute", "(", "compatibleList", ")", ";", "}", "}", ")", ";", "}"], "docstring": "\u8bad\u7ec3\n@param corpus \u8bed\u6599\u5e93\u8def\u5f84", "docstring_tokens": ["\u8bad\u7ec3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/CommonDictionaryMaker.java#L100-L116", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java", "func_name": "BitVector.set", "original_string": "void set(int id, boolean bit)\n    {\n        if (bit)\n        {\n            _units.set(id / UNIT_SIZE, _units.get(id / UNIT_SIZE)\n                    | 1 << (id % UNIT_SIZE));\n        }\n    }", "language": "java", "code": "void set(int id, boolean bit)\n    {\n        if (bit)\n        {\n            _units.set(id / UNIT_SIZE, _units.get(id / UNIT_SIZE)\n                    | 1 << (id % UNIT_SIZE));\n        }\n    }", "code_tokens": ["void", "set", "(", "int", "id", ",", "boolean", "bit", ")", "{", "if", "(", "bit", ")", "{", "_units", ".", "set", "(", "id", "/", "UNIT_SIZE", ",", "_units", ".", "get", "(", "id", "/", "UNIT_SIZE", ")", "|", "1", "<<", "(", "id", "%", "UNIT_SIZE", ")", ")", ";", "}", "}"], "docstring": "\u8bbe\u7f6e\u67d0\u4e00\u4f4d\u7684\u6bd4\u7279\n@param id \u4f4d\n@param bit \u6bd4\u7279", "docstring_tokens": ["\u8bbe\u7f6e\u67d0\u4e00\u4f4d\u7684\u6bd4\u7279"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java#L28-L35", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java", "func_name": "BitVector.build", "original_string": "void build()\n    {\n        _ranks = new int[_units.size()];\n\n        _numOnes = 0;\n        for (int i = 0; i < _units.size(); ++i)\n        {\n            _ranks[i] = _numOnes;\n            _numOnes += popCount(_units.get(i));\n        }\n    }", "language": "java", "code": "void build()\n    {\n        _ranks = new int[_units.size()];\n\n        _numOnes = 0;\n        for (int i = 0; i < _units.size(); ++i)\n        {\n            _ranks[i] = _numOnes;\n            _numOnes += popCount(_units.get(i));\n        }\n    }", "code_tokens": ["void", "build", "(", ")", "{", "_ranks", "=", "new", "int", "[", "_units", ".", "size", "(", ")", "]", ";", "_numOnes", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "_units", ".", "size", "(", ")", ";", "++", "i", ")", "{", "_ranks", "[", "i", "]", "=", "_numOnes", ";", "_numOnes", "+=", "popCount", "(", "_units", ".", "get", "(", "i", ")", ")", ";", "}", "}"], "docstring": "\u6784\u5efa", "docstring_tokens": ["\u6784\u5efa"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java#L91-L101", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java", "func_name": "BitVector.popCount", "original_string": "private static int popCount(int unit)\n    {\n        unit = ((unit & 0xAAAAAAAA) >>> 1) + (unit & 0x55555555);\n        unit = ((unit & 0xCCCCCCCC) >>> 2) + (unit & 0x33333333);\n        unit = ((unit >>> 4) + unit) & 0x0F0F0F0F;\n        unit += unit >>> 8;\n        unit += unit >>> 16;\n        return unit & 0xFF;\n    }", "language": "java", "code": "private static int popCount(int unit)\n    {\n        unit = ((unit & 0xAAAAAAAA) >>> 1) + (unit & 0x55555555);\n        unit = ((unit & 0xCCCCCCCC) >>> 2) + (unit & 0x33333333);\n        unit = ((unit >>> 4) + unit) & 0x0F0F0F0F;\n        unit += unit >>> 8;\n        unit += unit >>> 16;\n        return unit & 0xFF;\n    }", "code_tokens": ["private", "static", "int", "popCount", "(", "int", "unit", ")", "{", "unit", "=", "(", "(", "unit", "&", "0xAAAAAAAA", ")", ">>>", "1", ")", "+", "(", "unit", "&", "0x55555555", ")", ";", "unit", "=", "(", "(", "unit", "&", "0xCCCCCCCC", ")", ">>>", "2", ")", "+", "(", "unit", "&", "0x33333333", ")", ";", "unit", "=", "(", "(", "unit", ">>>", "4", ")", "+", "unit", ")", "&", "0x0F0F0F0F", ";", "unit", "+=", "unit", ">>>", "8", ";", "unit", "+=", "unit", ">>>", "16", ";", "return", "unit", "&", "0xFF", ";", "}"], "docstring": "1\u7684\u6570\u91cf\n@param unit\n@return", "docstring_tokens": ["1\u7684\u6570\u91cf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/BitVector.java#L122-L130", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/IndexMaps.java", "func_name": "IndexMaps.makeSentence", "original_string": "public Sentence makeSentence(String[] words, String[] posTags, boolean rootFirst, boolean lowerCased)\n    {\n        ArrayList<Integer> tokens = new ArrayList<Integer>();\n        ArrayList<Integer> tags = new ArrayList<Integer>();\n        ArrayList<Integer> bc4 = new ArrayList<Integer>();\n        ArrayList<Integer> bc6 = new ArrayList<Integer>();\n        ArrayList<Integer> bcf = new ArrayList<Integer>();\n\n        int i = 0;\n        for (String word : words)\n        {\n            if (word.length() == 0)\n                continue;\n            String lowerCaseWord = word.toLowerCase();\n            if (lowerCased)\n                word = lowerCaseWord;\n\n            int[] clusterIDs = clusterId(word);\n            bcf.add(clusterIDs[0]);\n            bc4.add(clusterIDs[1]);\n            bc6.add(clusterIDs[2]);\n\n            String pos = posTags[i];\n\n            int wi = -1;\n            if (wordId.containsKey(word))\n                wi = wordId.get(word);\n\n            int pi = -1;\n            if (wordId.containsKey(pos))\n                pi = wordId.get(pos);\n\n            tokens.add(wi);\n            tags.add(pi);\n\n            i++;\n        }\n\n        if (!rootFirst)\n        {\n            tokens.add(0);\n            tags.add(0);\n            bcf.add(0);\n            bc6.add(0);\n            bc4.add(0);\n        }\n\n        return new Sentence(tokens, tags, bc4, bc6, bcf);\n    }", "language": "java", "code": "public Sentence makeSentence(String[] words, String[] posTags, boolean rootFirst, boolean lowerCased)\n    {\n        ArrayList<Integer> tokens = new ArrayList<Integer>();\n        ArrayList<Integer> tags = new ArrayList<Integer>();\n        ArrayList<Integer> bc4 = new ArrayList<Integer>();\n        ArrayList<Integer> bc6 = new ArrayList<Integer>();\n        ArrayList<Integer> bcf = new ArrayList<Integer>();\n\n        int i = 0;\n        for (String word : words)\n        {\n            if (word.length() == 0)\n                continue;\n            String lowerCaseWord = word.toLowerCase();\n            if (lowerCased)\n                word = lowerCaseWord;\n\n            int[] clusterIDs = clusterId(word);\n            bcf.add(clusterIDs[0]);\n            bc4.add(clusterIDs[1]);\n            bc6.add(clusterIDs[2]);\n\n            String pos = posTags[i];\n\n            int wi = -1;\n            if (wordId.containsKey(word))\n                wi = wordId.get(word);\n\n            int pi = -1;\n            if (wordId.containsKey(pos))\n                pi = wordId.get(pos);\n\n            tokens.add(wi);\n            tags.add(pi);\n\n            i++;\n        }\n\n        if (!rootFirst)\n        {\n            tokens.add(0);\n            tags.add(0);\n            bcf.add(0);\n            bc6.add(0);\n            bc4.add(0);\n        }\n\n        return new Sentence(tokens, tags, bc4, bc6, bcf);\n    }", "code_tokens": ["public", "Sentence", "makeSentence", "(", "String", "[", "]", "words", ",", "String", "[", "]", "posTags", ",", "boolean", "rootFirst", ",", "boolean", "lowerCased", ")", "{", "ArrayList", "<", "Integer", ">", "tokens", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "tags", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "bc4", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "bc6", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "ArrayList", "<", "Integer", ">", "bcf", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "int", "i", "=", "0", ";", "for", "(", "String", "word", ":", "words", ")", "{", "if", "(", "word", ".", "length", "(", ")", "==", "0", ")", "continue", ";", "String", "lowerCaseWord", "=", "word", ".", "toLowerCase", "(", ")", ";", "if", "(", "lowerCased", ")", "word", "=", "lowerCaseWord", ";", "int", "[", "]", "clusterIDs", "=", "clusterId", "(", "word", ")", ";", "bcf", ".", "add", "(", "clusterIDs", "[", "0", "]", ")", ";", "bc4", ".", "add", "(", "clusterIDs", "[", "1", "]", ")", ";", "bc6", ".", "add", "(", "clusterIDs", "[", "2", "]", ")", ";", "String", "pos", "=", "posTags", "[", "i", "]", ";", "int", "wi", "=", "-", "1", ";", "if", "(", "wordId", ".", "containsKey", "(", "word", ")", ")", "wi", "=", "wordId", ".", "get", "(", "word", ")", ";", "int", "pi", "=", "-", "1", ";", "if", "(", "wordId", ".", "containsKey", "(", "pos", ")", ")", "pi", "=", "wordId", ".", "get", "(", "pos", ")", ";", "tokens", ".", "add", "(", "wi", ")", ";", "tags", ".", "add", "(", "pi", ")", ";", "i", "++", ";", "}", "if", "(", "!", "rootFirst", ")", "{", "tokens", ".", "add", "(", "0", ")", ";", "tags", ".", "add", "(", "0", ")", ";", "bcf", ".", "add", "(", "0", ")", ";", "bc6", ".", "add", "(", "0", ")", ";", "bc4", ".", "add", "(", "0", ")", ";", "}", "return", "new", "Sentence", "(", "tokens", ",", "tags", ",", "bc4", ",", "bc6", ",", "bcf", ")", ";", "}"], "docstring": "\u5c06\u53e5\u5b50\u4e2d\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aid\n\n@param words\n@param posTags\n@param rootFirst\n@param lowerCased\n@return", "docstring_tokens": ["\u5c06\u53e5\u5b50\u4e2d\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aid"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/IndexMaps.java#L72-L120", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/IndexMaps.java", "func_name": "IndexMaps.clusterId", "original_string": "public int[] clusterId(String word)\n    {\n        int[] ids = new int[3];\n        ids[0] = -100;\n        ids[1] = -100;\n        ids[2] = -100;\n        if (brownFullClusters.containsKey(word))\n            ids[0] = brownFullClusters.get(word);\n\n        if (ids[0] > 0)\n        {\n            ids[1] = brown4Clusters.get(ids[0]);\n            ids[2] = brown6Clusters.get(ids[0]);\n        }\n        return ids;\n    }", "language": "java", "code": "public int[] clusterId(String word)\n    {\n        int[] ids = new int[3];\n        ids[0] = -100;\n        ids[1] = -100;\n        ids[2] = -100;\n        if (brownFullClusters.containsKey(word))\n            ids[0] = brownFullClusters.get(word);\n\n        if (ids[0] > 0)\n        {\n            ids[1] = brown4Clusters.get(ids[0]);\n            ids[2] = brown6Clusters.get(ids[0]);\n        }\n        return ids;\n    }", "code_tokens": ["public", "int", "[", "]", "clusterId", "(", "String", "word", ")", "{", "int", "[", "]", "ids", "=", "new", "int", "[", "3", "]", ";", "ids", "[", "0", "]", "=", "-", "100", ";", "ids", "[", "1", "]", "=", "-", "100", ";", "ids", "[", "2", "]", "=", "-", "100", ";", "if", "(", "brownFullClusters", ".", "containsKey", "(", "word", ")", ")", "ids", "[", "0", "]", "=", "brownFullClusters", ".", "get", "(", "word", ")", ";", "if", "(", "ids", "[", "0", "]", ">", "0", ")", "{", "ids", "[", "1", "]", "=", "brown4Clusters", ".", "get", "(", "ids", "[", "0", "]", ")", ";", "ids", "[", "2", "]", "=", "brown6Clusters", ".", "get", "(", "ids", "[", "0", "]", ")", ";", "}", "return", "ids", ";", "}"], "docstring": "\u83b7\u53d6\u805a\u7c7bid\n\n@param word\n@return", "docstring_tokens": ["\u83b7\u53d6\u805a\u7c7bid"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/IndexMaps.java#L143-L158", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.segment", "original_string": "protected void segment(final String sentence, final String normalized, final List<String> wordList, final List<CoreDictionary.Attribute> attributeList)\n    {\n        if (attributeList != null)\n        {\n            final int[] offset = new int[]{0};\n            CustomDictionary.parseLongestText(sentence, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n            {\n                @Override\n                public void hit(int begin, int end, CoreDictionary.Attribute value)\n                {\n                    if (begin != offset[0])\n                    {\n                        segmentAfterRule(sentence.substring(offset[0], begin), normalized.substring(offset[0], begin), wordList);\n                    }\n                    while (attributeList.size() < wordList.size())\n                        attributeList.add(null);\n                    wordList.add(sentence.substring(begin, end));\n                    attributeList.add(value);\n                    assert wordList.size() == attributeList.size() : \"\u8bcd\u8bed\u5217\u8868\u4e0e\u5c5e\u6027\u5217\u8868\u4e0d\u7b49\u957f\";\n                    offset[0] = end;\n                }\n            });\n            if (offset[0] != sentence.length())\n            {\n                segmentAfterRule(sentence.substring(offset[0]), normalized.substring(offset[0]), wordList);\n            }\n        }\n        else\n        {\n            segmentAfterRule(sentence, normalized, wordList);\n        }\n    }", "language": "java", "code": "protected void segment(final String sentence, final String normalized, final List<String> wordList, final List<CoreDictionary.Attribute> attributeList)\n    {\n        if (attributeList != null)\n        {\n            final int[] offset = new int[]{0};\n            CustomDictionary.parseLongestText(sentence, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n            {\n                @Override\n                public void hit(int begin, int end, CoreDictionary.Attribute value)\n                {\n                    if (begin != offset[0])\n                    {\n                        segmentAfterRule(sentence.substring(offset[0], begin), normalized.substring(offset[0], begin), wordList);\n                    }\n                    while (attributeList.size() < wordList.size())\n                        attributeList.add(null);\n                    wordList.add(sentence.substring(begin, end));\n                    attributeList.add(value);\n                    assert wordList.size() == attributeList.size() : \"\u8bcd\u8bed\u5217\u8868\u4e0e\u5c5e\u6027\u5217\u8868\u4e0d\u7b49\u957f\";\n                    offset[0] = end;\n                }\n            });\n            if (offset[0] != sentence.length())\n            {\n                segmentAfterRule(sentence.substring(offset[0]), normalized.substring(offset[0]), wordList);\n            }\n        }\n        else\n        {\n            segmentAfterRule(sentence, normalized, wordList);\n        }\n    }", "code_tokens": ["protected", "void", "segment", "(", "final", "String", "sentence", ",", "final", "String", "normalized", ",", "final", "List", "<", "String", ">", "wordList", ",", "final", "List", "<", "CoreDictionary", ".", "Attribute", ">", "attributeList", ")", "{", "if", "(", "attributeList", "!=", "null", ")", "{", "final", "int", "[", "]", "offset", "=", "new", "int", "[", "]", "{", "0", "}", ";", "CustomDictionary", ".", "parseLongestText", "(", "sentence", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "if", "(", "begin", "!=", "offset", "[", "0", "]", ")", "{", "segmentAfterRule", "(", "sentence", ".", "substring", "(", "offset", "[", "0", "]", ",", "begin", ")", ",", "normalized", ".", "substring", "(", "offset", "[", "0", "]", ",", "begin", ")", ",", "wordList", ")", ";", "}", "while", "(", "attributeList", ".", "size", "(", ")", "<", "wordList", ".", "size", "(", ")", ")", "attributeList", ".", "add", "(", "null", ")", ";", "wordList", ".", "add", "(", "sentence", ".", "substring", "(", "begin", ",", "end", ")", ")", ";", "attributeList", ".", "add", "(", "value", ")", ";", "assert", "wordList", ".", "size", "(", ")", "==", "attributeList", ".", "size", "(", ")", ":", "\"\u8bcd\u8bed\u5217\u8868\u4e0e\u5c5e\u6027\u5217\u8868\u4e0d\u7b49\u957f\";", "", "offset", "[", "0", "]", "=", "end", ";", "}", "}", ")", ";", "if", "(", "offset", "[", "0", "]", "!=", "sentence", ".", "length", "(", ")", ")", "{", "segmentAfterRule", "(", "sentence", ".", "substring", "(", "offset", "[", "0", "]", ")", ",", "normalized", ".", "substring", "(", "offset", "[", "0", "]", ")", ",", "wordList", ")", ";", "}", "}", "else", "{", "segmentAfterRule", "(", "sentence", ",", "normalized", ",", "wordList", ")", ";", "}", "}"], "docstring": "\u5206\u8bcd\n\n@param sentence      \u6587\u672c\n@param normalized    \u6b63\u89c4\u5316\u540e\u7684\u6587\u672c\n@param wordList      \u50a8\u5b58\u5355\u8bcd\u5217\u8868\n@param attributeList \u50a8\u5b58\u7528\u6237\u8bcd\u5178\u4e2d\u7684\u8bcd\u6027\uff0c\u8bbe\u4e3anull\u8868\u793a\u4e0d\u67e5\u8be2\u7528\u6237\u8bcd\u5178", "docstring_tokens": ["\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L109-L140", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.segment", "original_string": "public List<String> segment(String sentence)\n    {\n        return segment(sentence, CharTable.convert(sentence));\n    }", "language": "java", "code": "public List<String> segment(String sentence)\n    {\n        return segment(sentence, CharTable.convert(sentence));\n    }", "code_tokens": ["public", "List", "<", "String", ">", "segment", "(", "String", "sentence", ")", "{", "return", "segment", "(", "sentence", ",", "CharTable", ".", "convert", "(", "sentence", ")", ")", ";", "}"], "docstring": "\u4e2d\u6587\u5206\u8bcd\n\n@param sentence\n@return", "docstring_tokens": ["\u4e2d\u6587\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L178-L181", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.segment", "original_string": "public List<String> segment(final String sentence, final String normalized)\n    {\n        final List<String> wordList = new LinkedList<String>();\n        segment(sentence, normalized, wordList);\n        return wordList;\n    }", "language": "java", "code": "public List<String> segment(final String sentence, final String normalized)\n    {\n        final List<String> wordList = new LinkedList<String>();\n        segment(sentence, normalized, wordList);\n        return wordList;\n    }", "code_tokens": ["public", "List", "<", "String", ">", "segment", "(", "final", "String", "sentence", ",", "final", "String", "normalized", ")", "{", "final", "List", "<", "String", ">", "wordList", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "segment", "(", "sentence", ",", "normalized", ",", "wordList", ")", ";", "return", "wordList", ";", "}"], "docstring": "\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u67e5\u8be2\u7528\u6237\u8bcd\u5178\n\n@param sentence\n@param normalized\n@return", "docstring_tokens": ["\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u67e5\u8be2\u7528\u6237\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L309-L314", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.acceptCustomWord", "original_string": "protected boolean acceptCustomWord(int begin, int end, CoreDictionary.Attribute value)\n    {\n        return config.forceCustomDictionary || (end - begin >= 4 && !value.hasNatureStartsWith(\"nr\") && !value.hasNatureStartsWith(\"ns\") && !value.hasNatureStartsWith(\"nt\"));\n    }", "language": "java", "code": "protected boolean acceptCustomWord(int begin, int end, CoreDictionary.Attribute value)\n    {\n        return config.forceCustomDictionary || (end - begin >= 4 && !value.hasNatureStartsWith(\"nr\") && !value.hasNatureStartsWith(\"ns\") && !value.hasNatureStartsWith(\"nt\"));\n    }", "code_tokens": ["protected", "boolean", "acceptCustomWord", "(", "int", "begin", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "return", "config", ".", "forceCustomDictionary", "||", "(", "end", "-", "begin", ">=", "4", "&&", "!", "value", ".", "hasNatureStartsWith", "(", "\"nr\"", ")", "&&", "!", "value", ".", "hasNatureStartsWith", "(", "\"ns\"", ")", "&&", "!", "value", ".", "hasNatureStartsWith", "(", "\"nt\"", ")", ")", ";", "}"], "docstring": "\u5206\u8bcd\u65f6\u67e5\u8be2\u5230\u4e00\u4e2a\u7528\u6237\u8bcd\u5178\u4e2d\u7684\u8bcd\u8bed\uff0c\u6b64\u5904\u63a7\u5236\u662f\u5426\u63a5\u53d7\u5b83\n\n@param begin \u8d77\u59cb\u4f4d\u7f6e\n@param end   \u7ec8\u6b62\u4f4d\u7f6e\n@param value \u8bcd\u6027\n@return true \u8868\u793a\u63a5\u53d7\n@deprecated \u81ea1.6.7\u8d77\u5e9f\u5f03\uff0c\u5f3a\u5236\u6a21\u5f0f\u4e0b\u4e3a\u6700\u957f\u5339\u914d\uff0c\u5426\u5219\u6309\u5206\u8bcd\u7ed3\u679c\u5408\u5e76", "docstring_tokens": ["\u5206\u8bcd\u65f6\u67e5\u8be2\u5230\u4e00\u4e2a\u7528\u6237\u8bcd\u5178\u4e2d\u7684\u8bcd\u8bed\uff0c\u6b64\u5904\u63a7\u5236\u662f\u5426\u63a5\u53d7\u5b83"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L325-L328", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.pushPiece", "original_string": "private void pushPiece(String sentence, String normalized, int start, int end, byte preType, List<String> wordList)\n    {\n        if (preType == CharType.CT_CHINESE)\n        {\n            segmenter.segment(sentence.substring(start, end), normalized.substring(start, end), wordList);\n        }\n        else\n        {\n            wordList.add(sentence.substring(start, end));\n        }\n    }", "language": "java", "code": "private void pushPiece(String sentence, String normalized, int start, int end, byte preType, List<String> wordList)\n    {\n        if (preType == CharType.CT_CHINESE)\n        {\n            segmenter.segment(sentence.substring(start, end), normalized.substring(start, end), wordList);\n        }\n        else\n        {\n            wordList.add(sentence.substring(start, end));\n        }\n    }", "code_tokens": ["private", "void", "pushPiece", "(", "String", "sentence", ",", "String", "normalized", ",", "int", "start", ",", "int", "end", ",", "byte", "preType", ",", "List", "<", "String", ">", "wordList", ")", "{", "if", "(", "preType", "==", "CharType", ".", "CT_CHINESE", ")", "{", "segmenter", ".", "segment", "(", "sentence", ".", "substring", "(", "start", ",", "end", ")", ",", "normalized", ".", "substring", "(", "start", ",", "end", ")", ",", "wordList", ")", ";", "}", "else", "{", "wordList", ".", "add", "(", "sentence", ".", "substring", "(", "start", ",", "end", ")", ")", ";", "}", "}"], "docstring": "CT_CHINESE\u533a\u95f4\u4ea4\u7ed9\u7edf\u8ba1\u5206\u8bcd\uff0c\u5426\u5219\u89c6\u4f5c\u6574\u4e2a\u5355\u4f4d\n\n@param sentence\n@param normalized\n@param start\n@param end\n@param preType\n@param wordList", "docstring_tokens": ["CT_CHINESE\u533a\u95f4\u4ea4\u7ed9\u7edf\u8ba1\u5206\u8bcd\uff0c\u5426\u5219\u89c6\u4f5c\u6574\u4e2a\u5355\u4f4d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L522-L532", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.segmentAfterRule", "original_string": "protected void segmentAfterRule(String sentence, String normalized, List<String> wordList)\n    {\n        if (!enableRuleBasedSegment)\n        {\n            segmenter.segment(sentence, normalized, wordList);\n            return;\n        }\n        int start = 0;\n        int end = start;\n        byte preType = typeTable[normalized.charAt(end)];\n        byte curType;\n        while (++end < normalized.length())\n        {\n            curType = typeTable[normalized.charAt(end)];\n            if (curType != preType)\n            {\n                if (preType == CharType.CT_NUM)\n                {\n                    // \u6d6e\u70b9\u6570\u8bc6\u522b\n                    if (\"\uff0c,\uff0e.\".indexOf(normalized.charAt(end)) != -1)\n                    {\n                        if (end + 1 < normalized.length())\n                        {\n                            if (typeTable[normalized.charAt(end + 1)] == CharType.CT_NUM)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n                    else if (\"\u5e74\u6708\u65e5\u65f6\u5206\u79d2\".indexOf(normalized.charAt(end)) != -1)\n                    {\n                        preType = curType; // \u4ea4\u7ed9\u7edf\u8ba1\u5206\u8bcd\n                        continue;\n                    }\n                }\n                pushPiece(sentence, normalized, start, end, preType, wordList);\n                start = end;\n            }\n            preType = curType;\n        }\n        if (end == normalized.length())\n            pushPiece(sentence, normalized, start, end, preType, wordList);\n    }", "language": "java", "code": "protected void segmentAfterRule(String sentence, String normalized, List<String> wordList)\n    {\n        if (!enableRuleBasedSegment)\n        {\n            segmenter.segment(sentence, normalized, wordList);\n            return;\n        }\n        int start = 0;\n        int end = start;\n        byte preType = typeTable[normalized.charAt(end)];\n        byte curType;\n        while (++end < normalized.length())\n        {\n            curType = typeTable[normalized.charAt(end)];\n            if (curType != preType)\n            {\n                if (preType == CharType.CT_NUM)\n                {\n                    // \u6d6e\u70b9\u6570\u8bc6\u522b\n                    if (\"\uff0c,\uff0e.\".indexOf(normalized.charAt(end)) != -1)\n                    {\n                        if (end + 1 < normalized.length())\n                        {\n                            if (typeTable[normalized.charAt(end + 1)] == CharType.CT_NUM)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n                    else if (\"\u5e74\u6708\u65e5\u65f6\u5206\u79d2\".indexOf(normalized.charAt(end)) != -1)\n                    {\n                        preType = curType; // \u4ea4\u7ed9\u7edf\u8ba1\u5206\u8bcd\n                        continue;\n                    }\n                }\n                pushPiece(sentence, normalized, start, end, preType, wordList);\n                start = end;\n            }\n            preType = curType;\n        }\n        if (end == normalized.length())\n            pushPiece(sentence, normalized, start, end, preType, wordList);\n    }", "code_tokens": ["protected", "void", "segmentAfterRule", "(", "String", "sentence", ",", "String", "normalized", ",", "List", "<", "String", ">", "wordList", ")", "{", "if", "(", "!", "enableRuleBasedSegment", ")", "{", "segmenter", ".", "segment", "(", "sentence", ",", "normalized", ",", "wordList", ")", ";", "return", ";", "}", "int", "start", "=", "0", ";", "int", "end", "=", "start", ";", "byte", "preType", "=", "typeTable", "[", "normalized", ".", "charAt", "(", "end", ")", "]", ";", "byte", "curType", ";", "while", "(", "++", "end", "<", "normalized", ".", "length", "(", ")", ")", "{", "curType", "=", "typeTable", "[", "normalized", ".", "charAt", "(", "end", ")", "]", ";", "if", "(", "curType", "!=", "preType", ")", "{", "if", "(", "preType", "==", "CharType", ".", "CT_NUM", ")", "{", "// \u6d6e\u70b9\u6570\u8bc6\u522b", "if", "(", "\"\uff0c,\uff0e.\".ind", "e", "xOf(nor", "m", "alized.cha", "r", "At(end", ")", ") !", "=", " ", "1)", "", "", "", "{", "if", "(", "end", "+", "1", "<", "normalized", ".", "length", "(", ")", ")", "{", "if", "(", "typeTable", "[", "normalized", ".", "charAt", "(", "end", "+", "1", ")", "]", "==", "CharType", ".", "CT_NUM", ")", "{", "continue", ";", "}", "}", "}", "else", "if", "(", "\"\u5e74\u6708\u65e5\u65f6\u5206\u79d2\".indexOf(nor", "m", "alized.", "c", "harAt(end)", ")", " != -1", ")", "", "", "", "", "", "", "", "{", "preType", "=", "curType", ";", "// \u4ea4\u7ed9\u7edf\u8ba1\u5206\u8bcd", "continue", ";", "}", "}", "pushPiece", "(", "sentence", ",", "normalized", ",", "start", ",", "end", ",", "preType", ",", "wordList", ")", ";", "start", "=", "end", ";", "}", "preType", "=", "curType", ";", "}", "if", "(", "end", "==", "normalized", ".", "length", "(", ")", ")", "pushPiece", "(", "sentence", ",", "normalized", ",", "start", ",", "end", ",", "preType", ",", "wordList", ")", ";", "}"], "docstring": "\u4e11\u964b\u7684\u89c4\u5219\u7cfb\u7edf\n\n@param sentence\n@param normalized\n@param wordList", "docstring_tokens": ["\u4e11\u964b\u7684\u89c4\u5219\u7cfb\u7edf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L541-L583", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.segmentWithAttribute", "original_string": "private List<CoreDictionary.Attribute> segmentWithAttribute(String original, String normalized, List<String> wordList)\n    {\n        List<CoreDictionary.Attribute> attributeList;\n        if (config.useCustomDictionary)\n        {\n            if (config.forceCustomDictionary)\n            {\n                attributeList = new LinkedList<CoreDictionary.Attribute>();\n                segment(original, normalized, wordList, attributeList);\n            }\n            else\n            {\n                segmentAfterRule(original, normalized, wordList);\n                attributeList = combineWithCustomDictionary(wordList);\n            }\n        }\n        else\n        {\n            segmentAfterRule(original, normalized, wordList);\n            attributeList = null;\n        }\n        return attributeList;\n    }", "language": "java", "code": "private List<CoreDictionary.Attribute> segmentWithAttribute(String original, String normalized, List<String> wordList)\n    {\n        List<CoreDictionary.Attribute> attributeList;\n        if (config.useCustomDictionary)\n        {\n            if (config.forceCustomDictionary)\n            {\n                attributeList = new LinkedList<CoreDictionary.Attribute>();\n                segment(original, normalized, wordList, attributeList);\n            }\n            else\n            {\n                segmentAfterRule(original, normalized, wordList);\n                attributeList = combineWithCustomDictionary(wordList);\n            }\n        }\n        else\n        {\n            segmentAfterRule(original, normalized, wordList);\n            attributeList = null;\n        }\n        return attributeList;\n    }", "code_tokens": ["private", "List", "<", "CoreDictionary", ".", "Attribute", ">", "segmentWithAttribute", "(", "String", "original", ",", "String", "normalized", ",", "List", "<", "String", ">", "wordList", ")", "{", "List", "<", "CoreDictionary", ".", "Attribute", ">", "attributeList", ";", "if", "(", "config", ".", "useCustomDictionary", ")", "{", "if", "(", "config", ".", "forceCustomDictionary", ")", "{", "attributeList", "=", "new", "LinkedList", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "segment", "(", "original", ",", "normalized", ",", "wordList", ",", "attributeList", ")", ";", "}", "else", "{", "segmentAfterRule", "(", "original", ",", "normalized", ",", "wordList", ")", ";", "attributeList", "=", "combineWithCustomDictionary", "(", "wordList", ")", ";", "}", "}", "else", "{", "segmentAfterRule", "(", "original", ",", "normalized", ",", "wordList", ")", ";", "attributeList", "=", "null", ";", "}", "return", "attributeList", ";", "}"], "docstring": "\u8fd4\u56de\u7528\u6237\u8bcd\u5178\u4e2d\u7684attribute\u7684\u5206\u8bcd\n\n@param original\n@param normalized\n@param wordList\n@return", "docstring_tokens": ["\u8fd4\u56de\u7528\u6237\u8bcd\u5178\u4e2d\u7684attribute\u7684\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L593-L615", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.combineWithCustomDictionary", "original_string": "protected static List<CoreDictionary.Attribute> combineWithCustomDictionary(List<String> vertexList)\n    {\n        String[] wordNet = new String[vertexList.size()];\n        vertexList.toArray(wordNet);\n        CoreDictionary.Attribute[] attributeArray = new CoreDictionary.Attribute[wordNet.length];\n        // DAT\u5408\u5e76\n        DoubleArrayTrie<CoreDictionary.Attribute> dat = CustomDictionary.dat;\n        int length = wordNet.length;\n        for (int i = 0; i < length; ++i)\n        {\n            int state = 1;\n            state = dat.transition(wordNet[i], state);\n            if (state > 0)\n            {\n                int to = i + 1;\n                int end = to;\n                CoreDictionary.Attribute value = dat.output(state);\n                for (; to < length; ++to)\n                {\n                    state = dat.transition(wordNet[to], state);\n                    if (state < 0) break;\n                    CoreDictionary.Attribute output = dat.output(state);\n                    if (output != null)\n                    {\n                        value = output;\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    combineWords(wordNet, i, end, attributeArray, value);\n                    i = end - 1;\n                }\n            }\n        }\n        // BinTrie\u5408\u5e76\n        if (CustomDictionary.trie != null)\n        {\n            for (int i = 0; i < length; ++i)\n            {\n                if (wordNet[i] == null) continue;\n                BaseNode<CoreDictionary.Attribute> state = CustomDictionary.trie.transition(wordNet[i], 0);\n                if (state != null)\n                {\n                    int to = i + 1;\n                    int end = to;\n                    CoreDictionary.Attribute value = state.getValue();\n                    for (; to < length; ++to)\n                    {\n                        if (wordNet[to] == null) continue;\n                        state = state.transition(wordNet[to], 0);\n                        if (state == null) break;\n                        if (state.getValue() != null)\n                        {\n                            value = state.getValue();\n                            end = to + 1;\n                        }\n                    }\n                    if (value != null)\n                    {\n                        combineWords(wordNet, i, end, attributeArray, value);\n                        i = end - 1;\n                    }\n                }\n            }\n        }\n        vertexList.clear();\n        List<CoreDictionary.Attribute> attributeList = new LinkedList<CoreDictionary.Attribute>();\n        for (int i = 0; i < wordNet.length; i++)\n        {\n            if (wordNet[i] != null)\n            {\n                vertexList.add(wordNet[i]);\n                attributeList.add(attributeArray[i]);\n            }\n        }\n        return attributeList;\n    }", "language": "java", "code": "protected static List<CoreDictionary.Attribute> combineWithCustomDictionary(List<String> vertexList)\n    {\n        String[] wordNet = new String[vertexList.size()];\n        vertexList.toArray(wordNet);\n        CoreDictionary.Attribute[] attributeArray = new CoreDictionary.Attribute[wordNet.length];\n        // DAT\u5408\u5e76\n        DoubleArrayTrie<CoreDictionary.Attribute> dat = CustomDictionary.dat;\n        int length = wordNet.length;\n        for (int i = 0; i < length; ++i)\n        {\n            int state = 1;\n            state = dat.transition(wordNet[i], state);\n            if (state > 0)\n            {\n                int to = i + 1;\n                int end = to;\n                CoreDictionary.Attribute value = dat.output(state);\n                for (; to < length; ++to)\n                {\n                    state = dat.transition(wordNet[to], state);\n                    if (state < 0) break;\n                    CoreDictionary.Attribute output = dat.output(state);\n                    if (output != null)\n                    {\n                        value = output;\n                        end = to + 1;\n                    }\n                }\n                if (value != null)\n                {\n                    combineWords(wordNet, i, end, attributeArray, value);\n                    i = end - 1;\n                }\n            }\n        }\n        // BinTrie\u5408\u5e76\n        if (CustomDictionary.trie != null)\n        {\n            for (int i = 0; i < length; ++i)\n            {\n                if (wordNet[i] == null) continue;\n                BaseNode<CoreDictionary.Attribute> state = CustomDictionary.trie.transition(wordNet[i], 0);\n                if (state != null)\n                {\n                    int to = i + 1;\n                    int end = to;\n                    CoreDictionary.Attribute value = state.getValue();\n                    for (; to < length; ++to)\n                    {\n                        if (wordNet[to] == null) continue;\n                        state = state.transition(wordNet[to], 0);\n                        if (state == null) break;\n                        if (state.getValue() != null)\n                        {\n                            value = state.getValue();\n                            end = to + 1;\n                        }\n                    }\n                    if (value != null)\n                    {\n                        combineWords(wordNet, i, end, attributeArray, value);\n                        i = end - 1;\n                    }\n                }\n            }\n        }\n        vertexList.clear();\n        List<CoreDictionary.Attribute> attributeList = new LinkedList<CoreDictionary.Attribute>();\n        for (int i = 0; i < wordNet.length; i++)\n        {\n            if (wordNet[i] != null)\n            {\n                vertexList.add(wordNet[i]);\n                attributeList.add(attributeArray[i]);\n            }\n        }\n        return attributeList;\n    }", "code_tokens": ["protected", "static", "List", "<", "CoreDictionary", ".", "Attribute", ">", "combineWithCustomDictionary", "(", "List", "<", "String", ">", "vertexList", ")", "{", "String", "[", "]", "wordNet", "=", "new", "String", "[", "vertexList", ".", "size", "(", ")", "]", ";", "vertexList", ".", "toArray", "(", "wordNet", ")", ";", "CoreDictionary", ".", "Attribute", "[", "]", "attributeArray", "=", "new", "CoreDictionary", ".", "Attribute", "[", "wordNet", ".", "length", "]", ";", "// DAT\u5408\u5e76", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", "dat", "=", "CustomDictionary", ".", "dat", ";", "int", "length", "=", "wordNet", ".", "length", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "int", "state", "=", "1", ";", "state", "=", "dat", ".", "transition", "(", "wordNet", "[", "i", "]", ",", "state", ")", ";", "if", "(", "state", ">", "0", ")", "{", "int", "to", "=", "i", "+", "1", ";", "int", "end", "=", "to", ";", "CoreDictionary", ".", "Attribute", "value", "=", "dat", ".", "output", "(", "state", ")", ";", "for", "(", ";", "to", "<", "length", ";", "++", "to", ")", "{", "state", "=", "dat", ".", "transition", "(", "wordNet", "[", "to", "]", ",", "state", ")", ";", "if", "(", "state", "<", "0", ")", "break", ";", "CoreDictionary", ".", "Attribute", "output", "=", "dat", ".", "output", "(", "state", ")", ";", "if", "(", "output", "!=", "null", ")", "{", "value", "=", "output", ";", "end", "=", "to", "+", "1", ";", "}", "}", "if", "(", "value", "!=", "null", ")", "{", "combineWords", "(", "wordNet", ",", "i", ",", "end", ",", "attributeArray", ",", "value", ")", ";", "i", "=", "end", "-", "1", ";", "}", "}", "}", "// BinTrie\u5408\u5e76", "if", "(", "CustomDictionary", ".", "trie", "!=", "null", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "++", "i", ")", "{", "if", "(", "wordNet", "[", "i", "]", "==", "null", ")", "continue", ";", "BaseNode", "<", "CoreDictionary", ".", "Attribute", ">", "state", "=", "CustomDictionary", ".", "trie", ".", "transition", "(", "wordNet", "[", "i", "]", ",", "0", ")", ";", "if", "(", "state", "!=", "null", ")", "{", "int", "to", "=", "i", "+", "1", ";", "int", "end", "=", "to", ";", "CoreDictionary", ".", "Attribute", "value", "=", "state", ".", "getValue", "(", ")", ";", "for", "(", ";", "to", "<", "length", ";", "++", "to", ")", "{", "if", "(", "wordNet", "[", "to", "]", "==", "null", ")", "continue", ";", "state", "=", "state", ".", "transition", "(", "wordNet", "[", "to", "]", ",", "0", ")", ";", "if", "(", "state", "==", "null", ")", "break", ";", "if", "(", "state", ".", "getValue", "(", ")", "!=", "null", ")", "{", "value", "=", "state", ".", "getValue", "(", ")", ";", "end", "=", "to", "+", "1", ";", "}", "}", "if", "(", "value", "!=", "null", ")", "{", "combineWords", "(", "wordNet", ",", "i", ",", "end", ",", "attributeArray", ",", "value", ")", ";", "i", "=", "end", "-", "1", ";", "}", "}", "}", "}", "vertexList", ".", "clear", "(", ")", ";", "List", "<", "CoreDictionary", ".", "Attribute", ">", "attributeList", "=", "new", "LinkedList", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "wordNet", ".", "length", ";", "i", "++", ")", "{", "if", "(", "wordNet", "[", "i", "]", "!=", "null", ")", "{", "vertexList", ".", "add", "(", "wordNet", "[", "i", "]", ")", ";", "attributeList", ".", "add", "(", "attributeArray", "[", "i", "]", ")", ";", "}", "}", "return", "attributeList", ";", "}"], "docstring": "\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c\n\n@param vertexList \u7c97\u5206\u7ed3\u679c\n@return \u5408\u5e76\u540e\u7684\u7ed3\u679c", "docstring_tokens": ["\u4f7f\u7528\u7528\u6237\u8bcd\u5178\u5408\u5e76\u7c97\u5206\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L623-L700", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java", "func_name": "AbstractLexicalAnalyzer.combineWords", "original_string": "private static void combineWords(String[] wordNet, int start, int end, CoreDictionary.Attribute[] attributeArray, CoreDictionary.Attribute value)\n    {\n        if (start + 1 != end)   // \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027\n        {\n            StringBuilder sbTerm = new StringBuilder();\n            for (int j = start; j < end; ++j)\n            {\n                if (wordNet[j] == null) continue;\n                sbTerm.append(wordNet[j]);\n                wordNet[j] = null;\n            }\n            wordNet[start] = sbTerm.toString();\n        }\n        attributeArray[start] = value;\n    }", "language": "java", "code": "private static void combineWords(String[] wordNet, int start, int end, CoreDictionary.Attribute[] attributeArray, CoreDictionary.Attribute value)\n    {\n        if (start + 1 != end)   // \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027\n        {\n            StringBuilder sbTerm = new StringBuilder();\n            for (int j = start; j < end; ++j)\n            {\n                if (wordNet[j] == null) continue;\n                sbTerm.append(wordNet[j]);\n                wordNet[j] = null;\n            }\n            wordNet[start] = sbTerm.toString();\n        }\n        attributeArray[start] = value;\n    }", "code_tokens": ["private", "static", "void", "combineWords", "(", "String", "[", "]", "wordNet", ",", "int", "start", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "[", "]", "attributeArray", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "if", "(", "start", "+", "1", "!=", "end", ")", "// \u5c0f\u4f18\u5316\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8bcd\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u5408\u5e76\uff0c\u76f4\u63a5\u5e94\u7528\u65b0\u5c5e\u6027", "{", "StringBuilder", "sbTerm", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "j", "=", "start", ";", "j", "<", "end", ";", "++", "j", ")", "{", "if", "(", "wordNet", "[", "j", "]", "==", "null", ")", "continue", ";", "sbTerm", ".", "append", "(", "wordNet", "[", "j", "]", ")", ";", "wordNet", "[", "j", "]", "=", "null", ";", "}", "wordNet", "[", "start", "]", "=", "sbTerm", ".", "toString", "(", ")", ";", "}", "attributeArray", "[", "start", "]", "=", "value", ";", "}"], "docstring": "\u5c06\u8fde\u7eed\u7684\u8bcd\u8bed\u5408\u5e76\u4e3a\u4e00\u4e2a\n\n@param wordNet \u8bcd\u56fe\n@param start   \u8d77\u59cb\u4e0b\u6807\uff08\u5305\u542b\uff09\n@param end     \u7ed3\u675f\u4e0b\u6807\uff08\u4e0d\u5305\u542b\uff09\n@param value   \u65b0\u7684\u5c5e\u6027", "docstring_tokens": ["\u5c06\u8fde\u7eed\u7684\u8bcd\u8bed\u5408\u5e76\u4e3a\u4e00\u4e2a"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/lexical/AbstractLexicalAnalyzer.java#L710-L724", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.parseText", "original_string": "public List<Hit<V>> parseText(String text)\n    {\n        int position = 1;\n        int currentState = 0;\n        List<Hit<V>> collectedEmits = new LinkedList<Hit<V>>();\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            storeEmits(position, currentState, collectedEmits);\n            ++position;\n        }\n\n        return collectedEmits;\n    }", "language": "java", "code": "public List<Hit<V>> parseText(String text)\n    {\n        int position = 1;\n        int currentState = 0;\n        List<Hit<V>> collectedEmits = new LinkedList<Hit<V>>();\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            storeEmits(position, currentState, collectedEmits);\n            ++position;\n        }\n\n        return collectedEmits;\n    }", "code_tokens": ["public", "List", "<", "Hit", "<", "V", ">", ">", "parseText", "(", "String", "text", ")", "{", "int", "position", "=", "1", ";", "int", "currentState", "=", "0", ";", "List", "<", "Hit", "<", "V", ">", ">", "collectedEmits", "=", "new", "LinkedList", "<", "Hit", "<", "V", ">", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "text", ".", "length", "(", ")", ";", "++", "i", ")", "{", "currentState", "=", "getState", "(", "currentState", ",", "text", ".", "charAt", "(", "i", ")", ")", ";", "storeEmits", "(", "position", ",", "currentState", ",", "collectedEmits", ")", ";", "++", "position", ";", "}", "return", "collectedEmits", ";", "}"], "docstring": "\u5339\u914d\u6bcd\u6587\u672c\n\n@param text \u4e00\u4e9b\u6587\u672c\n@return \u4e00\u4e2apair\u5217\u8868", "docstring_tokens": ["\u5339\u914d\u6bcd\u6587\u672c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L82-L95", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.parseText", "original_string": "public void parseText(String text, IHit<V> processor)\n    {\n        int position = 1;\n        int currentState = 0;\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            int[] hitArray = output[currentState];\n            if (hitArray != null)\n            {\n                for (int hit : hitArray)\n                {\n                    processor.hit(position - l[hit], position, v[hit]);\n                }\n            }\n            ++position;\n        }\n    }", "language": "java", "code": "public void parseText(String text, IHit<V> processor)\n    {\n        int position = 1;\n        int currentState = 0;\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            int[] hitArray = output[currentState];\n            if (hitArray != null)\n            {\n                for (int hit : hitArray)\n                {\n                    processor.hit(position - l[hit], position, v[hit]);\n                }\n            }\n            ++position;\n        }\n    }", "code_tokens": ["public", "void", "parseText", "(", "String", "text", ",", "IHit", "<", "V", ">", "processor", ")", "{", "int", "position", "=", "1", ";", "int", "currentState", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "text", ".", "length", "(", ")", ";", "++", "i", ")", "{", "currentState", "=", "getState", "(", "currentState", ",", "text", ".", "charAt", "(", "i", ")", ")", ";", "int", "[", "]", "hitArray", "=", "output", "[", "currentState", "]", ";", "if", "(", "hitArray", "!=", "null", ")", "{", "for", "(", "int", "hit", ":", "hitArray", ")", "{", "processor", ".", "hit", "(", "position", "-", "l", "[", "hit", "]", ",", "position", ",", "v", "[", "hit", "]", ")", ";", "}", "}", "++", "position", ";", "}", "}"], "docstring": "\u5904\u7406\u6587\u672c\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u5904\u7406\u6587\u672c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L103-L120", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.parseText", "original_string": "public void parseText(char[] text, IHit<V> processor)\n    {\n        int position = 1;\n        int currentState = 0;\n        for (char c : text)\n        {\n            currentState = getState(currentState, c);\n            int[] hitArray = output[currentState];\n            if (hitArray != null)\n            {\n                for (int hit : hitArray)\n                {\n                    processor.hit(position - l[hit], position, v[hit]);\n                }\n            }\n            ++position;\n        }\n    }", "language": "java", "code": "public void parseText(char[] text, IHit<V> processor)\n    {\n        int position = 1;\n        int currentState = 0;\n        for (char c : text)\n        {\n            currentState = getState(currentState, c);\n            int[] hitArray = output[currentState];\n            if (hitArray != null)\n            {\n                for (int hit : hitArray)\n                {\n                    processor.hit(position - l[hit], position, v[hit]);\n                }\n            }\n            ++position;\n        }\n    }", "code_tokens": ["public", "void", "parseText", "(", "char", "[", "]", "text", ",", "IHit", "<", "V", ">", "processor", ")", "{", "int", "position", "=", "1", ";", "int", "currentState", "=", "0", ";", "for", "(", "char", "c", ":", "text", ")", "{", "currentState", "=", "getState", "(", "currentState", ",", "c", ")", ";", "int", "[", "]", "hitArray", "=", "output", "[", "currentState", "]", ";", "if", "(", "hitArray", "!=", "null", ")", "{", "for", "(", "int", "hit", ":", "hitArray", ")", "{", "processor", ".", "hit", "(", "position", "-", "l", "[", "hit", "]", ",", "position", ",", "v", "[", "hit", "]", ")", ";", "}", "}", "++", "position", ";", "}", "}"], "docstring": "\u5904\u7406\u6587\u672c\n\n@param text\n@param processor", "docstring_tokens": ["\u5904\u7406\u6587\u672c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L128-L145", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.save", "original_string": "public void save(DataOutputStream out) throws Exception\n    {\n        out.writeInt(size);\n        for (int i = 0; i < size; i++)\n        {\n            out.writeInt(base[i]);\n            out.writeInt(check[i]);\n            out.writeInt(fail[i]);\n            int output[] = this.output[i];\n            if (output == null)\n            {\n                out.writeInt(0);\n            }\n            else\n            {\n                out.writeInt(output.length);\n                for (int o : output)\n                {\n                    out.writeInt(o);\n                }\n            }\n        }\n        out.writeInt(l.length);\n        for (int length : l)\n        {\n            out.writeInt(length);\n        }\n    }", "language": "java", "code": "public void save(DataOutputStream out) throws Exception\n    {\n        out.writeInt(size);\n        for (int i = 0; i < size; i++)\n        {\n            out.writeInt(base[i]);\n            out.writeInt(check[i]);\n            out.writeInt(fail[i]);\n            int output[] = this.output[i];\n            if (output == null)\n            {\n                out.writeInt(0);\n            }\n            else\n            {\n                out.writeInt(output.length);\n                for (int o : output)\n                {\n                    out.writeInt(o);\n                }\n            }\n        }\n        out.writeInt(l.length);\n        for (int length : l)\n        {\n            out.writeInt(length);\n        }\n    }", "code_tokens": ["public", "void", "save", "(", "DataOutputStream", "out", ")", "throws", "Exception", "{", "out", ".", "writeInt", "(", "size", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "out", ".", "writeInt", "(", "base", "[", "i", "]", ")", ";", "out", ".", "writeInt", "(", "check", "[", "i", "]", ")", ";", "out", ".", "writeInt", "(", "fail", "[", "i", "]", ")", ";", "int", "output", "[", "]", "=", "this", ".", "output", "[", "i", "]", ";", "if", "(", "output", "==", "null", ")", "{", "out", ".", "writeInt", "(", "0", ")", ";", "}", "else", "{", "out", ".", "writeInt", "(", "output", ".", "length", ")", ";", "for", "(", "int", "o", ":", "output", ")", "{", "out", ".", "writeInt", "(", "o", ")", ";", "}", "}", "}", "out", ".", "writeInt", "(", "l", ".", "length", ")", ";", "for", "(", "int", "length", ":", "l", ")", "{", "out", ".", "writeInt", "(", "length", ")", ";", "}", "}"], "docstring": "\u6301\u4e45\u5316\n\n@param out \u4e00\u4e2aDataOutputStream\n@throws Exception \u53ef\u80fd\u7684IO\u5f02\u5e38\u7b49", "docstring_tokens": ["\u6301\u4e45\u5316"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L178-L205", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.save", "original_string": "public void save(ObjectOutputStream out) throws IOException\n    {\n        out.writeObject(base);\n        out.writeObject(check);\n        out.writeObject(fail);\n        out.writeObject(output);\n        out.writeObject(l);\n    }", "language": "java", "code": "public void save(ObjectOutputStream out) throws IOException\n    {\n        out.writeObject(base);\n        out.writeObject(check);\n        out.writeObject(fail);\n        out.writeObject(output);\n        out.writeObject(l);\n    }", "code_tokens": ["public", "void", "save", "(", "ObjectOutputStream", "out", ")", "throws", "IOException", "{", "out", ".", "writeObject", "(", "base", ")", ";", "out", ".", "writeObject", "(", "check", ")", ";", "out", ".", "writeObject", "(", "fail", ")", ";", "out", ".", "writeObject", "(", "output", ")", ";", "out", ".", "writeObject", "(", "l", ")", ";", "}"], "docstring": "\u6301\u4e45\u5316\n\n@param out \u4e00\u4e2aObjectOutputStream\n@throws IOException \u53ef\u80fd\u7684IO\u5f02\u5e38", "docstring_tokens": ["\u6301\u4e45\u5316"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L213-L220", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.load", "original_string": "public void load(ObjectInputStream in, V[] value) throws IOException, ClassNotFoundException\n    {\n        base = (int[]) in.readObject();\n        check = (int[]) in.readObject();\n        fail = (int[]) in.readObject();\n        output = (int[][]) in.readObject();\n        l = (int[]) in.readObject();\n        v = value;\n    }", "language": "java", "code": "public void load(ObjectInputStream in, V[] value) throws IOException, ClassNotFoundException\n    {\n        base = (int[]) in.readObject();\n        check = (int[]) in.readObject();\n        fail = (int[]) in.readObject();\n        output = (int[][]) in.readObject();\n        l = (int[]) in.readObject();\n        v = value;\n    }", "code_tokens": ["public", "void", "load", "(", "ObjectInputStream", "in", ",", "V", "[", "]", "value", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "base", "=", "(", "int", "[", "]", ")", "in", ".", "readObject", "(", ")", ";", "check", "=", "(", "int", "[", "]", ")", "in", ".", "readObject", "(", ")", ";", "fail", "=", "(", "int", "[", "]", ")", "in", ".", "readObject", "(", ")", ";", "output", "=", "(", "int", "[", "]", "[", "]", ")", "in", ".", "readObject", "(", ")", ";", "l", "=", "(", "int", "[", "]", ")", "in", ".", "readObject", "(", ")", ";", "v", "=", "value", ";", "}"], "docstring": "\u8f7d\u5165\n\n@param in    \u4e00\u4e2aObjectInputStream\n@param value \u503c\uff08\u6301\u4e45\u5316\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u6301\u4e45\u5316\u503c\uff0c\u73b0\u5728\u9700\u8981\u989d\u5916\u63d0\u4f9b\uff09\n@throws IOException\n@throws ClassNotFoundException", "docstring_tokens": ["\u8f7d\u5165"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L230-L238", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.load", "original_string": "public boolean load(ByteArray byteArray, V[] value)\n    {\n        if (byteArray == null) return false;\n        size = byteArray.nextInt();\n        base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n        check = new int[size + 65535];\n        fail = new int[size + 65535];\n        output = new int[size + 65535][];\n        int length;\n        for (int i = 0; i < size; ++i)\n        {\n            base[i] = byteArray.nextInt();\n            check[i] = byteArray.nextInt();\n            fail[i] = byteArray.nextInt();\n            length = byteArray.nextInt();\n            if (length == 0) continue;\n            output[i] = new int[length];\n            for (int j = 0; j < output[i].length; ++j)\n            {\n                output[i][j] = byteArray.nextInt();\n            }\n        }\n        length = byteArray.nextInt();\n        l = new int[length];\n        for (int i = 0; i < l.length; ++i)\n        {\n            l[i] = byteArray.nextInt();\n        }\n        v = value;\n        return true;\n    }", "language": "java", "code": "public boolean load(ByteArray byteArray, V[] value)\n    {\n        if (byteArray == null) return false;\n        size = byteArray.nextInt();\n        base = new int[size + 65535];   // \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c\n        check = new int[size + 65535];\n        fail = new int[size + 65535];\n        output = new int[size + 65535][];\n        int length;\n        for (int i = 0; i < size; ++i)\n        {\n            base[i] = byteArray.nextInt();\n            check[i] = byteArray.nextInt();\n            fail[i] = byteArray.nextInt();\n            length = byteArray.nextInt();\n            if (length == 0) continue;\n            output[i] = new int[length];\n            for (int j = 0; j < output[i].length; ++j)\n            {\n                output[i][j] = byteArray.nextInt();\n            }\n        }\n        length = byteArray.nextInt();\n        l = new int[length];\n        for (int i = 0; i < l.length; ++i)\n        {\n            l[i] = byteArray.nextInt();\n        }\n        v = value;\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "ByteArray", "byteArray", ",", "V", "[", "]", "value", ")", "{", "if", "(", "byteArray", "==", "null", ")", "return", "false", ";", "size", "=", "byteArray", ".", "nextInt", "(", ")", ";", "base", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "// \u591a\u7559\u4e00\u4e9b\uff0c\u9632\u6b62\u8d8a\u754c", "check", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "fail", "=", "new", "int", "[", "size", "+", "65535", "]", ";", "output", "=", "new", "int", "[", "size", "+", "65535", "]", "[", "", "]", ";", "int", "length", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "++", "i", ")", "{", "base", "[", "i", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "check", "[", "i", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "fail", "[", "i", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "length", "=", "byteArray", ".", "nextInt", "(", ")", ";", "if", "(", "length", "==", "0", ")", "continue", ";", "output", "[", "i", "]", "=", "new", "int", "[", "length", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "output", "[", "i", "]", ".", "length", ";", "++", "j", ")", "{", "output", "[", "i", "]", "[", "j", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "}", "length", "=", "byteArray", ".", "nextInt", "(", ")", ";", "l", "=", "new", "int", "[", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "l", ".", "length", ";", "++", "i", ")", "{", "l", "[", "i", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "v", "=", "value", ";", "return", "true", ";", "}"], "docstring": "\u8f7d\u5165\n\n@param byteArray \u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\n@param value     \u503c\u6570\u7ec4\n@return \u6210\u529f\u4e0e\u5426", "docstring_tokens": ["\u8f7d\u5165"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L247-L277", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.get", "original_string": "public V get(String key)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            return v[index];\n        }\n\n        return null;\n    }", "language": "java", "code": "public V get(String key)\n    {\n        int index = exactMatchSearch(key);\n        if (index >= 0)\n        {\n            return v[index];\n        }\n\n        return null;\n    }", "code_tokens": ["public", "V", "get", "(", "String", "key", ")", "{", "int", "index", "=", "exactMatchSearch", "(", "key", ")", ";", "if", "(", "index", ">=", "0", ")", "{", "return", "v", "[", "index", "]", ";", "}", "return", "null", ";", "}"], "docstring": "\u83b7\u53d6\u503c\n\n@param key \u952e\n@return", "docstring_tokens": ["\u83b7\u53d6\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L285-L294", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.getState", "original_string": "private int getState(int currentState, char character)\n    {\n        int newCurrentState = transitionWithRoot(currentState, character);  // \u5148\u6309success\u8df3\u8f6c\n        while (newCurrentState == -1) // \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c\n        {\n            currentState = fail[currentState];\n            newCurrentState = transitionWithRoot(currentState, character);\n        }\n        return newCurrentState;\n    }", "language": "java", "code": "private int getState(int currentState, char character)\n    {\n        int newCurrentState = transitionWithRoot(currentState, character);  // \u5148\u6309success\u8df3\u8f6c\n        while (newCurrentState == -1) // \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c\n        {\n            currentState = fail[currentState];\n            newCurrentState = transitionWithRoot(currentState, character);\n        }\n        return newCurrentState;\n    }", "code_tokens": ["private", "int", "getState", "(", "int", "currentState", ",", "char", "character", ")", "{", "int", "newCurrentState", "=", "transitionWithRoot", "(", "currentState", ",", "character", ")", ";", "// \u5148\u6309success\u8df3\u8f6c", "while", "(", "newCurrentState", "==", "-", "1", ")", "// \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c", "{", "currentState", "=", "fail", "[", "currentState", "]", ";", "newCurrentState", "=", "transitionWithRoot", "(", "currentState", ",", "character", ")", ";", "}", "return", "newCurrentState", ";", "}"], "docstring": "\u8f6c\u79fb\u72b6\u6001\uff0c\u652f\u6301failure\u8f6c\u79fb\n\n@param currentState\n@param character\n@return", "docstring_tokens": ["\u8f6c\u79fb\u72b6\u6001\uff0c\u652f\u6301failure\u8f6c\u79fb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L396-L405", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.storeEmits", "original_string": "private void storeEmits(int position, int currentState, List<Hit<V>> collectedEmits)\n    {\n        int[] hitArray = output[currentState];\n        if (hitArray != null)\n        {\n            for (int hit : hitArray)\n            {\n                collectedEmits.add(new Hit<V>(position - l[hit], position, v[hit]));\n            }\n        }\n    }", "language": "java", "code": "private void storeEmits(int position, int currentState, List<Hit<V>> collectedEmits)\n    {\n        int[] hitArray = output[currentState];\n        if (hitArray != null)\n        {\n            for (int hit : hitArray)\n            {\n                collectedEmits.add(new Hit<V>(position - l[hit], position, v[hit]));\n            }\n        }\n    }", "code_tokens": ["private", "void", "storeEmits", "(", "int", "position", ",", "int", "currentState", ",", "List", "<", "Hit", "<", "V", ">", ">", "collectedEmits", ")", "{", "int", "[", "]", "hitArray", "=", "output", "[", "currentState", "]", ";", "if", "(", "hitArray", "!=", "null", ")", "{", "for", "(", "int", "hit", ":", "hitArray", ")", "{", "collectedEmits", ".", "add", "(", "new", "Hit", "<", "V", ">", "(", "position", "-", "l", "[", "hit", "]", ",", "position", ",", "v", "[", "hit", "]", ")", ")", ";", "}", "}", "}"], "docstring": "\u4fdd\u5b58\u8f93\u51fa\n\n@param position\n@param currentState\n@param collectedEmits", "docstring_tokens": ["\u4fdd\u5b58\u8f93\u51fa"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L414-L424", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.transition", "original_string": "protected int transition(int current, char c)\n    {\n        int b = current;\n        int p;\n\n        p = b + c + 1;\n        if (b == check[p])\n            b = base[p];\n        else\n            return -1;\n\n        p = b;\n        return p;\n    }", "language": "java", "code": "protected int transition(int current, char c)\n    {\n        int b = current;\n        int p;\n\n        p = b + c + 1;\n        if (b == check[p])\n            b = base[p];\n        else\n            return -1;\n\n        p = b;\n        return p;\n    }", "code_tokens": ["protected", "int", "transition", "(", "int", "current", ",", "char", "c", ")", "{", "int", "b", "=", "current", ";", "int", "p", ";", "p", "=", "b", "+", "c", "+", "1", ";", "if", "(", "b", "==", "check", "[", "p", "]", ")", "b", "=", "base", "[", "p", "]", ";", "else", "return", "-", "1", ";", "p", "=", "b", ";", "return", "p", ";", "}"], "docstring": "\u8f6c\u79fb\u72b6\u6001\n\n@param current\n@param c\n@return", "docstring_tokens": ["\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L433-L446", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.transitionWithRoot", "original_string": "protected int transitionWithRoot(int nodePos, char c)\n    {\n        int b = base[nodePos];\n        int p;\n\n        p = b + c + 1;\n        if (b != check[p])\n        {\n            if (nodePos == 0) return 0;\n            return -1;\n        }\n\n        return p;\n    }", "language": "java", "code": "protected int transitionWithRoot(int nodePos, char c)\n    {\n        int b = base[nodePos];\n        int p;\n\n        p = b + c + 1;\n        if (b != check[p])\n        {\n            if (nodePos == 0) return 0;\n            return -1;\n        }\n\n        return p;\n    }", "code_tokens": ["protected", "int", "transitionWithRoot", "(", "int", "nodePos", ",", "char", "c", ")", "{", "int", "b", "=", "base", "[", "nodePos", "]", ";", "int", "p", ";", "p", "=", "b", "+", "c", "+", "1", ";", "if", "(", "b", "!=", "check", "[", "p", "]", ")", "{", "if", "(", "nodePos", "==", "0", ")", "return", "0", ";", "return", "-", "1", ";", "}", "return", "p", ";", "}"], "docstring": "c\u8f6c\u79fb\uff0c\u5982\u679c\u662f\u6839\u8282\u70b9\u5219\u8fd4\u56de\u81ea\u5df1\n\n@param nodePos\n@param c\n@return", "docstring_tokens": ["c\u8f6c\u79fb\uff0c\u5982\u679c\u662f\u6839\u8282\u70b9\u5219\u8fd4\u56de\u81ea\u5df1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L455-L468", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java", "func_name": "AhoCorasickDoubleArrayTrie.fetch", "original_string": "private int fetch(State parent, List<Map.Entry<Integer, State>> siblings)\n    {\n        if (parent.isAcceptable())\n        {\n            State fakeNode = new State(-(parent.getDepth() + 1));  // \u6b64\u8282\u70b9\u662fparent\u7684\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u5177\u5907parent\u7684\u8f93\u51fa\n            fakeNode.addEmit(parent.getLargestValueId());\n            siblings.add(new AbstractMap.SimpleEntry<Integer, State>(0, fakeNode));\n        }\n        for (Map.Entry<Character, State> entry : parent.getSuccess().entrySet())\n        {\n            siblings.add(new AbstractMap.SimpleEntry<Integer, State>(entry.getKey() + 1, entry.getValue()));\n        }\n        return siblings.size();\n    }", "language": "java", "code": "private int fetch(State parent, List<Map.Entry<Integer, State>> siblings)\n    {\n        if (parent.isAcceptable())\n        {\n            State fakeNode = new State(-(parent.getDepth() + 1));  // \u6b64\u8282\u70b9\u662fparent\u7684\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u5177\u5907parent\u7684\u8f93\u51fa\n            fakeNode.addEmit(parent.getLargestValueId());\n            siblings.add(new AbstractMap.SimpleEntry<Integer, State>(0, fakeNode));\n        }\n        for (Map.Entry<Character, State> entry : parent.getSuccess().entrySet())\n        {\n            siblings.add(new AbstractMap.SimpleEntry<Integer, State>(entry.getKey() + 1, entry.getValue()));\n        }\n        return siblings.size();\n    }", "code_tokens": ["private", "int", "fetch", "(", "State", "parent", ",", "List", "<", "Map", ".", "Entry", "<", "Integer", ",", "State", ">", ">", "siblings", ")", "{", "if", "(", "parent", ".", "isAcceptable", "(", ")", ")", "{", "State", "fakeNode", "=", "new", "State", "(", "-", "(", "parent", ".", "getDepth", "(", ")", "+", "1", ")", ")", ";", "// \u6b64\u8282\u70b9\u662fparent\u7684\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u5177\u5907parent\u7684\u8f93\u51fa", "fakeNode", ".", "addEmit", "(", "parent", ".", "getLargestValueId", "(", ")", ")", ";", "siblings", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "Integer", ",", "State", ">", "(", "0", ",", "fakeNode", ")", ")", ";", "}", "for", "(", "Map", ".", "Entry", "<", "Character", ",", "State", ">", "entry", ":", "parent", ".", "getSuccess", "(", ")", ".", "entrySet", "(", ")", ")", "{", "siblings", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "Integer", ",", "State", ">", "(", "entry", ".", "getKey", "(", ")", "+", "1", ",", "entry", ".", "getValue", "(", ")", ")", ")", ";", "}", "return", "siblings", ".", "size", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u76f4\u63a5\u76f8\u8fde\u7684\u5b50\u8282\u70b9\n\n@param parent   \u7236\u8282\u70b9\n@param siblings \uff08\u5b50\uff09\u5144\u5f1f\u8282\u70b9\n@return \u5144\u5f1f\u8282\u70b9\u4e2a\u6570", "docstring_tokens": ["\u83b7\u53d6\u76f4\u63a5\u76f8\u8fde\u7684\u5b50\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/AhoCorasickDoubleArrayTrie.java#L486-L499", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.tokenize", "original_string": "public Collection<Token> tokenize(String text)\n    {\n\n        Collection<Token> tokens = new ArrayList<Token>();\n\n        Collection<Emit> collectedEmits = parseText(text);\n        // \u4e0b\u9762\u662f\u6700\u957f\u5206\u8bcd\u7684\u5173\u952e\n        IntervalTree intervalTree = new IntervalTree((List<Intervalable>) (List<?>) collectedEmits);\n        intervalTree.removeOverlaps((List<Intervalable>) (List<?>) collectedEmits);\n        // \u79fb\u9664\u7ed3\u675f\n\n        int lastCollectedPosition = -1;\n        for (Emit emit : collectedEmits)\n        {\n            if (emit.getStart() - lastCollectedPosition > 1)\n            {\n                tokens.add(createFragment(emit, text, lastCollectedPosition));\n            }\n            tokens.add(createMatch(emit, text));\n            lastCollectedPosition = emit.getEnd();\n        }\n        if (text.length() - lastCollectedPosition > 1)\n        {\n            tokens.add(createFragment(null, text, lastCollectedPosition));\n        }\n\n        return tokens;\n    }", "language": "java", "code": "public Collection<Token> tokenize(String text)\n    {\n\n        Collection<Token> tokens = new ArrayList<Token>();\n\n        Collection<Emit> collectedEmits = parseText(text);\n        // \u4e0b\u9762\u662f\u6700\u957f\u5206\u8bcd\u7684\u5173\u952e\n        IntervalTree intervalTree = new IntervalTree((List<Intervalable>) (List<?>) collectedEmits);\n        intervalTree.removeOverlaps((List<Intervalable>) (List<?>) collectedEmits);\n        // \u79fb\u9664\u7ed3\u675f\n\n        int lastCollectedPosition = -1;\n        for (Emit emit : collectedEmits)\n        {\n            if (emit.getStart() - lastCollectedPosition > 1)\n            {\n                tokens.add(createFragment(emit, text, lastCollectedPosition));\n            }\n            tokens.add(createMatch(emit, text));\n            lastCollectedPosition = emit.getEnd();\n        }\n        if (text.length() - lastCollectedPosition > 1)\n        {\n            tokens.add(createFragment(null, text, lastCollectedPosition));\n        }\n\n        return tokens;\n    }", "code_tokens": ["public", "Collection", "<", "Token", ">", "tokenize", "(", "String", "text", ")", "{", "Collection", "<", "Token", ">", "tokens", "=", "new", "ArrayList", "<", "Token", ">", "(", ")", ";", "Collection", "<", "Emit", ">", "collectedEmits", "=", "parseText", "(", "text", ")", ";", "// \u4e0b\u9762\u662f\u6700\u957f\u5206\u8bcd\u7684\u5173\u952e", "IntervalTree", "intervalTree", "=", "new", "IntervalTree", "(", "(", "List", "<", "Intervalable", ">", ")", "(", "List", "<", "?", ">", ")", "collectedEmits", ")", ";", "intervalTree", ".", "removeOverlaps", "(", "(", "List", "<", "Intervalable", ">", ")", "(", "List", "<", "?", ">", ")", "collectedEmits", ")", ";", "// \u79fb\u9664\u7ed3\u675f", "int", "lastCollectedPosition", "=", "-", "1", ";", "for", "(", "Emit", "emit", ":", "collectedEmits", ")", "{", "if", "(", "emit", ".", "getStart", "(", ")", "-", "lastCollectedPosition", ">", "1", ")", "{", "tokens", ".", "add", "(", "createFragment", "(", "emit", ",", "text", ",", "lastCollectedPosition", ")", ")", ";", "}", "tokens", ".", "add", "(", "createMatch", "(", "emit", ",", "text", ")", ")", ";", "lastCollectedPosition", "=", "emit", ".", "getEnd", "(", ")", ";", "}", "if", "(", "text", ".", "length", "(", ")", "-", "lastCollectedPosition", ">", "1", ")", "{", "tokens", ".", "add", "(", "createFragment", "(", "null", ",", "text", ",", "lastCollectedPosition", ")", ")", ";", "}", "return", "tokens", ";", "}"], "docstring": "\u4e00\u4e2a\u6700\u957f\u5206\u8bcd\u5668\n\n@param text \u5f85\u5206\u8bcd\u6587\u672c\n@return", "docstring_tokens": ["\u4e00\u4e2a\u6700\u957f\u5206\u8bcd\u5668"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L90-L117", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.parseText", "original_string": "@SuppressWarnings(\"unchecked\")\n    public Collection<Emit> parseText(String text)\n    {\n        checkForConstructedFailureStates();\n\n        int position = 0;\n        State currentState = this.rootState;\n        List<Emit> collectedEmits = new ArrayList<Emit>();\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            storeEmits(position, currentState, collectedEmits);\n            ++position;\n        }\n\n        if (!trieConfig.isAllowOverlaps())\n        {\n            IntervalTree intervalTree = new IntervalTree((List<Intervalable>) (List<?>) collectedEmits);\n            intervalTree.removeOverlaps((List<Intervalable>) (List<?>) collectedEmits);\n        }\n\n        if (trieConfig.remainLongest)\n        {\n            remainLongest(collectedEmits);\n        }\n\n        return collectedEmits;\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    public Collection<Emit> parseText(String text)\n    {\n        checkForConstructedFailureStates();\n\n        int position = 0;\n        State currentState = this.rootState;\n        List<Emit> collectedEmits = new ArrayList<Emit>();\n        for (int i = 0; i < text.length(); ++i)\n        {\n            currentState = getState(currentState, text.charAt(i));\n            storeEmits(position, currentState, collectedEmits);\n            ++position;\n        }\n\n        if (!trieConfig.isAllowOverlaps())\n        {\n            IntervalTree intervalTree = new IntervalTree((List<Intervalable>) (List<?>) collectedEmits);\n            intervalTree.removeOverlaps((List<Intervalable>) (List<?>) collectedEmits);\n        }\n\n        if (trieConfig.remainLongest)\n        {\n            remainLongest(collectedEmits);\n        }\n\n        return collectedEmits;\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "Collection", "<", "Emit", ">", "parseText", "(", "String", "text", ")", "{", "checkForConstructedFailureStates", "(", ")", ";", "int", "position", "=", "0", ";", "State", "currentState", "=", "this", ".", "rootState", ";", "List", "<", "Emit", ">", "collectedEmits", "=", "new", "ArrayList", "<", "Emit", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "text", ".", "length", "(", ")", ";", "++", "i", ")", "{", "currentState", "=", "getState", "(", "currentState", ",", "text", ".", "charAt", "(", "i", ")", ")", ";", "storeEmits", "(", "position", ",", "currentState", ",", "collectedEmits", ")", ";", "++", "position", ";", "}", "if", "(", "!", "trieConfig", ".", "isAllowOverlaps", "(", ")", ")", "{", "IntervalTree", "intervalTree", "=", "new", "IntervalTree", "(", "(", "List", "<", "Intervalable", ">", ")", "(", "List", "<", "?", ">", ")", "collectedEmits", ")", ";", "intervalTree", ".", "removeOverlaps", "(", "(", "List", "<", "Intervalable", ">", ")", "(", "List", "<", "?", ">", ")", "collectedEmits", ")", ";", "}", "if", "(", "trieConfig", ".", "remainLongest", ")", "{", "remainLongest", "(", "collectedEmits", ")", ";", "}", "return", "collectedEmits", ";", "}"], "docstring": "\u6a21\u5f0f\u5339\u914d\n\n@param text \u5f85\u5339\u914d\u7684\u6587\u672c\n@return \u5339\u914d\u5230\u7684\u6a21\u5f0f\u4e32", "docstring_tokens": ["\u6a21\u5f0f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L135-L162", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.remainLongest", "original_string": "private static void remainLongest(Collection<Emit> collectedEmits)\n    {\n        if (collectedEmits.size() < 2) return;\n        Map<Integer, Emit> emitMapStart = new TreeMap<Integer, Emit>();\n        for (Emit emit : collectedEmits)\n        {\n            Emit pre = emitMapStart.get(emit.getStart());\n            if (pre == null || pre.size() < emit.size())\n            {\n                emitMapStart.put(emit.getStart(), emit);\n            }\n        }\n        if (emitMapStart.size() < 2)\n        {\n            collectedEmits.clear();\n            collectedEmits.addAll(emitMapStart.values());\n            return;\n        }\n        Map<Integer, Emit> emitMapEnd = new TreeMap<Integer, Emit>();\n        for (Emit emit : emitMapStart.values())\n        {\n            Emit pre = emitMapEnd.get(emit.getEnd());\n            if (pre == null || pre.size() < emit.size())\n            {\n                emitMapEnd.put(emit.getEnd(), emit);\n            }\n        }\n\n        collectedEmits.clear();\n        collectedEmits.addAll(emitMapEnd.values());\n    }", "language": "java", "code": "private static void remainLongest(Collection<Emit> collectedEmits)\n    {\n        if (collectedEmits.size() < 2) return;\n        Map<Integer, Emit> emitMapStart = new TreeMap<Integer, Emit>();\n        for (Emit emit : collectedEmits)\n        {\n            Emit pre = emitMapStart.get(emit.getStart());\n            if (pre == null || pre.size() < emit.size())\n            {\n                emitMapStart.put(emit.getStart(), emit);\n            }\n        }\n        if (emitMapStart.size() < 2)\n        {\n            collectedEmits.clear();\n            collectedEmits.addAll(emitMapStart.values());\n            return;\n        }\n        Map<Integer, Emit> emitMapEnd = new TreeMap<Integer, Emit>();\n        for (Emit emit : emitMapStart.values())\n        {\n            Emit pre = emitMapEnd.get(emit.getEnd());\n            if (pre == null || pre.size() < emit.size())\n            {\n                emitMapEnd.put(emit.getEnd(), emit);\n            }\n        }\n\n        collectedEmits.clear();\n        collectedEmits.addAll(emitMapEnd.values());\n    }", "code_tokens": ["private", "static", "void", "remainLongest", "(", "Collection", "<", "Emit", ">", "collectedEmits", ")", "{", "if", "(", "collectedEmits", ".", "size", "(", ")", "<", "2", ")", "return", ";", "Map", "<", "Integer", ",", "Emit", ">", "emitMapStart", "=", "new", "TreeMap", "<", "Integer", ",", "Emit", ">", "(", ")", ";", "for", "(", "Emit", "emit", ":", "collectedEmits", ")", "{", "Emit", "pre", "=", "emitMapStart", ".", "get", "(", "emit", ".", "getStart", "(", ")", ")", ";", "if", "(", "pre", "==", "null", "||", "pre", ".", "size", "(", ")", "<", "emit", ".", "size", "(", ")", ")", "{", "emitMapStart", ".", "put", "(", "emit", ".", "getStart", "(", ")", ",", "emit", ")", ";", "}", "}", "if", "(", "emitMapStart", ".", "size", "(", ")", "<", "2", ")", "{", "collectedEmits", ".", "clear", "(", ")", ";", "collectedEmits", ".", "addAll", "(", "emitMapStart", ".", "values", "(", ")", ")", ";", "return", ";", "}", "Map", "<", "Integer", ",", "Emit", ">", "emitMapEnd", "=", "new", "TreeMap", "<", "Integer", ",", "Emit", ">", "(", ")", ";", "for", "(", "Emit", "emit", ":", "emitMapStart", ".", "values", "(", ")", ")", "{", "Emit", "pre", "=", "emitMapEnd", ".", "get", "(", "emit", ".", "getEnd", "(", ")", ")", ";", "if", "(", "pre", "==", "null", "||", "pre", ".", "size", "(", ")", "<", "emit", ".", "size", "(", ")", ")", "{", "emitMapEnd", ".", "put", "(", "emit", ".", "getEnd", "(", ")", ",", "emit", ")", ";", "}", "}", "collectedEmits", ".", "clear", "(", ")", ";", "collectedEmits", ".", "addAll", "(", "emitMapEnd", ".", "values", "(", ")", ")", ";", "}"], "docstring": "\u53ea\u4fdd\u7559\u6700\u957f\u8bcd\n@param collectedEmits", "docstring_tokens": ["\u53ea\u4fdd\u7559\u6700\u957f\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L168-L198", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.getState", "original_string": "private static State getState(State currentState, Character character)\n    {\n        State newCurrentState = currentState.nextState(character);  // \u5148\u6309success\u8df3\u8f6c\n        while (newCurrentState == null) // \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c\n        {\n            currentState = currentState.failure();\n            newCurrentState = currentState.nextState(character);\n        }\n        return newCurrentState;\n    }", "language": "java", "code": "private static State getState(State currentState, Character character)\n    {\n        State newCurrentState = currentState.nextState(character);  // \u5148\u6309success\u8df3\u8f6c\n        while (newCurrentState == null) // \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c\n        {\n            currentState = currentState.failure();\n            newCurrentState = currentState.nextState(character);\n        }\n        return newCurrentState;\n    }", "code_tokens": ["private", "static", "State", "getState", "(", "State", "currentState", ",", "Character", "character", ")", "{", "State", "newCurrentState", "=", "currentState", ".", "nextState", "(", "character", ")", ";", "// \u5148\u6309success\u8df3\u8f6c", "while", "(", "newCurrentState", "==", "null", ")", "// \u8df3\u8f6c\u5931\u8d25\u7684\u8bdd\uff0c\u6309failure\u8df3\u8f6c", "{", "currentState", "=", "currentState", ".", "failure", "(", ")", ";", "newCurrentState", "=", "currentState", ".", "nextState", "(", "character", ")", ";", "}", "return", "newCurrentState", ";", "}"], "docstring": "\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n\n@param currentState \u5f53\u524d\u72b6\u6001\n@param character    \u63a5\u53d7\u5b57\u7b26\n@return \u8df3\u8f6c\u7ed3\u679c", "docstring_tokens": ["\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L208-L217", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.constructFailureStates", "original_string": "private void constructFailureStates()\n    {\n        Queue<State> queue = new LinkedBlockingDeque<State>();\n\n        // \u7b2c\u4e00\u6b65\uff0c\u5c06\u6df1\u5ea6\u4e3a1\u7684\u8282\u70b9\u7684failure\u8bbe\u4e3a\u6839\u8282\u70b9\n        for (State depthOneState : this.rootState.getStates())\n        {\n            depthOneState.setFailure(this.rootState);\n            queue.add(depthOneState);\n        }\n        this.failureStatesConstructed = true;\n\n        // \u7b2c\u4e8c\u6b65\uff0c\u4e3a\u6df1\u5ea6 > 1 \u7684\u8282\u70b9\u5efa\u7acbfailure\u8868\uff0c\u8fd9\u662f\u4e00\u4e2abfs\n        while (!queue.isEmpty())\n        {\n            State currentState = queue.remove();\n\n            for (Character transition : currentState.getTransitions())\n            {\n                State targetState = currentState.nextState(transition);\n                queue.add(targetState);\n\n                State traceFailureState = currentState.failure();\n                while (traceFailureState.nextState(transition) == null)\n                {\n                    traceFailureState = traceFailureState.failure();\n                }\n                State newFailureState = traceFailureState.nextState(transition);\n                targetState.setFailure(newFailureState);\n                targetState.addEmit(newFailureState.emit());\n            }\n        }\n    }", "language": "java", "code": "private void constructFailureStates()\n    {\n        Queue<State> queue = new LinkedBlockingDeque<State>();\n\n        // \u7b2c\u4e00\u6b65\uff0c\u5c06\u6df1\u5ea6\u4e3a1\u7684\u8282\u70b9\u7684failure\u8bbe\u4e3a\u6839\u8282\u70b9\n        for (State depthOneState : this.rootState.getStates())\n        {\n            depthOneState.setFailure(this.rootState);\n            queue.add(depthOneState);\n        }\n        this.failureStatesConstructed = true;\n\n        // \u7b2c\u4e8c\u6b65\uff0c\u4e3a\u6df1\u5ea6 > 1 \u7684\u8282\u70b9\u5efa\u7acbfailure\u8868\uff0c\u8fd9\u662f\u4e00\u4e2abfs\n        while (!queue.isEmpty())\n        {\n            State currentState = queue.remove();\n\n            for (Character transition : currentState.getTransitions())\n            {\n                State targetState = currentState.nextState(transition);\n                queue.add(targetState);\n\n                State traceFailureState = currentState.failure();\n                while (traceFailureState.nextState(transition) == null)\n                {\n                    traceFailureState = traceFailureState.failure();\n                }\n                State newFailureState = traceFailureState.nextState(transition);\n                targetState.setFailure(newFailureState);\n                targetState.addEmit(newFailureState.emit());\n            }\n        }\n    }", "code_tokens": ["private", "void", "constructFailureStates", "(", ")", "{", "Queue", "<", "State", ">", "queue", "=", "new", "LinkedBlockingDeque", "<", "State", ">", "(", ")", ";", "// \u7b2c\u4e00\u6b65\uff0c\u5c06\u6df1\u5ea6\u4e3a1\u7684\u8282\u70b9\u7684failure\u8bbe\u4e3a\u6839\u8282\u70b9", "for", "(", "State", "depthOneState", ":", "this", ".", "rootState", ".", "getStates", "(", ")", ")", "{", "depthOneState", ".", "setFailure", "(", "this", ".", "rootState", ")", ";", "queue", ".", "add", "(", "depthOneState", ")", ";", "}", "this", ".", "failureStatesConstructed", "=", "true", ";", "// \u7b2c\u4e8c\u6b65\uff0c\u4e3a\u6df1\u5ea6 > 1 \u7684\u8282\u70b9\u5efa\u7acbfailure\u8868\uff0c\u8fd9\u662f\u4e00\u4e2abfs", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", ")", "{", "State", "currentState", "=", "queue", ".", "remove", "(", ")", ";", "for", "(", "Character", "transition", ":", "currentState", ".", "getTransitions", "(", ")", ")", "{", "State", "targetState", "=", "currentState", ".", "nextState", "(", "transition", ")", ";", "queue", ".", "add", "(", "targetState", ")", ";", "State", "traceFailureState", "=", "currentState", ".", "failure", "(", ")", ";", "while", "(", "traceFailureState", ".", "nextState", "(", "transition", ")", "==", "null", ")", "{", "traceFailureState", "=", "traceFailureState", ".", "failure", "(", ")", ";", "}", "State", "newFailureState", "=", "traceFailureState", ".", "nextState", "(", "transition", ")", ";", "targetState", ".", "setFailure", "(", "newFailureState", ")", ";", "targetState", ".", "addEmit", "(", "newFailureState", ".", "emit", "(", ")", ")", ";", "}", "}", "}"], "docstring": "\u5efa\u7acbfailure\u8868", "docstring_tokens": ["\u5efa\u7acbfailure\u8868"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L233-L265", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.storeEmits", "original_string": "private static void storeEmits(int position, State currentState, List<Emit> collectedEmits)\n    {\n        Collection<String> emits = currentState.emit();\n        if (emits != null && !emits.isEmpty())\n        {\n            for (String emit : emits)\n            {\n                collectedEmits.add(new Emit(position - emit.length() + 1, position, emit));\n            }\n        }\n    }", "language": "java", "code": "private static void storeEmits(int position, State currentState, List<Emit> collectedEmits)\n    {\n        Collection<String> emits = currentState.emit();\n        if (emits != null && !emits.isEmpty())\n        {\n            for (String emit : emits)\n            {\n                collectedEmits.add(new Emit(position - emit.length() + 1, position, emit));\n            }\n        }\n    }", "code_tokens": ["private", "static", "void", "storeEmits", "(", "int", "position", ",", "State", "currentState", ",", "List", "<", "Emit", ">", "collectedEmits", ")", "{", "Collection", "<", "String", ">", "emits", "=", "currentState", ".", "emit", "(", ")", ";", "if", "(", "emits", "!=", "null", "&&", "!", "emits", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "String", "emit", ":", "emits", ")", "{", "collectedEmits", ".", "add", "(", "new", "Emit", "(", "position", "-", "emit", ".", "length", "(", ")", "+", "1", ",", "position", ",", "emit", ")", ")", ";", "}", "}", "}"], "docstring": "\u4fdd\u5b58\u5339\u914d\u7ed3\u679c\n\n@param position       \u5f53\u524d\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u5339\u914d\u5230\u7684\u6a21\u5f0f\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e+1\n@param currentState   \u5f53\u524d\u72b6\u6001\n@param collectedEmits \u4fdd\u5b58\u4f4d\u7f6e", "docstring_tokens": ["\u4fdd\u5b58\u5339\u914d\u7ed3\u679c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L301-L311", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java", "func_name": "Trie.hasKeyword", "original_string": "public boolean hasKeyword(String text)\n    {\n        checkForConstructedFailureStates();\n\n        State currentState = this.rootState;\n        for (int i = 0; i < text.length(); ++i)\n        {\n        \tState nextState = getState(currentState, text.charAt(i));\n            if (nextState != null && nextState != currentState && nextState.emit().size() != 0) {\n                return true;\n            }\n            currentState = nextState;\n        }\n        return false;\n    }", "language": "java", "code": "public boolean hasKeyword(String text)\n    {\n        checkForConstructedFailureStates();\n\n        State currentState = this.rootState;\n        for (int i = 0; i < text.length(); ++i)\n        {\n        \tState nextState = getState(currentState, text.charAt(i));\n            if (nextState != null && nextState != currentState && nextState.emit().size() != 0) {\n                return true;\n            }\n            currentState = nextState;\n        }\n        return false;\n    }", "code_tokens": ["public", "boolean", "hasKeyword", "(", "String", "text", ")", "{", "checkForConstructedFailureStates", "(", ")", ";", "State", "currentState", "=", "this", ".", "rootState", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "text", ".", "length", "(", ")", ";", "++", "i", ")", "{", "State", "nextState", "=", "getState", "(", "currentState", ",", "text", ".", "charAt", "(", "i", ")", ")", ";", "if", "(", "nextState", "!=", "null", "&&", "nextState", "!=", "currentState", "&&", "nextState", ".", "emit", "(", ")", ".", "size", "(", ")", "!=", "0", ")", "{", "return", "true", ";", "}", "currentState", "=", "nextState", ";", "}", "return", "false", ";", "}"], "docstring": "\u6587\u672c\u662f\u5426\u5305\u542b\u4efb\u4f55\u6a21\u5f0f\n\n@param text \u5f85\u5339\u914d\u7684\u6587\u672c\n@return \u6587\u672c\u5305\u542b\u6a21\u5f0f\u6642\u56de\u50b3true", "docstring_tokens": ["\u6587\u672c\u662f\u5426\u5305\u542b\u4efb\u4f55\u6a21\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/trie/Trie.java#L319-L333", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java", "func_name": "BaseChineseDictionary.load", "original_string": "static boolean load(Map<String, String> storage, boolean reverse, String... pathArray)\n    {\n        StringDictionary dictionary = new StringDictionary(\"=\");\n        for (String path : pathArray)\n        {\n            if (!dictionary.load(path)) return false;\n        }\n        if (reverse) dictionary = dictionary.reverse();\n        Set<Map.Entry<String, String>> entrySet = dictionary.entrySet();\n        for (Map.Entry<String, String> entry : entrySet)\n        {\n            storage.put(entry.getKey(), entry.getValue());\n        }\n\n        return true;\n    }", "language": "java", "code": "static boolean load(Map<String, String> storage, boolean reverse, String... pathArray)\n    {\n        StringDictionary dictionary = new StringDictionary(\"=\");\n        for (String path : pathArray)\n        {\n            if (!dictionary.load(path)) return false;\n        }\n        if (reverse) dictionary = dictionary.reverse();\n        Set<Map.Entry<String, String>> entrySet = dictionary.entrySet();\n        for (Map.Entry<String, String> entry : entrySet)\n        {\n            storage.put(entry.getKey(), entry.getValue());\n        }\n\n        return true;\n    }", "code_tokens": ["static", "boolean", "load", "(", "Map", "<", "String", ",", "String", ">", "storage", ",", "boolean", "reverse", ",", "String", "...", "pathArray", ")", "{", "StringDictionary", "dictionary", "=", "new", "StringDictionary", "(", "\"=\"", ")", ";", "for", "(", "String", "path", ":", "pathArray", ")", "{", "if", "(", "!", "dictionary", ".", "load", "(", "path", ")", ")", "return", "false", ";", "}", "if", "(", "reverse", ")", "dictionary", "=", "dictionary", ".", "reverse", "(", ")", ";", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "String", ">", ">", "entrySet", "=", "dictionary", ".", "entrySet", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "String", ">", "entry", ":", "entrySet", ")", "{", "storage", ".", "put", "(", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getValue", "(", ")", ")", ";", "}", "return", "true", ";", "}"], "docstring": "\u8bfb\u53d6\u8bcd\u5178\n@param storage \u50a8\u5b58\u7a7a\u95f4\n@param reverse \u662f\u5426\u7ffb\u8f6c\u952e\u503c\u5bf9\n@param pathArray \u8def\u5f84\n@return \u662f\u5426\u52a0\u8f7d\u6210\u529f", "docstring_tokens": ["\u8bfb\u53d6\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java#L75-L90", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java", "func_name": "BaseChineseDictionary.load", "original_string": "static boolean load(String path, AhoCorasickDoubleArrayTrie<String> trie)\n    {\n        return load(path, trie, false);\n    }", "language": "java", "code": "static boolean load(String path, AhoCorasickDoubleArrayTrie<String> trie)\n    {\n        return load(path, trie, false);\n    }", "code_tokens": ["static", "boolean", "load", "(", "String", "path", ",", "AhoCorasickDoubleArrayTrie", "<", "String", ">", "trie", ")", "{", "return", "load", "(", "path", ",", "trie", ",", "false", ")", ";", "}"], "docstring": "\u5c06path\u7684\u5185\u5bb9\u8f7d\u5165trie\u4e2d\n@param path\n@param trie\n@return", "docstring_tokens": ["\u5c06path\u7684\u5185\u5bb9\u8f7d\u5165trie\u4e2d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java#L97-L100", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java", "func_name": "BaseChineseDictionary.load", "original_string": "static boolean load(String path, AhoCorasickDoubleArrayTrie<String> trie, boolean reverse)\n    {\n        String datPath = path;\n        if (reverse)\n        {\n            datPath += Predefine.REVERSE_EXT;\n        }\n        if (loadDat(datPath, trie)) return true;\n        // \u4ece\u6587\u672c\u4e2d\u8f7d\u5165\u5e76\u4e14\u5c1d\u8bd5\u751f\u6210dat\n        TreeMap<String, String> map = new TreeMap<String, String>();\n        if (!load(map, reverse, path)) return false;\n        logger.info(\"\u6b63\u5728\u6784\u5efaAhoCorasickDoubleArrayTrie\uff0c\u6765\u6e90\uff1a\" + path);\n        trie.build(map);\n        logger.info(\"\u6b63\u5728\u7f13\u5b58\u53cc\u6570\u7ec4\" + datPath);\n        saveDat(datPath, trie, map.entrySet());\n        return true;\n    }", "language": "java", "code": "static boolean load(String path, AhoCorasickDoubleArrayTrie<String> trie, boolean reverse)\n    {\n        String datPath = path;\n        if (reverse)\n        {\n            datPath += Predefine.REVERSE_EXT;\n        }\n        if (loadDat(datPath, trie)) return true;\n        // \u4ece\u6587\u672c\u4e2d\u8f7d\u5165\u5e76\u4e14\u5c1d\u8bd5\u751f\u6210dat\n        TreeMap<String, String> map = new TreeMap<String, String>();\n        if (!load(map, reverse, path)) return false;\n        logger.info(\"\u6b63\u5728\u6784\u5efaAhoCorasickDoubleArrayTrie\uff0c\u6765\u6e90\uff1a\" + path);\n        trie.build(map);\n        logger.info(\"\u6b63\u5728\u7f13\u5b58\u53cc\u6570\u7ec4\" + datPath);\n        saveDat(datPath, trie, map.entrySet());\n        return true;\n    }", "code_tokens": ["static", "boolean", "load", "(", "String", "path", ",", "AhoCorasickDoubleArrayTrie", "<", "String", ">", "trie", ",", "boolean", "reverse", ")", "{", "String", "datPath", "=", "path", ";", "if", "(", "reverse", ")", "{", "datPath", "+=", "Predefine", ".", "REVERSE_EXT", ";", "}", "if", "(", "loadDat", "(", "datPath", ",", "trie", ")", ")", "return", "true", ";", "// \u4ece\u6587\u672c\u4e2d\u8f7d\u5165\u5e76\u4e14\u5c1d\u8bd5\u751f\u6210dat", "TreeMap", "<", "String", ",", "String", ">", "map", "=", "new", "TreeMap", "<", "String", ",", "String", ">", "(", ")", ";", "if", "(", "!", "load", "(", "map", ",", "reverse", ",", "path", ")", ")", "return", "false", ";", "logger", ".", "info", "(", "\"\u6b63\u5728\u6784\u5efaAhoCorasickDoubleArrayTrie\uff0c\u6765\u6e90\uff1a\" + path);", "", "", "", "", "trie", ".", "build", "(", "map", ")", ";", "logger", ".", "info", "(", "\"\u6b63\u5728\u7f13\u5b58\u53cc\u6570\u7ec4\" + datPath);", "", "", "", "", "saveDat", "(", "datPath", ",", "trie", ",", "map", ".", "entrySet", "(", ")", ")", ";", "return", "true", ";", "}"], "docstring": "\u8bfb\u53d6\u8bcd\u5178\n@param path\n@param trie\n@param reverse \u662f\u5426\u5c06\u5176\u7ffb\u8f6c\n@return", "docstring_tokens": ["\u8bfb\u53d6\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/ts/BaseChineseDictionary.java#L109-L125", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/suggest/Suggester.java", "func_name": "Suggester.sortScoreMap", "original_string": "private static TreeMap<Double ,Set<String>> sortScoreMap(TreeMap<String, Double> scoreMap)\n    {\n        TreeMap<Double, Set<String>> result = new TreeMap<Double, Set<String>>(Collections.reverseOrder());\n        for (Map.Entry<String, Double> entry : scoreMap.entrySet())\n        {\n            Set<String> sentenceSet = result.get(entry.getValue());\n            if (sentenceSet == null)\n            {\n                sentenceSet = new HashSet<String>();\n                result.put(entry.getValue(), sentenceSet);\n            }\n            sentenceSet.add(entry.getKey());\n        }\n\n        return result;\n    }", "language": "java", "code": "private static TreeMap<Double ,Set<String>> sortScoreMap(TreeMap<String, Double> scoreMap)\n    {\n        TreeMap<Double, Set<String>> result = new TreeMap<Double, Set<String>>(Collections.reverseOrder());\n        for (Map.Entry<String, Double> entry : scoreMap.entrySet())\n        {\n            Set<String> sentenceSet = result.get(entry.getValue());\n            if (sentenceSet == null)\n            {\n                sentenceSet = new HashSet<String>();\n                result.put(entry.getValue(), sentenceSet);\n            }\n            sentenceSet.add(entry.getKey());\n        }\n\n        return result;\n    }", "code_tokens": ["private", "static", "TreeMap", "<", "Double", ",", "Set", "<", "String", ">", ">", "sortScoreMap", "(", "TreeMap", "<", "String", ",", "Double", ">", "scoreMap", ")", "{", "TreeMap", "<", "Double", ",", "Set", "<", "String", ">", ">", "result", "=", "new", "TreeMap", "<", "Double", ",", "Set", "<", "String", ">", ">", "(", "Collections", ".", "reverseOrder", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Double", ">", "entry", ":", "scoreMap", ".", "entrySet", "(", ")", ")", "{", "Set", "<", "String", ">", "sentenceSet", "=", "result", ".", "get", "(", "entry", ".", "getValue", "(", ")", ")", ";", "if", "(", "sentenceSet", "==", "null", ")", "{", "sentenceSet", "=", "new", "HashSet", "<", "String", ">", "(", ")", ";", "result", ".", "put", "(", "entry", ".", "getValue", "(", ")", ",", "sentenceSet", ")", ";", "}", "sentenceSet", ".", "add", "(", "entry", ".", "getKey", "(", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "\u5c06\u5206\u6570map\u6392\u5e8f\u6298\u53e0\n@param scoreMap\n@return", "docstring_tokens": ["\u5c06\u5206\u6570map\u6392\u5e8f\u6298\u53e0"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/suggest/Suggester.java#L109-L124", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/suggest/Suggester.java", "func_name": "Suggester.max", "original_string": "private static Double max(Map<String, Double> map)\n    {\n        Double theMax = 0.0;\n        for (Double v : map.values())\n        {\n            theMax = Math.max(theMax, v);\n        }\n\n        return theMax;\n    }", "language": "java", "code": "private static Double max(Map<String, Double> map)\n    {\n        Double theMax = 0.0;\n        for (Double v : map.values())\n        {\n            theMax = Math.max(theMax, v);\n        }\n\n        return theMax;\n    }", "code_tokens": ["private", "static", "Double", "max", "(", "Map", "<", "String", ",", "Double", ">", "map", ")", "{", "Double", "theMax", "=", "0.0", ";", "for", "(", "Double", "v", ":", "map", ".", "values", "(", ")", ")", "{", "theMax", "=", "Math", ".", "max", "(", "theMax", ",", "v", ")", ";", "}", "return", "theMax", ";", "}"], "docstring": "\u4ecemap\u7684\u503c\u4e2d\u627e\u51fa\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u4ece0\u5f00\u59cb\u7684\n@param map\n@return", "docstring_tokens": ["\u4ecemap\u7684\u503c\u4e2d\u627e\u51fa\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u4ece0\u5f00\u59cb\u7684"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/suggest/Suggester.java#L131-L140", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/suggest/scorer/pinyin/PinyinKey.java", "func_name": "PinyinKey.size", "original_string": "public int size()\n    {\n        int length = 0;\n        for (Pinyin pinyin : pinyinArray)\n        {\n            if (pinyin != Pinyin.none5) ++length;\n        }\n\n        return length;\n    }", "language": "java", "code": "public int size()\n    {\n        int length = 0;\n        for (Pinyin pinyin : pinyinArray)\n        {\n            if (pinyin != Pinyin.none5) ++length;\n        }\n\n        return length;\n    }", "code_tokens": ["public", "int", "size", "(", ")", "{", "int", "length", "=", "0", ";", "for", "(", "Pinyin", "pinyin", ":", "pinyinArray", ")", "{", "if", "(", "pinyin", "!=", "Pinyin", ".", "none5", ")", "++", "length", ";", "}", "return", "length", ";", "}"], "docstring": "\u62fc\u97f3\u7684\u4e2a\u6570\n@return", "docstring_tokens": ["\u62fc\u97f3\u7684\u4e2a\u6570"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/suggest/scorer/pinyin/PinyinKey.java#L120-L129", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java", "func_name": "Corpus.addWordToVocab", "original_string": "protected int addWordToVocab(String word)\n    {\n        vocab[vocabSize] = new VocabWord(word);\n        vocabSize++;\n\n        // Reallocate memory if needed\n        if (vocabSize + 2 >= vocabMaxSize)\n        {\n            vocabMaxSize += 1000;\n            VocabWord[] temp = new VocabWord[vocabMaxSize];\n            System.arraycopy(vocab, 0, temp, 0, vocabSize);\n            vocab = temp;\n        }\n        vocabIndexMap.put(word, vocabSize - 1);\n        return vocabSize - 1;\n    }", "language": "java", "code": "protected int addWordToVocab(String word)\n    {\n        vocab[vocabSize] = new VocabWord(word);\n        vocabSize++;\n\n        // Reallocate memory if needed\n        if (vocabSize + 2 >= vocabMaxSize)\n        {\n            vocabMaxSize += 1000;\n            VocabWord[] temp = new VocabWord[vocabMaxSize];\n            System.arraycopy(vocab, 0, temp, 0, vocabSize);\n            vocab = temp;\n        }\n        vocabIndexMap.put(word, vocabSize - 1);\n        return vocabSize - 1;\n    }", "code_tokens": ["protected", "int", "addWordToVocab", "(", "String", "word", ")", "{", "vocab", "[", "vocabSize", "]", "=", "new", "VocabWord", "(", "word", ")", ";", "vocabSize", "++", ";", "// Reallocate memory if needed", "if", "(", "vocabSize", "+", "2", ">=", "vocabMaxSize", ")", "{", "vocabMaxSize", "+=", "1000", ";", "VocabWord", "[", "]", "temp", "=", "new", "VocabWord", "[", "vocabMaxSize", "]", ";", "System", ".", "arraycopy", "(", "vocab", ",", "0", ",", "temp", ",", "0", ",", "vocabSize", ")", ";", "vocab", "=", "temp", ";", "}", "vocabIndexMap", ".", "put", "(", "word", ",", "vocabSize", "-", "1", ")", ";", "return", "vocabSize", "-", "1", ";", "}"], "docstring": "Adds a word to the vocabulary\n\n@param word\n@return", "docstring_tokens": ["Adds", "a", "word", "to", "the", "vocabulary"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java#L46-L61", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java", "func_name": "Corpus.searchVocab", "original_string": "int searchVocab(String word)\n    {\n        if (word == null) return -1;\n        Integer pos = vocabIndexMap.get(word);\n        return pos == null ? -1 : pos.intValue();\n    }", "language": "java", "code": "int searchVocab(String word)\n    {\n        if (word == null) return -1;\n        Integer pos = vocabIndexMap.get(word);\n        return pos == null ? -1 : pos.intValue();\n    }", "code_tokens": ["int", "searchVocab", "(", "String", "word", ")", "{", "if", "(", "word", "==", "null", ")", "return", "-", "1", ";", "Integer", "pos", "=", "vocabIndexMap", ".", "get", "(", "word", ")", ";", "return", "pos", "==", "null", "?", "-", "1", ":", "pos", ".", "intValue", "(", ")", ";", "}"], "docstring": "Returns position of a word in the vocabulary; if the word is not found, returns -1\n\n@param word\n@return", "docstring_tokens": ["Returns", "position", "of", "a", "word", "in", "the", "vocabulary", ";", "if", "the", "word", "is", "not", "found", "returns", "-", "1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java#L137-L142", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java", "func_name": "Corpus.sortVocab", "original_string": "void sortVocab()\n    {\n        Arrays.sort(vocab, 0, vocabSize);\n\n        // re-build vocabIndexMap\n        final int size = vocabSize;\n        trainWords = 0;\n        table = new int[size];\n        for (int i = 0; i < size; i++)\n        {\n            VocabWord word = vocab[i];\n            // Words occuring less than min_count times will be discarded from the vocab\n            if (word.cn < config.getMinCount())\n            {\n                table[vocabIndexMap.get(word.word)] = -4;\n                vocabSize--;\n            }\n            else\n            {\n                // Hash will be re-computed, as after the sorting it is not actual\n                table[vocabIndexMap.get(word.word)] = i;\n                setVocabIndexMap(word, i);\n            }\n        }\n        // lose weight\n        vocabIndexMap = null;\n\n        VocabWord[] nvocab = new VocabWord[vocabSize];\n        System.arraycopy(vocab, 0, nvocab, 0, vocabSize);\n\n    }", "language": "java", "code": "void sortVocab()\n    {\n        Arrays.sort(vocab, 0, vocabSize);\n\n        // re-build vocabIndexMap\n        final int size = vocabSize;\n        trainWords = 0;\n        table = new int[size];\n        for (int i = 0; i < size; i++)\n        {\n            VocabWord word = vocab[i];\n            // Words occuring less than min_count times will be discarded from the vocab\n            if (word.cn < config.getMinCount())\n            {\n                table[vocabIndexMap.get(word.word)] = -4;\n                vocabSize--;\n            }\n            else\n            {\n                // Hash will be re-computed, as after the sorting it is not actual\n                table[vocabIndexMap.get(word.word)] = i;\n                setVocabIndexMap(word, i);\n            }\n        }\n        // lose weight\n        vocabIndexMap = null;\n\n        VocabWord[] nvocab = new VocabWord[vocabSize];\n        System.arraycopy(vocab, 0, nvocab, 0, vocabSize);\n\n    }", "code_tokens": ["void", "sortVocab", "(", ")", "{", "Arrays", ".", "sort", "(", "vocab", ",", "0", ",", "vocabSize", ")", ";", "// re-build vocabIndexMap", "final", "int", "size", "=", "vocabSize", ";", "trainWords", "=", "0", ";", "table", "=", "new", "int", "[", "size", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "VocabWord", "word", "=", "vocab", "[", "i", "]", ";", "// Words occuring less than min_count times will be discarded from the vocab", "if", "(", "word", ".", "cn", "<", "config", ".", "getMinCount", "(", ")", ")", "{", "table", "[", "vocabIndexMap", ".", "get", "(", "word", ".", "word", ")", "]", "=", "-", "4", ";", "vocabSize", "--", ";", "}", "else", "{", "// Hash will be re-computed, as after the sorting it is not actual", "table", "[", "vocabIndexMap", ".", "get", "(", "word", ".", "word", ")", "]", "=", "i", ";", "setVocabIndexMap", "(", "word", ",", "i", ")", ";", "}", "}", "// lose weight", "vocabIndexMap", "=", "null", ";", "VocabWord", "[", "]", "nvocab", "=", "new", "VocabWord", "[", "vocabSize", "]", ";", "System", ".", "arraycopy", "(", "vocab", ",", "0", ",", "nvocab", ",", "0", ",", "vocabSize", ")", ";", "}"], "docstring": "Sorts the vocabulary by frequency using word counts", "docstring_tokens": ["Sorts", "the", "vocabulary", "by", "frequency", "using", "word", "counts"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java#L147-L177", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java", "func_name": "Corpus.createBinaryTree", "original_string": "void createBinaryTree()\n    {\n        int[] point = new int[VocabWord.MAX_CODE_LENGTH];\n        char[] code = new char[VocabWord.MAX_CODE_LENGTH];\n        int[] count = new int[vocabSize * 2 + 1];\n        char[] binary = new char[vocabSize * 2 + 1];\n        int[] parentNode = new int[vocabSize * 2 + 1];\n\n        for (int i = 0; i < vocabSize; i++)\n            count[i] = vocab[i].cn;\n        for (int i = vocabSize; i < vocabSize * 2; i++)\n            count[i] = Integer.MAX_VALUE;\n        int pos1 = vocabSize - 1;\n        int pos2 = vocabSize;\n        // Following algorithm constructs the Huffman tree by adding one node at a time\n        int min1i, min2i;\n        for (int i = 0; i < vocabSize - 1; i++)\n        {\n            // First, find two smallest nodes 'min1, min2'\n            if (pos1 >= 0)\n            {\n                if (count[pos1] < count[pos2])\n                {\n                    min1i = pos1;\n                    pos1--;\n                }\n                else\n                {\n                    min1i = pos2;\n                    pos2++;\n                }\n            }\n            else\n            {\n                min1i = pos2;\n                pos2++;\n            }\n            if (pos1 >= 0)\n            {\n                if (count[pos1] < count[pos2])\n                {\n                    min2i = pos1;\n                    pos1--;\n                }\n                else\n                {\n                    min2i = pos2;\n                    pos2++;\n                }\n            }\n            else\n            {\n                min2i = pos2;\n                pos2++;\n            }\n            count[vocabSize + i] = count[min1i] + count[min2i];\n            parentNode[min1i] = vocabSize + i;\n            parentNode[min2i] = vocabSize + i;\n            binary[min2i] = 1;\n        }\n        // Now assign binary code to each vocabulary word\n        for (int j = 0; j < vocabSize; j++)\n        {\n            int k = j;\n            int i = 0;\n            while (true)\n            {\n                code[i] = binary[k];\n                point[i] = k;\n                i++;\n                k = parentNode[k];\n                if (k == vocabSize * 2 - 2) break;\n            }\n            vocab[j].codelen = i;\n            vocab[j].point[0] = vocabSize - 2;\n            for (k = 0; k < i; k++)\n            {\n                vocab[j].code[i - k - 1] = code[k];\n                vocab[j].point[i - k] = point[k] - vocabSize;\n            }\n        }\n    }", "language": "java", "code": "void createBinaryTree()\n    {\n        int[] point = new int[VocabWord.MAX_CODE_LENGTH];\n        char[] code = new char[VocabWord.MAX_CODE_LENGTH];\n        int[] count = new int[vocabSize * 2 + 1];\n        char[] binary = new char[vocabSize * 2 + 1];\n        int[] parentNode = new int[vocabSize * 2 + 1];\n\n        for (int i = 0; i < vocabSize; i++)\n            count[i] = vocab[i].cn;\n        for (int i = vocabSize; i < vocabSize * 2; i++)\n            count[i] = Integer.MAX_VALUE;\n        int pos1 = vocabSize - 1;\n        int pos2 = vocabSize;\n        // Following algorithm constructs the Huffman tree by adding one node at a time\n        int min1i, min2i;\n        for (int i = 0; i < vocabSize - 1; i++)\n        {\n            // First, find two smallest nodes 'min1, min2'\n            if (pos1 >= 0)\n            {\n                if (count[pos1] < count[pos2])\n                {\n                    min1i = pos1;\n                    pos1--;\n                }\n                else\n                {\n                    min1i = pos2;\n                    pos2++;\n                }\n            }\n            else\n            {\n                min1i = pos2;\n                pos2++;\n            }\n            if (pos1 >= 0)\n            {\n                if (count[pos1] < count[pos2])\n                {\n                    min2i = pos1;\n                    pos1--;\n                }\n                else\n                {\n                    min2i = pos2;\n                    pos2++;\n                }\n            }\n            else\n            {\n                min2i = pos2;\n                pos2++;\n            }\n            count[vocabSize + i] = count[min1i] + count[min2i];\n            parentNode[min1i] = vocabSize + i;\n            parentNode[min2i] = vocabSize + i;\n            binary[min2i] = 1;\n        }\n        // Now assign binary code to each vocabulary word\n        for (int j = 0; j < vocabSize; j++)\n        {\n            int k = j;\n            int i = 0;\n            while (true)\n            {\n                code[i] = binary[k];\n                point[i] = k;\n                i++;\n                k = parentNode[k];\n                if (k == vocabSize * 2 - 2) break;\n            }\n            vocab[j].codelen = i;\n            vocab[j].point[0] = vocabSize - 2;\n            for (k = 0; k < i; k++)\n            {\n                vocab[j].code[i - k - 1] = code[k];\n                vocab[j].point[i - k] = point[k] - vocabSize;\n            }\n        }\n    }", "code_tokens": ["void", "createBinaryTree", "(", ")", "{", "int", "[", "]", "point", "=", "new", "int", "[", "VocabWord", ".", "MAX_CODE_LENGTH", "]", ";", "char", "[", "]", "code", "=", "new", "char", "[", "VocabWord", ".", "MAX_CODE_LENGTH", "]", ";", "int", "[", "]", "count", "=", "new", "int", "[", "vocabSize", "*", "2", "+", "1", "]", ";", "char", "[", "]", "binary", "=", "new", "char", "[", "vocabSize", "*", "2", "+", "1", "]", ";", "int", "[", "]", "parentNode", "=", "new", "int", "[", "vocabSize", "*", "2", "+", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "vocabSize", ";", "i", "++", ")", "count", "[", "i", "]", "=", "vocab", "[", "i", "]", ".", "cn", ";", "for", "(", "int", "i", "=", "vocabSize", ";", "i", "<", "vocabSize", "*", "2", ";", "i", "++", ")", "count", "[", "i", "]", "=", "Integer", ".", "MAX_VALUE", ";", "int", "pos1", "=", "vocabSize", "-", "1", ";", "int", "pos2", "=", "vocabSize", ";", "// Following algorithm constructs the Huffman tree by adding one node at a time", "int", "min1i", ",", "min2i", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "vocabSize", "-", "1", ";", "i", "++", ")", "{", "// First, find two smallest nodes 'min1, min2'", "if", "(", "pos1", ">=", "0", ")", "{", "if", "(", "count", "[", "pos1", "]", "<", "count", "[", "pos2", "]", ")", "{", "min1i", "=", "pos1", ";", "pos1", "--", ";", "}", "else", "{", "min1i", "=", "pos2", ";", "pos2", "++", ";", "}", "}", "else", "{", "min1i", "=", "pos2", ";", "pos2", "++", ";", "}", "if", "(", "pos1", ">=", "0", ")", "{", "if", "(", "count", "[", "pos1", "]", "<", "count", "[", "pos2", "]", ")", "{", "min2i", "=", "pos1", ";", "pos1", "--", ";", "}", "else", "{", "min2i", "=", "pos2", ";", "pos2", "++", ";", "}", "}", "else", "{", "min2i", "=", "pos2", ";", "pos2", "++", ";", "}", "count", "[", "vocabSize", "+", "i", "]", "=", "count", "[", "min1i", "]", "+", "count", "[", "min2i", "]", ";", "parentNode", "[", "min1i", "]", "=", "vocabSize", "+", "i", ";", "parentNode", "[", "min2i", "]", "=", "vocabSize", "+", "i", ";", "binary", "[", "min2i", "]", "=", "1", ";", "}", "// Now assign binary code to each vocabulary word", "for", "(", "int", "j", "=", "0", ";", "j", "<", "vocabSize", ";", "j", "++", ")", "{", "int", "k", "=", "j", ";", "int", "i", "=", "0", ";", "while", "(", "true", ")", "{", "code", "[", "i", "]", "=", "binary", "[", "k", "]", ";", "point", "[", "i", "]", "=", "k", ";", "i", "++", ";", "k", "=", "parentNode", "[", "k", "]", ";", "if", "(", "k", "==", "vocabSize", "*", "2", "-", "2", ")", "break", ";", "}", "vocab", "[", "j", "]", ".", "codelen", "=", "i", ";", "vocab", "[", "j", "]", ".", "point", "[", "0", "]", "=", "vocabSize", "-", "2", ";", "for", "(", "k", "=", "0", ";", "k", "<", "i", ";", "k", "++", ")", "{", "vocab", "[", "j", "]", ".", "code", "[", "i", "-", "k", "-", "1", "]", "=", "code", "[", "k", "]", ";", "vocab", "[", "j", "]", ".", "point", "[", "i", "-", "k", "]", "=", "point", "[", "k", "]", "-", "vocabSize", ";", "}", "}", "}"], "docstring": "Create binary Huffman tree using the word counts.\nFrequent words will have short uniqe binary codes", "docstring_tokens": ["Create", "binary", "Huffman", "tree", "using", "the", "word", "counts", ".", "Frequent", "words", "will", "have", "short", "uniqe", "binary", "codes"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/Corpus.java#L189-L270", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/CorpusLoader.java", "func_name": "CorpusLoader.convert2DocumentList", "original_string": "public static List<Document> convert2DocumentList(String folderPath, boolean verbose)\n    {\n        long start = System.currentTimeMillis();\n        List<File> fileList = IOUtil.fileList(folderPath);\n        List<Document> documentList = new LinkedList<Document>();\n        int i = 0;\n        for (File file : fileList)\n        {\n            if (verbose) System.out.print(file);\n            Document document = convert2Document(file);\n            documentList.add(document);\n            if (verbose) System.out.println(\" \" + ++i + \" / \" + fileList.size());\n        }\n        if (verbose)\n        {\n            System.out.println(documentList.size());\n            System.out.printf(\"\u82b1\u8d39\u65f6\u95f4%d ms\\n\", System.currentTimeMillis() - start);\n        }\n        return documentList;\n    }", "language": "java", "code": "public static List<Document> convert2DocumentList(String folderPath, boolean verbose)\n    {\n        long start = System.currentTimeMillis();\n        List<File> fileList = IOUtil.fileList(folderPath);\n        List<Document> documentList = new LinkedList<Document>();\n        int i = 0;\n        for (File file : fileList)\n        {\n            if (verbose) System.out.print(file);\n            Document document = convert2Document(file);\n            documentList.add(document);\n            if (verbose) System.out.println(\" \" + ++i + \" / \" + fileList.size());\n        }\n        if (verbose)\n        {\n            System.out.println(documentList.size());\n            System.out.printf(\"\u82b1\u8d39\u65f6\u95f4%d ms\\n\", System.currentTimeMillis() - start);\n        }\n        return documentList;\n    }", "code_tokens": ["public", "static", "List", "<", "Document", ">", "convert2DocumentList", "(", "String", "folderPath", ",", "boolean", "verbose", ")", "{", "long", "start", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "List", "<", "File", ">", "fileList", "=", "IOUtil", ".", "fileList", "(", "folderPath", ")", ";", "List", "<", "Document", ">", "documentList", "=", "new", "LinkedList", "<", "Document", ">", "(", ")", ";", "int", "i", "=", "0", ";", "for", "(", "File", "file", ":", "fileList", ")", "{", "if", "(", "verbose", ")", "System", ".", "out", ".", "print", "(", "file", ")", ";", "Document", "document", "=", "convert2Document", "(", "file", ")", ";", "documentList", ".", "add", "(", "document", ")", ";", "if", "(", "verbose", ")", "System", ".", "out", ".", "println", "(", "\" \"", "+", "++", "i", "+", "\" / \"", "+", "fileList", ".", "size", "(", ")", ")", ";", "}", "if", "(", "verbose", ")", "{", "System", ".", "out", ".", "println", "(", "documentList", ".", "size", "(", ")", ")", ";", "System", ".", "out", ".", "printf", "(", "\"\u82b1\u8d39\u65f6\u95f4%d ms\\n\", System", ".", "urrent", "T", "imeMillis() - sta", "r", "t", ";", "", "", "", "}", "return", "documentList", ";", "}"], "docstring": "\u8bfb\u53d6\u6574\u4e2a\u76ee\u5f55\u4e2d\u7684\u4eba\u6c11\u65e5\u62a5\u683c\u5f0f\u8bed\u6599\n\n@param folderPath \u8def\u5f84\n@param verbose\n@return", "docstring_tokens": ["\u8bfb\u53d6\u6574\u4e2a\u76ee\u5f55\u4e2d\u7684\u4eba\u6c11\u65e5\u62a5\u683c\u5f0f\u8bed\u6599"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/CorpusLoader.java#L82-L101", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java", "func_name": "IntervalNode.determineMedian", "original_string": "public int determineMedian(List<Intervalable> intervals)\n    {\n        int start = -1;\n        int end = -1;\n        for (Intervalable interval : intervals)\n        {\n            int currentStart = interval.getStart();\n            int currentEnd = interval.getEnd();\n            if (start == -1 || currentStart < start)\n            {\n                start = currentStart;\n            }\n            if (end == -1 || currentEnd > end)\n            {\n                end = currentEnd;\n            }\n        }\n        return (start + end) / 2;\n    }", "language": "java", "code": "public int determineMedian(List<Intervalable> intervals)\n    {\n        int start = -1;\n        int end = -1;\n        for (Intervalable interval : intervals)\n        {\n            int currentStart = interval.getStart();\n            int currentEnd = interval.getEnd();\n            if (start == -1 || currentStart < start)\n            {\n                start = currentStart;\n            }\n            if (end == -1 || currentEnd > end)\n            {\n                end = currentEnd;\n            }\n        }\n        return (start + end) / 2;\n    }", "code_tokens": ["public", "int", "determineMedian", "(", "List", "<", "Intervalable", ">", "intervals", ")", "{", "int", "start", "=", "-", "1", ";", "int", "end", "=", "-", "1", ";", "for", "(", "Intervalable", "interval", ":", "intervals", ")", "{", "int", "currentStart", "=", "interval", ".", "getStart", "(", ")", ";", "int", "currentEnd", "=", "interval", ".", "getEnd", "(", ")", ";", "if", "(", "start", "==", "-", "1", "||", "currentStart", "<", "start", ")", "{", "start", "=", "currentStart", ";", "}", "if", "(", "end", "==", "-", "1", "||", "currentEnd", ">", "end", ")", "{", "end", "=", "currentEnd", ";", "}", "}", "return", "(", "start", "+", "end", ")", "/", "2", ";", "}"], "docstring": "\u8ba1\u7b97\u4e2d\u70b9\n@param intervals \u533a\u95f4\u96c6\u5408\n@return \u4e2d\u70b9\u5750\u6807", "docstring_tokens": ["\u8ba1\u7b97\u4e2d\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java#L79-L97", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java", "func_name": "IntervalNode.findOverlaps", "original_string": "public List<Intervalable> findOverlaps(Intervalable interval)\n    {\n\n        List<Intervalable> overlaps = new ArrayList<Intervalable>();\n\n        if (this.point < interval.getStart())\n        {\n            // \u53f3\u8fb9\u627e\u627e\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));\n            addToOverlaps(interval, overlaps, checkForOverlapsToTheRight(interval));\n        }\n        else if (this.point > interval.getEnd())\n        {\n            // \u5de6\u8fb9\u627e\u627e\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));\n            addToOverlaps(interval, overlaps, checkForOverlapsToTheLeft(interval));\n        }\n        else\n        {\n            // \u5426\u5219\u5728\u5f53\u524d\u533a\u95f4\n            addToOverlaps(interval, overlaps, this.intervals);\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));\n        }\n\n        return overlaps;\n    }", "language": "java", "code": "public List<Intervalable> findOverlaps(Intervalable interval)\n    {\n\n        List<Intervalable> overlaps = new ArrayList<Intervalable>();\n\n        if (this.point < interval.getStart())\n        {\n            // \u53f3\u8fb9\u627e\u627e\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));\n            addToOverlaps(interval, overlaps, checkForOverlapsToTheRight(interval));\n        }\n        else if (this.point > interval.getEnd())\n        {\n            // \u5de6\u8fb9\u627e\u627e\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));\n            addToOverlaps(interval, overlaps, checkForOverlapsToTheLeft(interval));\n        }\n        else\n        {\n            // \u5426\u5219\u5728\u5f53\u524d\u533a\u95f4\n            addToOverlaps(interval, overlaps, this.intervals);\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.left, interval));\n            addToOverlaps(interval, overlaps, findOverlappingRanges(this.right, interval));\n        }\n\n        return overlaps;\n    }", "code_tokens": ["public", "List", "<", "Intervalable", ">", "findOverlaps", "(", "Intervalable", "interval", ")", "{", "List", "<", "Intervalable", ">", "overlaps", "=", "new", "ArrayList", "<", "Intervalable", ">", "(", ")", ";", "if", "(", "this", ".", "point", "<", "interval", ".", "getStart", "(", ")", ")", "{", "// \u53f3\u8fb9\u627e\u627e", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "findOverlappingRanges", "(", "this", ".", "right", ",", "interval", ")", ")", ";", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "checkForOverlapsToTheRight", "(", "interval", ")", ")", ";", "}", "else", "if", "(", "this", ".", "point", ">", "interval", ".", "getEnd", "(", ")", ")", "{", "// \u5de6\u8fb9\u627e\u627e", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "findOverlappingRanges", "(", "this", ".", "left", ",", "interval", ")", ")", ";", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "checkForOverlapsToTheLeft", "(", "interval", ")", ")", ";", "}", "else", "{", "// \u5426\u5219\u5728\u5f53\u524d\u533a\u95f4", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "this", ".", "intervals", ")", ";", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "findOverlappingRanges", "(", "this", ".", "left", ",", "interval", ")", ")", ";", "addToOverlaps", "(", "interval", ",", "overlaps", ",", "findOverlappingRanges", "(", "this", ".", "right", ",", "interval", ")", ")", ";", "}", "return", "overlaps", ";", "}"], "docstring": "\u5bfb\u627e\u4e0einterval\u6709\u91cd\u53e0\u7684\u533a\u95f4\n@param interval\n@return", "docstring_tokens": ["\u5bfb\u627e\u4e0einterval\u6709\u91cd\u53e0\u7684\u533a\u95f4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java#L104-L130", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java", "func_name": "IntervalNode.addToOverlaps", "original_string": "protected void addToOverlaps(Intervalable interval, List<Intervalable> overlaps, List<Intervalable> newOverlaps)\n    {\n        for (Intervalable currentInterval : newOverlaps)\n        {\n            if (!currentInterval.equals(interval))\n            {\n                overlaps.add(currentInterval);\n            }\n        }\n    }", "language": "java", "code": "protected void addToOverlaps(Intervalable interval, List<Intervalable> overlaps, List<Intervalable> newOverlaps)\n    {\n        for (Intervalable currentInterval : newOverlaps)\n        {\n            if (!currentInterval.equals(interval))\n            {\n                overlaps.add(currentInterval);\n            }\n        }\n    }", "code_tokens": ["protected", "void", "addToOverlaps", "(", "Intervalable", "interval", ",", "List", "<", "Intervalable", ">", "overlaps", ",", "List", "<", "Intervalable", ">", "newOverlaps", ")", "{", "for", "(", "Intervalable", "currentInterval", ":", "newOverlaps", ")", "{", "if", "(", "!", "currentInterval", ".", "equals", "(", "interval", ")", ")", "{", "overlaps", ".", "add", "(", "currentInterval", ")", ";", "}", "}", "}"], "docstring": "\u6dfb\u52a0\u5230\u91cd\u53e0\u533a\u95f4\u5217\u8868\u4e2d\n@param interval \u8ddf\u6b64\u533a\u95f4\u91cd\u53e0\n@param overlaps \u91cd\u53e0\u533a\u95f4\u5217\u8868\n@param newOverlaps \u5e0c\u671b\u5c06\u8fd9\u4e9b\u533a\u95f4\u52a0\u5165", "docstring_tokens": ["\u6dfb\u52a0\u5230\u91cd\u53e0\u533a\u95f4\u5217\u8868\u4e2d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java#L138-L147", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java", "func_name": "IntervalNode.checkForOverlaps", "original_string": "protected List<Intervalable> checkForOverlaps(Intervalable interval, Direction direction)\n    {\n\n        List<Intervalable> overlaps = new ArrayList<Intervalable>();\n        for (Intervalable currentInterval : this.intervals)\n        {\n            switch (direction)\n            {\n                case LEFT:\n                    if (currentInterval.getStart() <= interval.getEnd())\n                    {\n                        overlaps.add(currentInterval);\n                    }\n                    break;\n                case RIGHT:\n                    if (currentInterval.getEnd() >= interval.getStart())\n                    {\n                        overlaps.add(currentInterval);\n                    }\n                    break;\n            }\n        }\n        return overlaps;\n    }", "language": "java", "code": "protected List<Intervalable> checkForOverlaps(Intervalable interval, Direction direction)\n    {\n\n        List<Intervalable> overlaps = new ArrayList<Intervalable>();\n        for (Intervalable currentInterval : this.intervals)\n        {\n            switch (direction)\n            {\n                case LEFT:\n                    if (currentInterval.getStart() <= interval.getEnd())\n                    {\n                        overlaps.add(currentInterval);\n                    }\n                    break;\n                case RIGHT:\n                    if (currentInterval.getEnd() >= interval.getStart())\n                    {\n                        overlaps.add(currentInterval);\n                    }\n                    break;\n            }\n        }\n        return overlaps;\n    }", "code_tokens": ["protected", "List", "<", "Intervalable", ">", "checkForOverlaps", "(", "Intervalable", "interval", ",", "Direction", "direction", ")", "{", "List", "<", "Intervalable", ">", "overlaps", "=", "new", "ArrayList", "<", "Intervalable", ">", "(", ")", ";", "for", "(", "Intervalable", "currentInterval", ":", "this", ".", "intervals", ")", "{", "switch", "(", "direction", ")", "{", "case", "LEFT", ":", "if", "(", "currentInterval", ".", "getStart", "(", ")", "<=", "interval", ".", "getEnd", "(", ")", ")", "{", "overlaps", ".", "add", "(", "currentInterval", ")", ";", "}", "break", ";", "case", "RIGHT", ":", "if", "(", "currentInterval", ".", "getEnd", "(", ")", ">=", "interval", ".", "getStart", "(", ")", ")", "{", "overlaps", ".", "add", "(", "currentInterval", ")", ";", "}", "break", ";", "}", "}", "return", "overlaps", ";", "}"], "docstring": "\u5bfb\u627e\u91cd\u53e0\n@param interval \u4e00\u4e2a\u533a\u95f4\uff0c\u4e0e\u8be5\u533a\u95f4\u91cd\u53e0\n@param direction \u65b9\u5411\uff0c\u8868\u660e\u91cd\u53e0\u533a\u95f4\u5728interval\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\n@return", "docstring_tokens": ["\u5bfb\u627e\u91cd\u53e0"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java#L175-L198", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java", "func_name": "IntervalNode.findOverlappingRanges", "original_string": "protected static List<Intervalable> findOverlappingRanges(IntervalNode node, Intervalable interval)\n    {\n        if (node != null)\n        {\n            return node.findOverlaps(interval);\n        }\n        return Collections.emptyList();\n    }", "language": "java", "code": "protected static List<Intervalable> findOverlappingRanges(IntervalNode node, Intervalable interval)\n    {\n        if (node != null)\n        {\n            return node.findOverlaps(interval);\n        }\n        return Collections.emptyList();\n    }", "code_tokens": ["protected", "static", "List", "<", "Intervalable", ">", "findOverlappingRanges", "(", "IntervalNode", "node", ",", "Intervalable", "interval", ")", "{", "if", "(", "node", "!=", "null", ")", "{", "return", "node", ".", "findOverlaps", "(", "interval", ")", ";", "}", "return", "Collections", ".", "emptyList", "(", ")", ";", "}"], "docstring": "\u662f\u5bf9IntervalNode.findOverlaps(Intervalable)\u7684\u4e00\u4e2a\u5305\u88c5\uff0c\u9632\u6b62NPE\n@see com.hankcs.hanlp.algorithm.ahocorasick.interval.IntervalNode#findOverlaps(Intervalable)\n@param node\n@param interval\n@return", "docstring_tokens": ["\u662f\u5bf9IntervalNode", ".", "findOverlaps", "(", "Intervalable", ")", "\u7684\u4e00\u4e2a\u5305\u88c5\uff0c\u9632\u6b62NPE"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/ahocorasick/interval/IntervalNode.java#L207-L214", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronTagger.java", "func_name": "PerceptronTagger.learn", "original_string": "public boolean learn(Instance instance)\n    {\n        if (instance == null) return false;\n        model.update(instance);\n        return true;\n    }", "language": "java", "code": "public boolean learn(Instance instance)\n    {\n        if (instance == null) return false;\n        model.update(instance);\n        return true;\n    }", "code_tokens": ["public", "boolean", "learn", "(", "Instance", "instance", ")", "{", "if", "(", "instance", "==", "null", ")", "return", "false", ";", "model", ".", "update", "(", "instance", ")", ";", "return", "true", ";", "}"], "docstring": "\u5728\u7ebf\u5b66\u4e60\n\n@param instance\n@return", "docstring_tokens": ["\u5728\u7ebf\u5b66\u4e60"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronTagger.java#L55-L60", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/ns/PlaceRecognition.java", "func_name": "PlaceRecognition.viterbiCompute", "original_string": "public static List<NS> viterbiCompute(List<EnumItem<NS>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, PlaceDictionary.transformMatrixDictionary);\n    }", "language": "java", "code": "public static List<NS> viterbiCompute(List<EnumItem<NS>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, PlaceDictionary.transformMatrixDictionary);\n    }", "code_tokens": ["public", "static", "List", "<", "NS", ">", "viterbiCompute", "(", "List", "<", "EnumItem", "<", "NS", ">", ">", "roleTagList", ")", "{", "return", "Viterbi", ".", "computeEnum", "(", "roleTagList", ",", "PlaceDictionary", ".", "transformMatrixDictionary", ")", ";", "}"], "docstring": "\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e\n@param roleTagList\n@return", "docstring_tokens": ["\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/ns/PlaceRecognition.java#L125-L128", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BaseNode.java", "func_name": "BaseNode.transition", "original_string": "public BaseNode<V> transition(char path)\n    {\n        BaseNode<V> cur = this;\n        cur = cur.getChild(path);\n        if (cur == null || cur.status == Status.UNDEFINED_0) return null;\n        return cur;\n    }", "language": "java", "code": "public BaseNode<V> transition(char path)\n    {\n        BaseNode<V> cur = this;\n        cur = cur.getChild(path);\n        if (cur == null || cur.status == Status.UNDEFINED_0) return null;\n        return cur;\n    }", "code_tokens": ["public", "BaseNode", "<", "V", ">", "transition", "(", "char", "path", ")", "{", "BaseNode", "<", "V", ">", "cur", "=", "this", ";", "cur", "=", "cur", ".", "getChild", "(", "path", ")", ";", "if", "(", "cur", "==", "null", "||", "cur", ".", "status", "==", "Status", ".", "UNDEFINED_0", ")", "return", "null", ";", "return", "cur", ";", "}"], "docstring": "\u8f6c\u79fb\u72b6\u6001\n@param path\n@return", "docstring_tokens": ["\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/bintrie/BaseNode.java#L80-L86", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/TransformMatrix.java", "func_name": "TransformMatrix.extend", "original_string": "public void extend(int ordinaryMax)\n    {\n        this.ordinaryMax = ordinaryMax;\n        double[][] n_transititon_probability = new double[ordinaryMax][ordinaryMax];\n        for (int i = 0; i < transititon_probability.length; i++)\n        {\n            System.arraycopy(transititon_probability[i], 0, n_transititon_probability[i], 0, transititon_probability.length);\n        }\n        transititon_probability = n_transititon_probability;\n\n        int[] n_total = new int[ordinaryMax];\n        System.arraycopy(total, 0, n_total, 0, total.length);\n        total = n_total;\n\n        double[] n_start_probability = new double[ordinaryMax];\n        System.arraycopy(start_probability, 0, n_start_probability, 0, start_probability.length);\n        start_probability = n_start_probability;\n\n        int[][] n_matrix = new int[ordinaryMax][ordinaryMax];\n        for (int i = 0; i < matrix.length; i++)\n        {\n            System.arraycopy(matrix[i], 0, n_matrix[i], 0, matrix.length);\n        }\n        matrix = n_matrix;\n    }", "language": "java", "code": "public void extend(int ordinaryMax)\n    {\n        this.ordinaryMax = ordinaryMax;\n        double[][] n_transititon_probability = new double[ordinaryMax][ordinaryMax];\n        for (int i = 0; i < transititon_probability.length; i++)\n        {\n            System.arraycopy(transititon_probability[i], 0, n_transititon_probability[i], 0, transititon_probability.length);\n        }\n        transititon_probability = n_transititon_probability;\n\n        int[] n_total = new int[ordinaryMax];\n        System.arraycopy(total, 0, n_total, 0, total.length);\n        total = n_total;\n\n        double[] n_start_probability = new double[ordinaryMax];\n        System.arraycopy(start_probability, 0, n_start_probability, 0, start_probability.length);\n        start_probability = n_start_probability;\n\n        int[][] n_matrix = new int[ordinaryMax][ordinaryMax];\n        for (int i = 0; i < matrix.length; i++)\n        {\n            System.arraycopy(matrix[i], 0, n_matrix[i], 0, matrix.length);\n        }\n        matrix = n_matrix;\n    }", "code_tokens": ["public", "void", "extend", "(", "int", "ordinaryMax", ")", "{", "this", ".", "ordinaryMax", "=", "ordinaryMax", ";", "double", "[", "]", "[", "]", "n_transititon_probability", "=", "new", "double", "[", "ordinaryMax", "]", "[", "ordinaryMax", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "transititon_probability", ".", "length", ";", "i", "++", ")", "{", "System", ".", "arraycopy", "(", "transititon_probability", "[", "i", "]", ",", "0", ",", "n_transititon_probability", "[", "i", "]", ",", "0", ",", "transititon_probability", ".", "length", ")", ";", "}", "transititon_probability", "=", "n_transititon_probability", ";", "int", "[", "]", "n_total", "=", "new", "int", "[", "ordinaryMax", "]", ";", "System", ".", "arraycopy", "(", "total", ",", "0", ",", "n_total", ",", "0", ",", "total", ".", "length", ")", ";", "total", "=", "n_total", ";", "double", "[", "]", "n_start_probability", "=", "new", "double", "[", "ordinaryMax", "]", ";", "System", ".", "arraycopy", "(", "start_probability", ",", "0", ",", "n_start_probability", ",", "0", ",", "start_probability", ".", "length", ")", ";", "start_probability", "=", "n_start_probability", ";", "int", "[", "]", "[", "]", "n_matrix", "=", "new", "int", "[", "ordinaryMax", "]", "[", "ordinaryMax", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "matrix", ".", "length", ";", "i", "++", ")", "{", "System", ".", "arraycopy", "(", "matrix", "[", "i", "]", ",", "0", ",", "n_matrix", "[", "i", "]", ",", "0", ",", "matrix", ".", "length", ")", ";", "}", "matrix", "=", "n_matrix", ";", "}"], "docstring": "\u62d3\u5c55\u5185\u90e8\u77e9\u9635,\u4ec5\u7528\u4e8e\u901a\u8fc7\u53cd\u5c04\u65b0\u589e\u4e86\u679a\u4e3e\u5b9e\u4f8b\u4e4b\u540e\u7684\u517c\u5bb9\u63aa\u65bd", "docstring_tokens": ["\u62d3\u5c55\u5185\u90e8\u77e9\u9635", "\u4ec5\u7528\u4e8e\u901a\u8fc7\u53cd\u5c04\u65b0\u589e\u4e86\u679a\u4e3e\u5b9e\u4f8b\u4e4b\u540e\u7684\u517c\u5bb9\u63aa\u65bd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/TransformMatrix.java#L149-L173", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/common/CommonSynonymDictionary.java", "func_name": "CommonSynonymDictionary.distance", "original_string": "public long distance(String a, String b)\n    {\n        SynonymItem itemA = get(a);\n        if (itemA == null) return Long.MAX_VALUE / 3;\n        SynonymItem itemB = get(b);\n        if (itemB == null) return Long.MAX_VALUE / 3;\n\n        return itemA.distance(itemB);\n    }", "language": "java", "code": "public long distance(String a, String b)\n    {\n        SynonymItem itemA = get(a);\n        if (itemA == null) return Long.MAX_VALUE / 3;\n        SynonymItem itemB = get(b);\n        if (itemB == null) return Long.MAX_VALUE / 3;\n\n        return itemA.distance(itemB);\n    }", "code_tokens": ["public", "long", "distance", "(", "String", "a", ",", "String", "b", ")", "{", "SynonymItem", "itemA", "=", "get", "(", "a", ")", ";", "if", "(", "itemA", "==", "null", ")", "return", "Long", ".", "MAX_VALUE", "/", "3", ";", "SynonymItem", "itemB", "=", "get", "(", "b", ")", ";", "if", "(", "itemB", "==", "null", ")", "return", "Long", ".", "MAX_VALUE", "/", "3", ";", "return", "itemA", ".", "distance", "(", "itemB", ")", ";", "}"], "docstring": "\u8bed\u4e49\u8ddd\u79bb\n\n@param a\n@param b\n@return", "docstring_tokens": ["\u8bed\u4e49\u8ddd\u79bb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/common/CommonSynonymDictionary.java#L127-L135", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/TMDictionaryMaker.java", "func_name": "TMDictionaryMaker.addPair", "original_string": "public void addPair(String first, String second)\n    {\n        Map<String, Integer> firstMatrix = transferMatrix.get(first);\n        if (firstMatrix == null)\n        {\n            firstMatrix = new TreeMap<String, Integer>();\n            transferMatrix.put(first, firstMatrix);\n        }\n        Integer frequency = firstMatrix.get(second);\n        if (frequency == null) frequency = 0;\n        firstMatrix.put(second, frequency + 1);\n    }", "language": "java", "code": "public void addPair(String first, String second)\n    {\n        Map<String, Integer> firstMatrix = transferMatrix.get(first);\n        if (firstMatrix == null)\n        {\n            firstMatrix = new TreeMap<String, Integer>();\n            transferMatrix.put(first, firstMatrix);\n        }\n        Integer frequency = firstMatrix.get(second);\n        if (frequency == null) frequency = 0;\n        firstMatrix.put(second, frequency + 1);\n    }", "code_tokens": ["public", "void", "addPair", "(", "String", "first", ",", "String", "second", ")", "{", "Map", "<", "String", ",", "Integer", ">", "firstMatrix", "=", "transferMatrix", ".", "get", "(", "first", ")", ";", "if", "(", "firstMatrix", "==", "null", ")", "{", "firstMatrix", "=", "new", "TreeMap", "<", "String", ",", "Integer", ">", "(", ")", ";", "transferMatrix", ".", "put", "(", "first", ",", "firstMatrix", ")", ";", "}", "Integer", "frequency", "=", "firstMatrix", ".", "get", "(", "second", ")", ";", "if", "(", "frequency", "==", "null", ")", "frequency", "=", "0", ";", "firstMatrix", ".", "put", "(", "second", ",", "frequency", "+", "1", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u4e00\u4e2a\u8f6c\u79fb\u4f8b\u5b50\uff0c\u4f1a\u5728\u5185\u90e8\u5b8c\u6210\u7edf\u8ba1\n@param first\n@param second", "docstring_tokens": ["\u6dfb\u52a0\u4e00\u4e2a\u8f6c\u79fb\u4f8b\u5b50\uff0c\u4f1a\u5728\u5185\u90e8\u5b8c\u6210\u7edf\u8ba1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/TMDictionaryMaker.java#L43-L54", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/tag/Nature.java", "func_name": "Nature.fromString", "original_string": "public static final Nature fromString(String name)\n    {\n        Integer id = idMap.get(name);\n        if (id == null)\n            return null;\n        return values[id];\n    }", "language": "java", "code": "public static final Nature fromString(String name)\n    {\n        Integer id = idMap.get(name);\n        if (id == null)\n            return null;\n        return values[id];\n    }", "code_tokens": ["public", "static", "final", "Nature", "fromString", "(", "String", "name", ")", "{", "Integer", "id", "=", "idMap", ".", "get", "(", "name", ")", ";", "if", "(", "id", "==", "null", ")", "return", "null", ";", "return", "values", "[", "id", "]", ";", "}"], "docstring": "\u5b89\u5168\u5730\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bcd\u6027\u8f6c\u4e3aEnum\u7c7b\u578b\uff0c\u5982\u679c\u672a\u5b9a\u4e49\u8be5\u8bcd\u6027\uff0c\u5219\u8fd4\u56denull\n\n@param name \u5b57\u7b26\u4e32\u8bcd\u6027\n@return Enum\u8bcd\u6027", "docstring_tokens": ["\u5b89\u5168\u5730\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u8bcd\u6027\u8f6c\u4e3aEnum\u7c7b\u578b\uff0c\u5982\u679c\u672a\u5b9a\u4e49\u8be5\u8bcd\u6027\uff0c\u5219\u8fd4\u56denull"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/tag/Nature.java#L825-L831", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/tag/Nature.java", "func_name": "Nature.create", "original_string": "public static final Nature create(String name)\n    {\n        Nature nature = fromString(name);\n        if (nature == null)\n            return new Nature(name);\n        return nature;\n    }", "language": "java", "code": "public static final Nature create(String name)\n    {\n        Nature nature = fromString(name);\n        if (nature == null)\n            return new Nature(name);\n        return nature;\n    }", "code_tokens": ["public", "static", "final", "Nature", "create", "(", "String", "name", ")", "{", "Nature", "nature", "=", "fromString", "(", "name", ")", ";", "if", "(", "nature", "==", "null", ")", "return", "new", "Nature", "(", "name", ")", ";", "return", "nature", ";", "}"], "docstring": "\u521b\u5efa\u81ea\u5b9a\u4e49\u8bcd\u6027,\u5982\u679c\u5df2\u6709\u8be5\u5bf9\u5e94\u8bcd\u6027,\u5219\u76f4\u63a5\u8fd4\u56de\u5df2\u6709\u7684\u8bcd\u6027\n\n@param name \u5b57\u7b26\u4e32\u8bcd\u6027\n@return Enum\u8bcd\u6027", "docstring_tokens": ["\u521b\u5efa\u81ea\u5b9a\u4e49\u8bcd\u6027", "\u5982\u679c\u5df2\u6709\u8be5\u5bf9\u5e94\u8bcd\u6027", "\u5219\u76f4\u63a5\u8fd4\u56de\u5df2\u6709\u7684\u8bcd\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/tag/Nature.java#L839-L845", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/trie/datrie/Utf8CharacterMapping.java", "func_name": "Utf8CharacterMapping.toIdList", "original_string": "@Override\n    public int[] toIdList(int codePoint)\n    {\n        int count;\n        if (codePoint < 0x80)\n            count = 1;\n        else if (codePoint < 0x800)\n            count = 2;\n        else if (codePoint < 0x10000)\n            count = 3;\n        else if (codePoint < 0x200000)\n            count = 4;\n        else if (codePoint < 0x4000000)\n            count = 5;\n        else if (codePoint <= 0x7fffffff)\n            count = 6;\n        else\n            return EMPTYLIST;\n        int[] r = new int[count];\n        switch (count)\n        { /* note: code falls through cases! */\n            case 6:\n                r[5] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x4000000;\n            case 5:\n                r[4] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x200000;\n            case 4:\n                r[3] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x10000;\n            case 3:\n                r[2] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x800;\n            case 2:\n                r[1] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0xc0;\n            case 1:\n                r[0] = (char) codePoint;\n        }\n        return r;\n    }", "language": "java", "code": "@Override\n    public int[] toIdList(int codePoint)\n    {\n        int count;\n        if (codePoint < 0x80)\n            count = 1;\n        else if (codePoint < 0x800)\n            count = 2;\n        else if (codePoint < 0x10000)\n            count = 3;\n        else if (codePoint < 0x200000)\n            count = 4;\n        else if (codePoint < 0x4000000)\n            count = 5;\n        else if (codePoint <= 0x7fffffff)\n            count = 6;\n        else\n            return EMPTYLIST;\n        int[] r = new int[count];\n        switch (count)\n        { /* note: code falls through cases! */\n            case 6:\n                r[5] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x4000000;\n            case 5:\n                r[4] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x200000;\n            case 4:\n                r[3] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x10000;\n            case 3:\n                r[2] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0x800;\n            case 2:\n                r[1] = (char) (0x80 | (codePoint & 0x3f));\n                codePoint = codePoint >> 6;\n                codePoint |= 0xc0;\n            case 1:\n                r[0] = (char) codePoint;\n        }\n        return r;\n    }", "code_tokens": ["@", "Override", "public", "int", "[", "]", "toIdList", "(", "int", "codePoint", ")", "{", "int", "count", ";", "if", "(", "codePoint", "<", "0x80", ")", "count", "=", "1", ";", "else", "if", "(", "codePoint", "<", "0x800", ")", "count", "=", "2", ";", "else", "if", "(", "codePoint", "<", "0x10000", ")", "count", "=", "3", ";", "else", "if", "(", "codePoint", "<", "0x200000", ")", "count", "=", "4", ";", "else", "if", "(", "codePoint", "<", "0x4000000", ")", "count", "=", "5", ";", "else", "if", "(", "codePoint", "<=", "0x7fffffff", ")", "count", "=", "6", ";", "else", "return", "EMPTYLIST", ";", "int", "[", "]", "r", "=", "new", "int", "[", "count", "]", ";", "switch", "(", "count", ")", "{", "/* note: code falls through cases! */", "case", "6", ":", "r", "[", "5", "]", "=", "(", "char", ")", "(", "0x80", "|", "(", "codePoint", "&", "0x3f", ")", ")", ";", "codePoint", "=", "codePoint", ">>", "6", ";", "codePoint", "|=", "0x4000000", ";", "case", "5", ":", "r", "[", "4", "]", "=", "(", "char", ")", "(", "0x80", "|", "(", "codePoint", "&", "0x3f", ")", ")", ";", "codePoint", "=", "codePoint", ">>", "6", ";", "codePoint", "|=", "0x200000", ";", "case", "4", ":", "r", "[", "3", "]", "=", "(", "char", ")", "(", "0x80", "|", "(", "codePoint", "&", "0x3f", ")", ")", ";", "codePoint", "=", "codePoint", ">>", "6", ";", "codePoint", "|=", "0x10000", ";", "case", "3", ":", "r", "[", "2", "]", "=", "(", "char", ")", "(", "0x80", "|", "(", "codePoint", "&", "0x3f", ")", ")", ";", "codePoint", "=", "codePoint", ">>", "6", ";", "codePoint", "|=", "0x800", ";", "case", "2", ":", "r", "[", "1", "]", "=", "(", "char", ")", "(", "0x80", "|", "(", "codePoint", "&", "0x3f", ")", ")", ";", "codePoint", "=", "codePoint", ">>", "6", ";", "codePoint", "|=", "0xc0", ";", "case", "1", ":", "r", "[", "0", "]", "=", "(", "char", ")", "codePoint", ";", "}", "return", "r", ";", "}"], "docstring": "codes ported from iconv lib in utf8.h utf8_codepointtomb", "docstring_tokens": ["codes", "ported", "from", "iconv", "lib", "in", "utf8", ".", "h", "utf8_codepointtomb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/trie/datrie/Utf8CharacterMapping.java#L55-L100", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/TriaFrequency.java", "func_name": "TriaFrequency.create", "original_string": "public static TriaFrequency create(String first, char delimiter, String second, String third)\n    {\n        TriaFrequency triaFrequency = new TriaFrequency(first + delimiter + second + Occurrence.RIGHT + third);\n        triaFrequency.first = first;\n        triaFrequency.second = second;\n        triaFrequency.third = third;\n        triaFrequency.delimiter = delimiter;\n        return triaFrequency;\n    }", "language": "java", "code": "public static TriaFrequency create(String first, char delimiter, String second, String third)\n    {\n        TriaFrequency triaFrequency = new TriaFrequency(first + delimiter + second + Occurrence.RIGHT + third);\n        triaFrequency.first = first;\n        triaFrequency.second = second;\n        triaFrequency.third = third;\n        triaFrequency.delimiter = delimiter;\n        return triaFrequency;\n    }", "code_tokens": ["public", "static", "TriaFrequency", "create", "(", "String", "first", ",", "char", "delimiter", ",", "String", "second", ",", "String", "third", ")", "{", "TriaFrequency", "triaFrequency", "=", "new", "TriaFrequency", "(", "first", "+", "delimiter", "+", "second", "+", "Occurrence", ".", "RIGHT", "+", "third", ")", ";", "triaFrequency", ".", "first", "=", "first", ";", "triaFrequency", ".", "second", "=", "second", ";", "triaFrequency", ".", "third", "=", "third", ";", "triaFrequency", ".", "delimiter", "=", "delimiter", ";", "return", "triaFrequency", ";", "}"], "docstring": "\u6784\u9020\u4e00\u4e2a\u4e09\u9636\u63a5\u7eed\uff0c\u6b63\u5411\n\n@param first\n@param second\n@param third\n@param delimiter \u4e00\u822c\u4f7f\u7528RIGHT\uff01\n@return", "docstring_tokens": ["\u6784\u9020\u4e00\u4e2a\u4e09\u9636\u63a5\u7eed\uff0c\u6b63\u5411"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/TriaFrequency.java#L42-L50", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java", "func_name": "CRFTagger.train", "original_string": "public void train(String templFile, String trainFile, String modelFile,\n                      int maxitr, int freq, double eta, double C, int threadNum, int shrinkingSize,\n                      Encoder.Algorithm algorithm) throws IOException\n    {\n        Encoder encoder = new Encoder();\n        if (!encoder.learn(templFile, trainFile, modelFile,\n                           true, maxitr, freq, eta, C, threadNum, shrinkingSize, algorithm))\n        {\n            throw new IOException(\"fail to learn model\");\n        }\n        convert(modelFile);\n    }", "language": "java", "code": "public void train(String templFile, String trainFile, String modelFile,\n                      int maxitr, int freq, double eta, double C, int threadNum, int shrinkingSize,\n                      Encoder.Algorithm algorithm) throws IOException\n    {\n        Encoder encoder = new Encoder();\n        if (!encoder.learn(templFile, trainFile, modelFile,\n                           true, maxitr, freq, eta, C, threadNum, shrinkingSize, algorithm))\n        {\n            throw new IOException(\"fail to learn model\");\n        }\n        convert(modelFile);\n    }", "code_tokens": ["public", "void", "train", "(", "String", "templFile", ",", "String", "trainFile", ",", "String", "modelFile", ",", "int", "maxitr", ",", "int", "freq", ",", "double", "eta", ",", "double", "C", ",", "int", "threadNum", ",", "int", "shrinkingSize", ",", "Encoder", ".", "Algorithm", "algorithm", ")", "throws", "IOException", "{", "Encoder", "encoder", "=", "new", "Encoder", "(", ")", ";", "if", "(", "!", "encoder", ".", "learn", "(", "templFile", ",", "trainFile", ",", "modelFile", ",", "true", ",", "maxitr", ",", "freq", ",", "eta", ",", "C", ",", "threadNum", ",", "shrinkingSize", ",", "algorithm", ")", ")", "{", "throw", "new", "IOException", "(", "\"fail to learn model\"", ")", ";", "}", "convert", "(", "modelFile", ")", ";", "}"], "docstring": "\u8bad\u7ec3\n\n@param templFile     \u6a21\u677f\u6587\u4ef6\n@param trainFile     \u8bad\u7ec3\u6587\u4ef6\n@param modelFile     \u6a21\u578b\u6587\u4ef6\n@param maxitr        \u6700\u5927\u8fed\u4ee3\u6b21\u6570\n@param freq          \u7279\u5f81\u6700\u4f4e\u9891\u6b21\n@param eta           \u6536\u655b\u9608\u503c\n@param C             cost-factor\n@param threadNum     \u7ebf\u7a0b\u6570\n@param shrinkingSize\n@param algorithm     \u8bad\u7ec3\u7b97\u6cd5\n@return", "docstring_tokens": ["\u8bad\u7ec3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java#L59-L70", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java", "func_name": "CRFTagger.dumpTemplate", "original_string": "public void dumpTemplate(String templatePath) throws IOException\n    {\n        BufferedWriter bw = IOUtil.newBufferedWriter(templatePath);\n        String template = getTemplate();\n        bw.write(template);\n        bw.close();\n    }", "language": "java", "code": "public void dumpTemplate(String templatePath) throws IOException\n    {\n        BufferedWriter bw = IOUtil.newBufferedWriter(templatePath);\n        String template = getTemplate();\n        bw.write(template);\n        bw.close();\n    }", "code_tokens": ["public", "void", "dumpTemplate", "(", "String", "templatePath", ")", "throws", "IOException", "{", "BufferedWriter", "bw", "=", "IOUtil", ".", "newBufferedWriter", "(", "templatePath", ")", ";", "String", "template", "=", "getTemplate", "(", ")", ";", "bw", ".", "write", "(", "template", ")", ";", "bw", ".", "close", "(", ")", ";", "}"], "docstring": "\u5bfc\u51fa\u7279\u5f81\u6a21\u677f\n\n@param templatePath\n@throws IOException", "docstring_tokens": ["\u5bfc\u51fa\u7279\u5f81\u6a21\u677f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java#L152-L158", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java", "func_name": "CRFTagger.getTemplate", "original_string": "public String getTemplate()\n    {\n        String template = getDefaultFeatureTemplate();\n        if (model != null && model.getFeatureTemplateArray() != null)\n        {\n            StringBuilder sbTemplate = new StringBuilder();\n            for (FeatureTemplate featureTemplate : model.getFeatureTemplateArray())\n            {\n                sbTemplate.append(featureTemplate.getTemplate()).append('\\n');\n            }\n        }\n        return template;\n    }", "language": "java", "code": "public String getTemplate()\n    {\n        String template = getDefaultFeatureTemplate();\n        if (model != null && model.getFeatureTemplateArray() != null)\n        {\n            StringBuilder sbTemplate = new StringBuilder();\n            for (FeatureTemplate featureTemplate : model.getFeatureTemplateArray())\n            {\n                sbTemplate.append(featureTemplate.getTemplate()).append('\\n');\n            }\n        }\n        return template;\n    }", "code_tokens": ["public", "String", "getTemplate", "(", ")", "{", "String", "template", "=", "getDefaultFeatureTemplate", "(", ")", ";", "if", "(", "model", "!=", "null", "&&", "model", ".", "getFeatureTemplateArray", "(", ")", "!=", "null", ")", "{", "StringBuilder", "sbTemplate", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "FeatureTemplate", "featureTemplate", ":", "model", ".", "getFeatureTemplateArray", "(", ")", ")", "{", "sbTemplate", ".", "append", "(", "featureTemplate", ".", "getTemplate", "(", ")", ")", ".", "append", "(", "'", "'", ")", ";", "}", "}", "return", "template", ";", "}"], "docstring": "\u83b7\u53d6\u7279\u5f81\u6a21\u677f\n\n@return", "docstring_tokens": ["\u83b7\u53d6\u7279\u5f81\u6a21\u677f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFTagger.java#L165-L177", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdfCounter.java", "func_name": "TfIdfCounter.add", "original_string": "public void add(Object id, String text)\n    {\n        List<Term> termList = preprocess(text);\n        add(id, termList);\n    }", "language": "java", "code": "public void add(Object id, String text)\n    {\n        List<Term> termList = preprocess(text);\n        add(id, termList);\n    }", "code_tokens": ["public", "void", "add", "(", "Object", "id", ",", "String", "text", ")", "{", "List", "<", "Term", ">", "termList", "=", "preprocess", "(", "text", ")", ";", "add", "(", "id", ",", "termList", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u6587\u6863\n\n@param id   \u6587\u6863id\n@param text \u6587\u6863\u5185\u5bb9", "docstring_tokens": ["\u6dfb\u52a0\u6587\u6863"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdfCounter.java#L112-L116", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdfCounter.java", "func_name": "TfIdfCounter.add", "original_string": "public int add(String text)\n    {\n        int id = tfMap.size();\n        add(id, text);\n        return id;\n    }", "language": "java", "code": "public int add(String text)\n    {\n        int id = tfMap.size();\n        add(id, text);\n        return id;\n    }", "code_tokens": ["public", "int", "add", "(", "String", "text", ")", "{", "int", "id", "=", "tfMap", ".", "size", "(", ")", ";", "add", "(", "id", ",", "text", ")", ";", "return", "id", ";", "}"], "docstring": "\u6dfb\u52a0\u6587\u6863\uff0c\u81ea\u52a8\u5206\u914did\n\n@param text", "docstring_tokens": ["\u6dfb\u52a0\u6587\u6863\uff0c\u81ea\u52a8\u5206\u914did"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdfCounter.java#L133-L138", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.loadTxt", "original_string": "public static CRFModel loadTxt(String path, CRFModel instance)\n    {\n        CRFModel CRFModel = instance;\n        // \u5148\u5c1d\u8bd5\u4ecebin\u52a0\u8f7d\n        if (CRFModel.load(ByteArray.createByteArray(path + Predefine.BIN_EXT))) return CRFModel;\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(path);\n        if (!lineIterator.hasNext()) return null;\n        logger.info(lineIterator.next());   // verson\n        logger.info(lineIterator.next());   // cost-factor\n        int maxid = Integer.parseInt(lineIterator.next().substring(\"maxid:\".length()).trim());\n        logger.info(lineIterator.next());   // xsize\n        lineIterator.next();    // blank\n        String line;\n        int id = 0;\n        CRFModel.tag2id = new HashMap<String, Integer>();\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            CRFModel.tag2id.put(line, id);\n            ++id;\n        }\n        CRFModel.id2tag = new String[CRFModel.tag2id.size()];\n        final int size = CRFModel.id2tag.length;\n        for (Map.Entry<String, Integer> entry : CRFModel.tag2id.entrySet())\n        {\n            CRFModel.id2tag[entry.getValue()] = entry.getKey();\n        }\n        TreeMap<String, FeatureFunction> featureFunctionMap = new TreeMap<String, FeatureFunction>();  // \u6784\u5efatrie\u6811\u7684\u65f6\u5019\u7528\n        TreeMap<Integer, FeatureFunction> featureFunctionList = new TreeMap<Integer, FeatureFunction>(); // \u8bfb\u53d6\u6743\u503c\u7684\u65f6\u5019\u7528\n        CRFModel.featureTemplateList = new LinkedList<FeatureTemplate>();\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            if (!\"B\".equals(line))\n            {\n                FeatureTemplate featureTemplate = FeatureTemplate.create(line);\n                CRFModel.featureTemplateList.add(featureTemplate);\n            }\n            else\n            {\n                CRFModel.matrix = new double[size][size];\n            }\n        }\n\n        int b = -1;// \u8f6c\u6362\u77e9\u9635\u7684\u6743\u91cd\u4f4d\u7f6e\n        if (CRFModel.matrix != null)\n        {\n            String[] args = lineIterator.next().split(\" \", 2);    // 0 B\n            b = Integer.valueOf(args[0]);\n            featureFunctionList.put(b, null);\n        }\n\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            String[] args = line.split(\" \", 2);\n            char[] charArray = args[1].toCharArray();\n            FeatureFunction featureFunction = new FeatureFunction(charArray, size);\n            featureFunctionMap.put(args[1], featureFunction);\n            featureFunctionList.put(Integer.parseInt(args[0]), featureFunction);\n        }\n\n        for (Map.Entry<Integer, FeatureFunction> entry : featureFunctionList.entrySet())\n        {\n            int fid = entry.getKey();\n            FeatureFunction featureFunction = entry.getValue();\n            if (fid == b)\n            {\n                for (int i = 0; i < size; i++)\n                {\n                    for (int j = 0; j < size; j++)\n                    {\n                        CRFModel.matrix[i][j] = Double.parseDouble(lineIterator.next());\n                    }\n                }\n            }\n            else\n            {\n                for (int i = 0; i < size; i++)\n                {\n                    featureFunction.w[i] = Double.parseDouble(lineIterator.next());\n                }\n            }\n        }\n        if (lineIterator.hasNext())\n        {\n            logger.warning(\"\u6587\u672c\u8bfb\u53d6\u6709\u6b8b\u7559\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff01\" + path);\n        }\n        lineIterator.close();\n        logger.info(\"\u5f00\u59cb\u6784\u5efatrie\u6811\");\n        CRFModel.featureFunctionTrie.build(featureFunctionMap);\n        // \u7f13\u5b58bin\n        try\n        {\n            logger.info(\"\u5f00\u59cb\u7f13\u5b58\" + path + Predefine.BIN_EXT);\n            DataOutputStream out = new DataOutputStream(IOUtil.newOutputStream(path + Predefine.BIN_EXT));\n            CRFModel.save(out);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u7f13\u5b58\" + path + Predefine.BIN_EXT + \"\u65f6\u53d1\u751f\u9519\u8bef\" + TextUtility.exceptionToString(e));\n        }\n        CRFModel.onLoadTxtFinished();\n        return CRFModel;\n    }", "language": "java", "code": "public static CRFModel loadTxt(String path, CRFModel instance)\n    {\n        CRFModel CRFModel = instance;\n        // \u5148\u5c1d\u8bd5\u4ecebin\u52a0\u8f7d\n        if (CRFModel.load(ByteArray.createByteArray(path + Predefine.BIN_EXT))) return CRFModel;\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(path);\n        if (!lineIterator.hasNext()) return null;\n        logger.info(lineIterator.next());   // verson\n        logger.info(lineIterator.next());   // cost-factor\n        int maxid = Integer.parseInt(lineIterator.next().substring(\"maxid:\".length()).trim());\n        logger.info(lineIterator.next());   // xsize\n        lineIterator.next();    // blank\n        String line;\n        int id = 0;\n        CRFModel.tag2id = new HashMap<String, Integer>();\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            CRFModel.tag2id.put(line, id);\n            ++id;\n        }\n        CRFModel.id2tag = new String[CRFModel.tag2id.size()];\n        final int size = CRFModel.id2tag.length;\n        for (Map.Entry<String, Integer> entry : CRFModel.tag2id.entrySet())\n        {\n            CRFModel.id2tag[entry.getValue()] = entry.getKey();\n        }\n        TreeMap<String, FeatureFunction> featureFunctionMap = new TreeMap<String, FeatureFunction>();  // \u6784\u5efatrie\u6811\u7684\u65f6\u5019\u7528\n        TreeMap<Integer, FeatureFunction> featureFunctionList = new TreeMap<Integer, FeatureFunction>(); // \u8bfb\u53d6\u6743\u503c\u7684\u65f6\u5019\u7528\n        CRFModel.featureTemplateList = new LinkedList<FeatureTemplate>();\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            if (!\"B\".equals(line))\n            {\n                FeatureTemplate featureTemplate = FeatureTemplate.create(line);\n                CRFModel.featureTemplateList.add(featureTemplate);\n            }\n            else\n            {\n                CRFModel.matrix = new double[size][size];\n            }\n        }\n\n        int b = -1;// \u8f6c\u6362\u77e9\u9635\u7684\u6743\u91cd\u4f4d\u7f6e\n        if (CRFModel.matrix != null)\n        {\n            String[] args = lineIterator.next().split(\" \", 2);    // 0 B\n            b = Integer.valueOf(args[0]);\n            featureFunctionList.put(b, null);\n        }\n\n        while ((line = lineIterator.next()).length() != 0)\n        {\n            String[] args = line.split(\" \", 2);\n            char[] charArray = args[1].toCharArray();\n            FeatureFunction featureFunction = new FeatureFunction(charArray, size);\n            featureFunctionMap.put(args[1], featureFunction);\n            featureFunctionList.put(Integer.parseInt(args[0]), featureFunction);\n        }\n\n        for (Map.Entry<Integer, FeatureFunction> entry : featureFunctionList.entrySet())\n        {\n            int fid = entry.getKey();\n            FeatureFunction featureFunction = entry.getValue();\n            if (fid == b)\n            {\n                for (int i = 0; i < size; i++)\n                {\n                    for (int j = 0; j < size; j++)\n                    {\n                        CRFModel.matrix[i][j] = Double.parseDouble(lineIterator.next());\n                    }\n                }\n            }\n            else\n            {\n                for (int i = 0; i < size; i++)\n                {\n                    featureFunction.w[i] = Double.parseDouble(lineIterator.next());\n                }\n            }\n        }\n        if (lineIterator.hasNext())\n        {\n            logger.warning(\"\u6587\u672c\u8bfb\u53d6\u6709\u6b8b\u7559\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff01\" + path);\n        }\n        lineIterator.close();\n        logger.info(\"\u5f00\u59cb\u6784\u5efatrie\u6811\");\n        CRFModel.featureFunctionTrie.build(featureFunctionMap);\n        // \u7f13\u5b58bin\n        try\n        {\n            logger.info(\"\u5f00\u59cb\u7f13\u5b58\" + path + Predefine.BIN_EXT);\n            DataOutputStream out = new DataOutputStream(IOUtil.newOutputStream(path + Predefine.BIN_EXT));\n            CRFModel.save(out);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u7f13\u5b58\" + path + Predefine.BIN_EXT + \"\u65f6\u53d1\u751f\u9519\u8bef\" + TextUtility.exceptionToString(e));\n        }\n        CRFModel.onLoadTxtFinished();\n        return CRFModel;\n    }", "code_tokens": ["public", "static", "CRFModel", "loadTxt", "(", "String", "path", ",", "CRFModel", "instance", ")", "{", "CRFModel", "CRFModel", "=", "instance", ";", "// \u5148\u5c1d\u8bd5\u4ecebin\u52a0\u8f7d", "if", "(", "CRFModel", ".", "load", "(", "ByteArray", ".", "createByteArray", "(", "path", "+", "Predefine", ".", "BIN_EXT", ")", ")", ")", "return", "CRFModel", ";", "IOUtil", ".", "LineIterator", "lineIterator", "=", "new", "IOUtil", ".", "LineIterator", "(", "path", ")", ";", "if", "(", "!", "lineIterator", ".", "hasNext", "(", ")", ")", "return", "null", ";", "logger", ".", "info", "(", "lineIterator", ".", "next", "(", ")", ")", ";", "// verson", "logger", ".", "info", "(", "lineIterator", ".", "next", "(", ")", ")", ";", "// cost-factor", "int", "maxid", "=", "Integer", ".", "parseInt", "(", "lineIterator", ".", "next", "(", ")", ".", "substring", "(", "\"maxid:\"", ".", "length", "(", ")", ")", ".", "trim", "(", ")", ")", ";", "logger", ".", "info", "(", "lineIterator", ".", "next", "(", ")", ")", ";", "// xsize", "lineIterator", ".", "next", "(", ")", ";", "// blank", "String", "line", ";", "int", "id", "=", "0", ";", "CRFModel", ".", "tag2id", "=", "new", "HashMap", "<", "String", ",", "Integer", ">", "(", ")", ";", "while", "(", "(", "line", "=", "lineIterator", ".", "next", "(", ")", ")", ".", "length", "(", ")", "!=", "0", ")", "{", "CRFModel", ".", "tag2id", ".", "put", "(", "line", ",", "id", ")", ";", "++", "id", ";", "}", "CRFModel", ".", "id2tag", "=", "new", "String", "[", "CRFModel", ".", "tag2id", ".", "size", "(", ")", "]", ";", "final", "int", "size", "=", "CRFModel", ".", "id2tag", ".", "length", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "CRFModel", ".", "tag2id", ".", "entrySet", "(", ")", ")", "{", "CRFModel", ".", "id2tag", "[", "entry", ".", "getValue", "(", ")", "]", "=", "entry", ".", "getKey", "(", ")", ";", "}", "TreeMap", "<", "String", ",", "FeatureFunction", ">", "featureFunctionMap", "=", "new", "TreeMap", "<", "String", ",", "FeatureFunction", ">", "(", ")", ";", "// \u6784\u5efatrie\u6811\u7684\u65f6\u5019\u7528", "TreeMap", "<", "Integer", ",", "FeatureFunction", ">", "featureFunctionList", "=", "new", "TreeMap", "<", "Integer", ",", "FeatureFunction", ">", "(", ")", ";", "// \u8bfb\u53d6\u6743\u503c\u7684\u65f6\u5019\u7528", "CRFModel", ".", "featureTemplateList", "=", "new", "LinkedList", "<", "FeatureTemplate", ">", "(", ")", ";", "while", "(", "(", "line", "=", "lineIterator", ".", "next", "(", ")", ")", ".", "length", "(", ")", "!=", "0", ")", "{", "if", "(", "!", "\"B\"", ".", "equals", "(", "line", ")", ")", "{", "FeatureTemplate", "featureTemplate", "=", "FeatureTemplate", ".", "create", "(", "line", ")", ";", "CRFModel", ".", "featureTemplateList", ".", "add", "(", "featureTemplate", ")", ";", "}", "else", "{", "CRFModel", ".", "matrix", "=", "new", "double", "[", "size", "]", "[", "size", "]", ";", "}", "}", "int", "b", "=", "-", "1", ";", "// \u8f6c\u6362\u77e9\u9635\u7684\u6743\u91cd\u4f4d\u7f6e", "if", "(", "CRFModel", ".", "matrix", "!=", "null", ")", "{", "String", "[", "]", "args", "=", "lineIterator", ".", "next", "(", ")", ".", "split", "(", "\" \"", ",", "2", ")", ";", "// 0 B", "b", "=", "Integer", ".", "valueOf", "(", "args", "[", "0", "]", ")", ";", "featureFunctionList", ".", "put", "(", "b", ",", "null", ")", ";", "}", "while", "(", "(", "line", "=", "lineIterator", ".", "next", "(", ")", ")", ".", "length", "(", ")", "!=", "0", ")", "{", "String", "[", "]", "args", "=", "line", ".", "split", "(", "\" \"", ",", "2", ")", ";", "char", "[", "]", "charArray", "=", "args", "[", "1", "]", ".", "toCharArray", "(", ")", ";", "FeatureFunction", "featureFunction", "=", "new", "FeatureFunction", "(", "charArray", ",", "size", ")", ";", "featureFunctionMap", ".", "put", "(", "args", "[", "1", "]", ",", "featureFunction", ")", ";", "featureFunctionList", ".", "put", "(", "Integer", ".", "parseInt", "(", "args", "[", "0", "]", ")", ",", "featureFunction", ")", ";", "}", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "FeatureFunction", ">", "entry", ":", "featureFunctionList", ".", "entrySet", "(", ")", ")", "{", "int", "fid", "=", "entry", ".", "getKey", "(", ")", ";", "FeatureFunction", "featureFunction", "=", "entry", ".", "getValue", "(", ")", ";", "if", "(", "fid", "==", "b", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "size", ";", "j", "++", ")", "{", "CRFModel", ".", "matrix", "[", "i", "]", "[", "j", "]", "=", "Double", ".", "parseDouble", "(", "lineIterator", ".", "next", "(", ")", ")", ";", "}", "}", "}", "else", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "featureFunction", ".", "w", "[", "i", "]", "=", "Double", ".", "parseDouble", "(", "lineIterator", ".", "next", "(", ")", ")", ";", "}", "}", "}", "if", "(", "lineIterator", ".", "hasNext", "(", ")", ")", "{", "logger", ".", "warning", "(", "\"\u6587\u672c\u8bfb\u53d6\u6709\u6b8b\u7559\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff01\" + path);", "", "", "", "", "}", "lineIterator", ".", "close", "(", ")", ";", "logger", ".", "info", "(", "\"\u5f00\u59cb\u6784\u5efatrie\u6811\");", "", "", "CRFModel", ".", "featureFunctionTrie", ".", "build", "(", "featureFunctionMap", ")", ";", "// \u7f13\u5b58bin", "try", "{", "logger", ".", "info", "(", "\"\u5f00\u59cb\u7f13\u5b58\" + path ", " ", "rede", "i", "e.BIN_EXT", ")", ";", "", "", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "path", "+", "Predefine", ".", "BIN_EXT", ")", ")", ";", "CRFModel", ".", "save", "(", "out", ")", ";", "out", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u5728\u7f13\u5b58\" + pat", " ", " Pre", "e", "ine.BIN_E", "X", "T + \"\u65f6\u53d1", "\u9519", "\" + TextUtility.e", "c", "ptionToStri", "n", "g(e));", "", "", "", "", "", "}", "CRFModel", ".", "onLoadTxtFinished", "(", ")", ";", "return", "CRFModel", ";", "}"], "docstring": "\u52a0\u8f7dTxt\u5f62\u5f0f\u7684CRF++\u6a21\u578b\n\n@param path     \u6a21\u578b\u8def\u5f84\n@param instance \u6a21\u578b\u7684\u5b9e\u4f8b\uff08\u8fd9\u91cc\u5141\u8bb8\u7528\u6237\u6784\u9020\u4e0d\u540c\u7684CRFModel\u6765\u50a8\u5b58\u6700\u7ec8\u8bfb\u53d6\u7684\u7ed3\u679c\uff09\n@return \u8be5\u6a21\u578b", "docstring_tokens": ["\u52a0\u8f7dTxt\u5f62\u5f0f\u7684CRF", "++", "\u6a21\u578b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L85-L187", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.tag", "original_string": "public void tag(Table table)\n    {\n        int size = table.size();\n        if (size == 0) return;\n        int tagSize = id2tag.length;\n        double[][] net = new double[size][tagSize];\n        for (int i = 0; i < size; ++i)\n        {\n            LinkedList<double[]> scoreList = computeScoreList(table, i);\n            for (int tag = 0; tag < tagSize; ++tag)\n            {\n                net[i][tag] = computeScore(scoreList, tag);\n            }\n        }\n\n        if (size == 1)\n        {\n            double maxScore = -1e10;\n            int bestTag = 0;\n            for (int tag = 0; tag < net[0].length; ++tag)\n            {\n                if (net[0][tag] > maxScore)\n                {\n                    maxScore = net[0][tag];\n                    bestTag = tag;\n                }\n            }\n            table.setLast(0, id2tag[bestTag]);\n            return;\n        }\n\n        int[][] from = new int[size][tagSize];\n        double[][] maxScoreAt = new double[2][tagSize]; // \u6eda\u52a8\u6570\u7ec4\n        System.arraycopy(net[0], 0, maxScoreAt[0], 0, tagSize); // \u521d\u59cbpreI=0,  maxScoreAt[preI][pre] = net[0][pre]\n        int curI = 0;\n        for (int i = 1; i < size; ++i)\n        {\n            curI = i & 1;\n            int preI = 1 - curI;\n            for (int now = 0; now < tagSize; ++now)\n            {\n                double maxScore = -1e10;\n                for (int pre = 0; pre < tagSize; ++pre)\n                {\n                    double score = maxScoreAt[preI][pre] + matrix[pre][now] + net[i][now];\n                    if (score > maxScore)\n                    {\n                        maxScore = score;\n                        from[i][now] = pre;\n                        maxScoreAt[curI][now] = maxScore;\n                    }\n                }\n                net[i][now] = maxScore;\n            }\n        }\n        // \u53cd\u5411\u56de\u6eaf\u6700\u4f73\u8def\u5f84\n        double maxScore = -1e10;\n        int maxTag = 0;\n        for (int tag = 0; tag < tagSize; ++tag)\n        {\n            if (maxScoreAt[curI][tag] > maxScore)\n            {\n                maxScore = maxScoreAt[curI][tag];\n                maxTag = tag;\n            }\n        }\n\n        table.setLast(size - 1, id2tag[maxTag]);\n        maxTag = from[size - 1][maxTag];\n        for (int i = size - 2; i > 0; --i)\n        {\n            table.setLast(i, id2tag[maxTag]);\n            maxTag = from[i][maxTag];\n        }\n        table.setLast(0, id2tag[maxTag]);\n    }", "language": "java", "code": "public void tag(Table table)\n    {\n        int size = table.size();\n        if (size == 0) return;\n        int tagSize = id2tag.length;\n        double[][] net = new double[size][tagSize];\n        for (int i = 0; i < size; ++i)\n        {\n            LinkedList<double[]> scoreList = computeScoreList(table, i);\n            for (int tag = 0; tag < tagSize; ++tag)\n            {\n                net[i][tag] = computeScore(scoreList, tag);\n            }\n        }\n\n        if (size == 1)\n        {\n            double maxScore = -1e10;\n            int bestTag = 0;\n            for (int tag = 0; tag < net[0].length; ++tag)\n            {\n                if (net[0][tag] > maxScore)\n                {\n                    maxScore = net[0][tag];\n                    bestTag = tag;\n                }\n            }\n            table.setLast(0, id2tag[bestTag]);\n            return;\n        }\n\n        int[][] from = new int[size][tagSize];\n        double[][] maxScoreAt = new double[2][tagSize]; // \u6eda\u52a8\u6570\u7ec4\n        System.arraycopy(net[0], 0, maxScoreAt[0], 0, tagSize); // \u521d\u59cbpreI=0,  maxScoreAt[preI][pre] = net[0][pre]\n        int curI = 0;\n        for (int i = 1; i < size; ++i)\n        {\n            curI = i & 1;\n            int preI = 1 - curI;\n            for (int now = 0; now < tagSize; ++now)\n            {\n                double maxScore = -1e10;\n                for (int pre = 0; pre < tagSize; ++pre)\n                {\n                    double score = maxScoreAt[preI][pre] + matrix[pre][now] + net[i][now];\n                    if (score > maxScore)\n                    {\n                        maxScore = score;\n                        from[i][now] = pre;\n                        maxScoreAt[curI][now] = maxScore;\n                    }\n                }\n                net[i][now] = maxScore;\n            }\n        }\n        // \u53cd\u5411\u56de\u6eaf\u6700\u4f73\u8def\u5f84\n        double maxScore = -1e10;\n        int maxTag = 0;\n        for (int tag = 0; tag < tagSize; ++tag)\n        {\n            if (maxScoreAt[curI][tag] > maxScore)\n            {\n                maxScore = maxScoreAt[curI][tag];\n                maxTag = tag;\n            }\n        }\n\n        table.setLast(size - 1, id2tag[maxTag]);\n        maxTag = from[size - 1][maxTag];\n        for (int i = size - 2; i > 0; --i)\n        {\n            table.setLast(i, id2tag[maxTag]);\n            maxTag = from[i][maxTag];\n        }\n        table.setLast(0, id2tag[maxTag]);\n    }", "code_tokens": ["public", "void", "tag", "(", "Table", "table", ")", "{", "int", "size", "=", "table", ".", "size", "(", ")", ";", "if", "(", "size", "==", "0", ")", "return", ";", "int", "tagSize", "=", "id2tag", ".", "length", ";", "double", "[", "]", "[", "]", "net", "=", "new", "double", "[", "size", "]", "[", "tagSize", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "++", "i", ")", "{", "LinkedList", "<", "double", "[", "]", ">", "scoreList", "=", "computeScoreList", "(", "table", ",", "i", ")", ";", "for", "(", "int", "tag", "=", "0", ";", "tag", "<", "tagSize", ";", "++", "tag", ")", "{", "net", "[", "i", "]", "[", "tag", "]", "=", "computeScore", "(", "scoreList", ",", "tag", ")", ";", "}", "}", "if", "(", "size", "==", "1", ")", "{", "double", "maxScore", "=", "-", "1e10", ";", "int", "bestTag", "=", "0", ";", "for", "(", "int", "tag", "=", "0", ";", "tag", "<", "net", "[", "0", "]", ".", "length", ";", "++", "tag", ")", "{", "if", "(", "net", "[", "0", "]", "[", "tag", "]", ">", "maxScore", ")", "{", "maxScore", "=", "net", "[", "0", "]", "[", "tag", "]", ";", "bestTag", "=", "tag", ";", "}", "}", "table", ".", "setLast", "(", "0", ",", "id2tag", "[", "bestTag", "]", ")", ";", "return", ";", "}", "int", "[", "]", "[", "]", "from", "=", "new", "int", "[", "size", "]", "[", "tagSize", "]", ";", "double", "[", "]", "[", "]", "maxScoreAt", "=", "new", "double", "[", "2", "]", "[", "tagSize", "]", ";", "// \u6eda\u52a8\u6570\u7ec4", "System", ".", "arraycopy", "(", "net", "[", "0", "]", ",", "0", ",", "maxScoreAt", "[", "0", "]", ",", "0", ",", "tagSize", ")", ";", "// \u521d\u59cbpreI=0,  maxScoreAt[preI][pre] = net[0][pre]", "int", "curI", "=", "0", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "size", ";", "++", "i", ")", "{", "curI", "=", "i", "&", "1", ";", "int", "preI", "=", "1", "-", "curI", ";", "for", "(", "int", "now", "=", "0", ";", "now", "<", "tagSize", ";", "++", "now", ")", "{", "double", "maxScore", "=", "-", "1e10", ";", "for", "(", "int", "pre", "=", "0", ";", "pre", "<", "tagSize", ";", "++", "pre", ")", "{", "double", "score", "=", "maxScoreAt", "[", "preI", "]", "[", "pre", "]", "+", "matrix", "[", "pre", "]", "[", "now", "]", "+", "net", "[", "i", "]", "[", "now", "]", ";", "if", "(", "score", ">", "maxScore", ")", "{", "maxScore", "=", "score", ";", "from", "[", "i", "]", "[", "now", "]", "=", "pre", ";", "maxScoreAt", "[", "curI", "]", "[", "now", "]", "=", "maxScore", ";", "}", "}", "net", "[", "i", "]", "[", "now", "]", "=", "maxScore", ";", "}", "}", "// \u53cd\u5411\u56de\u6eaf\u6700\u4f73\u8def\u5f84", "double", "maxScore", "=", "-", "1e10", ";", "int", "maxTag", "=", "0", ";", "for", "(", "int", "tag", "=", "0", ";", "tag", "<", "tagSize", ";", "++", "tag", ")", "{", "if", "(", "maxScoreAt", "[", "curI", "]", "[", "tag", "]", ">", "maxScore", ")", "{", "maxScore", "=", "maxScoreAt", "[", "curI", "]", "[", "tag", "]", ";", "maxTag", "=", "tag", ";", "}", "}", "table", ".", "setLast", "(", "size", "-", "1", ",", "id2tag", "[", "maxTag", "]", ")", ";", "maxTag", "=", "from", "[", "size", "-", "1", "]", "[", "maxTag", "]", ";", "for", "(", "int", "i", "=", "size", "-", "2", ";", "i", ">", "0", ";", "--", "i", ")", "{", "table", ".", "setLast", "(", "i", ",", "id2tag", "[", "maxTag", "]", ")", ";", "maxTag", "=", "from", "[", "i", "]", "[", "maxTag", "]", ";", "}", "table", ".", "setLast", "(", "0", ",", "id2tag", "[", "maxTag", "]", ")", ";", "}"], "docstring": "\u7ef4\u7279\u6bd4\u540e\u5411\u7b97\u6cd5\u6807\u6ce8\n\n@param table", "docstring_tokens": ["\u7ef4\u7279\u6bd4\u540e\u5411\u7b97\u6cd5\u6807\u6ce8"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L194-L269", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.computeScoreList", "original_string": "protected LinkedList<double[]> computeScoreList(Table table, int current)\n    {\n        LinkedList<double[]> scoreList = new LinkedList<double[]>();\n        for (FeatureTemplate featureTemplate : featureTemplateList)\n        {\n            char[] o = featureTemplate.generateParameter(table, current);\n            FeatureFunction featureFunction = featureFunctionTrie.get(o);\n            if (featureFunction == null) continue;\n            scoreList.add(featureFunction.w);\n        }\n\n        return scoreList;\n    }", "language": "java", "code": "protected LinkedList<double[]> computeScoreList(Table table, int current)\n    {\n        LinkedList<double[]> scoreList = new LinkedList<double[]>();\n        for (FeatureTemplate featureTemplate : featureTemplateList)\n        {\n            char[] o = featureTemplate.generateParameter(table, current);\n            FeatureFunction featureFunction = featureFunctionTrie.get(o);\n            if (featureFunction == null) continue;\n            scoreList.add(featureFunction.w);\n        }\n\n        return scoreList;\n    }", "code_tokens": ["protected", "LinkedList", "<", "double", "[", "]", ">", "computeScoreList", "(", "Table", "table", ",", "int", "current", ")", "{", "LinkedList", "<", "double", "[", "]", ">", "scoreList", "=", "new", "LinkedList", "<", "double", "[", "]", ">", "(", ")", ";", "for", "(", "FeatureTemplate", "featureTemplate", ":", "featureTemplateList", ")", "{", "char", "[", "]", "o", "=", "featureTemplate", ".", "generateParameter", "(", "table", ",", "current", ")", ";", "FeatureFunction", "featureFunction", "=", "featureFunctionTrie", ".", "get", "(", "o", ")", ";", "if", "(", "featureFunction", "==", "null", ")", "continue", ";", "scoreList", ".", "add", "(", "featureFunction", ".", "w", ")", ";", "}", "return", "scoreList", ";", "}"], "docstring": "\u6839\u636e\u7279\u5f81\u51fd\u6570\u8ba1\u7b97\u8f93\u51fa\n\n@param table\n@param current\n@return", "docstring_tokens": ["\u6839\u636e\u7279\u5f81\u51fd\u6570\u8ba1\u7b97\u8f93\u51fa"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L278-L290", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.computeScore", "original_string": "protected static double computeScore(LinkedList<double[]> scoreList, int tag)\n    {\n        double score = 0;\n        for (double[] w : scoreList)\n        {\n            score += w[tag];\n        }\n        return score;\n    }", "language": "java", "code": "protected static double computeScore(LinkedList<double[]> scoreList, int tag)\n    {\n        double score = 0;\n        for (double[] w : scoreList)\n        {\n            score += w[tag];\n        }\n        return score;\n    }", "code_tokens": ["protected", "static", "double", "computeScore", "(", "LinkedList", "<", "double", "[", "]", ">", "scoreList", ",", "int", "tag", ")", "{", "double", "score", "=", "0", ";", "for", "(", "double", "[", "]", "w", ":", "scoreList", ")", "{", "score", "+=", "w", "[", "tag", "]", ";", "}", "return", "score", ";", "}"], "docstring": "\u7ed9\u4e00\u7cfb\u5217\u7279\u5f81\u51fd\u6570\u7ed3\u5408tag\u6253\u5206\n\n@param scoreList\n@param tag\n@return", "docstring_tokens": ["\u7ed9\u4e00\u7cfb\u5217\u7279\u5f81\u51fd\u6570\u7ed3\u5408tag\u6253\u5206"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L299-L307", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.load", "original_string": "public static CRFModel load(String path)\n    {\n        CRFModel model = loadBin(path + BIN_EXT);\n        if (model != null) return model;\n        return loadTxt(path, new CRFModel(new DoubleArrayTrie<FeatureFunction>()));\n    }", "language": "java", "code": "public static CRFModel load(String path)\n    {\n        CRFModel model = loadBin(path + BIN_EXT);\n        if (model != null) return model;\n        return loadTxt(path, new CRFModel(new DoubleArrayTrie<FeatureFunction>()));\n    }", "code_tokens": ["public", "static", "CRFModel", "load", "(", "String", "path", ")", "{", "CRFModel", "model", "=", "loadBin", "(", "path", "+", "BIN_EXT", ")", ";", "if", "(", "model", "!=", "null", ")", "return", "model", ";", "return", "loadTxt", "(", "path", ",", "new", "CRFModel", "(", "new", "DoubleArrayTrie", "<", "FeatureFunction", ">", "(", ")", ")", ")", ";", "}"], "docstring": "\u52a0\u8f7dCRF++\u6a21\u578b<br>\n\u5982\u679c\u5b58\u5728\u7f13\u5b58\u7684\u8bdd\uff0c\u4f18\u5148\u8bfb\u53d6\u7f13\u5b58\uff0c\u5426\u5219\u8bfb\u53d6txt\uff0c\u5e76\u4e14\u5efa\u7acb\u7f13\u5b58\n\n@param path txt\u7684\u8def\u5f84\uff0c\u5373\u4f7f\u4e0d\u5b58\u5728.txt\uff0c\u53ea\u5b58\u5728.bin\uff0c\u4e5f\u5e94\u4f20\u5165txt\u7684\u8def\u5f84\uff0c\u65b9\u6cd5\u5185\u90e8\u4f1a\u81ea\u52a8\u52a0.bin\u540e\u7f00\n@return", "docstring_tokens": ["\u52a0\u8f7dCRF", "++", "\u6a21\u578b<br", ">", "\u5982\u679c\u5b58\u5728\u7f13\u5b58\u7684\u8bdd\uff0c\u4f18\u5148\u8bfb\u53d6\u7f13\u5b58\uff0c\u5426\u5219\u8bfb\u53d6txt\uff0c\u5e76\u4e14\u5efa\u7acb\u7f13\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L414-L419", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java", "func_name": "CRFModel.loadBin", "original_string": "public static CRFModel loadBin(String path)\n    {\n        ByteArray byteArray = ByteArray.createByteArray(path);\n        if (byteArray == null) return null;\n        CRFModel model = new CRFModel();\n        if (model.load(byteArray)) return model;\n        return null;\n    }", "language": "java", "code": "public static CRFModel loadBin(String path)\n    {\n        ByteArray byteArray = ByteArray.createByteArray(path);\n        if (byteArray == null) return null;\n        CRFModel model = new CRFModel();\n        if (model.load(byteArray)) return model;\n        return null;\n    }", "code_tokens": ["public", "static", "CRFModel", "loadBin", "(", "String", "path", ")", "{", "ByteArray", "byteArray", "=", "ByteArray", ".", "createByteArray", "(", "path", ")", ";", "if", "(", "byteArray", "==", "null", ")", "return", "null", ";", "CRFModel", "model", "=", "new", "CRFModel", "(", ")", ";", "if", "(", "model", ".", "load", "(", "byteArray", ")", ")", "return", "model", ";", "return", "null", ";", "}"], "docstring": "\u52a0\u8f7dBin\u5f62\u5f0f\u7684CRF++\u6a21\u578b<br>\n\u6ce8\u610f\u8be5Bin\u5f62\u5f0f\u4e0d\u662fCRF++\u7684\u4e8c\u8fdb\u5236\u6a21\u578b,\u800c\u662fHanLP\u7531CRF++\u7684\u6587\u672c\u6a21\u578b\u8f6c\u6362\u8fc7\u6765\u7684\u79c1\u6709\u683c\u5f0f\n\n@param path\n@return", "docstring_tokens": ["\u52a0\u8f7dBin\u5f62\u5f0f\u7684CRF", "++", "\u6a21\u578b<br", ">", "\u6ce8\u610f\u8be5Bin\u5f62\u5f0f\u4e0d\u662fCRF", "++", "\u7684\u4e8c\u8fdb\u5236\u6a21\u578b", "\u800c\u662fHanLP\u7531CRF", "++", "\u7684\u6587\u672c\u6a21\u578b\u8f6c\u6362\u8fc7\u6765\u7684\u79c1\u6709\u683c\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/CRFModel.java#L428-L435", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/word/Word.java", "func_name": "Word.create", "original_string": "public static Word create(String param)\n    {\n        if (param == null) return null;\n        int cutIndex = param.lastIndexOf('/');\n        if (cutIndex <= 0 || cutIndex == param.length() - 1)\n        {\n            logger.warning(\"\u4f7f\u7528 \" + param + \"\u521b\u5efa\u5355\u4e2a\u5355\u8bcd\u5931\u8d25\");\n            return null;\n        }\n\n        return new Word(param.substring(0, cutIndex), param.substring(cutIndex + 1));\n    }", "language": "java", "code": "public static Word create(String param)\n    {\n        if (param == null) return null;\n        int cutIndex = param.lastIndexOf('/');\n        if (cutIndex <= 0 || cutIndex == param.length() - 1)\n        {\n            logger.warning(\"\u4f7f\u7528 \" + param + \"\u521b\u5efa\u5355\u4e2a\u5355\u8bcd\u5931\u8d25\");\n            return null;\n        }\n\n        return new Word(param.substring(0, cutIndex), param.substring(cutIndex + 1));\n    }", "code_tokens": ["public", "static", "Word", "create", "(", "String", "param", ")", "{", "if", "(", "param", "==", "null", ")", "return", "null", ";", "int", "cutIndex", "=", "param", ".", "lastIndexOf", "(", "'", "'", ")", ";", "if", "(", "cutIndex", "<=", "0", "||", "cutIndex", "==", "param", ".", "length", "(", ")", "-", "1", ")", "{", "logger", ".", "warning", "(", "\"\u4f7f\u7528 \" + p", "r", "m + \"", "\u5efa", "\u4e2a\u5355\u8bcd\u5931\u8d25\");", "", "", "return", "null", ";", "}", "return", "new", "Word", "(", "param", ".", "substring", "(", "0", ",", "cutIndex", ")", ",", "param", ".", "substring", "(", "cutIndex", "+", "1", ")", ")", ";", "}"], "docstring": "\u901a\u8fc7\u53c2\u6570\u6784\u9020\u4e00\u4e2a\u5355\u8bcd\n@param param \u6bd4\u5982 \u4eba\u6c11\u7f51/nz\n@return \u4e00\u4e2a\u5355\u8bcd", "docstring_tokens": ["\u901a\u8fc7\u53c2\u6570\u6784\u9020\u4e00\u4e2a\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/word/Word.java#L49-L60", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/document/sentence/word/WordFactory.java", "func_name": "WordFactory.create", "original_string": "public static IWord create(String param)\n    {\n        if (param == null) return null;\n        if (param.startsWith(\"[\") && !param.startsWith(\"[/\"))\n        {\n            return CompoundWord.create(param);\n        }\n        else\n        {\n            return Word.create(param);\n        }\n    }", "language": "java", "code": "public static IWord create(String param)\n    {\n        if (param == null) return null;\n        if (param.startsWith(\"[\") && !param.startsWith(\"[/\"))\n        {\n            return CompoundWord.create(param);\n        }\n        else\n        {\n            return Word.create(param);\n        }\n    }", "code_tokens": ["public", "static", "IWord", "create", "(", "String", "param", ")", "{", "if", "(", "param", "==", "null", ")", "return", "null", ";", "if", "(", "param", ".", "startsWith", "(", "\"[\"", ")", "&&", "!", "param", ".", "startsWith", "(", "\"[/\"", ")", ")", "{", "return", "CompoundWord", ".", "create", "(", "param", ")", ";", "}", "else", "{", "return", "Word", ".", "create", "(", "param", ")", ";", "}", "}"], "docstring": "\u6839\u636e\u53c2\u6570\u5b57\u7b26\u4e32\u4ea7\u751f\u5bf9\u5e94\u7684\u8bcd\u8bed\n@param param\n@return", "docstring_tokens": ["\u6839\u636e\u53c2\u6570\u5b57\u7b26\u4e32\u4ea7\u751f\u5bf9\u5e94\u7684\u8bcd\u8bed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/document/sentence/word/WordFactory.java#L25-L36", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java", "func_name": "CoNLLSentence.getEdgeArray", "original_string": "public String[][] getEdgeArray()\n    {\n        String[][] edge = new String[word.length + 1][word.length + 1];\n        for (CoNLLWord coNLLWord : word)\n        {\n            edge[coNLLWord.ID][coNLLWord.HEAD.ID] = coNLLWord.DEPREL;\n        }\n\n        return edge;\n    }", "language": "java", "code": "public String[][] getEdgeArray()\n    {\n        String[][] edge = new String[word.length + 1][word.length + 1];\n        for (CoNLLWord coNLLWord : word)\n        {\n            edge[coNLLWord.ID][coNLLWord.HEAD.ID] = coNLLWord.DEPREL;\n        }\n\n        return edge;\n    }", "code_tokens": ["public", "String", "[", "]", "[", "]", "getEdgeArray", "(", ")", "{", "String", "[", "]", "[", "]", "edge", "=", "new", "String", "[", "word", ".", "length", "+", "1", "]", "[", "word", ".", "length", "+", "1", "]", ";", "for", "(", "CoNLLWord", "coNLLWord", ":", "word", ")", "{", "edge", "[", "coNLLWord", ".", "ID", "]", "[", "coNLLWord", ".", "HEAD", ".", "ID", "]", "=", "coNLLWord", ".", "DEPREL", ";", "}", "return", "edge", ";", "}"], "docstring": "\u83b7\u53d6\u8fb9\u7684\u5217\u8868\uff0cedge[i][j]\u8868\u793aid\u4e3ai\u7684\u8bcd\u8bed\u4e0ej\u5b58\u5728\u4e00\u6761\u4f9d\u5b58\u5173\u7cfb\u4e3a\u8be5\u503c\u7684\u8fb9\uff0c\u5426\u5219\u4e3anull\n@return", "docstring_tokens": ["\u83b7\u53d6\u8fb9\u7684\u5217\u8868\uff0cedge", "[", "i", "]", "[", "j", "]", "\u8868\u793aid\u4e3ai\u7684\u8bcd\u8bed\u4e0ej\u5b58\u5728\u4e00\u6761\u4f9d\u5b58\u5173\u7cfb\u4e3a\u8be5\u503c\u7684\u8fb9\uff0c\u5426\u5219\u4e3anull"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java#L77-L86", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java", "func_name": "CoNLLSentence.getWordArrayWithRoot", "original_string": "public CoNLLWord[] getWordArrayWithRoot()\n    {\n        CoNLLWord[] wordArray = new CoNLLWord[word.length + 1];\n        wordArray[0] = CoNLLWord.ROOT;\n        System.arraycopy(word, 0, wordArray, 1, word.length);\n\n        return wordArray;\n    }", "language": "java", "code": "public CoNLLWord[] getWordArrayWithRoot()\n    {\n        CoNLLWord[] wordArray = new CoNLLWord[word.length + 1];\n        wordArray[0] = CoNLLWord.ROOT;\n        System.arraycopy(word, 0, wordArray, 1, word.length);\n\n        return wordArray;\n    }", "code_tokens": ["public", "CoNLLWord", "[", "]", "getWordArrayWithRoot", "(", ")", "{", "CoNLLWord", "[", "]", "wordArray", "=", "new", "CoNLLWord", "[", "word", ".", "length", "+", "1", "]", ";", "wordArray", "[", "0", "]", "=", "CoNLLWord", ".", "ROOT", ";", "System", ".", "arraycopy", "(", "word", ",", "0", ",", "wordArray", ",", "1", ",", "word", ".", "length", ")", ";", "return", "wordArray", ";", "}"], "docstring": "\u83b7\u53d6\u5305\u542b\u6839\u8282\u70b9\u5728\u5185\u7684\u5355\u8bcd\u6570\u7ec4\n@return", "docstring_tokens": ["\u83b7\u53d6\u5305\u542b\u6839\u8282\u70b9\u5728\u5185\u7684\u5355\u8bcd\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java#L92-L99", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java", "func_name": "CoNLLSentence.findChildren", "original_string": "public List<CoNLLWord> findChildren(CoNLLWord word)\n    {\n        List<CoNLLWord> result = new LinkedList<CoNLLWord>();\n        for (CoNLLWord other : this)\n        {\n            if (other.HEAD == word)\n                result.add(other);\n        }\n        return result;\n    }", "language": "java", "code": "public List<CoNLLWord> findChildren(CoNLLWord word)\n    {\n        List<CoNLLWord> result = new LinkedList<CoNLLWord>();\n        for (CoNLLWord other : this)\n        {\n            if (other.HEAD == word)\n                result.add(other);\n        }\n        return result;\n    }", "code_tokens": ["public", "List", "<", "CoNLLWord", ">", "findChildren", "(", "CoNLLWord", "word", ")", "{", "List", "<", "CoNLLWord", ">", "result", "=", "new", "LinkedList", "<", "CoNLLWord", ">", "(", ")", ";", "for", "(", "CoNLLWord", "other", ":", "this", ")", "{", "if", "(", "other", ".", "HEAD", "==", "word", ")", "result", ".", "add", "(", "other", ")", ";", "}", "return", "result", ";", "}"], "docstring": "\u627e\u51fa\u6240\u6709\u5b50\u8282\u70b9\n@param word\n@return", "docstring_tokens": ["\u627e\u51fa\u6240\u6709\u5b50\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java#L137-L146", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java", "func_name": "CoNLLSentence.findChildren", "original_string": "public List<CoNLLWord> findChildren(CoNLLWord word, String relation)\n    {\n        List<CoNLLWord> result = new LinkedList<CoNLLWord>();\n        for (CoNLLWord other : this)\n        {\n            if (other.HEAD == word && other.DEPREL.equals(relation))\n                result.add(other);\n        }\n        return result;\n    }", "language": "java", "code": "public List<CoNLLWord> findChildren(CoNLLWord word, String relation)\n    {\n        List<CoNLLWord> result = new LinkedList<CoNLLWord>();\n        for (CoNLLWord other : this)\n        {\n            if (other.HEAD == word && other.DEPREL.equals(relation))\n                result.add(other);\n        }\n        return result;\n    }", "code_tokens": ["public", "List", "<", "CoNLLWord", ">", "findChildren", "(", "CoNLLWord", "word", ",", "String", "relation", ")", "{", "List", "<", "CoNLLWord", ">", "result", "=", "new", "LinkedList", "<", "CoNLLWord", ">", "(", ")", ";", "for", "(", "CoNLLWord", "other", ":", "this", ")", "{", "if", "(", "other", ".", "HEAD", "==", "word", "&&", "other", ".", "DEPREL", ".", "equals", "(", "relation", ")", ")", "result", ".", "add", "(", "other", ")", ";", "}", "return", "result", ";", "}"], "docstring": "\u627e\u51fa\u7279\u5b9a\u4f9d\u5b58\u5173\u7cfb\u7684\u5b50\u8282\u70b9\n@param word\n@param relation\n@return", "docstring_tokens": ["\u627e\u51fa\u7279\u5b9a\u4f9d\u5b58\u5173\u7cfb\u7684\u5b50\u8282\u70b9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dependency/CoNll/CoNLLSentence.java#L154-L163", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/transition/parser/KBeamArcEagerParser.java", "func_name": "KBeamArcEagerParser.parseConllFileNoParallel", "original_string": "public void parseConllFileNoParallel(String inputFile, String outputFile, boolean rootFirst, int beamWidth, boolean labeled, boolean lowerCased, int numOfThreads, boolean partial, String scorePath) throws IOException, ExecutionException, InterruptedException\n    {\n        CoNLLReader reader = new CoNLLReader(inputFile);\n        boolean addScore = false;\n        if (scorePath.trim().length() > 0)\n            addScore = true;\n        ArrayList<Float> scoreList = new ArrayList<Float>();\n\n        long start = System.currentTimeMillis();\n        int allArcs = 0;\n        int size = 0;\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile + \".tmp\"));\n        int dataCount = 0;\n\n        while (true)\n        {\n            ArrayList<Instance> data = reader.readData(15000, true, labeled, rootFirst, lowerCased, maps);\n            size += data.size();\n            if (data.size() == 0)\n                break;\n\n            for (Instance instance : data)\n            {\n                dataCount++;\n                if (dataCount % 100 == 0)\n                    System.err.print(dataCount + \" ... \");\n                Configuration bestParse;\n                if (partial)\n                    bestParse = parsePartial(instance, instance.getSentence(), rootFirst, beamWidth, numOfThreads);\n                else bestParse = parse(instance.getSentence(), rootFirst, beamWidth, numOfThreads);\n\n                int[] words = instance.getSentence().getWords();\n                allArcs += words.length - 1;\n                if (addScore)\n                    scoreList.add(bestParse.score / bestParse.sentence.size());\n\n                writeParsedSentence(writer, rootFirst, bestParse, words);\n            }\n        }\n\n//        System.err.print(\"\\n\");\n        long end = System.currentTimeMillis();\n        float each = (1.0f * (end - start)) / size;\n        float eacharc = (1.0f * (end - start)) / allArcs;\n\n        writer.flush();\n        writer.close();\n\n//        DecimalFormat format = new DecimalFormat(\"##.00\");\n//\n//        System.err.print(format.format(eacharc) + \" ms for each arc!\\n\");\n//        System.err.print(format.format(each) + \" ms for each sentence!\\n\\n\");\n\n        BufferedReader gReader = new BufferedReader(new FileReader(inputFile));\n        BufferedReader pReader = new BufferedReader(new FileReader(outputFile + \".tmp\"));\n        BufferedWriter pwriter = new BufferedWriter(new FileWriter(outputFile));\n\n        String line;\n\n        while ((line = pReader.readLine()) != null)\n        {\n            String gLine = gReader.readLine();\n            if (line.trim().length() > 0)\n            {\n                while (gLine.trim().length() == 0)\n                    gLine = gReader.readLine();\n                String[] ps = line.split(\"\\t\");\n                String[] gs = gLine.split(\"\\t\");\n                gs[6] = ps[0];\n                gs[7] = ps[1];\n                StringBuilder output = new StringBuilder();\n                for (int i = 0; i < gs.length; i++)\n                {\n                    output.append(gs[i]).append(\"\\t\");\n                }\n                pwriter.write(output.toString().trim() + \"\\n\");\n            }\n            else\n            {\n                pwriter.write(\"\\n\");\n            }\n        }\n        pwriter.flush();\n        pwriter.close();\n\n        if (addScore)\n        {\n            BufferedWriter scoreWriter = new BufferedWriter(new FileWriter(scorePath));\n\n            for (int i = 0; i < scoreList.size(); i++)\n                scoreWriter.write(scoreList.get(i) + \"\\n\");\n            scoreWriter.flush();\n            scoreWriter.close();\n        }\n        IOUtil.deleteFile(outputFile + \".tmp\");\n    }", "language": "java", "code": "public void parseConllFileNoParallel(String inputFile, String outputFile, boolean rootFirst, int beamWidth, boolean labeled, boolean lowerCased, int numOfThreads, boolean partial, String scorePath) throws IOException, ExecutionException, InterruptedException\n    {\n        CoNLLReader reader = new CoNLLReader(inputFile);\n        boolean addScore = false;\n        if (scorePath.trim().length() > 0)\n            addScore = true;\n        ArrayList<Float> scoreList = new ArrayList<Float>();\n\n        long start = System.currentTimeMillis();\n        int allArcs = 0;\n        int size = 0;\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile + \".tmp\"));\n        int dataCount = 0;\n\n        while (true)\n        {\n            ArrayList<Instance> data = reader.readData(15000, true, labeled, rootFirst, lowerCased, maps);\n            size += data.size();\n            if (data.size() == 0)\n                break;\n\n            for (Instance instance : data)\n            {\n                dataCount++;\n                if (dataCount % 100 == 0)\n                    System.err.print(dataCount + \" ... \");\n                Configuration bestParse;\n                if (partial)\n                    bestParse = parsePartial(instance, instance.getSentence(), rootFirst, beamWidth, numOfThreads);\n                else bestParse = parse(instance.getSentence(), rootFirst, beamWidth, numOfThreads);\n\n                int[] words = instance.getSentence().getWords();\n                allArcs += words.length - 1;\n                if (addScore)\n                    scoreList.add(bestParse.score / bestParse.sentence.size());\n\n                writeParsedSentence(writer, rootFirst, bestParse, words);\n            }\n        }\n\n//        System.err.print(\"\\n\");\n        long end = System.currentTimeMillis();\n        float each = (1.0f * (end - start)) / size;\n        float eacharc = (1.0f * (end - start)) / allArcs;\n\n        writer.flush();\n        writer.close();\n\n//        DecimalFormat format = new DecimalFormat(\"##.00\");\n//\n//        System.err.print(format.format(eacharc) + \" ms for each arc!\\n\");\n//        System.err.print(format.format(each) + \" ms for each sentence!\\n\\n\");\n\n        BufferedReader gReader = new BufferedReader(new FileReader(inputFile));\n        BufferedReader pReader = new BufferedReader(new FileReader(outputFile + \".tmp\"));\n        BufferedWriter pwriter = new BufferedWriter(new FileWriter(outputFile));\n\n        String line;\n\n        while ((line = pReader.readLine()) != null)\n        {\n            String gLine = gReader.readLine();\n            if (line.trim().length() > 0)\n            {\n                while (gLine.trim().length() == 0)\n                    gLine = gReader.readLine();\n                String[] ps = line.split(\"\\t\");\n                String[] gs = gLine.split(\"\\t\");\n                gs[6] = ps[0];\n                gs[7] = ps[1];\n                StringBuilder output = new StringBuilder();\n                for (int i = 0; i < gs.length; i++)\n                {\n                    output.append(gs[i]).append(\"\\t\");\n                }\n                pwriter.write(output.toString().trim() + \"\\n\");\n            }\n            else\n            {\n                pwriter.write(\"\\n\");\n            }\n        }\n        pwriter.flush();\n        pwriter.close();\n\n        if (addScore)\n        {\n            BufferedWriter scoreWriter = new BufferedWriter(new FileWriter(scorePath));\n\n            for (int i = 0; i < scoreList.size(); i++)\n                scoreWriter.write(scoreList.get(i) + \"\\n\");\n            scoreWriter.flush();\n            scoreWriter.close();\n        }\n        IOUtil.deleteFile(outputFile + \".tmp\");\n    }", "code_tokens": ["public", "void", "parseConllFileNoParallel", "(", "String", "inputFile", ",", "String", "outputFile", ",", "boolean", "rootFirst", ",", "int", "beamWidth", ",", "boolean", "labeled", ",", "boolean", "lowerCased", ",", "int", "numOfThreads", ",", "boolean", "partial", ",", "String", "scorePath", ")", "throws", "IOException", ",", "ExecutionException", ",", "InterruptedException", "{", "CoNLLReader", "reader", "=", "new", "CoNLLReader", "(", "inputFile", ")", ";", "boolean", "addScore", "=", "false", ";", "if", "(", "scorePath", ".", "trim", "(", ")", ".", "length", "(", ")", ">", "0", ")", "addScore", "=", "true", ";", "ArrayList", "<", "Float", ">", "scoreList", "=", "new", "ArrayList", "<", "Float", ">", "(", ")", ";", "long", "start", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "int", "allArcs", "=", "0", ";", "int", "size", "=", "0", ";", "BufferedWriter", "writer", "=", "new", "BufferedWriter", "(", "new", "FileWriter", "(", "outputFile", "+", "\".tmp\"", ")", ")", ";", "int", "dataCount", "=", "0", ";", "while", "(", "true", ")", "{", "ArrayList", "<", "Instance", ">", "data", "=", "reader", ".", "readData", "(", "15000", ",", "true", ",", "labeled", ",", "rootFirst", ",", "lowerCased", ",", "maps", ")", ";", "size", "+=", "data", ".", "size", "(", ")", ";", "if", "(", "data", ".", "size", "(", ")", "==", "0", ")", "break", ";", "for", "(", "Instance", "instance", ":", "data", ")", "{", "dataCount", "++", ";", "if", "(", "dataCount", "%", "100", "==", "0", ")", "System", ".", "err", ".", "print", "(", "dataCount", "+", "\" ... \"", ")", ";", "Configuration", "bestParse", ";", "if", "(", "partial", ")", "bestParse", "=", "parsePartial", "(", "instance", ",", "instance", ".", "getSentence", "(", ")", ",", "rootFirst", ",", "beamWidth", ",", "numOfThreads", ")", ";", "else", "bestParse", "=", "parse", "(", "instance", ".", "getSentence", "(", ")", ",", "rootFirst", ",", "beamWidth", ",", "numOfThreads", ")", ";", "int", "[", "]", "words", "=", "instance", ".", "getSentence", "(", ")", ".", "getWords", "(", ")", ";", "allArcs", "+=", "words", ".", "length", "-", "1", ";", "if", "(", "addScore", ")", "scoreList", ".", "add", "(", "bestParse", ".", "score", "/", "bestParse", ".", "sentence", ".", "size", "(", ")", ")", ";", "writeParsedSentence", "(", "writer", ",", "rootFirst", ",", "bestParse", ",", "words", ")", ";", "}", "}", "//        System.err.print(\"\\n\");", "long", "end", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "float", "each", "=", "(", "1.0f", "*", "(", "end", "-", "start", ")", ")", "/", "size", ";", "float", "eacharc", "=", "(", "1.0f", "*", "(", "end", "-", "start", ")", ")", "/", "allArcs", ";", "writer", ".", "flush", "(", ")", ";", "writer", ".", "close", "(", ")", ";", "//        DecimalFormat format = new DecimalFormat(\"##.00\");", "//", "//        System.err.print(format.format(eacharc) + \" ms for each arc!\\n\");", "//        System.err.print(format.format(each) + \" ms for each sentence!\\n\\n\");", "BufferedReader", "gReader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "inputFile", ")", ")", ";", "BufferedReader", "pReader", "=", "new", "BufferedReader", "(", "new", "FileReader", "(", "outputFile", "+", "\".tmp\"", ")", ")", ";", "BufferedWriter", "pwriter", "=", "new", "BufferedWriter", "(", "new", "FileWriter", "(", "outputFile", ")", ")", ";", "String", "line", ";", "while", "(", "(", "line", "=", "pReader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "gLine", "=", "gReader", ".", "readLine", "(", ")", ";", "if", "(", "line", ".", "trim", "(", ")", ".", "length", "(", ")", ">", "0", ")", "{", "while", "(", "gLine", ".", "trim", "(", ")", ".", "length", "(", ")", "==", "0", ")", "gLine", "=", "gReader", ".", "readLine", "(", ")", ";", "String", "[", "]", "ps", "=", "line", ".", "split", "(", "\"\\t\"", ")", ";", "String", "[", "]", "gs", "=", "gLine", ".", "split", "(", "\"\\t\"", ")", ";", "gs", "[", "6", "]", "=", "ps", "[", "0", "]", ";", "gs", "[", "7", "]", "=", "ps", "[", "1", "]", ";", "StringBuilder", "output", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "gs", ".", "length", ";", "i", "++", ")", "{", "output", ".", "append", "(", "gs", "[", "i", "]", ")", ".", "append", "(", "\"\\t\"", ")", ";", "}", "pwriter", ".", "write", "(", "output", ".", "toString", "(", ")", ".", "trim", "(", ")", "+", "\"\\n\"", ")", ";", "}", "else", "{", "pwriter", ".", "write", "(", "\"\\n\"", ")", ";", "}", "}", "pwriter", ".", "flush", "(", ")", ";", "pwriter", ".", "close", "(", ")", ";", "if", "(", "addScore", ")", "{", "BufferedWriter", "scoreWriter", "=", "new", "BufferedWriter", "(", "new", "FileWriter", "(", "scorePath", ")", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "scoreList", ".", "size", "(", ")", ";", "i", "++", ")", "scoreWriter", ".", "write", "(", "scoreList", ".", "get", "(", "i", ")", "+", "\"\\n\"", ")", ";", "scoreWriter", ".", "flush", "(", ")", ";", "scoreWriter", ".", "close", "(", ")", ";", "}", "IOUtil", ".", "deleteFile", "(", "outputFile", "+", "\".tmp\"", ")", ";", "}"], "docstring": "Needs Conll 2006 format\n\n@param inputFile\n@param outputFile\n@param rootFirst\n@param beamWidth\n@throws Exception", "docstring_tokens": ["Needs", "Conll", "2006", "format"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/transition/parser/KBeamArcEagerParser.java#L311-L406", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.trainNaivePerceptron", "original_string": "private static LinearModel trainNaivePerceptron(Instance[] instanceList, FeatureMap featureMap, int maxIteration)\n    {\n        LinearModel model = new LinearModel(featureMap, new float[featureMap.size()]);\n        for (int it = 0; it < maxIteration; ++it)\n        {\n            Utility.shuffleArray(instanceList);\n            for (Instance instance : instanceList)\n            {\n                int y = model.decode(instance.x);\n                if (y != instance.y) // \u8bef\u5dee\u53cd\u9988\n                    model.update(instance.x, instance.y);\n            }\n        }\n        return model;\n    }", "language": "java", "code": "private static LinearModel trainNaivePerceptron(Instance[] instanceList, FeatureMap featureMap, int maxIteration)\n    {\n        LinearModel model = new LinearModel(featureMap, new float[featureMap.size()]);\n        for (int it = 0; it < maxIteration; ++it)\n        {\n            Utility.shuffleArray(instanceList);\n            for (Instance instance : instanceList)\n            {\n                int y = model.decode(instance.x);\n                if (y != instance.y) // \u8bef\u5dee\u53cd\u9988\n                    model.update(instance.x, instance.y);\n            }\n        }\n        return model;\n    }", "code_tokens": ["private", "static", "LinearModel", "trainNaivePerceptron", "(", "Instance", "[", "]", "instanceList", ",", "FeatureMap", "featureMap", ",", "int", "maxIteration", ")", "{", "LinearModel", "model", "=", "new", "LinearModel", "(", "featureMap", ",", "new", "float", "[", "featureMap", ".", "size", "(", ")", "]", ")", ";", "for", "(", "int", "it", "=", "0", ";", "it", "<", "maxIteration", ";", "++", "it", ")", "{", "Utility", ".", "shuffleArray", "(", "instanceList", ")", ";", "for", "(", "Instance", "instance", ":", "instanceList", ")", "{", "int", "y", "=", "model", ".", "decode", "(", "instance", ".", "x", ")", ";", "if", "(", "y", "!=", "instance", ".", "y", ")", "// \u8bef\u5dee\u53cd\u9988", "model", ".", "update", "(", "instance", ".", "x", ",", "instance", ".", "y", ")", ";", "}", "}", "return", "model", ";", "}"], "docstring": "\u6734\u7d20\u611f\u77e5\u673a\u8bad\u7ec3\u7b97\u6cd5\n@param instanceList \u8bad\u7ec3\u5b9e\u4f8b\n@param featureMap   \u7279\u5f81\u51fd\u6570\n@param maxIteration \u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570", "docstring_tokens": ["\u6734\u7d20\u611f\u77e5\u673a\u8bad\u7ec3\u7b97\u6cd5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L57-L71", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.trainAveragedPerceptron", "original_string": "private static LinearModel trainAveragedPerceptron(Instance[] instanceList, FeatureMap featureMap, int maxIteration)\n    {\n        float[] parameter = new float[featureMap.size()];\n        double[] sum = new double[featureMap.size()];\n        int[] time = new int[featureMap.size()];\n\n        AveragedPerceptron model = new AveragedPerceptron(featureMap, parameter);\n        int t = 0;\n        for (int it = 0; it < maxIteration; ++it)\n        {\n            Utility.shuffleArray(instanceList);\n            for (Instance instance : instanceList)\n            {\n                ++t;\n                int y = model.decode(instance.x);\n                if (y != instance.y) // \u8bef\u5dee\u53cd\u9988\n                    model.update(instance.x, instance.y, sum, time, t);\n            }\n        }\n        model.average(sum, time, t);\n        return model;\n    }", "language": "java", "code": "private static LinearModel trainAveragedPerceptron(Instance[] instanceList, FeatureMap featureMap, int maxIteration)\n    {\n        float[] parameter = new float[featureMap.size()];\n        double[] sum = new double[featureMap.size()];\n        int[] time = new int[featureMap.size()];\n\n        AveragedPerceptron model = new AveragedPerceptron(featureMap, parameter);\n        int t = 0;\n        for (int it = 0; it < maxIteration; ++it)\n        {\n            Utility.shuffleArray(instanceList);\n            for (Instance instance : instanceList)\n            {\n                ++t;\n                int y = model.decode(instance.x);\n                if (y != instance.y) // \u8bef\u5dee\u53cd\u9988\n                    model.update(instance.x, instance.y, sum, time, t);\n            }\n        }\n        model.average(sum, time, t);\n        return model;\n    }", "code_tokens": ["private", "static", "LinearModel", "trainAveragedPerceptron", "(", "Instance", "[", "]", "instanceList", ",", "FeatureMap", "featureMap", ",", "int", "maxIteration", ")", "{", "float", "[", "]", "parameter", "=", "new", "float", "[", "featureMap", ".", "size", "(", ")", "]", ";", "double", "[", "]", "sum", "=", "new", "double", "[", "featureMap", ".", "size", "(", ")", "]", ";", "int", "[", "]", "time", "=", "new", "int", "[", "featureMap", ".", "size", "(", ")", "]", ";", "AveragedPerceptron", "model", "=", "new", "AveragedPerceptron", "(", "featureMap", ",", "parameter", ")", ";", "int", "t", "=", "0", ";", "for", "(", "int", "it", "=", "0", ";", "it", "<", "maxIteration", ";", "++", "it", ")", "{", "Utility", ".", "shuffleArray", "(", "instanceList", ")", ";", "for", "(", "Instance", "instance", ":", "instanceList", ")", "{", "++", "t", ";", "int", "y", "=", "model", ".", "decode", "(", "instance", ".", "x", ")", ";", "if", "(", "y", "!=", "instance", ".", "y", ")", "// \u8bef\u5dee\u53cd\u9988", "model", ".", "update", "(", "instance", ".", "x", ",", "instance", ".", "y", ",", "sum", ",", "time", ",", "t", ")", ";", "}", "}", "model", ".", "average", "(", "sum", ",", "time", ",", "t", ")", ";", "return", "model", ";", "}"], "docstring": "\u5e73\u5747\u611f\u77e5\u673a\u8bad\u7ec3\u7b97\u6cd5\n@param instanceList \u8bad\u7ec3\u5b9e\u4f8b\n@param featureMap   \u7279\u5f81\u51fd\u6570\n@param maxIteration \u8bad\u7ec3\u8fed\u4ee3\u6b21\u6570", "docstring_tokens": ["\u5e73\u5747\u611f\u77e5\u673a\u8bad\u7ec3\u7b97\u6cd5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L79-L100", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.train", "original_string": "public BinaryClassificationFMeasure train(String corpus, int maxIteration, boolean averagePerceptron)\n    {\n        FeatureMap featureMap = new LockableFeatureMap(new TagSet(TaskType.CLASSIFICATION));\n        featureMap.mutable = true; // \u8bad\u7ec3\u65f6\u7279\u5f81\u6620\u5c04\u53ef\u62d3\u5145\n        Instance[] instanceList = readInstance(corpus, featureMap);\n        model = averagePerceptron ? trainAveragedPerceptron(instanceList, featureMap, maxIteration)\n            : trainNaivePerceptron(instanceList, featureMap, maxIteration);\n        featureMap.mutable = false; // \u8bad\u7ec3\u7ed3\u675f\u540e\u7279\u5f81\u4e0d\u53ef\u5199\n        return evaluate(instanceList);\n    }", "language": "java", "code": "public BinaryClassificationFMeasure train(String corpus, int maxIteration, boolean averagePerceptron)\n    {\n        FeatureMap featureMap = new LockableFeatureMap(new TagSet(TaskType.CLASSIFICATION));\n        featureMap.mutable = true; // \u8bad\u7ec3\u65f6\u7279\u5f81\u6620\u5c04\u53ef\u62d3\u5145\n        Instance[] instanceList = readInstance(corpus, featureMap);\n        model = averagePerceptron ? trainAveragedPerceptron(instanceList, featureMap, maxIteration)\n            : trainNaivePerceptron(instanceList, featureMap, maxIteration);\n        featureMap.mutable = false; // \u8bad\u7ec3\u7ed3\u675f\u540e\u7279\u5f81\u4e0d\u53ef\u5199\n        return evaluate(instanceList);\n    }", "code_tokens": ["public", "BinaryClassificationFMeasure", "train", "(", "String", "corpus", ",", "int", "maxIteration", ",", "boolean", "averagePerceptron", ")", "{", "FeatureMap", "featureMap", "=", "new", "LockableFeatureMap", "(", "new", "TagSet", "(", "TaskType", ".", "CLASSIFICATION", ")", ")", ";", "featureMap", ".", "mutable", "=", "true", ";", "// \u8bad\u7ec3\u65f6\u7279\u5f81\u6620\u5c04\u53ef\u62d3\u5145", "Instance", "[", "]", "instanceList", "=", "readInstance", "(", "corpus", ",", "featureMap", ")", ";", "model", "=", "averagePerceptron", "?", "trainAveragedPerceptron", "(", "instanceList", ",", "featureMap", ",", "maxIteration", ")", ":", "trainNaivePerceptron", "(", "instanceList", ",", "featureMap", ",", "maxIteration", ")", ";", "featureMap", ".", "mutable", "=", "false", ";", "// \u8bad\u7ec3\u7ed3\u675f\u540e\u7279\u5f81\u4e0d\u53ef\u5199", "return", "evaluate", "(", "instanceList", ")", ";", "}"], "docstring": "\u8bad\u7ec3\n\n@param corpus            \u8bed\u6599\u5e93\n@param maxIteration      \u6700\u5927\u8fed\u4ee3\u6b21\u6570\n@param averagePerceptron \u662f\u5426\u4f7f\u7528\u5e73\u5747\u611f\u77e5\u673a\u7b97\u6cd5\n@return \u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u51c6\u786e\u7387", "docstring_tokens": ["\u8bad\u7ec3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L122-L131", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.predict", "original_string": "public String predict(String text)\n    {\n        int y = model.decode(extractFeature(text, model.featureMap));\n        if (y == -1)\n            y = 0;\n        return model.tagSet().stringOf(y);\n    }", "language": "java", "code": "public String predict(String text)\n    {\n        int y = model.decode(extractFeature(text, model.featureMap));\n        if (y == -1)\n            y = 0;\n        return model.tagSet().stringOf(y);\n    }", "code_tokens": ["public", "String", "predict", "(", "String", "text", ")", "{", "int", "y", "=", "model", ".", "decode", "(", "extractFeature", "(", "text", ",", "model", ".", "featureMap", ")", ")", ";", "if", "(", "y", "==", "-", "1", ")", "y", "=", "0", ";", "return", "model", ".", "tagSet", "(", ")", ".", "stringOf", "(", "y", ")", ";", "}"], "docstring": "\u9884\u6d4b\n\n@param text\n@return", "docstring_tokens": ["\u9884\u6d4b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L139-L145", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.evaluate", "original_string": "public BinaryClassificationFMeasure evaluate(String corpus)\n    {\n        Instance[] instanceList = readInstance(corpus, model.featureMap);\n        return evaluate(instanceList);\n    }", "language": "java", "code": "public BinaryClassificationFMeasure evaluate(String corpus)\n    {\n        Instance[] instanceList = readInstance(corpus, model.featureMap);\n        return evaluate(instanceList);\n    }", "code_tokens": ["public", "BinaryClassificationFMeasure", "evaluate", "(", "String", "corpus", ")", "{", "Instance", "[", "]", "instanceList", "=", "readInstance", "(", "corpus", ",", "model", ".", "featureMap", ")", ";", "return", "evaluate", "(", "instanceList", ")", ";", "}"], "docstring": "\u8bc4\u4f30\n\n@param corpus\n@return", "docstring_tokens": ["\u8bc4\u4f30"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L153-L157", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.evaluate", "original_string": "public BinaryClassificationFMeasure evaluate(Instance[] instanceList)\n    {\n        int TP = 0, FP = 0, FN = 0;\n        for (Instance instance : instanceList)\n        {\n            int y = model.decode(instance.x);\n            if (y == 1)\n            {\n                if (instance.y == 1)\n                    ++TP;\n                else\n                    ++FP;\n            }\n            else if (instance.y == 1)\n                ++FN;\n        }\n        float p = TP / (float) (TP + FP) * 100;\n        float r = TP / (float) (TP + FN) * 100;\n        return new BinaryClassificationFMeasure(p, r, 2 * p * r / (p + r));\n    }", "language": "java", "code": "public BinaryClassificationFMeasure evaluate(Instance[] instanceList)\n    {\n        int TP = 0, FP = 0, FN = 0;\n        for (Instance instance : instanceList)\n        {\n            int y = model.decode(instance.x);\n            if (y == 1)\n            {\n                if (instance.y == 1)\n                    ++TP;\n                else\n                    ++FP;\n            }\n            else if (instance.y == 1)\n                ++FN;\n        }\n        float p = TP / (float) (TP + FP) * 100;\n        float r = TP / (float) (TP + FN) * 100;\n        return new BinaryClassificationFMeasure(p, r, 2 * p * r / (p + r));\n    }", "code_tokens": ["public", "BinaryClassificationFMeasure", "evaluate", "(", "Instance", "[", "]", "instanceList", ")", "{", "int", "TP", "=", "0", ",", "FP", "=", "0", ",", "FN", "=", "0", ";", "for", "(", "Instance", "instance", ":", "instanceList", ")", "{", "int", "y", "=", "model", ".", "decode", "(", "instance", ".", "x", ")", ";", "if", "(", "y", "==", "1", ")", "{", "if", "(", "instance", ".", "y", "==", "1", ")", "++", "TP", ";", "else", "++", "FP", ";", "}", "else", "if", "(", "instance", ".", "y", "==", "1", ")", "++", "FN", ";", "}", "float", "p", "=", "TP", "/", "(", "float", ")", "(", "TP", "+", "FP", ")", "*", "100", ";", "float", "r", "=", "TP", "/", "(", "float", ")", "(", "TP", "+", "FN", ")", "*", "100", ";", "return", "new", "BinaryClassificationFMeasure", "(", "p", ",", "r", ",", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", ")", ";", "}"], "docstring": "\u8bc4\u4f30\n\n@param instanceList\n@return", "docstring_tokens": ["\u8bc4\u4f30"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L165-L184", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.readInstance", "original_string": "private Instance[] readInstance(String corpus, FeatureMap featureMap)\n    {\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(corpus);\n        List<Instance> instanceList = new LinkedList<Instance>();\n        for (String line : lineIterator)\n        {\n            String[] cells = line.split(\",\");\n            String text = cells[0], label = cells[1];\n            List<Integer> x = extractFeature(text, featureMap);\n            int y = featureMap.tagSet.add(label);\n            if (y == 0)\n                y = -1; // \u611f\u77e5\u673a\u6807\u7b7e\u7ea6\u5b9a\u4e3a\u00b11\n            else if (y > 1)\n                throw new IllegalArgumentException(\"\u7c7b\u522b\u6570\u5927\u4e8e2\uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e8c\u5206\u7c7b\u3002\");\n            instanceList.add(new Instance(x, y));\n        }\n        return instanceList.toArray(new Instance[0]);\n    }", "language": "java", "code": "private Instance[] readInstance(String corpus, FeatureMap featureMap)\n    {\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(corpus);\n        List<Instance> instanceList = new LinkedList<Instance>();\n        for (String line : lineIterator)\n        {\n            String[] cells = line.split(\",\");\n            String text = cells[0], label = cells[1];\n            List<Integer> x = extractFeature(text, featureMap);\n            int y = featureMap.tagSet.add(label);\n            if (y == 0)\n                y = -1; // \u611f\u77e5\u673a\u6807\u7b7e\u7ea6\u5b9a\u4e3a\u00b11\n            else if (y > 1)\n                throw new IllegalArgumentException(\"\u7c7b\u522b\u6570\u5927\u4e8e2\uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e8c\u5206\u7c7b\u3002\");\n            instanceList.add(new Instance(x, y));\n        }\n        return instanceList.toArray(new Instance[0]);\n    }", "code_tokens": ["private", "Instance", "[", "]", "readInstance", "(", "String", "corpus", ",", "FeatureMap", "featureMap", ")", "{", "IOUtil", ".", "LineIterator", "lineIterator", "=", "new", "IOUtil", ".", "LineIterator", "(", "corpus", ")", ";", "List", "<", "Instance", ">", "instanceList", "=", "new", "LinkedList", "<", "Instance", ">", "(", ")", ";", "for", "(", "String", "line", ":", "lineIterator", ")", "{", "String", "[", "]", "cells", "=", "line", ".", "split", "(", "\",\"", ")", ";", "String", "text", "=", "cells", "[", "0", "]", ",", "label", "=", "cells", "[", "1", "]", ";", "List", "<", "Integer", ">", "x", "=", "extractFeature", "(", "text", ",", "featureMap", ")", ";", "int", "y", "=", "featureMap", ".", "tagSet", ".", "add", "(", "label", ")", ";", "if", "(", "y", "==", "0", ")", "y", "=", "-", "1", ";", "// \u611f\u77e5\u673a\u6807\u7b7e\u7ea6\u5b9a\u4e3a\u00b11", "else", "if", "(", "y", ">", "1", ")", "throw", "new", "IllegalArgumentException", "(", "\"\u7c7b\u522b\u6570\u5927\u4e8e2\uff0c\u76ee\u524d\u53ea\u652f\u6301\u4e8c\u5206\u7c7b\u3002\");", "", "", "instanceList", ".", "add", "(", "new", "Instance", "(", "x", ",", "y", ")", ")", ";", "}", "return", "instanceList", ".", "toArray", "(", "new", "Instance", "[", "0", "]", ")", ";", "}"], "docstring": "\u4ece\u8bed\u6599\u5e93\u8bfb\u53d6\u5b9e\u4f8b\n\n@param corpus     \u8bed\u6599\u5e93\n@param featureMap \u7279\u5f81\u6620\u5c04\n@return \u6570\u636e\u96c6", "docstring_tokens": ["\u4ece\u8bed\u6599\u5e93\u8bfb\u53d6\u5b9e\u4f8b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L193-L210", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java", "func_name": "PerceptronClassifier.addFeature", "original_string": "protected static void addFeature(String feature, FeatureMap featureMap, List<Integer> featureList)\n    {\n        int featureId = featureMap.idOf(feature);\n        if (featureId != -1)\n            featureList.add(featureId);\n    }", "language": "java", "code": "protected static void addFeature(String feature, FeatureMap featureMap, List<Integer> featureList)\n    {\n        int featureId = featureMap.idOf(feature);\n        if (featureId != -1)\n            featureList.add(featureId);\n    }", "code_tokens": ["protected", "static", "void", "addFeature", "(", "String", "feature", ",", "FeatureMap", "featureMap", ",", "List", "<", "Integer", ">", "featureList", ")", "{", "int", "featureId", "=", "featureMap", ".", "idOf", "(", "feature", ")", ";", "if", "(", "featureId", "!=", "-", "1", ")", "featureList", ".", "add", "(", "featureId", ")", ";", "}"], "docstring": "\u5411\u7279\u5f81\u5411\u91cf\u63d2\u5165\u7279\u5f81\n\n@param feature     \u7279\u5f81\n@param featureMap  \u7279\u5f81\u6620\u5c04\n@param featureList \u7279\u5f81\u5411\u91cf", "docstring_tokens": ["\u5411\u7279\u5f81\u5411\u91cf\u63d2\u5165\u7279\u5f81"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronClassifier.java#L228-L233", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java", "func_name": "MaxHeap.add", "original_string": "public boolean add(E e)\n    {\n        if (queue.size() < maxSize)\n        { // \u672a\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\uff0c\u76f4\u63a5\u6dfb\u52a0\n            queue.add(e);\n            return true;\n        }\n        else\n        { // \u961f\u5217\u5df2\u6ee1\n            E peek = queue.peek();\n            if (queue.comparator().compare(e, peek) > 0)\n            { // \u5c06\u65b0\u5143\u7d20\u4e0e\u5f53\u524d\u5806\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u4fdd\u7559\u8f83\u5c0f\u7684\u5143\u7d20\n                queue.poll();\n                queue.add(e);\n                return true;\n            }\n        }\n        return false;\n    }", "language": "java", "code": "public boolean add(E e)\n    {\n        if (queue.size() < maxSize)\n        { // \u672a\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\uff0c\u76f4\u63a5\u6dfb\u52a0\n            queue.add(e);\n            return true;\n        }\n        else\n        { // \u961f\u5217\u5df2\u6ee1\n            E peek = queue.peek();\n            if (queue.comparator().compare(e, peek) > 0)\n            { // \u5c06\u65b0\u5143\u7d20\u4e0e\u5f53\u524d\u5806\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u4fdd\u7559\u8f83\u5c0f\u7684\u5143\u7d20\n                queue.poll();\n                queue.add(e);\n                return true;\n            }\n        }\n        return false;\n    }", "code_tokens": ["public", "boolean", "add", "(", "E", "e", ")", "{", "if", "(", "queue", ".", "size", "(", ")", "<", "maxSize", ")", "{", "// \u672a\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\uff0c\u76f4\u63a5\u6dfb\u52a0", "queue", ".", "add", "(", "e", ")", ";", "return", "true", ";", "}", "else", "{", "// \u961f\u5217\u5df2\u6ee1", "E", "peek", "=", "queue", ".", "peek", "(", ")", ";", "if", "(", "queue", ".", "comparator", "(", ")", ".", "compare", "(", "e", ",", "peek", ")", ">", "0", ")", "{", "// \u5c06\u65b0\u5143\u7d20\u4e0e\u5f53\u524d\u5806\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u4fdd\u7559\u8f83\u5c0f\u7684\u5143\u7d20", "queue", ".", "poll", "(", ")", ";", "queue", ".", "add", "(", "e", ")", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\n@param e \u5143\u7d20\n@return \u662f\u5426\u6dfb\u52a0\u6210\u529f", "docstring_tokens": ["\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java#L50-L68", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java", "func_name": "MaxHeap.addAll", "original_string": "public MaxHeap<E> addAll(Collection<E> collection)\n    {\n        for (E e : collection)\n        {\n            add(e);\n        }\n\n        return this;\n    }", "language": "java", "code": "public MaxHeap<E> addAll(Collection<E> collection)\n    {\n        for (E e : collection)\n        {\n            add(e);\n        }\n\n        return this;\n    }", "code_tokens": ["public", "MaxHeap", "<", "E", ">", "addAll", "(", "Collection", "<", "E", ">", "collection", ")", "{", "for", "(", "E", "e", ":", "collection", ")", "{", "add", "(", "e", ")", ";", "}", "return", "this", ";", "}"], "docstring": "\u6dfb\u52a0\u8bb8\u591a\u5143\u7d20\n@param collection", "docstring_tokens": ["\u6dfb\u52a0\u8bb8\u591a\u5143\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java#L74-L82", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java", "func_name": "MaxHeap.toList", "original_string": "public List<E> toList()\n    {\n        ArrayList<E> list = new ArrayList<E>(queue.size());\n        while (!queue.isEmpty())\n        {\n            list.add(0, queue.poll());\n        }\n\n        return list;\n    }", "language": "java", "code": "public List<E> toList()\n    {\n        ArrayList<E> list = new ArrayList<E>(queue.size());\n        while (!queue.isEmpty())\n        {\n            list.add(0, queue.poll());\n        }\n\n        return list;\n    }", "code_tokens": ["public", "List", "<", "E", ">", "toList", "(", ")", "{", "ArrayList", "<", "E", ">", "list", "=", "new", "ArrayList", "<", "E", ">", "(", "queue", ".", "size", "(", ")", ")", ";", "while", "(", "!", "queue", ".", "isEmpty", "(", ")", ")", "{", "list", ".", "add", "(", "0", ",", "queue", ".", "poll", "(", ")", ")", ";", "}", "return", "list", ";", "}"], "docstring": "\u8f6c\u4e3a\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u6bc1\u6027\u64cd\u4f5c\n@return", "docstring_tokens": ["\u8f6c\u4e3a\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u6bc1\u6027\u64cd\u4f5c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/algorithm/MaxHeap.java#L88-L97", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java", "func_name": "SparseVector.normalize", "original_string": "void normalize()\n    {\n        double nrm = norm();\n        for (Map.Entry<Integer, Double> d : entrySet())\n        {\n            d.setValue(d.getValue() / nrm);\n        }\n    }", "language": "java", "code": "void normalize()\n    {\n        double nrm = norm();\n        for (Map.Entry<Integer, Double> d : entrySet())\n        {\n            d.setValue(d.getValue() / nrm);\n        }\n    }", "code_tokens": ["void", "normalize", "(", ")", "{", "double", "nrm", "=", "norm", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", "d", ":", "entrySet", "(", ")", ")", "{", "d", ".", "setValue", "(", "d", ".", "getValue", "(", ")", "/", "nrm", ")", ";", "}", "}"], "docstring": "Normalize a vector.", "docstring_tokens": ["Normalize", "a", "vector", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java#L33-L40", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java", "func_name": "SparseVector.multiply_constant", "original_string": "void multiply_constant(double x)\n    {\n        for (Map.Entry<Integer, Double> entry : entrySet())\n        {\n            entry.setValue(entry.getValue() * x);\n        }\n    }", "language": "java", "code": "void multiply_constant(double x)\n    {\n        for (Map.Entry<Integer, Double> entry : entrySet())\n        {\n            entry.setValue(entry.getValue() * x);\n        }\n    }", "code_tokens": ["void", "multiply_constant", "(", "double", "x", ")", "{", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", "entry", ":", "entrySet", "(", ")", ")", "{", "entry", ".", "setValue", "(", "entry", ".", "getValue", "(", ")", "*", "x", ")", ";", "}", "}"], "docstring": "Multiply each value of  avector by a constant value.", "docstring_tokens": ["Multiply", "each", "value", "of", "avector", "by", "a", "constant", "value", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java#L66-L72", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java", "func_name": "SparseVector.add_vector", "original_string": "void add_vector(SparseVector vec)\n    {\n\n        for (Map.Entry<Integer, Double> entry : vec.entrySet())\n        {\n            Double v = get(entry.getKey());\n            if (v == null)\n                v = 0.;\n            put(entry.getKey(), v + entry.getValue());\n        }\n    }", "language": "java", "code": "void add_vector(SparseVector vec)\n    {\n\n        for (Map.Entry<Integer, Double> entry : vec.entrySet())\n        {\n            Double v = get(entry.getKey());\n            if (v == null)\n                v = 0.;\n            put(entry.getKey(), v + entry.getValue());\n        }\n    }", "code_tokens": ["void", "add_vector", "(", "SparseVector", "vec", ")", "{", "for", "(", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", "entry", ":", "vec", ".", "entrySet", "(", ")", ")", "{", "Double", "v", "=", "get", "(", "entry", ".", "getKey", "(", ")", ")", ";", "if", "(", "v", "==", "null", ")", "v", "=", "0.", ";", "put", "(", "entry", ".", "getKey", "(", ")", ",", "v", "+", "entry", ".", "getValue", "(", ")", ")", ";", "}", "}"], "docstring": "Add other vector.", "docstring_tokens": ["Add", "other", "vector", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java#L77-L87", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java", "func_name": "SparseVector.inner_product", "original_string": "static double inner_product(SparseVector vec1, SparseVector vec2)\n    {\n        Iterator<Map.Entry<Integer, Double>> it;\n        SparseVector other;\n        if (vec1.size() < vec2.size())\n        {\n            it = vec1.entrySet().iterator();\n            other = vec2;\n        }\n        else\n        {\n            it = vec2.entrySet().iterator();\n            other = vec1;\n        }\n        double prod = 0;\n        while (it.hasNext())\n        {\n            Map.Entry<Integer, Double> entry = it.next();\n            prod += entry.getValue() * other.get(entry.getKey());\n        }\n        return prod;\n    }", "language": "java", "code": "static double inner_product(SparseVector vec1, SparseVector vec2)\n    {\n        Iterator<Map.Entry<Integer, Double>> it;\n        SparseVector other;\n        if (vec1.size() < vec2.size())\n        {\n            it = vec1.entrySet().iterator();\n            other = vec2;\n        }\n        else\n        {\n            it = vec2.entrySet().iterator();\n            other = vec1;\n        }\n        double prod = 0;\n        while (it.hasNext())\n        {\n            Map.Entry<Integer, Double> entry = it.next();\n            prod += entry.getValue() * other.get(entry.getKey());\n        }\n        return prod;\n    }", "code_tokens": ["static", "double", "inner_product", "(", "SparseVector", "vec1", ",", "SparseVector", "vec2", ")", "{", "Iterator", "<", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", ">", "it", ";", "SparseVector", "other", ";", "if", "(", "vec1", ".", "size", "(", ")", "<", "vec2", ".", "size", "(", ")", ")", "{", "it", "=", "vec1", ".", "entrySet", "(", ")", ".", "iterator", "(", ")", ";", "other", "=", "vec2", ";", "}", "else", "{", "it", "=", "vec2", ".", "entrySet", "(", ")", ".", "iterator", "(", ")", ";", "other", "=", "vec1", ";", "}", "double", "prod", "=", "0", ";", "while", "(", "it", ".", "hasNext", "(", ")", ")", "{", "Map", ".", "Entry", "<", "Integer", ",", "Double", ">", "entry", "=", "it", ".", "next", "(", ")", ";", "prod", "+=", "entry", ".", "getValue", "(", ")", "*", "other", ".", "get", "(", "entry", ".", "getKey", "(", ")", ")", ";", "}", "return", "prod", ";", "}"], "docstring": "Calculate the inner product value between vectors.", "docstring_tokens": ["Calculate", "the", "inner", "product", "value", "between", "vectors", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java#L141-L162", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java", "func_name": "SparseVector.cosine", "original_string": "double cosine(SparseVector vec1, SparseVector vec2)\n    {\n        double norm1 = vec1.norm();\n        double norm2 = vec2.norm();\n        double result = 0.0f;\n        if (norm1 == 0 && norm2 == 0)\n        {\n            return result;\n        }\n        else\n        {\n            double prod = inner_product(vec1, vec2);\n            result = prod / (norm1 * norm2);\n            return Double.isNaN(result) ? 0.0f : result;\n        }\n    }", "language": "java", "code": "double cosine(SparseVector vec1, SparseVector vec2)\n    {\n        double norm1 = vec1.norm();\n        double norm2 = vec2.norm();\n        double result = 0.0f;\n        if (norm1 == 0 && norm2 == 0)\n        {\n            return result;\n        }\n        else\n        {\n            double prod = inner_product(vec1, vec2);\n            result = prod / (norm1 * norm2);\n            return Double.isNaN(result) ? 0.0f : result;\n        }\n    }", "code_tokens": ["double", "cosine", "(", "SparseVector", "vec1", ",", "SparseVector", "vec2", ")", "{", "double", "norm1", "=", "vec1", ".", "norm", "(", ")", ";", "double", "norm2", "=", "vec2", ".", "norm", "(", ")", ";", "double", "result", "=", "0.0f", ";", "if", "(", "norm1", "==", "0", "&&", "norm2", "==", "0", ")", "{", "return", "result", ";", "}", "else", "{", "double", "prod", "=", "inner_product", "(", "vec1", ",", "vec2", ")", ";", "result", "=", "prod", "/", "(", "norm1", "*", "norm2", ")", ";", "return", "Double", ".", "isNaN", "(", "result", ")", "?", "0.0f", ":", "result", ";", "}", "}"], "docstring": "Calculate the cosine value between vectors.", "docstring_tokens": ["Calculate", "the", "cosine", "value", "between", "vectors", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/SparseVector.java#L167-L182", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java", "func_name": "NotionalTokenizer.segment", "original_string": "public static List<Term> segment(char[] text)\n    {\n        List<Term> resultList = SEGMENT.seg(text);\n        ListIterator<Term> listIterator = resultList.listIterator();\n        while (listIterator.hasNext())\n        {\n            if (!CoreStopWordDictionary.shouldInclude(listIterator.next()))\n            {\n                listIterator.remove();\n            }\n        }\n\n        return resultList;\n    }", "language": "java", "code": "public static List<Term> segment(char[] text)\n    {\n        List<Term> resultList = SEGMENT.seg(text);\n        ListIterator<Term> listIterator = resultList.listIterator();\n        while (listIterator.hasNext())\n        {\n            if (!CoreStopWordDictionary.shouldInclude(listIterator.next()))\n            {\n                listIterator.remove();\n            }\n        }\n\n        return resultList;\n    }", "code_tokens": ["public", "static", "List", "<", "Term", ">", "segment", "(", "char", "[", "]", "text", ")", "{", "List", "<", "Term", ">", "resultList", "=", "SEGMENT", ".", "seg", "(", "text", ")", ";", "ListIterator", "<", "Term", ">", "listIterator", "=", "resultList", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "!", "CoreStopWordDictionary", ".", "shouldInclude", "(", "listIterator", ".", "next", "(", ")", ")", ")", "{", "listIterator", ".", "remove", "(", ")", ";", "}", "}", "return", "resultList", ";", "}"], "docstring": "\u5206\u8bcd\n\n@param text \u6587\u672c\n@return \u5206\u8bcd\u7ed3\u679c", "docstring_tokens": ["\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java#L46-L59", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java", "func_name": "NotionalTokenizer.seg2sentence", "original_string": "public static List<List<Term>> seg2sentence(String text)\n    {\n        List<List<Term>> sentenceList = SEGMENT.seg2sentence(text);\n        for (List<Term> sentence : sentenceList)\n        {\n            ListIterator<Term> listIterator = sentence.listIterator();\n            while (listIterator.hasNext())\n            {\n                if (!CoreStopWordDictionary.shouldInclude(listIterator.next()))\n                {\n                    listIterator.remove();\n                }\n            }\n        }\n\n        return sentenceList;\n    }", "language": "java", "code": "public static List<List<Term>> seg2sentence(String text)\n    {\n        List<List<Term>> sentenceList = SEGMENT.seg2sentence(text);\n        for (List<Term> sentence : sentenceList)\n        {\n            ListIterator<Term> listIterator = sentence.listIterator();\n            while (listIterator.hasNext())\n            {\n                if (!CoreStopWordDictionary.shouldInclude(listIterator.next()))\n                {\n                    listIterator.remove();\n                }\n            }\n        }\n\n        return sentenceList;\n    }", "code_tokens": ["public", "static", "List", "<", "List", "<", "Term", ">", ">", "seg2sentence", "(", "String", "text", ")", "{", "List", "<", "List", "<", "Term", ">>", "sentenceList", "=", "SEGMENT", ".", "seg2sentence", "(", "text", ")", ";", "for", "(", "List", "<", "Term", ">", "sentence", ":", "sentenceList", ")", "{", "ListIterator", "<", "Term", ">", "listIterator", "=", "sentence", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "!", "CoreStopWordDictionary", ".", "shouldInclude", "(", "listIterator", ".", "next", "(", ")", ")", ")", "{", "listIterator", ".", "remove", "(", ")", ";", "}", "}", "}", "return", "sentenceList", ";", "}"], "docstring": "\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f\n\n@param text\n@return", "docstring_tokens": ["\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java#L67-L83", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java", "func_name": "NotionalTokenizer.seg2sentence", "original_string": "public static List<List<Term>> seg2sentence(String text, boolean shortest)\n    {\n        return SEGMENT.seg2sentence(text, shortest);\n    }", "language": "java", "code": "public static List<List<Term>> seg2sentence(String text, boolean shortest)\n    {\n        return SEGMENT.seg2sentence(text, shortest);\n    }", "code_tokens": ["public", "static", "List", "<", "List", "<", "Term", ">", ">", "seg2sentence", "(", "String", "text", ",", "boolean", "shortest", ")", "{", "return", "SEGMENT", ".", "seg2sentence", "(", "text", ",", "shortest", ")", ";", "}"], "docstring": "\u5206\u8bcd\u65ad\u53e5 \u8f93\u51fa\u53e5\u5b50\u5f62\u5f0f\n\n@param text     \u5f85\u5206\u8bcd\u53e5\u5b50\n@param shortest \u662f\u5426\u65ad\u53e5\u4e3a\u6700\u7ec6\u7684\u5b50\u53e5\uff08\u5c06\u9017\u53f7\u4e5f\u89c6\u4f5c\u5206\u9694\u7b26\uff09\n@return \u53e5\u5b50\u5217\u8868\uff0c\u6bcf\u4e2a\u53e5\u5b50\u7531\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u7ec4\u6210", "docstring_tokens": ["\u5206\u8bcd\u65ad\u53e5", "\u8f93\u51fa\u53e5\u5b50\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java#L92-L95", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java", "func_name": "NotionalTokenizer.seg2sentence", "original_string": "public static List<List<Term>> seg2sentence(String text, Filter... filterArrayChain)\n    {\n        List<List<Term>> sentenceList = SEGMENT.seg2sentence(text);\n        for (List<Term> sentence : sentenceList)\n        {\n            ListIterator<Term> listIterator = sentence.listIterator();\n            while (listIterator.hasNext())\n            {\n                if (filterArrayChain != null)\n                {\n                    Term term = listIterator.next();\n                    for (Filter filter : filterArrayChain)\n                    {\n                        if (!filter.shouldInclude(term))\n                        {\n                            listIterator.remove();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return sentenceList;\n    }", "language": "java", "code": "public static List<List<Term>> seg2sentence(String text, Filter... filterArrayChain)\n    {\n        List<List<Term>> sentenceList = SEGMENT.seg2sentence(text);\n        for (List<Term> sentence : sentenceList)\n        {\n            ListIterator<Term> listIterator = sentence.listIterator();\n            while (listIterator.hasNext())\n            {\n                if (filterArrayChain != null)\n                {\n                    Term term = listIterator.next();\n                    for (Filter filter : filterArrayChain)\n                    {\n                        if (!filter.shouldInclude(term))\n                        {\n                            listIterator.remove();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return sentenceList;\n    }", "code_tokens": ["public", "static", "List", "<", "List", "<", "Term", ">", ">", "seg2sentence", "(", "String", "text", ",", "Filter", "...", "filterArrayChain", ")", "{", "List", "<", "List", "<", "Term", ">>", "sentenceList", "=", "SEGMENT", ".", "seg2sentence", "(", "text", ")", ";", "for", "(", "List", "<", "Term", ">", "sentence", ":", "sentenceList", ")", "{", "ListIterator", "<", "Term", ">", "listIterator", "=", "sentence", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "filterArrayChain", "!=", "null", ")", "{", "Term", "term", "=", "listIterator", ".", "next", "(", ")", ";", "for", "(", "Filter", "filter", ":", "filterArrayChain", ")", "{", "if", "(", "!", "filter", ".", "shouldInclude", "(", "term", ")", ")", "{", "listIterator", ".", "remove", "(", ")", ";", "break", ";", "}", "}", "}", "}", "}", "return", "sentenceList", ";", "}"], "docstring": "\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f\n\n@param text\n@param filterArrayChain \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u94fe\n@return", "docstring_tokens": ["\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/NotionalTokenizer.java#L104-L128", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/TraditionalChineseTokenizer.java", "func_name": "TraditionalChineseTokenizer.seg2sentence", "original_string": "public static List<List<Term>> seg2sentence(String text)\n    {\n        List<List<Term>> resultList = new LinkedList<List<Term>>();\n        {\n            for (String sentence : SentencesUtil.toSentenceList(text))\n            {\n                resultList.add(segment(sentence));\n            }\n        }\n\n        return resultList;\n    }", "language": "java", "code": "public static List<List<Term>> seg2sentence(String text)\n    {\n        List<List<Term>> resultList = new LinkedList<List<Term>>();\n        {\n            for (String sentence : SentencesUtil.toSentenceList(text))\n            {\n                resultList.add(segment(sentence));\n            }\n        }\n\n        return resultList;\n    }", "code_tokens": ["public", "static", "List", "<", "List", "<", "Term", ">", ">", "seg2sentence", "(", "String", "text", ")", "{", "List", "<", "List", "<", "Term", ">>", "resultList", "=", "new", "LinkedList", "<", "List", "<", "Term", ">", ">", "(", ")", ";", "{", "for", "(", "String", "sentence", ":", "SentencesUtil", ".", "toSentenceList", "(", "text", ")", ")", "{", "resultList", ".", "add", "(", "segment", "(", "sentence", ")", ")", ";", "}", "}", "return", "resultList", ";", "}"], "docstring": "\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f\n\n@param text \u6587\u672c\n@return \u53e5\u5b50\u5217\u8868", "docstring_tokens": ["\u5207\u5206\u4e3a\u53e5\u5b50\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/TraditionalChineseTokenizer.java#L79-L90", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/classifiers/AbstractClassifier.java", "func_name": "AbstractClassifier.classify", "original_string": "@Override\n    public String classify(String text) throws IllegalArgumentException, IllegalStateException\n    {\n        Map<String, Double> scoreMap = predict(text);\n\n        return CollectionUtility.max(scoreMap);\n    }", "language": "java", "code": "@Override\n    public String classify(String text) throws IllegalArgumentException, IllegalStateException\n    {\n        Map<String, Double> scoreMap = predict(text);\n\n        return CollectionUtility.max(scoreMap);\n    }", "code_tokens": ["@", "Override", "public", "String", "classify", "(", "String", "text", ")", "throws", "IllegalArgumentException", ",", "IllegalStateException", "{", "Map", "<", "String", ",", "Double", ">", "scoreMap", "=", "predict", "(", "text", ")", ";", "return", "CollectionUtility", ".", "max", "(", "scoreMap", ")", ";", "}"], "docstring": "\u4f7f\u7528\u4e00\u4e2a\u8bad\u7ec3\u51fa\u6765\u7684\u5206\u7c7b\u5668\u6765\u9884\u6d4b\u5206\u7c7b\n\n@param text\n@return\n@throws IllegalArgumentException\n@throws IllegalStateException", "docstring_tokens": ["\u4f7f\u7528\u4e00\u4e2a\u8bad\u7ec3\u51fa\u6765\u7684\u5206\u7c7b\u5668\u6765\u9884\u6d4b\u5206\u7c7b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/classifiers/AbstractClassifier.java#L51-L57", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/TextFileCorpus.java", "func_name": "TextFileCorpus.reduceVocab", "original_string": "void reduceVocab()\n    {\n        table = new int[vocabSize];\n        int j = 0;\n        for (int i = 0; i < vocabSize; i++)\n        {\n            if (vocab[i].cn > minReduce)\n            {\n                vocab[j].cn = vocab[i].cn;\n                vocab[j].word = vocab[i].word;\n                table[vocabIndexMap.get(vocab[j].word)] = j;\n                j++;\n            }\n            else\n            {\n                table[vocabIndexMap.get(vocab[j].word)] = -4;\n            }\n        }\n        // adjust the index in the cache\n        try\n        {\n            cache.close();\n            File fixingFile = new File(cacheFile.getAbsolutePath() + \".fixing\");\n            cache = new DataOutputStream(new FileOutputStream(fixingFile));\n            DataInputStream oldCache = new DataInputStream(new FileInputStream(cacheFile));\n            while (oldCache.available() >= 4)\n            {\n                int oldId = oldCache.readInt();\n                if (oldId < 0)\n                {\n                    cache.writeInt(oldId);\n                    continue;\n                }\n                int id = table[oldId];\n                if (id == -4) continue;\n                cache.writeInt(id);\n            }\n            oldCache.close();\n            cache.close();\n            if (!fixingFile.renameTo(cacheFile))\n            {\n                throw new RuntimeException(String.format(\"moving %s to %s failed\", fixingFile.getAbsolutePath(), cacheFile.getName()));\n            }\n            cache = new DataOutputStream(new FileOutputStream(cacheFile));\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(String.format(\"failed to adjust cache file\", e));\n        }\n        table = null;\n        vocabSize = j;\n        vocabIndexMap.clear();\n        for (int i = 0; i < vocabSize; i++)\n        {\n            vocabIndexMap.put(vocab[i].word, i);\n        }\n        minReduce++;\n    }", "language": "java", "code": "void reduceVocab()\n    {\n        table = new int[vocabSize];\n        int j = 0;\n        for (int i = 0; i < vocabSize; i++)\n        {\n            if (vocab[i].cn > minReduce)\n            {\n                vocab[j].cn = vocab[i].cn;\n                vocab[j].word = vocab[i].word;\n                table[vocabIndexMap.get(vocab[j].word)] = j;\n                j++;\n            }\n            else\n            {\n                table[vocabIndexMap.get(vocab[j].word)] = -4;\n            }\n        }\n        // adjust the index in the cache\n        try\n        {\n            cache.close();\n            File fixingFile = new File(cacheFile.getAbsolutePath() + \".fixing\");\n            cache = new DataOutputStream(new FileOutputStream(fixingFile));\n            DataInputStream oldCache = new DataInputStream(new FileInputStream(cacheFile));\n            while (oldCache.available() >= 4)\n            {\n                int oldId = oldCache.readInt();\n                if (oldId < 0)\n                {\n                    cache.writeInt(oldId);\n                    continue;\n                }\n                int id = table[oldId];\n                if (id == -4) continue;\n                cache.writeInt(id);\n            }\n            oldCache.close();\n            cache.close();\n            if (!fixingFile.renameTo(cacheFile))\n            {\n                throw new RuntimeException(String.format(\"moving %s to %s failed\", fixingFile.getAbsolutePath(), cacheFile.getName()));\n            }\n            cache = new DataOutputStream(new FileOutputStream(cacheFile));\n        }\n        catch (IOException e)\n        {\n            throw new RuntimeException(String.format(\"failed to adjust cache file\", e));\n        }\n        table = null;\n        vocabSize = j;\n        vocabIndexMap.clear();\n        for (int i = 0; i < vocabSize; i++)\n        {\n            vocabIndexMap.put(vocab[i].word, i);\n        }\n        minReduce++;\n    }", "code_tokens": ["void", "reduceVocab", "(", ")", "{", "table", "=", "new", "int", "[", "vocabSize", "]", ";", "int", "j", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "vocabSize", ";", "i", "++", ")", "{", "if", "(", "vocab", "[", "i", "]", ".", "cn", ">", "minReduce", ")", "{", "vocab", "[", "j", "]", ".", "cn", "=", "vocab", "[", "i", "]", ".", "cn", ";", "vocab", "[", "j", "]", ".", "word", "=", "vocab", "[", "i", "]", ".", "word", ";", "table", "[", "vocabIndexMap", ".", "get", "(", "vocab", "[", "j", "]", ".", "word", ")", "]", "=", "j", ";", "j", "++", ";", "}", "else", "{", "table", "[", "vocabIndexMap", ".", "get", "(", "vocab", "[", "j", "]", ".", "word", ")", "]", "=", "-", "4", ";", "}", "}", "// adjust the index in the cache", "try", "{", "cache", ".", "close", "(", ")", ";", "File", "fixingFile", "=", "new", "File", "(", "cacheFile", ".", "getAbsolutePath", "(", ")", "+", "\".fixing\"", ")", ";", "cache", "=", "new", "DataOutputStream", "(", "new", "FileOutputStream", "(", "fixingFile", ")", ")", ";", "DataInputStream", "oldCache", "=", "new", "DataInputStream", "(", "new", "FileInputStream", "(", "cacheFile", ")", ")", ";", "while", "(", "oldCache", ".", "available", "(", ")", ">=", "4", ")", "{", "int", "oldId", "=", "oldCache", ".", "readInt", "(", ")", ";", "if", "(", "oldId", "<", "0", ")", "{", "cache", ".", "writeInt", "(", "oldId", ")", ";", "continue", ";", "}", "int", "id", "=", "table", "[", "oldId", "]", ";", "if", "(", "id", "==", "-", "4", ")", "continue", ";", "cache", ".", "writeInt", "(", "id", ")", ";", "}", "oldCache", ".", "close", "(", ")", ";", "cache", ".", "close", "(", ")", ";", "if", "(", "!", "fixingFile", ".", "renameTo", "(", "cacheFile", ")", ")", "{", "throw", "new", "RuntimeException", "(", "String", ".", "format", "(", "\"moving %s to %s failed\"", ",", "fixingFile", ".", "getAbsolutePath", "(", ")", ",", "cacheFile", ".", "getName", "(", ")", ")", ")", ";", "}", "cache", "=", "new", "DataOutputStream", "(", "new", "FileOutputStream", "(", "cacheFile", ")", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "RuntimeException", "(", "String", ".", "format", "(", "\"failed to adjust cache file\"", ",", "e", ")", ")", ";", "}", "table", "=", "null", ";", "vocabSize", "=", "j", ";", "vocabIndexMap", ".", "clear", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "vocabSize", ";", "i", "++", ")", "{", "vocabIndexMap", ".", "put", "(", "vocab", "[", "i", "]", ".", "word", ",", "i", ")", ";", "}", "minReduce", "++", ";", "}"], "docstring": "Reduces the vocabulary by removing infrequent tokens", "docstring_tokens": ["Reduces", "the", "vocabulary", "by", "removing", "infrequent", "tokens"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/TextFileCorpus.java#L42-L99", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/TextFileCorpus.java", "func_name": "TextFileCorpus.readWord", "original_string": "String readWord(BufferedReader raf) throws IOException\n    {\n        while (true)\n        {\n            // check the buffer first\n            if (wbp < wordsBuffer.length)\n            {\n                return wordsBuffer[wbp++];\n            }\n\n            String line = raf.readLine();\n            if (line == null)\n            {      // end of corpus\n                eoc = true;\n                return null;\n            }\n            line = line.trim();\n            if (line.length() == 0)\n            {\n                continue;\n            }\n            cache.writeInt(-3); // mark end of sentence\n            wordsBuffer = line.split(\"\\\\s+\");\n            wbp = 0;\n            eoc = false;\n        }\n    }", "language": "java", "code": "String readWord(BufferedReader raf) throws IOException\n    {\n        while (true)\n        {\n            // check the buffer first\n            if (wbp < wordsBuffer.length)\n            {\n                return wordsBuffer[wbp++];\n            }\n\n            String line = raf.readLine();\n            if (line == null)\n            {      // end of corpus\n                eoc = true;\n                return null;\n            }\n            line = line.trim();\n            if (line.length() == 0)\n            {\n                continue;\n            }\n            cache.writeInt(-3); // mark end of sentence\n            wordsBuffer = line.split(\"\\\\s+\");\n            wbp = 0;\n            eoc = false;\n        }\n    }", "code_tokens": ["String", "readWord", "(", "BufferedReader", "raf", ")", "throws", "IOException", "{", "while", "(", "true", ")", "{", "// check the buffer first", "if", "(", "wbp", "<", "wordsBuffer", ".", "length", ")", "{", "return", "wordsBuffer", "[", "wbp", "++", "]", ";", "}", "String", "line", "=", "raf", ".", "readLine", "(", ")", ";", "if", "(", "line", "==", "null", ")", "{", "// end of corpus", "eoc", "=", "true", ";", "return", "null", ";", "}", "line", "=", "line", ".", "trim", "(", ")", ";", "if", "(", "line", ".", "length", "(", ")", "==", "0", ")", "{", "continue", ";", "}", "cache", ".", "writeInt", "(", "-", "3", ")", ";", "// mark end of sentence", "wordsBuffer", "=", "line", ".", "split", "(", "\"\\\\s+\"", ")", ";", "wbp", "=", "0", ";", "eoc", "=", "false", ";", "}", "}"], "docstring": "Reads a single word from a file, assuming space + tab + EOL to be word boundaries\n\n@param raf\n@return null if EOF\n@throws IOException", "docstring_tokens": ["Reads", "a", "single", "word", "from", "a", "file", "assuming", "space", "+", "tab", "+", "EOL", "to", "be", "word", "boundaries"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/TextFileCorpus.java#L184-L210", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreDictionary.java", "func_name": "CoreDictionary.loadDat", "original_string": "static boolean loadDat(String path)\n    {\n        try\n        {\n            ByteArray byteArray = ByteArray.createByteArray(path + Predefine.BIN_EXT);\n            if (byteArray == null) return false;\n            int size = byteArray.nextInt();\n            CoreDictionary.Attribute[] attributes = new CoreDictionary.Attribute[size];\n            final Nature[] natureIndexArray = Nature.values();\n            for (int i = 0; i < size; ++i)\n            {\n                // \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570\n                int currentTotalFrequency = byteArray.nextInt();\n                int length = byteArray.nextInt();\n                attributes[i] = new CoreDictionary.Attribute(length);\n                attributes[i].totalFrequency = currentTotalFrequency;\n                for (int j = 0; j < length; ++j)\n                {\n                    attributes[i].nature[j] = natureIndexArray[byteArray.nextInt()];\n                    attributes[i].frequency[j] = byteArray.nextInt();\n                }\n            }\n            if (!trie.load(byteArray, attributes) || byteArray.hasMore()) return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + e);\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "static boolean loadDat(String path)\n    {\n        try\n        {\n            ByteArray byteArray = ByteArray.createByteArray(path + Predefine.BIN_EXT);\n            if (byteArray == null) return false;\n            int size = byteArray.nextInt();\n            CoreDictionary.Attribute[] attributes = new CoreDictionary.Attribute[size];\n            final Nature[] natureIndexArray = Nature.values();\n            for (int i = 0; i < size; ++i)\n            {\n                // \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570\n                int currentTotalFrequency = byteArray.nextInt();\n                int length = byteArray.nextInt();\n                attributes[i] = new CoreDictionary.Attribute(length);\n                attributes[i].totalFrequency = currentTotalFrequency;\n                for (int j = 0; j < length; ++j)\n                {\n                    attributes[i].nature[j] = natureIndexArray[byteArray.nextInt()];\n                    attributes[i].frequency[j] = byteArray.nextInt();\n                }\n            }\n            if (!trie.load(byteArray, attributes) || byteArray.hasMore()) return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + e);\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["static", "boolean", "loadDat", "(", "String", "path", ")", "{", "try", "{", "ByteArray", "byteArray", "=", "ByteArray", ".", "createByteArray", "(", "path", "+", "Predefine", ".", "BIN_EXT", ")", ";", "if", "(", "byteArray", "==", "null", ")", "return", "false", ";", "int", "size", "=", "byteArray", ".", "nextInt", "(", ")", ";", "CoreDictionary", ".", "Attribute", "[", "]", "attributes", "=", "new", "CoreDictionary", ".", "Attribute", "[", "size", "]", ";", "final", "Nature", "[", "]", "natureIndexArray", "=", "Nature", ".", "values", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "++", "i", ")", "{", "// \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570", "int", "currentTotalFrequency", "=", "byteArray", ".", "nextInt", "(", ")", ";", "int", "length", "=", "byteArray", ".", "nextInt", "(", ")", ";", "attributes", "[", "i", "]", "=", "new", "CoreDictionary", ".", "Attribute", "(", "length", ")", ";", "attributes", "[", "i", "]", ".", "totalFrequency", "=", "currentTotalFrequency", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "length", ";", "++", "j", ")", "{", "attributes", "[", "i", "]", ".", "nature", "[", "j", "]", "=", "natureIndexArray", "[", "byteArray", ".", "nextInt", "(", ")", "]", ";", "attributes", "[", "i", "]", ".", "frequency", "[", "j", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "}", "if", "(", "!", "trie", ".", "load", "(", "byteArray", ",", "attributes", ")", "||", "byteArray", ".", "hasMore", "(", ")", ")", "return", "false", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + e);", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4\n\n@param path\n@return", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreDictionary.java#L135-L165", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CoreDictionary.java", "func_name": "CoreDictionary.getTermFrequency", "original_string": "public static int getTermFrequency(String term)\n    {\n        Attribute attribute = get(term);\n        if (attribute == null) return 0;\n        return attribute.totalFrequency;\n    }", "language": "java", "code": "public static int getTermFrequency(String term)\n    {\n        Attribute attribute = get(term);\n        if (attribute == null) return 0;\n        return attribute.totalFrequency;\n    }", "code_tokens": ["public", "static", "int", "getTermFrequency", "(", "String", "term", ")", "{", "Attribute", "attribute", "=", "get", "(", "term", ")", ";", "if", "(", "attribute", "==", "null", ")", "return", "0", ";", "return", "attribute", ".", "totalFrequency", ";", "}"], "docstring": "\u83b7\u53d6\u8bcd\u9891\n\n@param term\n@return", "docstring_tokens": ["\u83b7\u53d6\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CoreDictionary.java#L193-L198", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java", "func_name": "Occurrence.addTerm", "original_string": "public void addTerm(String key)\n    {\n        TermFrequency value = trieSingle.get(key);\n        if (value == null)\n        {\n            value = new TermFrequency(key);\n            trieSingle.put(key, value);\n        }\n        else\n        {\n            value.increase();\n        }\n        ++totalTerm;\n    }", "language": "java", "code": "public void addTerm(String key)\n    {\n        TermFrequency value = trieSingle.get(key);\n        if (value == null)\n        {\n            value = new TermFrequency(key);\n            trieSingle.put(key, value);\n        }\n        else\n        {\n            value.increase();\n        }\n        ++totalTerm;\n    }", "code_tokens": ["public", "void", "addTerm", "(", "String", "key", ")", "{", "TermFrequency", "value", "=", "trieSingle", ".", "get", "(", "key", ")", ";", "if", "(", "value", "==", "null", ")", "{", "value", "=", "new", "TermFrequency", "(", "key", ")", ";", "trieSingle", ".", "put", "(", "key", ",", "value", ")", ";", "}", "else", "{", "value", ".", "increase", "(", ")", ";", "}", "++", "totalTerm", ";", "}"], "docstring": "\u7edf\u8ba1\u8bcd\u9891\n\n@param key \u589e\u52a0\u4e00\u4e2a\u8bcd", "docstring_tokens": ["\u7edf\u8ba1\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java#L89-L102", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java", "func_name": "Occurrence.getTermFrequency", "original_string": "public int getTermFrequency(String term)\n    {\n        TermFrequency termFrequency = trieSingle.get(term);\n        if (termFrequency == null) return 0;\n        return termFrequency.getValue();\n    }", "language": "java", "code": "public int getTermFrequency(String term)\n    {\n        TermFrequency termFrequency = trieSingle.get(term);\n        if (termFrequency == null) return 0;\n        return termFrequency.getValue();\n    }", "code_tokens": ["public", "int", "getTermFrequency", "(", "String", "term", ")", "{", "TermFrequency", "termFrequency", "=", "trieSingle", ".", "get", "(", "term", ")", ";", "if", "(", "termFrequency", "==", "null", ")", "return", "0", ";", "return", "termFrequency", ".", "getValue", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u8bcd\u9891\n\n@param term\n@return", "docstring_tokens": ["\u83b7\u53d6\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java#L152-L157", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java", "func_name": "Occurrence.computeLeftEntropy", "original_string": "public double computeLeftEntropy(PairFrequency pair)\n    {\n        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + LEFT);\n        return computeEntropy(entrySet);\n    }", "language": "java", "code": "public double computeLeftEntropy(PairFrequency pair)\n    {\n        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + LEFT);\n        return computeEntropy(entrySet);\n    }", "code_tokens": ["public", "double", "computeLeftEntropy", "(", "PairFrequency", "pair", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "TriaFrequency", ">", ">", "entrySet", "=", "trieTria", ".", "prefixSearch", "(", "pair", ".", "getKey", "(", ")", "+", "LEFT", ")", ";", "return", "computeEntropy", "(", "entrySet", ")", ";", "}"], "docstring": "\u8ba1\u7b97\u5de6\u71b5\n\n@param pair\n@return", "docstring_tokens": ["\u8ba1\u7b97\u5de6\u71b5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java#L310-L314", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java", "func_name": "Occurrence.computeRightEntropy", "original_string": "public double computeRightEntropy(PairFrequency pair)\n    {\n        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + RIGHT);\n        return computeEntropy(entrySet);\n    }", "language": "java", "code": "public double computeRightEntropy(PairFrequency pair)\n    {\n        Set<Map.Entry<String, TriaFrequency>> entrySet = trieTria.prefixSearch(pair.getKey() + RIGHT);\n        return computeEntropy(entrySet);\n    }", "code_tokens": ["public", "double", "computeRightEntropy", "(", "PairFrequency", "pair", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "TriaFrequency", ">", ">", "entrySet", "=", "trieTria", ".", "prefixSearch", "(", "pair", ".", "getKey", "(", ")", "+", "RIGHT", ")", ";", "return", "computeEntropy", "(", "entrySet", ")", ";", "}"], "docstring": "\u8ba1\u7b97\u53f3\u71b5\n\n@param pair\n@return", "docstring_tokens": ["\u8ba1\u7b97\u53f3\u71b5"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java#L322-L326", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java", "func_name": "Occurrence.compute", "original_string": "public void compute()\n    {\n        entrySetPair = triePair.entrySet();\n        double total_mi = 0;\n        double total_le = 0;\n        double total_re = 0;\n        for (Map.Entry<String, PairFrequency> entry : entrySetPair)\n        {\n            PairFrequency value = entry.getValue();\n            value.mi = computeMutualInformation(value);\n            value.le = computeLeftEntropy(value);\n            value.re = computeRightEntropy(value);\n            total_mi += value.mi;\n            total_le += value.le;\n            total_re += value.re;\n        }\n\n        for (Map.Entry<String, PairFrequency> entry : entrySetPair)\n        {\n            PairFrequency value = entry.getValue();\n            value.score = value.mi / total_mi + value.le / total_le+ value.re / total_re;   // \u5f52\u4e00\u5316\n            value.score *= entrySetPair.size();\n        }\n    }", "language": "java", "code": "public void compute()\n    {\n        entrySetPair = triePair.entrySet();\n        double total_mi = 0;\n        double total_le = 0;\n        double total_re = 0;\n        for (Map.Entry<String, PairFrequency> entry : entrySetPair)\n        {\n            PairFrequency value = entry.getValue();\n            value.mi = computeMutualInformation(value);\n            value.le = computeLeftEntropy(value);\n            value.re = computeRightEntropy(value);\n            total_mi += value.mi;\n            total_le += value.le;\n            total_re += value.re;\n        }\n\n        for (Map.Entry<String, PairFrequency> entry : entrySetPair)\n        {\n            PairFrequency value = entry.getValue();\n            value.score = value.mi / total_mi + value.le / total_le+ value.re / total_re;   // \u5f52\u4e00\u5316\n            value.score *= entrySetPair.size();\n        }\n    }", "code_tokens": ["public", "void", "compute", "(", ")", "{", "entrySetPair", "=", "triePair", ".", "entrySet", "(", ")", ";", "double", "total_mi", "=", "0", ";", "double", "total_le", "=", "0", ";", "double", "total_re", "=", "0", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "PairFrequency", ">", "entry", ":", "entrySetPair", ")", "{", "PairFrequency", "value", "=", "entry", ".", "getValue", "(", ")", ";", "value", ".", "mi", "=", "computeMutualInformation", "(", "value", ")", ";", "value", ".", "le", "=", "computeLeftEntropy", "(", "value", ")", ";", "value", ".", "re", "=", "computeRightEntropy", "(", "value", ")", ";", "total_mi", "+=", "value", ".", "mi", ";", "total_le", "+=", "value", ".", "le", ";", "total_re", "+=", "value", ".", "re", ";", "}", "for", "(", "Map", ".", "Entry", "<", "String", ",", "PairFrequency", ">", "entry", ":", "entrySetPair", ")", "{", "PairFrequency", "value", "=", "entry", ".", "getValue", "(", ")", ";", "value", ".", "score", "=", "value", ".", "mi", "/", "total_mi", "+", "value", ".", "le", "/", "total_le", "+", "value", ".", "re", "/", "total_re", ";", "// \u5f52\u4e00\u5316", "value", ".", "score", "*=", "entrySetPair", ".", "size", "(", ")", ";", "}", "}"], "docstring": "\u8f93\u5165\u6570\u636e\u5b8c\u6bd5\uff0c\u6267\u884c\u8ba1\u7b97", "docstring_tokens": ["\u8f93\u5165\u6570\u636e\u5b8c\u6bd5\uff0c\u6267\u884c\u8ba1\u7b97"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/Occurrence.java#L347-L370", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java", "func_name": "PerceptronLexicalAnalyzer.segment", "original_string": "public void segment(String text, List<String> output)\n    {\n        String normalized = CharTable.convert(text);\n        segment(text, normalized, output);\n    }", "language": "java", "code": "public void segment(String text, List<String> output)\n    {\n        String normalized = CharTable.convert(text);\n        segment(text, normalized, output);\n    }", "code_tokens": ["public", "void", "segment", "(", "String", "text", ",", "List", "<", "String", ">", "output", ")", "{", "String", "normalized", "=", "CharTable", ".", "convert", "(", "text", ")", ";", "segment", "(", "text", ",", "normalized", ",", "output", ")", ";", "}"], "docstring": "\u4e2d\u6587\u5206\u8bcd\n\n@param text\n@param output", "docstring_tokens": ["\u4e2d\u6587\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java#L104-L108", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java", "func_name": "PerceptronLexicalAnalyzer.partOfSpeechTag", "original_string": "public String[] partOfSpeechTag(List<String> wordList)\n    {\n        if (posTagger == null)\n        {\n            throw new IllegalStateException(\"\u672a\u63d0\u4f9b\u8bcd\u6027\u6807\u6ce8\u6a21\u578b\");\n        }\n        return tag(wordList);\n    }", "language": "java", "code": "public String[] partOfSpeechTag(List<String> wordList)\n    {\n        if (posTagger == null)\n        {\n            throw new IllegalStateException(\"\u672a\u63d0\u4f9b\u8bcd\u6027\u6807\u6ce8\u6a21\u578b\");\n        }\n        return tag(wordList);\n    }", "code_tokens": ["public", "String", "[", "]", "partOfSpeechTag", "(", "List", "<", "String", ">", "wordList", ")", "{", "if", "(", "posTagger", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", "\"\u672a\u63d0\u4f9b\u8bcd\u6027\u6807\u6ce8\u6a21\u578b\");", "", "", "}", "return", "tag", "(", "wordList", ")", ";", "}"], "docstring": "\u8bcd\u6027\u6807\u6ce8\n\n@param wordList\n@return", "docstring_tokens": ["\u8bcd\u6027\u6807\u6ce8"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java#L116-L123", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java", "func_name": "PerceptronLexicalAnalyzer.namedEntityRecognize", "original_string": "public String[] namedEntityRecognize(String[] wordArray, String[] posArray)\n    {\n        if (neRecognizer == null)\n        {\n            throw new IllegalStateException(\"\u672a\u63d0\u4f9b\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u578b\");\n        }\n        return recognize(wordArray, posArray);\n    }", "language": "java", "code": "public String[] namedEntityRecognize(String[] wordArray, String[] posArray)\n    {\n        if (neRecognizer == null)\n        {\n            throw new IllegalStateException(\"\u672a\u63d0\u4f9b\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u578b\");\n        }\n        return recognize(wordArray, posArray);\n    }", "code_tokens": ["public", "String", "[", "]", "namedEntityRecognize", "(", "String", "[", "]", "wordArray", ",", "String", "[", "]", "posArray", ")", "{", "if", "(", "neRecognizer", "==", "null", ")", "{", "throw", "new", "IllegalStateException", "(", "\"\u672a\u63d0\u4f9b\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u578b\");", "", "", "}", "return", "recognize", "(", "wordArray", ",", "posArray", ")", ";", "}"], "docstring": "\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\n\n@param wordArray\n@param posArray\n@return", "docstring_tokens": ["\u547d\u540d\u5b9e\u4f53\u8bc6\u522b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java#L132-L139", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java", "func_name": "PerceptronLexicalAnalyzer.learn", "original_string": "public boolean learn(String segmentedTaggedSentence)\n    {\n        Sentence sentence = Sentence.create(segmentedTaggedSentence);\n        return learn(sentence);\n    }", "language": "java", "code": "public boolean learn(String segmentedTaggedSentence)\n    {\n        Sentence sentence = Sentence.create(segmentedTaggedSentence);\n        return learn(sentence);\n    }", "code_tokens": ["public", "boolean", "learn", "(", "String", "segmentedTaggedSentence", ")", "{", "Sentence", "sentence", "=", "Sentence", ".", "create", "(", "segmentedTaggedSentence", ")", ";", "return", "learn", "(", "sentence", ")", ";", "}"], "docstring": "\u5728\u7ebf\u5b66\u4e60\n\n@param segmentedTaggedSentence \u5df2\u5206\u8bcd\u3001\u6807\u597d\u8bcd\u6027\u548c\u547d\u540d\u5b9e\u4f53\u7684\u4eba\u6c11\u65e5\u62a52014\u683c\u5f0f\u7684\u53e5\u5b50\n@return \u662f\u5426\u5b66\u4e60\u6210\u679c\uff08\u5931\u8d25\u7684\u539f\u56e0\u662f\u53e5\u5b50\u683c\u5f0f\u4e0d\u5408\u6cd5\uff09", "docstring_tokens": ["\u5728\u7ebf\u5b66\u4e60"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java#L147-L151", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java", "func_name": "PerceptronLexicalAnalyzer.learn", "original_string": "public boolean learn(Sentence sentence)\n    {\n        CharTable.normalize(sentence);\n        if (!getPerceptronSegmenter().learn(sentence)) return false;\n        if (posTagger != null && !getPerceptronPOSTagger().learn(sentence)) return false;\n        if (neRecognizer != null && !getPerceptionNERecognizer().learn(sentence)) return false;\n        return true;\n    }", "language": "java", "code": "public boolean learn(Sentence sentence)\n    {\n        CharTable.normalize(sentence);\n        if (!getPerceptronSegmenter().learn(sentence)) return false;\n        if (posTagger != null && !getPerceptronPOSTagger().learn(sentence)) return false;\n        if (neRecognizer != null && !getPerceptionNERecognizer().learn(sentence)) return false;\n        return true;\n    }", "code_tokens": ["public", "boolean", "learn", "(", "Sentence", "sentence", ")", "{", "CharTable", ".", "normalize", "(", "sentence", ")", ";", "if", "(", "!", "getPerceptronSegmenter", "(", ")", ".", "learn", "(", "sentence", ")", ")", "return", "false", ";", "if", "(", "posTagger", "!=", "null", "&&", "!", "getPerceptronPOSTagger", "(", ")", ".", "learn", "(", "sentence", ")", ")", "return", "false", ";", "if", "(", "neRecognizer", "!=", "null", "&&", "!", "getPerceptionNERecognizer", "(", ")", ".", "learn", "(", "sentence", ")", ")", "return", "false", ";", "return", "true", ";", "}"], "docstring": "\u5728\u7ebf\u5b66\u4e60\n\n@param sentence \u5df2\u5206\u8bcd\u3001\u6807\u597d\u8bcd\u6027\u548c\u547d\u540d\u5b9e\u4f53\u7684\u4eba\u6c11\u65e5\u62a52014\u683c\u5f0f\u7684\u53e5\u5b50\n@return \u662f\u5426\u5b66\u4e60\u6210\u679c\uff08\u5931\u8d25\u7684\u539f\u56e0\u662f\u53e5\u5b50\u683c\u5f0f\u4e0d\u5408\u6cd5\uff09", "docstring_tokens": ["\u5728\u7ebf\u5b66\u4e60"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronLexicalAnalyzer.java#L159-L166", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/crf/Table.java", "func_name": "Table.get", "original_string": "public String get(int x, int y)\n    {\n        if (x < 0) return HEAD + x;\n        if (x >= v.length) return HEAD + \"+\" + (x - v.length + 1);\n\n        return v[x][y];\n    }", "language": "java", "code": "public String get(int x, int y)\n    {\n        if (x < 0) return HEAD + x;\n        if (x >= v.length) return HEAD + \"+\" + (x - v.length + 1);\n\n        return v[x][y];\n    }", "code_tokens": ["public", "String", "get", "(", "int", "x", ",", "int", "y", ")", "{", "if", "(", "x", "<", "0", ")", "return", "HEAD", "+", "x", ";", "if", "(", "x", ">=", "v", ".", "length", ")", "return", "HEAD", "+", "\"+\"", "+", "(", "x", "-", "v", ".", "length", "+", "1", ")", ";", "return", "v", "[", "x", "]", "[", "y", "]", ";", "}"], "docstring": "\u83b7\u53d6\u8868\u4e2d\u67d0\u4e00\u4e2a\u5143\u7d20\n@param x\n@param y\n@return", "docstring_tokens": ["\u83b7\u53d6\u8868\u4e2d\u67d0\u4e00\u4e2a\u5143\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/crf/Table.java#L48-L54", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java", "func_name": "CommonDictionary.load", "original_string": "public boolean load(String path)\n    {\n        trie = new DoubleArrayTrie<V>();\n        long start = System.currentTimeMillis();\n        if (loadDat(ByteArray.createByteArray(path + BIN_EXT)))\n        {\n            return true;\n        }\n        TreeMap<String, V> map = new TreeMap<String, V>();\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            String line;\n            while ((line = br.readLine()) != null)\n            {\n                String[] paramArray = line.split(\"\\\\s\");\n                map.put(paramArray[0], createValue(paramArray));\n            }\n            br.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u5931\u8d25\" + e);\n            return false;\n        }\n        onLoaded(map);\n        Set<Map.Entry<String, V>> entrySet = map.entrySet();\n        List<String> keyList = new ArrayList<String>(entrySet.size());\n        List<V> valueList = new ArrayList<V>(entrySet.size());\n        for (Map.Entry<String, V> entry : entrySet)\n        {\n            keyList.add(entry.getKey());\n            valueList.add(entry.getValue());\n        }\n        int resultCode = trie.build(keyList, valueList);\n        if (resultCode != 0)\n        {\n            logger.warning(\"trie\u5efa\u7acb\u5931\u8d25\");\n            return false;\n        }\n        logger.info(path + \"\u52a0\u8f7d\u6210\u529f\uff0c\u8017\u65f6\" + (System.currentTimeMillis() - start) + \"ms\");\n        saveDat(path + BIN_EXT, valueList);\n        return true;\n    }", "language": "java", "code": "public boolean load(String path)\n    {\n        trie = new DoubleArrayTrie<V>();\n        long start = System.currentTimeMillis();\n        if (loadDat(ByteArray.createByteArray(path + BIN_EXT)))\n        {\n            return true;\n        }\n        TreeMap<String, V> map = new TreeMap<String, V>();\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            String line;\n            while ((line = br.readLine()) != null)\n            {\n                String[] paramArray = line.split(\"\\\\s\");\n                map.put(paramArray[0], createValue(paramArray));\n            }\n            br.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u5931\u8d25\" + e);\n            return false;\n        }\n        onLoaded(map);\n        Set<Map.Entry<String, V>> entrySet = map.entrySet();\n        List<String> keyList = new ArrayList<String>(entrySet.size());\n        List<V> valueList = new ArrayList<V>(entrySet.size());\n        for (Map.Entry<String, V> entry : entrySet)\n        {\n            keyList.add(entry.getKey());\n            valueList.add(entry.getValue());\n        }\n        int resultCode = trie.build(keyList, valueList);\n        if (resultCode != 0)\n        {\n            logger.warning(\"trie\u5efa\u7acb\u5931\u8d25\");\n            return false;\n        }\n        logger.info(path + \"\u52a0\u8f7d\u6210\u529f\uff0c\u8017\u65f6\" + (System.currentTimeMillis() - start) + \"ms\");\n        saveDat(path + BIN_EXT, valueList);\n        return true;\n    }", "code_tokens": ["public", "boolean", "load", "(", "String", "path", ")", "{", "trie", "=", "new", "DoubleArrayTrie", "<", "V", ">", "(", ")", ";", "long", "start", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "if", "(", "loadDat", "(", "ByteArray", ".", "createByteArray", "(", "path", "+", "BIN_EXT", ")", ")", ")", "{", "return", "true", ";", "}", "TreeMap", "<", "String", ",", "V", ">", "map", "=", "new", "TreeMap", "<", "String", ",", "V", ">", "(", ")", ";", "try", "{", "BufferedReader", "br", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "String", "line", ";", "while", "(", "(", "line", "=", "br", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "String", "[", "]", "paramArray", "=", "line", ".", "split", "(", "\"\\\\s\"", ")", ";", "map", ".", "put", "(", "paramArray", "[", "0", "]", ",", "createValue", "(", "paramArray", ")", ")", ";", "}", "br", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u8bfb\u53d6\" + p", "t", " + \"", "\u8d25", " + e);", "", "", "", "", "return", "false", ";", "}", "onLoaded", "(", "map", ")", ";", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "V", ">", ">", "entrySet", "=", "map", ".", "entrySet", "(", ")", ";", "List", "<", "String", ">", "keyList", "=", "new", "ArrayList", "<", "String", ">", "(", "entrySet", ".", "size", "(", ")", ")", ";", "List", "<", "V", ">", "valueList", "=", "new", "ArrayList", "<", "V", ">", "(", "entrySet", ".", "size", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "V", ">", "entry", ":", "entrySet", ")", "{", "keyList", ".", "add", "(", "entry", ".", "getKey", "(", ")", ")", ";", "valueList", ".", "add", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "int", "resultCode", "=", "trie", ".", "build", "(", "keyList", ",", "valueList", ")", ";", "if", "(", "resultCode", "!=", "0", ")", "{", "logger", ".", "warning", "(", "\"trie\u5efa\u7acb\u5931\u8d25\");", "", "", "return", "false", ";", "}", "logger", ".", "info", "(", "path", "+", "\"\u52a0\u8f7d\u6210\u529f\uff0c\u8017\u65f6\" + (System.cur", "e", "t", "TimeMi", "l", "lis() - start) + ", "\"", "m", "\"", ";", "", "", "", "", "", "saveDat", "(", "path", "+", "BIN_EXT", ",", "valueList", ")", ";", "return", "true", ";", "}"], "docstring": "\u4ecetxt\u8def\u5f84\u52a0\u8f7d\n\n@param path\n@return", "docstring_tokens": ["\u4ecetxt\u8def\u5f84\u52a0\u8f7d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java#L48-L91", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java", "func_name": "CommonDictionary.loadDat", "original_string": "protected boolean loadDat(ByteArray byteArray)\n    {\n        V[] valueArray = loadValueArray(byteArray);\n        if (valueArray == null)\n        {\n            return false;\n        }\n        return trie.load(byteArray.getBytes(), byteArray.getOffset(), valueArray);\n    }", "language": "java", "code": "protected boolean loadDat(ByteArray byteArray)\n    {\n        V[] valueArray = loadValueArray(byteArray);\n        if (valueArray == null)\n        {\n            return false;\n        }\n        return trie.load(byteArray.getBytes(), byteArray.getOffset(), valueArray);\n    }", "code_tokens": ["protected", "boolean", "loadDat", "(", "ByteArray", "byteArray", ")", "{", "V", "[", "]", "valueArray", "=", "loadValueArray", "(", "byteArray", ")", ";", "if", "(", "valueArray", "==", "null", ")", "{", "return", "false", ";", "}", "return", "trie", ".", "load", "(", "byteArray", ".", "getBytes", "(", ")", ",", "byteArray", ".", "getOffset", "(", ")", ",", "valueArray", ")", ";", "}"], "docstring": "\u4ecedat\u8def\u5f84\u52a0\u8f7d\n\n@param byteArray\n@return", "docstring_tokens": ["\u4ecedat\u8def\u5f84\u52a0\u8f7d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java#L99-L107", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java", "func_name": "CommonDictionary.saveDat", "original_string": "protected boolean saveDat(String path, List<V> valueArray)\n    {\n        try\n        {\n            DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(path)));\n            out.writeInt(valueArray.size());\n            for (V item : valueArray)\n            {\n                saveValue(item, out);\n            }\n            trie.save(out);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u4fdd\u5b58\u5931\u8d25\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "protected boolean saveDat(String path, List<V> valueArray)\n    {\n        try\n        {\n            DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(path)));\n            out.writeInt(valueArray.size());\n            for (V item : valueArray)\n            {\n                saveValue(item, out);\n            }\n            trie.save(out);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u4fdd\u5b58\u5931\u8d25\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["protected", "boolean", "saveDat", "(", "String", "path", ",", "List", "<", "V", ">", "valueArray", ")", "{", "try", "{", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "new", "BufferedOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "path", ")", ")", ")", ";", "out", ".", "writeInt", "(", "valueArray", ".", "size", "(", ")", ")", ";", "for", "(", "V", "item", ":", "valueArray", ")", "{", "saveValue", "(", "item", ",", "out", ")", ";", "}", "trie", ".", "save", "(", "out", ")", ";", "out", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u4fdd\u5b58\u5931\u8d25\" + TextU", "i", "ity.excepti", "o", "nToString(e));", "", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4fdd\u5b58dat\u5230\u8def\u5f84\n\n@param path\n@param valueArray\n@return", "docstring_tokens": ["\u4fdd\u5b58dat\u5230\u8def\u5f84"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/common/CommonDictionary.java#L116-L135", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.saveObjectTo", "original_string": "public static boolean saveObjectTo(Object o, String path)\n    {\n        try\n        {\n            ObjectOutputStream oos = new ObjectOutputStream(IOUtil.newOutputStream(path));\n            oos.writeObject(o);\n            oos.close();\n        }\n        catch (IOException e)\n        {\n            logger.warning(\"\u5728\u4fdd\u5b58\u5bf9\u8c61\" + o + \"\u5230\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n            return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public static boolean saveObjectTo(Object o, String path)\n    {\n        try\n        {\n            ObjectOutputStream oos = new ObjectOutputStream(IOUtil.newOutputStream(path));\n            oos.writeObject(o);\n            oos.close();\n        }\n        catch (IOException e)\n        {\n            logger.warning(\"\u5728\u4fdd\u5b58\u5bf9\u8c61\" + o + \"\u5230\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "saveObjectTo", "(", "Object", "o", ",", "String", "path", ")", "{", "try", "{", "ObjectOutputStream", "oos", "=", "new", "ObjectOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "path", ")", ")", ";", "oos", ".", "writeObject", "(", "o", ")", ";", "oos", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "warning", "(", "\"\u5728\u4fdd\u5b58\u5bf9\u8c61\" + o + \"\u5230\"", "+", "p", "t", " + \"\u65f6", "\u751f", "\u5e38\" +", "e", ";", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u5e8f\u5217\u5316\u5bf9\u8c61\n\n@param o\n@param path\n@return", "docstring_tokens": ["\u5e8f\u5217\u5316\u5bf9\u8c61"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L43-L58", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readObjectFrom", "original_string": "public static Object readObjectFrom(String path)\n    {\n        ObjectInputStream ois = null;\n        try\n        {\n            ois = new ObjectInputStream(IOUtil.newInputStream(path));\n            Object o = ois.readObject();\n            ois.close();\n            return o;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u4ece\" + path + \"\u8bfb\u53d6\u5bf9\u8c61\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n        }\n\n        return null;\n    }", "language": "java", "code": "public static Object readObjectFrom(String path)\n    {\n        ObjectInputStream ois = null;\n        try\n        {\n            ois = new ObjectInputStream(IOUtil.newInputStream(path));\n            Object o = ois.readObject();\n            ois.close();\n            return o;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u5728\u4ece\" + path + \"\u8bfb\u53d6\u5bf9\u8c61\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n        }\n\n        return null;\n    }", "code_tokens": ["public", "static", "Object", "readObjectFrom", "(", "String", "path", ")", "{", "ObjectInputStream", "ois", "=", "null", ";", "try", "{", "ois", "=", "new", "ObjectInputStream", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ")", ";", "Object", "o", "=", "ois", ".", "readObject", "(", ")", ";", "ois", ".", "close", "(", ")", ";", "return", "o", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u5728\u4ece\" + p", "t", " + \"", "\u53d6", "\u8c61\u65f6\u53d1\u751f\u5f02\u5e38\" + e);", "", "", "", "", "}", "return", "null", ";", "}"], "docstring": "\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\n\n@param path\n@return", "docstring_tokens": ["\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L66-L82", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readTxt", "original_string": "public static String readTxt(String path)\n    {\n        if (path == null) return null;\n        try\n        {\n            InputStream in = IOAdapter == null ? new FileInputStream(path) :\n                    IOAdapter.open(path);\n            byte[] fileContent = new byte[in.available()];\n            int read = readBytesFromOtherInputStream(in, fileContent);\n            in.close();\n            // \u5904\u7406 UTF-8 BOM\n            if (read >= 3 && fileContent[0] == -17 && fileContent[1] == -69 && fileContent[2] == -65)\n                return new String(fileContent, 3, fileContent.length - 3, Charset.forName(\"UTF-8\"));\n            return new String(fileContent, Charset.forName(\"UTF-8\"));\n        }\n        catch (FileNotFoundException e)\n        {\n            logger.warning(\"\u627e\u4e0d\u5230\" + path + e);\n            return null;\n        }\n        catch (IOException e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u53d1\u751fIO\u5f02\u5e38\" + e);\n            return null;\n        }\n    }", "language": "java", "code": "public static String readTxt(String path)\n    {\n        if (path == null) return null;\n        try\n        {\n            InputStream in = IOAdapter == null ? new FileInputStream(path) :\n                    IOAdapter.open(path);\n            byte[] fileContent = new byte[in.available()];\n            int read = readBytesFromOtherInputStream(in, fileContent);\n            in.close();\n            // \u5904\u7406 UTF-8 BOM\n            if (read >= 3 && fileContent[0] == -17 && fileContent[1] == -69 && fileContent[2] == -65)\n                return new String(fileContent, 3, fileContent.length - 3, Charset.forName(\"UTF-8\"));\n            return new String(fileContent, Charset.forName(\"UTF-8\"));\n        }\n        catch (FileNotFoundException e)\n        {\n            logger.warning(\"\u627e\u4e0d\u5230\" + path + e);\n            return null;\n        }\n        catch (IOException e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u53d1\u751fIO\u5f02\u5e38\" + e);\n            return null;\n        }\n    }", "code_tokens": ["public", "static", "String", "readTxt", "(", "String", "path", ")", "{", "if", "(", "path", "==", "null", ")", "return", "null", ";", "try", "{", "InputStream", "in", "=", "IOAdapter", "==", "null", "?", "new", "FileInputStream", "(", "path", ")", ":", "IOAdapter", ".", "open", "(", "path", ")", ";", "byte", "[", "]", "fileContent", "=", "new", "byte", "[", "in", ".", "available", "(", ")", "]", ";", "int", "read", "=", "readBytesFromOtherInputStream", "(", "in", ",", "fileContent", ")", ";", "in", ".", "close", "(", ")", ";", "// \u5904\u7406 UTF-8 BOM", "if", "(", "read", ">=", "3", "&&", "fileContent", "[", "0", "]", "==", "-", "17", "&&", "fileContent", "[", "1", "]", "==", "-", "69", "&&", "fileContent", "[", "2", "]", "==", "-", "65", ")", "return", "new", "String", "(", "fileContent", ",", "3", ",", "fileContent", ".", "length", "-", "3", ",", "Charset", ".", "forName", "(", "\"UTF-8\"", ")", ")", ";", "return", "new", "String", "(", "fileContent", ",", "Charset", ".", "forName", "(", "\"UTF-8\"", ")", ")", ";", "}", "catch", "(", "FileNotFoundException", "e", ")", "{", "logger", ".", "warning", "(", "\"\u627e\u4e0d\u5230\" + pat", " ", " e);", "", "", "", "", "return", "null", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "warning", "(", "\"\u8bfb\u53d6\" + p", "t", " + \"", "\u751f", "O\u5f02\u5e38\" + e);", "", "", "", "", "return", "null", ";", "}", "}"], "docstring": "\u4e00\u6b21\u6027\u8bfb\u5165\u7eaf\u6587\u672c\n\n@param path\n@return", "docstring_tokens": ["\u4e00\u6b21\u6027\u8bfb\u5165\u7eaf\u6587\u672c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L90-L115", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.saveTxt", "original_string": "public static boolean saveTxt(String path, String content)\n    {\n        try\n        {\n            FileChannel fc = new FileOutputStream(path).getChannel();\n            fc.write(ByteBuffer.wrap(content.getBytes()));\n            fc.close();\n        }\n        catch (Exception e)\n        {\n            logger.throwing(\"IOUtil\", \"saveTxt\", e);\n            logger.warning(\"IOUtil saveTxt \u5230\" + path + \"\u5931\u8d25\" + e.toString());\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "public static boolean saveTxt(String path, String content)\n    {\n        try\n        {\n            FileChannel fc = new FileOutputStream(path).getChannel();\n            fc.write(ByteBuffer.wrap(content.getBytes()));\n            fc.close();\n        }\n        catch (Exception e)\n        {\n            logger.throwing(\"IOUtil\", \"saveTxt\", e);\n            logger.warning(\"IOUtil saveTxt \u5230\" + path + \"\u5931\u8d25\" + e.toString());\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "saveTxt", "(", "String", "path", ",", "String", "content", ")", "{", "try", "{", "FileChannel", "fc", "=", "new", "FileOutputStream", "(", "path", ")", ".", "getChannel", "(", ")", ";", "fc", ".", "write", "(", "ByteBuffer", ".", "wrap", "(", "content", ".", "getBytes", "(", ")", ")", ")", ";", "fc", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "throwing", "(", "\"IOUtil\"", ",", "\"saveTxt\"", ",", "e", ")", ";", "logger", ".", "warning", "(", "\"IOUtil saveTxt \u5230\" +", "p", "th +", "\"", "\u8d25\" + e.t", "S", "r", "i", "ng());", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u5feb\u901f\u4fdd\u5b58\n\n@param path\n@param content\n@return", "docstring_tokens": ["\u5feb\u901f\u4fdd\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L135-L150", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readBytes", "original_string": "public static byte[] readBytes(String path)\n    {\n        try\n        {\n            if (IOAdapter == null) return readBytesFromFileInputStream(new FileInputStream(path));\n\n            InputStream is = IOAdapter.open(path);\n            if (is instanceof FileInputStream)\n                return readBytesFromFileInputStream((FileInputStream) is);\n            else\n                return readBytesFromOtherInputStream(is);\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n        }\n\n        return null;\n    }", "language": "java", "code": "public static byte[] readBytes(String path)\n    {\n        try\n        {\n            if (IOAdapter == null) return readBytesFromFileInputStream(new FileInputStream(path));\n\n            InputStream is = IOAdapter.open(path);\n            if (is instanceof FileInputStream)\n                return readBytesFromFileInputStream((FileInputStream) is);\n            else\n                return readBytesFromOtherInputStream(is);\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\" + path + \"\u65f6\u53d1\u751f\u5f02\u5e38\" + e);\n        }\n\n        return null;\n    }", "code_tokens": ["public", "static", "byte", "[", "]", "readBytes", "(", "String", "path", ")", "{", "try", "{", "if", "(", "IOAdapter", "==", "null", ")", "return", "readBytesFromFileInputStream", "(", "new", "FileInputStream", "(", "path", ")", ")", ";", "InputStream", "is", "=", "IOAdapter", ".", "open", "(", "path", ")", ";", "if", "(", "is", "instanceof", "FileInputStream", ")", "return", "readBytesFromFileInputStream", "(", "(", "FileInputStream", ")", "is", ")", ";", "else", "return", "readBytesFromOtherInputStream", "(", "is", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u8bfb\u53d6\" + p", "t", " + \"", "\u53d1", "\u5f02\u5e38\" + e);", "", "", "", "", "}", "return", "null", ";", "}"], "docstring": "\u5c06\u6574\u4e2a\u6587\u4ef6\u8bfb\u53d6\u4e3a\u5b57\u8282\u6570\u7ec4\n\n@param path\n@return", "docstring_tokens": ["\u5c06\u6574\u4e2a\u6587\u4ef6\u8bfb\u53d6\u4e3a\u5b57\u8282\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L174-L192", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readBytesFromOtherInputStream", "original_string": "public static byte[] readBytesFromOtherInputStream(InputStream is) throws IOException\n    {\n        ByteArrayOutputStream data = new ByteArrayOutputStream();\n\n        int readBytes;\n        byte[] buffer = new byte[Math.max(is.available(), 4096)]; // \u6700\u4f4e4KB\u7684\u7f13\u51b2\u533a\n\n        while ((readBytes = is.read(buffer, 0, buffer.length)) != -1)\n        {\n            data.write(buffer, 0, readBytes);\n        }\n\n        data.flush();\n\n        return data.toByteArray();\n    }", "language": "java", "code": "public static byte[] readBytesFromOtherInputStream(InputStream is) throws IOException\n    {\n        ByteArrayOutputStream data = new ByteArrayOutputStream();\n\n        int readBytes;\n        byte[] buffer = new byte[Math.max(is.available(), 4096)]; // \u6700\u4f4e4KB\u7684\u7f13\u51b2\u533a\n\n        while ((readBytes = is.read(buffer, 0, buffer.length)) != -1)\n        {\n            data.write(buffer, 0, readBytes);\n        }\n\n        data.flush();\n\n        return data.toByteArray();\n    }", "code_tokens": ["public", "static", "byte", "[", "]", "readBytesFromOtherInputStream", "(", "InputStream", "is", ")", "throws", "IOException", "{", "ByteArrayOutputStream", "data", "=", "new", "ByteArrayOutputStream", "(", ")", ";", "int", "readBytes", ";", "byte", "[", "]", "buffer", "=", "new", "byte", "[", "Math", ".", "max", "(", "is", ".", "available", "(", ")", ",", "4096", ")", "]", ";", "// \u6700\u4f4e4KB\u7684\u7f13\u51b2\u533a", "while", "(", "(", "readBytes", "=", "is", ".", "read", "(", "buffer", ",", "0", ",", "buffer", ".", "length", ")", ")", "!=", "-", "1", ")", "{", "data", ".", "write", "(", "buffer", ",", "0", ",", "readBytes", ")", ";", "}", "data", ".", "flush", "(", ")", ";", "return", "data", ".", "toByteArray", "(", ")", ";", "}"], "docstring": "\u5c06\u975eFileInputStream\u7684\u67d0InputStream\u4e2d\u7684\u5168\u90e8\u6570\u636e\u8bfb\u5165\u5230\u5b57\u8282\u6570\u7ec4\u4e2d\n\n@param is\n@return\n@throws IOException", "docstring_tokens": ["\u5c06\u975eFileInputStream\u7684\u67d0InputStream\u4e2d\u7684\u5168\u90e8\u6570\u636e\u8bfb\u5165\u5230\u5b57\u8282\u6570\u7ec4\u4e2d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L268-L283", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readBytesFromOtherInputStream", "original_string": "public static int readBytesFromOtherInputStream(InputStream is, byte[] targetArray) throws IOException\n    {\n        assert targetArray != null;\n        if (targetArray.length == 0) return 0;\n        int len;\n        int off = 0;\n        while (off < targetArray.length && (len = is.read(targetArray, off, targetArray.length - off)) != -1)\n        {\n            off += len;\n        }\n        return off;\n    }", "language": "java", "code": "public static int readBytesFromOtherInputStream(InputStream is, byte[] targetArray) throws IOException\n    {\n        assert targetArray != null;\n        if (targetArray.length == 0) return 0;\n        int len;\n        int off = 0;\n        while (off < targetArray.length && (len = is.read(targetArray, off, targetArray.length - off)) != -1)\n        {\n            off += len;\n        }\n        return off;\n    }", "code_tokens": ["public", "static", "int", "readBytesFromOtherInputStream", "(", "InputStream", "is", ",", "byte", "[", "]", "targetArray", ")", "throws", "IOException", "{", "assert", "targetArray", "!=", "null", ";", "if", "(", "targetArray", ".", "length", "==", "0", ")", "return", "0", ";", "int", "len", ";", "int", "off", "=", "0", ";", "while", "(", "off", "<", "targetArray", ".", "length", "&&", "(", "len", "=", "is", ".", "read", "(", "targetArray", ",", "off", ",", "targetArray", ".", "length", "-", "off", ")", ")", "!=", "-", "1", ")", "{", "off", "+=", "len", ";", "}", "return", "off", ";", "}"], "docstring": "\u4eceInputStream\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u8282\u51fa\u6765\n@param is \u6d41\n@param targetArray output\n@return \u5b9e\u9645\u8bfb\u53d6\u4e86\u591a\u5c11\u5b57\u8282\uff0c\u8fd4\u56de0\u8868\u793a\u9047\u5230\u4e86\u6587\u4ef6\u5c3e\u90e8\n@throws IOException", "docstring_tokens": ["\u4eceInputStream\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u8282\u51fa\u6765"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L292-L303", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.readLineListWithLessMemory", "original_string": "public static LinkedList<String> readLineListWithLessMemory(String path)\n    {\n        LinkedList<String> result = new LinkedList<String>();\n        String line = null;\n        boolean first = true;\n        try\n        {\n            BufferedReader bw = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            while ((line = bw.readLine()) != null)\n            {\n                if (first)\n                {\n                    first = false;\n                    if (!line.isEmpty() && line.charAt(0) == '\\uFEFF')\n                        line = line.substring(1);\n                }\n                result.add(line);\n            }\n            bw.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u52a0\u8f7d\" + path + \"\u5931\u8d25\uff0c\" + e);\n        }\n\n        return result;\n    }", "language": "java", "code": "public static LinkedList<String> readLineListWithLessMemory(String path)\n    {\n        LinkedList<String> result = new LinkedList<String>();\n        String line = null;\n        boolean first = true;\n        try\n        {\n            BufferedReader bw = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            while ((line = bw.readLine()) != null)\n            {\n                if (first)\n                {\n                    first = false;\n                    if (!line.isEmpty() && line.charAt(0) == '\\uFEFF')\n                        line = line.substring(1);\n                }\n                result.add(line);\n            }\n            bw.close();\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u52a0\u8f7d\" + path + \"\u5931\u8d25\uff0c\" + e);\n        }\n\n        return result;\n    }", "code_tokens": ["public", "static", "LinkedList", "<", "String", ">", "readLineListWithLessMemory", "(", "String", "path", ")", "{", "LinkedList", "<", "String", ">", "result", "=", "new", "LinkedList", "<", "String", ">", "(", ")", ";", "String", "line", "=", "null", ";", "boolean", "first", "=", "true", ";", "try", "{", "BufferedReader", "bw", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "while", "(", "(", "line", "=", "bw", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "if", "(", "first", ")", "{", "first", "=", "false", ";", "if", "(", "!", "line", ".", "isEmpty", "(", ")", "&&", "line", ".", "charAt", "(", "0", ")", "==", "'", "'", ")", "line", "=", "line", ".", "substring", "(", "1", ")", ";", "}", "result", ".", "add", "(", "line", ")", ";", "}", "bw", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u52a0\u8f7d\" + p", "t", " + \"", "\u8d25", "\" + e);", "", "", "", "", "}", "return", "result", ";", "}"], "docstring": "\u7528\u7701\u5185\u5b58\u7684\u65b9\u5f0f\u8bfb\u53d6\u5927\u6587\u4ef6\n\n@param path\n@return", "docstring_tokens": ["\u7528\u7701\u5185\u5b58\u7684\u65b9\u5f0f\u8bfb\u53d6\u5927\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L325-L351", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.dirname", "original_string": "public static String dirname(String path)\n    {\n        int index = path.lastIndexOf('/');\n        if (index == -1) return path;\n        return path.substring(0, index + 1);\n    }", "language": "java", "code": "public static String dirname(String path)\n    {\n        int index = path.lastIndexOf('/');\n        if (index == -1) return path;\n        return path.substring(0, index + 1);\n    }", "code_tokens": ["public", "static", "String", "dirname", "(", "String", "path", ")", "{", "int", "index", "=", "path", ".", "lastIndexOf", "(", "'", "'", ")", ";", "if", "(", "index", "==", "-", "1", ")", "return", "path", ";", "return", "path", ".", "substring", "(", "0", ",", "index", "+", "1", ")", ";", "}"], "docstring": "\u83b7\u53d6\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u7684\u8def\u5f84\n@param path\n@return", "docstring_tokens": ["\u83b7\u53d6\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u7684\u8def\u5f84"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L382-L387", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.removeUTF8BOM", "original_string": "public static String removeUTF8BOM(String line)\n    {\n        if (line != null && line.startsWith(\"\\uFEFF\")) // UTF-8 byte order mark (EF BB BF)\n        {\n            line = line.substring(1);\n        }\n        return line;\n    }", "language": "java", "code": "public static String removeUTF8BOM(String line)\n    {\n        if (line != null && line.startsWith(\"\\uFEFF\")) // UTF-8 byte order mark (EF BB BF)\n        {\n            line = line.substring(1);\n        }\n        return line;\n    }", "code_tokens": ["public", "static", "String", "removeUTF8BOM", "(", "String", "line", ")", "{", "if", "(", "line", "!=", "null", "&&", "line", ".", "startsWith", "(", "\"\\uFEFF\"", ")", ")", "// UTF-8 byte order mark (EF BB BF)", "{", "line", "=", "line", ".", "substring", "(", "1", ")", ";", "}", "return", "line", ";", "}"], "docstring": "\u53bb\u9664\u6587\u4ef6\u7b2c\u4e00\u884c\u4e2d\u7684UTF8 BOM<br>\n\u8fd9\u662fJava\u7684bug\uff0c\u4e14\u5b98\u65b9\u4e0d\u4f1a\u4fee\u590d\u3002\u53c2\u8003 https://stackoverflow.com/questions/4897876/reading-utf-8-bom-marker\n@param line \u6587\u4ef6\u7b2c\u4e00\u884c\n@return \u53bb\u9664BOM\u7684\u90e8\u5206", "docstring_tokens": ["\u53bb\u9664\u6587\u4ef6\u7b2c\u4e00\u884c\u4e2d\u7684UTF8", "BOM<br", ">", "\u8fd9\u662fJava\u7684bug\uff0c\u4e14\u5b98\u65b9\u4e0d\u4f1a\u4fee\u590d\u3002\u53c2\u8003", "https", ":", "//", "stackoverflow", ".", "com", "/", "questions", "/", "4897876", "/", "reading", "-", "utf", "-", "8", "-", "bom", "-", "marker"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L410-L417", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.fileList", "original_string": "public static List<File> fileList(String path)\n    {\n        List<File> fileList = new LinkedList<File>();\n        File folder = new File(path);\n        if (folder.isDirectory())\n            enumerate(folder, fileList);\n        else\n            fileList.add(folder); // \u517c\u5bb9\u8def\u5f84\u4e3a\u6587\u4ef6\u7684\u60c5\u51b5\n        return fileList;\n    }", "language": "java", "code": "public static List<File> fileList(String path)\n    {\n        List<File> fileList = new LinkedList<File>();\n        File folder = new File(path);\n        if (folder.isDirectory())\n            enumerate(folder, fileList);\n        else\n            fileList.add(folder); // \u517c\u5bb9\u8def\u5f84\u4e3a\u6587\u4ef6\u7684\u60c5\u51b5\n        return fileList;\n    }", "code_tokens": ["public", "static", "List", "<", "File", ">", "fileList", "(", "String", "path", ")", "{", "List", "<", "File", ">", "fileList", "=", "new", "LinkedList", "<", "File", ">", "(", ")", ";", "File", "folder", "=", "new", "File", "(", "path", ")", ";", "if", "(", "folder", ".", "isDirectory", "(", ")", ")", "enumerate", "(", "folder", ",", "fileList", ")", ";", "else", "fileList", ".", "add", "(", "folder", ")", ";", "// \u517c\u5bb9\u8def\u5f84\u4e3a\u6587\u4ef6\u7684\u60c5\u51b5", "return", "fileList", ";", "}"], "docstring": "\u9012\u5f52\u904d\u5386\u83b7\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\n\n@param path \u6839\u76ee\u5f55\n@return \u6587\u4ef6\u5217\u8868", "docstring_tokens": ["\u9012\u5f52\u904d\u5386\u83b7\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L425-L434", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.enumerate", "original_string": "private static void enumerate(File folder, List<File> fileList)\n    {\n        File[] fileArray = folder.listFiles();\n        if (fileArray != null)\n        {\n            for (File file : fileArray)\n            {\n                if (file.isFile() && !file.getName().startsWith(\".\")) // \u8fc7\u6ee4\u9690\u85cf\u6587\u4ef6\n                {\n                    fileList.add(file);\n                }\n                else\n                {\n                    enumerate(file, fileList);\n                }\n            }\n        }\n    }", "language": "java", "code": "private static void enumerate(File folder, List<File> fileList)\n    {\n        File[] fileArray = folder.listFiles();\n        if (fileArray != null)\n        {\n            for (File file : fileArray)\n            {\n                if (file.isFile() && !file.getName().startsWith(\".\")) // \u8fc7\u6ee4\u9690\u85cf\u6587\u4ef6\n                {\n                    fileList.add(file);\n                }\n                else\n                {\n                    enumerate(file, fileList);\n                }\n            }\n        }\n    }", "code_tokens": ["private", "static", "void", "enumerate", "(", "File", "folder", ",", "List", "<", "File", ">", "fileList", ")", "{", "File", "[", "]", "fileArray", "=", "folder", ".", "listFiles", "(", ")", ";", "if", "(", "fileArray", "!=", "null", ")", "{", "for", "(", "File", "file", ":", "fileArray", ")", "{", "if", "(", "file", ".", "isFile", "(", ")", "&&", "!", "file", ".", "getName", "(", ")", ".", "startsWith", "(", "\".\"", ")", ")", "// \u8fc7\u6ee4\u9690\u85cf\u6587\u4ef6", "{", "fileList", ".", "add", "(", "file", ")", ";", "}", "else", "{", "enumerate", "(", "file", ",", "fileList", ")", ";", "}", "}", "}", "}"], "docstring": "\u9012\u5f52\u904d\u5386\u76ee\u5f55\n\n@param folder   \u76ee\u5f55\n@param fileList \u50a8\u5b58\u6587\u4ef6", "docstring_tokens": ["\u9012\u5f52\u904d\u5386\u76ee\u5f55"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L442-L459", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.newBufferedWriter", "original_string": "public static BufferedWriter newBufferedWriter(String path) throws IOException\n    {\n        return new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(path), \"UTF-8\"));\n    }", "language": "java", "code": "public static BufferedWriter newBufferedWriter(String path) throws IOException\n    {\n        return new BufferedWriter(new OutputStreamWriter(IOUtil.newOutputStream(path), \"UTF-8\"));\n    }", "code_tokens": ["public", "static", "BufferedWriter", "newBufferedWriter", "(", "String", "path", ")", "throws", "IOException", "{", "return", "new", "BufferedWriter", "(", "new", "OutputStreamWriter", "(", "IOUtil", ".", "newOutputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "}"], "docstring": "\u521b\u5efa\u4e00\u4e2aBufferedWriter\n\n@param path\n@return\n@throws FileNotFoundException\n@throws UnsupportedEncodingException", "docstring_tokens": ["\u521b\u5efa\u4e00\u4e2aBufferedWriter"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L595-L598", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.newBufferedReader", "original_string": "public static BufferedReader newBufferedReader(String path) throws IOException\n    {\n        return new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n    }", "language": "java", "code": "public static BufferedReader newBufferedReader(String path) throws IOException\n    {\n        return new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n    }", "code_tokens": ["public", "static", "BufferedReader", "newBufferedReader", "(", "String", "path", ")", "throws", "IOException", "{", "return", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "}"], "docstring": "\u521b\u5efa\u4e00\u4e2aBufferedReader\n@param path\n@return\n@throws FileNotFoundException\n@throws UnsupportedEncodingException", "docstring_tokens": ["\u521b\u5efa\u4e00\u4e2aBufferedReader"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L607-L610", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.newInputStream", "original_string": "public static InputStream newInputStream(String path) throws IOException\n    {\n        if (IOAdapter == null) return new FileInputStream(path);\n        return IOAdapter.open(path);\n    }", "language": "java", "code": "public static InputStream newInputStream(String path) throws IOException\n    {\n        if (IOAdapter == null) return new FileInputStream(path);\n        return IOAdapter.open(path);\n    }", "code_tokens": ["public", "static", "InputStream", "newInputStream", "(", "String", "path", ")", "throws", "IOException", "{", "if", "(", "IOAdapter", "==", "null", ")", "return", "new", "FileInputStream", "(", "path", ")", ";", "return", "IOAdapter", ".", "open", "(", "path", ")", ";", "}"], "docstring": "\u521b\u5efa\u8f93\u5165\u6d41\uff08\u7ecf\u8fc7IO\u9002\u914d\u5668\u521b\u5efa\uff09\n@param path\n@return\n@throws IOException", "docstring_tokens": ["\u521b\u5efa\u8f93\u5165\u6d41\uff08\u7ecf\u8fc7IO\u9002\u914d\u5668\u521b\u5efa\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L623-L627", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.newOutputStream", "original_string": "public static OutputStream newOutputStream(String path) throws IOException\n    {\n        if (IOAdapter == null) return new FileOutputStream(path);\n        return IOAdapter.create(path);\n    }", "language": "java", "code": "public static OutputStream newOutputStream(String path) throws IOException\n    {\n        if (IOAdapter == null) return new FileOutputStream(path);\n        return IOAdapter.create(path);\n    }", "code_tokens": ["public", "static", "OutputStream", "newOutputStream", "(", "String", "path", ")", "throws", "IOException", "{", "if", "(", "IOAdapter", "==", "null", ")", "return", "new", "FileOutputStream", "(", "path", ")", ";", "return", "IOAdapter", ".", "create", "(", "path", ")", ";", "}"], "docstring": "\u521b\u5efa\u8f93\u51fa\u6d41\uff08\u7ecf\u8fc7IO\u9002\u914d\u5668\u521b\u5efa\uff09\n@param path\n@return\n@throws IOException", "docstring_tokens": ["\u521b\u5efa\u8f93\u51fa\u6d41\uff08\u7ecf\u8fc7IO\u9002\u914d\u5668\u521b\u5efa\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L635-L639", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.getSuffix", "original_string": "public static String getSuffix(String name, String delimiter)\n    {\n        return name.substring(name.lastIndexOf(delimiter) + 1);\n    }", "language": "java", "code": "public static String getSuffix(String name, String delimiter)\n    {\n        return name.substring(name.lastIndexOf(delimiter) + 1);\n    }", "code_tokens": ["public", "static", "String", "getSuffix", "(", "String", "name", ",", "String", "delimiter", ")", "{", "return", "name", ".", "substring", "(", "name", ".", "lastIndexOf", "(", "delimiter", ")", "+", "1", ")", ";", "}"], "docstring": "\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u540e\u7f00\n@param name\n@param delimiter\n@return", "docstring_tokens": ["\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u540e\u7f00"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L647-L650", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.writeLine", "original_string": "public static void writeLine(BufferedWriter bw, String... params) throws IOException\n    {\n        for (int i = 0; i < params.length - 1; i++)\n        {\n            bw.write(params[i]);\n            bw.write('\\t');\n        }\n        bw.write(params[params.length - 1]);\n    }", "language": "java", "code": "public static void writeLine(BufferedWriter bw, String... params) throws IOException\n    {\n        for (int i = 0; i < params.length - 1; i++)\n        {\n            bw.write(params[i]);\n            bw.write('\\t');\n        }\n        bw.write(params[params.length - 1]);\n    }", "code_tokens": ["public", "static", "void", "writeLine", "(", "BufferedWriter", "bw", ",", "String", "...", "params", ")", "throws", "IOException", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "params", ".", "length", "-", "1", ";", "i", "++", ")", "{", "bw", ".", "write", "(", "params", "[", "i", "]", ")", ";", "bw", ".", "write", "(", "'", "'", ")", ";", "}", "bw", ".", "write", "(", "params", "[", "params", ".", "length", "-", "1", "]", ")", ";", "}"], "docstring": "\u5199\u6570\u7ec4\uff0c\u7528\u5236\u8868\u7b26\u5206\u5272\n@param bw\n@param params\n@throws IOException", "docstring_tokens": ["\u5199\u6570\u7ec4\uff0c\u7528\u5236\u8868\u7b26\u5206\u5272"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L658-L666", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.loadDictionary", "original_string": "public static TreeMap<String, CoreDictionary.Attribute> loadDictionary(String... pathArray) throws IOException\n    {\n        TreeMap<String, CoreDictionary.Attribute> map = new TreeMap<String, CoreDictionary.Attribute>();\n        for (String path : pathArray)\n        {\n            File file = new File(path);\n            String fileName = file.getName();\n            int natureIndex = fileName.lastIndexOf(' ');\n            Nature defaultNature = Nature.n;\n            if (natureIndex > 0)\n            {\n                String natureString = fileName.substring(natureIndex + 1);\n                path = file.getParent() + File.separator + fileName.substring(0, natureIndex);\n                if (natureString.length() > 0 && !natureString.endsWith(\".txt\") && !natureString.endsWith(\".csv\"))\n                {\n                    defaultNature = Nature.create(natureString);\n                }\n            }\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            loadDictionary(br, map, path.endsWith(\".csv\"), defaultNature);\n        }\n\n        return map;\n    }", "language": "java", "code": "public static TreeMap<String, CoreDictionary.Attribute> loadDictionary(String... pathArray) throws IOException\n    {\n        TreeMap<String, CoreDictionary.Attribute> map = new TreeMap<String, CoreDictionary.Attribute>();\n        for (String path : pathArray)\n        {\n            File file = new File(path);\n            String fileName = file.getName();\n            int natureIndex = fileName.lastIndexOf(' ');\n            Nature defaultNature = Nature.n;\n            if (natureIndex > 0)\n            {\n                String natureString = fileName.substring(natureIndex + 1);\n                path = file.getParent() + File.separator + fileName.substring(0, natureIndex);\n                if (natureString.length() > 0 && !natureString.endsWith(\".txt\") && !natureString.endsWith(\".csv\"))\n                {\n                    defaultNature = Nature.create(natureString);\n                }\n            }\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            loadDictionary(br, map, path.endsWith(\".csv\"), defaultNature);\n        }\n\n        return map;\n    }", "code_tokens": ["public", "static", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "loadDictionary", "(", "String", "...", "pathArray", ")", "throws", "IOException", "{", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "map", "=", "new", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "for", "(", "String", "path", ":", "pathArray", ")", "{", "File", "file", "=", "new", "File", "(", "path", ")", ";", "String", "fileName", "=", "file", ".", "getName", "(", ")", ";", "int", "natureIndex", "=", "fileName", ".", "lastIndexOf", "(", "'", "'", ")", ";", "Nature", "defaultNature", "=", "Nature", ".", "n", ";", "if", "(", "natureIndex", ">", "0", ")", "{", "String", "natureString", "=", "fileName", ".", "substring", "(", "natureIndex", "+", "1", ")", ";", "path", "=", "file", ".", "getParent", "(", ")", "+", "File", ".", "separator", "+", "fileName", ".", "substring", "(", "0", ",", "natureIndex", ")", ";", "if", "(", "natureString", ".", "length", "(", ")", ">", "0", "&&", "!", "natureString", ".", "endsWith", "(", "\".txt\"", ")", "&&", "!", "natureString", ".", "endsWith", "(", "\".csv\"", ")", ")", "{", "defaultNature", "=", "Nature", ".", "create", "(", "natureString", ")", ";", "}", "}", "BufferedReader", "br", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "loadDictionary", "(", "br", ",", "map", ",", "path", ".", "endsWith", "(", "\".csv\"", ")", ",", "defaultNature", ")", ";", "}", "return", "map", ";", "}"], "docstring": "\u52a0\u8f7d\u8bcd\u5178\uff0c\u8bcd\u5178\u5fc5\u987b\u9075\u5b88HanLP\u6838\u5fc3\u8bcd\u5178\u683c\u5f0f\n@param pathArray \u8bcd\u5178\u8def\u5f84\uff0c\u53ef\u4ee5\u6709\u4efb\u610f\u4e2a\u3002\u6bcf\u4e2a\u8def\u5f84\u652f\u6301\u7528\u7a7a\u683c\u8868\u793a\u9ed8\u8ba4\u8bcd\u6027\uff0c\u6bd4\u5982\u201c\u5168\u56fd\u5730\u540d\u5927\u5168.txt ns\u201d\n@return \u4e00\u4e2a\u50a8\u5b58\u4e86\u8bcd\u6761\u7684map\n@throws IOException \u5f02\u5e38\u8868\u793a\u52a0\u8f7d\u5931\u8d25", "docstring_tokens": ["\u52a0\u8f7d\u8bcd\u5178\uff0c\u8bcd\u5178\u5fc5\u987b\u9075\u5b88HanLP\u6838\u5fc3\u8bcd\u5178\u683c\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L674-L697", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.loadDictionary", "original_string": "public static void loadDictionary(BufferedReader br, TreeMap<String, CoreDictionary.Attribute> storage, boolean isCSV, Nature defaultNature) throws IOException\n    {\n        String splitter = \"\\\\s\";\n        if (isCSV)\n        {\n            splitter = \",\";\n        }\n        String line;\n        boolean firstLine = true;\n        while ((line = br.readLine()) != null)\n        {\n            if (firstLine)\n            {\n                line = IOUtil.removeUTF8BOM(line);\n                firstLine = false;\n            }\n            String param[] = line.split(splitter);\n\n            int natureCount = (param.length - 1) / 2;\n            CoreDictionary.Attribute attribute;\n            if (natureCount == 0)\n            {\n                attribute = new CoreDictionary.Attribute(defaultNature);\n            }\n            else\n            {\n                attribute = new CoreDictionary.Attribute(natureCount);\n                for (int i = 0; i < natureCount; ++i)\n                {\n                    attribute.nature[i] = LexiconUtility.convertStringToNature(param[1 + 2 * i]);\n                    attribute.frequency[i] = Integer.parseInt(param[2 + 2 * i]);\n                    attribute.totalFrequency += attribute.frequency[i];\n                }\n            }\n            storage.put(param[0], attribute);\n        }\n        br.close();\n    }", "language": "java", "code": "public static void loadDictionary(BufferedReader br, TreeMap<String, CoreDictionary.Attribute> storage, boolean isCSV, Nature defaultNature) throws IOException\n    {\n        String splitter = \"\\\\s\";\n        if (isCSV)\n        {\n            splitter = \",\";\n        }\n        String line;\n        boolean firstLine = true;\n        while ((line = br.readLine()) != null)\n        {\n            if (firstLine)\n            {\n                line = IOUtil.removeUTF8BOM(line);\n                firstLine = false;\n            }\n            String param[] = line.split(splitter);\n\n            int natureCount = (param.length - 1) / 2;\n            CoreDictionary.Attribute attribute;\n            if (natureCount == 0)\n            {\n                attribute = new CoreDictionary.Attribute(defaultNature);\n            }\n            else\n            {\n                attribute = new CoreDictionary.Attribute(natureCount);\n                for (int i = 0; i < natureCount; ++i)\n                {\n                    attribute.nature[i] = LexiconUtility.convertStringToNature(param[1 + 2 * i]);\n                    attribute.frequency[i] = Integer.parseInt(param[2 + 2 * i]);\n                    attribute.totalFrequency += attribute.frequency[i];\n                }\n            }\n            storage.put(param[0], attribute);\n        }\n        br.close();\n    }", "code_tokens": ["public", "static", "void", "loadDictionary", "(", "BufferedReader", "br", ",", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "storage", ",", "boolean", "isCSV", ",", "Nature", "defaultNature", ")", "throws", "IOException", "{", "String", "splitter", "=", "\"\\\\s\"", ";", "if", "(", "isCSV", ")", "{", "splitter", "=", "\",\"", ";", "}", "String", "line", ";", "boolean", "firstLine", "=", "true", ";", "while", "(", "(", "line", "=", "br", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "if", "(", "firstLine", ")", "{", "line", "=", "IOUtil", ".", "removeUTF8BOM", "(", "line", ")", ";", "firstLine", "=", "false", ";", "}", "String", "param", "[", "]", "=", "line", ".", "split", "(", "splitter", ")", ";", "int", "natureCount", "=", "(", "param", ".", "length", "-", "1", ")", "/", "2", ";", "CoreDictionary", ".", "Attribute", "attribute", ";", "if", "(", "natureCount", "==", "0", ")", "{", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "defaultNature", ")", ";", "}", "else", "{", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "natureCount", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "natureCount", ";", "++", "i", ")", "{", "attribute", ".", "nature", "[", "i", "]", "=", "LexiconUtility", ".", "convertStringToNature", "(", "param", "[", "1", "+", "2", "*", "i", "]", ")", ";", "attribute", ".", "frequency", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "param", "[", "2", "+", "2", "*", "i", "]", ")", ";", "attribute", ".", "totalFrequency", "+=", "attribute", ".", "frequency", "[", "i", "]", ";", "}", "}", "storage", ".", "put", "(", "param", "[", "0", "]", ",", "attribute", ")", ";", "}", "br", ".", "close", "(", ")", ";", "}"], "docstring": "\u5c06\u4e00\u4e2aBufferedReader\u4e2d\u7684\u8bcd\u6761\u52a0\u8f7d\u5230\u8bcd\u5178\n@param br \u6e90\n@param storage \u50a8\u5b58\u4f4d\u7f6e\n@throws IOException \u5f02\u5e38\u8868\u793a\u52a0\u8f7d\u5931\u8d25", "docstring_tokens": ["\u5c06\u4e00\u4e2aBufferedReader\u4e2d\u7684\u8bcd\u6761\u52a0\u8f7d\u5230\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L705-L742", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java", "func_name": "IOUtil.isFileExisted", "original_string": "public static boolean isFileExisted(String path)\n    {\n        File file = new File(path);\n        return file.isFile() && file.exists();\n    }", "language": "java", "code": "public static boolean isFileExisted(String path)\n    {\n        File file = new File(path);\n        return file.isFile() && file.exists();\n    }", "code_tokens": ["public", "static", "boolean", "isFileExisted", "(", "String", "path", ")", "{", "File", "file", "=", "new", "File", "(", "path", ")", ";", "return", "file", ".", "isFile", "(", ")", "&&", "file", ".", "exists", "(", ")", ";", "}"], "docstring": "\u672c\u5730\u6587\u4ef6\u662f\u5426\u5b58\u5728\n@param path\n@return", "docstring_tokens": ["\u672c\u5730\u6587\u4ef6\u662f\u5426\u5b58\u5728"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/IOUtil.java#L759-L763", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/bigram/WordNatureDependencyModel.java", "func_name": "WordNatureDependencyModel.getEdge", "original_string": "public Edge getEdge(Node from, Node to)\n    {\n        // \u9996\u5148\u5c1d\u8bd5\u8bcd+\u8bcd\n        Attribute attribute = get(from.compiledWord, to.compiledWord);\n        if (attribute == null) attribute = get(from.compiledWord, WordNatureWeightModelMaker.wrapTag(to.label));\n        if (attribute == null) attribute = get(WordNatureWeightModelMaker.wrapTag(from.label), to.compiledWord);\n        if (attribute == null) attribute = get(WordNatureWeightModelMaker.wrapTag(from.label), WordNatureWeightModelMaker.wrapTag(to.label));\n        if (attribute == null)\n        {\n            attribute = Attribute.NULL;\n        }\n        if (HanLP.Config.DEBUG)\n        {\n            System.out.println(from + \" \u5230 \" + to + \" : \" + attribute);\n        }\n        return new Edge(from.id, to.id, attribute.dependencyRelation[0], attribute.p[0]);\n    }", "language": "java", "code": "public Edge getEdge(Node from, Node to)\n    {\n        // \u9996\u5148\u5c1d\u8bd5\u8bcd+\u8bcd\n        Attribute attribute = get(from.compiledWord, to.compiledWord);\n        if (attribute == null) attribute = get(from.compiledWord, WordNatureWeightModelMaker.wrapTag(to.label));\n        if (attribute == null) attribute = get(WordNatureWeightModelMaker.wrapTag(from.label), to.compiledWord);\n        if (attribute == null) attribute = get(WordNatureWeightModelMaker.wrapTag(from.label), WordNatureWeightModelMaker.wrapTag(to.label));\n        if (attribute == null)\n        {\n            attribute = Attribute.NULL;\n        }\n        if (HanLP.Config.DEBUG)\n        {\n            System.out.println(from + \" \u5230 \" + to + \" : \" + attribute);\n        }\n        return new Edge(from.id, to.id, attribute.dependencyRelation[0], attribute.p[0]);\n    }", "code_tokens": ["public", "Edge", "getEdge", "(", "Node", "from", ",", "Node", "to", ")", "{", "// \u9996\u5148\u5c1d\u8bd5\u8bcd+\u8bcd", "Attribute", "attribute", "=", "get", "(", "from", ".", "compiledWord", ",", "to", ".", "compiledWord", ")", ";", "if", "(", "attribute", "==", "null", ")", "attribute", "=", "get", "(", "from", ".", "compiledWord", ",", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "to", ".", "label", ")", ")", ";", "if", "(", "attribute", "==", "null", ")", "attribute", "=", "get", "(", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "from", ".", "label", ")", ",", "to", ".", "compiledWord", ")", ";", "if", "(", "attribute", "==", "null", ")", "attribute", "=", "get", "(", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "from", ".", "label", ")", ",", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "to", ".", "label", ")", ")", ";", "if", "(", "attribute", "==", "null", ")", "{", "attribute", "=", "Attribute", ".", "NULL", ";", "}", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "{", "System", ".", "out", ".", "println", "(", "from", "+", "\" \u5230 \" +", "t", " +", "\"", ": \" +", "a", "tribute);", "", "", "}", "return", "new", "Edge", "(", "from", ".", "id", ",", "to", ".", "id", ",", "attribute", ".", "dependencyRelation", "[", "0", "]", ",", "attribute", ".", "p", "[", "0", "]", ")", ";", "}"], "docstring": "\u6253\u5206\n@param from\n@param to\n@return", "docstring_tokens": ["\u6253\u5206"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/bigram/WordNatureDependencyModel.java#L171-L187", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/collections/FrequencyMap.java", "func_name": "FrequencyMap.add", "original_string": "public int add(K key)\n    {\n        int[] f = get(key);\n        if (f == null)\n        {\n            f = new int[]{1};\n            put(key, f);\n        }\n        else ++f[0];\n\n        return f[0];\n    }", "language": "java", "code": "public int add(K key)\n    {\n        int[] f = get(key);\n        if (f == null)\n        {\n            f = new int[]{1};\n            put(key, f);\n        }\n        else ++f[0];\n\n        return f[0];\n    }", "code_tokens": ["public", "int", "add", "(", "K", "key", ")", "{", "int", "[", "]", "f", "=", "get", "(", "key", ")", ";", "if", "(", "f", "==", "null", ")", "{", "f", "=", "new", "int", "[", "]", "{", "1", "}", ";", "put", "(", "key", ",", "f", ")", ";", "}", "else", "++", "f", "[", "0", "]", ";", "return", "f", "[", "0", "]", ";", "}"], "docstring": "\u589e\u52a0\u4e00\u4e2a\u8bcd\u7684\u8bcd\u9891\n@param key\n@return", "docstring_tokens": ["\u589e\u52a0\u4e00\u4e2a\u8bcd\u7684\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/collections/FrequencyMap.java#L27-L38", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/WordVectorModel.java", "func_name": "WordVectorModel.analogy", "original_string": "public List<Map.Entry<String, Float>> analogy(String A, String B, String C)\n    {\n        return analogy(A, B, C, 10);\n    }", "language": "java", "code": "public List<Map.Entry<String, Float>> analogy(String A, String B, String C)\n    {\n        return analogy(A, B, C, 10);\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "String", ",", "Float", ">", ">", "analogy", "(", "String", "A", ",", "String", "B", ",", "String", "C", ")", "{", "return", "analogy", "(", "A", ",", "B", ",", "C", ",", "10", ")", ";", "}"], "docstring": "\u8fd4\u56de\u8ddf A - B + C \u6700\u76f8\u4f3c\u7684\u8bcd\u8bed,\u6bd4\u5982 \u4e2d\u56fd - \u5317\u4eac + \u4e1c\u4eac = \u65e5\u672c\u3002\u8f93\u5165\u987a\u5e8f\u6309\u7167 \u4e2d\u56fd \u5317\u4eac \u4e1c\u4eac\n\n@param A \u505a\u52a0\u6cd5\u7684\u8bcd\u8bed\n@param B \u505a\u51cf\u6cd5\u7684\u8bcd\u8bed\n@param C \u505a\u52a0\u6cd5\u7684\u8bcd\u8bed\n@return \u4e0e(A - B + C)\u8bed\u4e49\u8ddd\u79bb\u6700\u8fd1\u7684\u8bcd\u8bed\u53ca\u5176\u76f8\u4f3c\u5ea6\u5217\u8868", "docstring_tokens": ["\u8fd4\u56de\u8ddf", "A", "-", "B", "+", "C", "\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed", "\u6bd4\u5982", "\u4e2d\u56fd", "-", "\u5317\u4eac", "+", "\u4e1c\u4eac", "=", "\u65e5\u672c\u3002\u8f93\u5165\u987a\u5e8f\u6309\u7167", "\u4e2d\u56fd", "\u5317\u4eac", "\u4e1c\u4eac"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/WordVectorModel.java#L55-L58", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/WordVectorModel.java", "func_name": "WordVectorModel.analogy", "original_string": "public List<Map.Entry<String, Float>> analogy(String A, String B, String C, int size)\n    {\n        Vector a = storage.get(A);\n        Vector b = storage.get(B);\n        Vector c = storage.get(C);\n        if (a == null || b == null || c == null)\n        {\n            return Collections.emptyList();\n        }\n\n        List<Map.Entry<String, Float>> resultList = nearest(a.minus(b).add(c), size + 3);\n        ListIterator<Map.Entry<String, Float>> listIterator = resultList.listIterator();\n        while (listIterator.hasNext())\n        {\n            String key = listIterator.next().getKey();\n            if (key.equals(A) || key.equals(B) || key.equals(C))\n            {\n                listIterator.remove();\n            }\n        }\n\n        if (resultList.size() > size)\n        {\n            resultList = resultList.subList(0, size);\n        }\n\n        return resultList;\n    }", "language": "java", "code": "public List<Map.Entry<String, Float>> analogy(String A, String B, String C, int size)\n    {\n        Vector a = storage.get(A);\n        Vector b = storage.get(B);\n        Vector c = storage.get(C);\n        if (a == null || b == null || c == null)\n        {\n            return Collections.emptyList();\n        }\n\n        List<Map.Entry<String, Float>> resultList = nearest(a.minus(b).add(c), size + 3);\n        ListIterator<Map.Entry<String, Float>> listIterator = resultList.listIterator();\n        while (listIterator.hasNext())\n        {\n            String key = listIterator.next().getKey();\n            if (key.equals(A) || key.equals(B) || key.equals(C))\n            {\n                listIterator.remove();\n            }\n        }\n\n        if (resultList.size() > size)\n        {\n            resultList = resultList.subList(0, size);\n        }\n\n        return resultList;\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "String", ",", "Float", ">", ">", "analogy", "(", "String", "A", ",", "String", "B", ",", "String", "C", ",", "int", "size", ")", "{", "Vector", "a", "=", "storage", ".", "get", "(", "A", ")", ";", "Vector", "b", "=", "storage", ".", "get", "(", "B", ")", ";", "Vector", "c", "=", "storage", ".", "get", "(", "C", ")", ";", "if", "(", "a", "==", "null", "||", "b", "==", "null", "||", "c", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "List", "<", "Map", ".", "Entry", "<", "String", ",", "Float", ">", ">", "resultList", "=", "nearest", "(", "a", ".", "minus", "(", "b", ")", ".", "add", "(", "c", ")", ",", "size", "+", "3", ")", ";", "ListIterator", "<", "Map", ".", "Entry", "<", "String", ",", "Float", ">", ">", "listIterator", "=", "resultList", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "String", "key", "=", "listIterator", ".", "next", "(", ")", ".", "getKey", "(", ")", ";", "if", "(", "key", ".", "equals", "(", "A", ")", "||", "key", ".", "equals", "(", "B", ")", "||", "key", ".", "equals", "(", "C", ")", ")", "{", "listIterator", ".", "remove", "(", ")", ";", "}", "}", "if", "(", "resultList", ".", "size", "(", ")", ">", "size", ")", "{", "resultList", "=", "resultList", ".", "subList", "(", "0", ",", "size", ")", ";", "}", "return", "resultList", ";", "}"], "docstring": "\u8fd4\u56de\u8ddf A - B + C \u6700\u76f8\u4f3c\u7684\u8bcd\u8bed,\u6bd4\u5982 \u4e2d\u56fd - \u5317\u4eac + \u4e1c\u4eac = \u65e5\u672c\u3002\u8f93\u5165\u987a\u5e8f\u6309\u7167 \u4e2d\u56fd \u5317\u4eac \u4e1c\u4eac\n\n@param A    \u505a\u52a0\u6cd5\u7684\u8bcd\u8bed\n@param B    \u505a\u51cf\u6cd5\u7684\u8bcd\u8bed\n@param C    \u505a\u52a0\u6cd5\u7684\u8bcd\u8bed\n@param size topN\u4e2a\n@return \u4e0e(A - B + C)\u8bed\u4e49\u8ddd\u79bb\u6700\u8fd1\u7684\u8bcd\u8bed\u53ca\u5176\u76f8\u4f3c\u5ea6\u5217\u8868", "docstring_tokens": ["\u8fd4\u56de\u8ddf", "A", "-", "B", "+", "C", "\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed", "\u6bd4\u5982", "\u4e2d\u56fd", "-", "\u5317\u4eac", "+", "\u4e1c\u4eac", "=", "\u65e5\u672c\u3002\u8f93\u5165\u987a\u5e8f\u6309\u7167", "\u4e2d\u56fd", "\u5317\u4eac", "\u4e1c\u4eac"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/WordVectorModel.java#L69-L96", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/CRF/CRFSegment.java", "func_name": "CRFSegment.resizeArray", "original_string": "private static String[][] resizeArray(String[][] array, int size)\n    {\n        if (array.length == size) return array;\n        String[][] nArray = new String[size][];\n        System.arraycopy(array, 0, nArray, 0, size);\n        return nArray;\n    }", "language": "java", "code": "private static String[][] resizeArray(String[][] array, int size)\n    {\n        if (array.length == size) return array;\n        String[][] nArray = new String[size][];\n        System.arraycopy(array, 0, nArray, 0, size);\n        return nArray;\n    }", "code_tokens": ["private", "static", "String", "[", "]", "[", "]", "resizeArray", "(", "String", "[", "]", "[", "]", "array", ",", "int", "size", ")", "{", "if", "(", "array", ".", "length", "==", "size", ")", "return", "array", ";", "String", "[", "]", "[", "]", "nArray", "=", "new", "String", "[", "size", "]", "[", "", "]", ";", "System", ".", "arraycopy", "(", "array", ",", "0", ",", "nArray", ",", "0", ",", "size", ")", ";", "return", "nArray", ";", "}"], "docstring": "\u6570\u7ec4\u51cf\u80a5\uff0c\u539f\u5b50\u5206\u8bcd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8868\u683c\u6bd4\u539f\u6765\u7684\u77ed\n\n@param array\n@param size\n@return", "docstring_tokens": ["\u6570\u7ec4\u51cf\u80a5\uff0c\u539f\u5b50\u5206\u8bcd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8868\u683c\u6bd4\u539f\u6765\u7684\u77ed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/CRF/CRFSegment.java#L292-L298", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/util/PosTagUtil.java", "func_name": "PosTagUtil.to863", "original_string": "public static List<String> to863(List<Term> termList)\n    {\n        List<String> posTagList = new ArrayList<String>(termList.size());\n        for (Term term : termList)\n        {\n            String posTag = posConverter.get(term.nature.toString());\n            if (posTag == null)\n                posTag = term.nature.toString();\n            posTagList.add(posTag);\n        }\n\n        return posTagList;\n    }", "language": "java", "code": "public static List<String> to863(List<Term> termList)\n    {\n        List<String> posTagList = new ArrayList<String>(termList.size());\n        for (Term term : termList)\n        {\n            String posTag = posConverter.get(term.nature.toString());\n            if (posTag == null)\n                posTag = term.nature.toString();\n            posTagList.add(posTag);\n        }\n\n        return posTagList;\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "to863", "(", "List", "<", "Term", ">", "termList", ")", "{", "List", "<", "String", ">", "posTagList", "=", "new", "ArrayList", "<", "String", ">", "(", "termList", ".", "size", "(", ")", ")", ";", "for", "(", "Term", "term", ":", "termList", ")", "{", "String", "posTag", "=", "posConverter", ".", "get", "(", "term", ".", "nature", ".", "toString", "(", ")", ")", ";", "if", "(", "posTag", "==", "null", ")", "posTag", "=", "term", ".", "nature", ".", "toString", "(", ")", ";", "posTagList", ".", "add", "(", "posTag", ")", ";", "}", "return", "posTagList", ";", "}"], "docstring": "\u8f6c\u4e3a863\u6807\u6ce8\u96c6<br>\n863\u8bcd\u6027\u6807\u6ce8\u96c6\uff0c\u5176\u5404\u4e2a\u8bcd\u6027\u542b\u4e49\u5982\u4e0b\u8868\uff1a\n<p>\nTag\tDescription\tExample\tTag\tDescription\tExample\na\tadjective\t\u7f8e\u4e3d\tni\torganization name\t\u4fdd\u9669\u516c\u53f8\nb\tother noun-modifier\t\u5927\u578b, \u897f\u5f0f\tnl\tlocation noun\t\u57ce\u90ca\nc\tconjunction\t\u548c, \u867d\u7136\tns\tgeographical name\t\u5317\u4eac\nd\tadverb\t\u5f88\tnt\ttemporal noun\t\u8fd1\u65e5, \u660e\u4ee3\ne\texclamation\t\u54ce\tnz\tother proper noun\t\u8bfa\u8d1d\u5c14\u5956\ng\tmorpheme\t\u8328, \u7525\to\tonomatopoeia\t\u54d7\u5566\nh\tprefix\t\u963f, \u4f2a\tp\tpreposition\t\u5728, \u628a\ni\tidiom\t\u767e\u82b1\u9f50\u653e\tq\tquantity\t\u4e2a\nj\tabbreviation\t\u516c\u68c0\u6cd5\tr\tpronoun\t\u6211\u4eec\nk\tsuffix\t\u754c, \u7387\tu\tauxiliary\t\u7684, \u5730\nm\tnumber\t\u4e00, \u7b2c\u4e00\tv\tverb\t\u8dd1, \u5b66\u4e60\nn\tgeneral noun\t\u82f9\u679c\twp\tpunctuation\t\uff0c\u3002\uff01\nnd\tdirection noun\t\u53f3\u4fa7\tws\tforeign words\tCPU\nnh\tperson name\t\u675c\u752b, \u6c64\u59c6\tx\tnon-lexeme\t\u8404, \u7ff1\n\n@param termList\n@return", "docstring_tokens": ["\u8f6c\u4e3a863\u6807\u6ce8\u96c6<br", ">", "863\u8bcd\u6027\u6807\u6ce8\u96c6\uff0c\u5176\u5404\u4e2a\u8bcd\u6027\u542b\u4e49\u5982\u4e0b\u8868\uff1a", "<p", ">", "Tag", "Description", "Example", "Tag", "Description", "Example", "a", "adjective", "\u7f8e\u4e3d", "ni", "organization", "name", "\u4fdd\u9669\u516c\u53f8", "b", "other", "noun", "-", "modifier", "\u5927\u578b", "\u897f\u5f0f", "nl", "location", "noun", "\u57ce\u90ca", "c", "conjunction", "\u548c", "\u867d\u7136", "ns", "geographical", "name", "\u5317\u4eac", "d", "adverb", "\u5f88", "nt", "temporal", "noun", "\u8fd1\u65e5", "\u660e\u4ee3", "e", "exclamation", "\u54ce", "nz", "other", "proper", "noun", "\u8bfa\u8d1d\u5c14\u5956", "g", "morpheme", "\u8328", "\u7525", "o", "onomatopoeia", "\u54d7\u5566", "h", "prefix", "\u963f", "\u4f2a", "p", "preposition", "\u5728", "\u628a", "i", "idiom", "\u767e\u82b1\u9f50\u653e", "q", "quantity", "\u4e2a", "j", "abbreviation", "\u516c\u68c0\u6cd5", "r", "pronoun", "\u6211\u4eec", "k", "suffix", "\u754c", "\u7387", "u", "auxiliary", "\u7684", "\u5730", "m", "number", "\u4e00", "\u7b2c\u4e00", "v", "verb", "\u8dd1", "\u5b66\u4e60", "n", "general", "noun", "\u82f9\u679c", "wp", "punctuation", "\uff0c\u3002\uff01", "nd", "direction", "noun", "\u53f3\u4fa7", "ws", "foreign", "words", "CPU", "nh", "person", "name", "\u675c\u752b", "\u6c64\u59c6", "x", "non", "-", "lexeme", "\u8404", "\u7ff1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/util/PosTagUtil.java#L187-L199", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/util/PosTagUtil.java", "func_name": "PosTagUtil.evaluate", "original_string": "public static float evaluate(POSTagger tagger, String corpus)\n    {\n        int correct = 0, total = 0;\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(corpus);\n        for (String line : lineIterator)\n        {\n            Sentence sentence = Sentence.create(line);\n            if (sentence == null) continue;\n            String[][] wordTagArray = sentence.toWordTagArray();\n            String[] prediction = tagger.tag(wordTagArray[0]);\n            assert prediction.length == wordTagArray[1].length;\n            total += prediction.length;\n            for (int i = 0; i < prediction.length; i++)\n            {\n                if (prediction[i].equals(wordTagArray[1][i]))\n                    ++correct;\n            }\n        }\n        if (total == 0) return 0;\n        return correct / (float) total * 100;\n    }", "language": "java", "code": "public static float evaluate(POSTagger tagger, String corpus)\n    {\n        int correct = 0, total = 0;\n        IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(corpus);\n        for (String line : lineIterator)\n        {\n            Sentence sentence = Sentence.create(line);\n            if (sentence == null) continue;\n            String[][] wordTagArray = sentence.toWordTagArray();\n            String[] prediction = tagger.tag(wordTagArray[0]);\n            assert prediction.length == wordTagArray[1].length;\n            total += prediction.length;\n            for (int i = 0; i < prediction.length; i++)\n            {\n                if (prediction[i].equals(wordTagArray[1][i]))\n                    ++correct;\n            }\n        }\n        if (total == 0) return 0;\n        return correct / (float) total * 100;\n    }", "code_tokens": ["public", "static", "float", "evaluate", "(", "POSTagger", "tagger", ",", "String", "corpus", ")", "{", "int", "correct", "=", "0", ",", "total", "=", "0", ";", "IOUtil", ".", "LineIterator", "lineIterator", "=", "new", "IOUtil", ".", "LineIterator", "(", "corpus", ")", ";", "for", "(", "String", "line", ":", "lineIterator", ")", "{", "Sentence", "sentence", "=", "Sentence", ".", "create", "(", "line", ")", ";", "if", "(", "sentence", "==", "null", ")", "continue", ";", "String", "[", "]", "[", "]", "wordTagArray", "=", "sentence", ".", "toWordTagArray", "(", ")", ";", "String", "[", "]", "prediction", "=", "tagger", ".", "tag", "(", "wordTagArray", "[", "0", "]", ")", ";", "assert", "prediction", ".", "length", "==", "wordTagArray", "[", "1", "]", ".", "length", ";", "total", "+=", "prediction", ".", "length", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "prediction", ".", "length", ";", "i", "++", ")", "{", "if", "(", "prediction", "[", "i", "]", ".", "equals", "(", "wordTagArray", "[", "1", "]", "[", "i", "]", ")", ")", "++", "correct", ";", "}", "}", "if", "(", "total", "==", "0", ")", "return", "0", ";", "return", "correct", "/", "(", "float", ")", "total", "*", "100", ";", "}"], "docstring": "\u8bc4\u4f30\u8bcd\u6027\u6807\u6ce8\u5668\u7684\u51c6\u786e\u7387\n\n@param tagger \u8bcd\u6027\u6807\u6ce8\u5668\n@param corpus \u6d4b\u8bd5\u96c6\n@return Accuracy\u767e\u5206\u6bd4", "docstring_tokens": ["\u8bc4\u4f30\u8bcd\u6027\u6807\u6ce8\u5668\u7684\u51c6\u786e\u7387"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/util/PosTagUtil.java#L208-L228", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/occurrence/PairFrequency.java", "func_name": "PairFrequency.create", "original_string": "public static PairFrequency create(String first, char delimiter ,String second)\n    {\n        PairFrequency pairFrequency = new PairFrequency(first + delimiter + second);\n        pairFrequency.first = first;\n        pairFrequency.delimiter = delimiter;\n        pairFrequency.second = second;\n        return pairFrequency;\n    }", "language": "java", "code": "public static PairFrequency create(String first, char delimiter ,String second)\n    {\n        PairFrequency pairFrequency = new PairFrequency(first + delimiter + second);\n        pairFrequency.first = first;\n        pairFrequency.delimiter = delimiter;\n        pairFrequency.second = second;\n        return pairFrequency;\n    }", "code_tokens": ["public", "static", "PairFrequency", "create", "(", "String", "first", ",", "char", "delimiter", ",", "String", "second", ")", "{", "PairFrequency", "pairFrequency", "=", "new", "PairFrequency", "(", "first", "+", "delimiter", "+", "second", ")", ";", "pairFrequency", ".", "first", "=", "first", ";", "pairFrequency", ".", "delimiter", "=", "delimiter", ";", "pairFrequency", ".", "second", "=", "second", ";", "return", "pairFrequency", ";", "}"], "docstring": "\u6784\u9020\u4e00\u4e2apf\n@param first\n@param delimiter\n@param second\n@return", "docstring_tokens": ["\u6784\u9020\u4e00\u4e2apf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/occurrence/PairFrequency.java#L57-L64", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.vector", "original_string": "final public Vector vector(K key)\n    {\n        Vector vector = storage.get(key);\n        if (vector == null) return null;\n        return vector;\n    }", "language": "java", "code": "final public Vector vector(K key)\n    {\n        Vector vector = storage.get(key);\n        if (vector == null) return null;\n        return vector;\n    }", "code_tokens": ["final", "public", "Vector", "vector", "(", "K", "key", ")", "{", "Vector", "vector", "=", "storage", ".", "get", "(", "key", ")", ";", "if", "(", "vector", "==", "null", ")", "return", "null", ";", "return", "vector", ";", "}"], "docstring": "\u83b7\u53d6\u4e00\u4e2a\u952e\u7684\u5411\u91cf\uff08\u952e\u4e0d\u4f1a\u88ab\u9884\u5904\u7406\uff09\n\n@param key \u952e\n@return \u5411\u91cf", "docstring_tokens": ["\u83b7\u53d6\u4e00\u4e2a\u952e\u7684\u5411\u91cf\uff08\u952e\u4e0d\u4f1a\u88ab\u9884\u5904\u7406\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L42-L47", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.similarity", "original_string": "public float similarity(K what, K with)\n    {\n        Vector vectorWhat = storage.get(what);\n        if (vectorWhat == null)\n        {\n            return -1f;\n        }\n        Vector vectorWith = storage.get(with);\n        if (vectorWith == null)\n        {\n            return -1f;\n        }\n        return vectorWhat.cosineForUnitVector(vectorWith);\n    }", "language": "java", "code": "public float similarity(K what, K with)\n    {\n        Vector vectorWhat = storage.get(what);\n        if (vectorWhat == null)\n        {\n            return -1f;\n        }\n        Vector vectorWith = storage.get(with);\n        if (vectorWith == null)\n        {\n            return -1f;\n        }\n        return vectorWhat.cosineForUnitVector(vectorWith);\n    }", "code_tokens": ["public", "float", "similarity", "(", "K", "what", ",", "K", "with", ")", "{", "Vector", "vectorWhat", "=", "storage", ".", "get", "(", "what", ")", ";", "if", "(", "vectorWhat", "==", "null", ")", "{", "return", "-", "1f", ";", "}", "Vector", "vectorWith", "=", "storage", ".", "get", "(", "with", ")", ";", "if", "(", "vectorWith", "==", "null", ")", "{", "return", "-", "1f", ";", "}", "return", "vectorWhat", ".", "cosineForUnitVector", "(", "vectorWith", ")", ";", "}"], "docstring": "\u4f59\u5f26\u76f8\u4f3c\u5ea6\n\n@param what \u4e00\u4e2a\u8bcd\n@param with \u53e6\u4e00\u4e2a\u8bcd\n@return \u4f59\u5f26\u76f8\u4f3c\u5ea6", "docstring_tokens": ["\u4f59\u5f26\u76f8\u4f3c\u5ea6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L56-L69", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.nearest", "original_string": "public List<Map.Entry<K, Float>> nearest(K key, int size)\n    {\n        Vector vector = storage.get(key);\n        if (vector == null)\n        {\n            return Collections.emptyList();\n        }\n        return nearest(key, vector, size);\n    }", "language": "java", "code": "public List<Map.Entry<K, Float>> nearest(K key, int size)\n    {\n        Vector vector = storage.get(key);\n        if (vector == null)\n        {\n            return Collections.emptyList();\n        }\n        return nearest(key, vector, size);\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "nearest", "(", "K", "key", ",", "int", "size", ")", "{", "Vector", "vector", "=", "storage", ".", "get", "(", "key", ")", ";", "if", "(", "vector", "==", "null", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "return", "nearest", "(", "key", ",", "vector", ",", "size", ")", ";", "}"], "docstring": "\u67e5\u8be2\u4e0ekey\u6700\u76f8\u4f3c\u7684\u5143\u7d20\n\n@param key  \u952e\n@param size topN\u4e2a\n@return \u952e\u503c\u5bf9\u5217\u8868, \u952e\u662f\u76f8\u4f3c\u8bcd\u8bed, \u503c\u662f\u76f8\u4f3c\u5ea6, \u6309\u76f8\u4f3c\u5ea6\u964d\u5e8f\u6392\u5217", "docstring_tokens": ["\u67e5\u8be2\u4e0ekey\u6700\u76f8\u4f3c\u7684\u5143\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L78-L86", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.nearest", "original_string": "public List<Map.Entry<K, Float>> nearest(Vector vector, int size)\n    {\n        MaxHeap<Map.Entry<K, Float>> maxHeap = new MaxHeap<Map.Entry<K, Float>>(size, new Comparator<Map.Entry<K, Float>>()\n        {\n            @Override\n            public int compare(Map.Entry<K, Float> o1, Map.Entry<K, Float> o2)\n            {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n\n        for (Map.Entry<K, Vector> entry : storage.entrySet())\n        {\n            maxHeap.add(new AbstractMap.SimpleEntry<K, Float>(entry.getKey(), entry.getValue().cosineForUnitVector(vector)));\n        }\n        return maxHeap.toList();\n    }", "language": "java", "code": "public List<Map.Entry<K, Float>> nearest(Vector vector, int size)\n    {\n        MaxHeap<Map.Entry<K, Float>> maxHeap = new MaxHeap<Map.Entry<K, Float>>(size, new Comparator<Map.Entry<K, Float>>()\n        {\n            @Override\n            public int compare(Map.Entry<K, Float> o1, Map.Entry<K, Float> o2)\n            {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n\n        for (Map.Entry<K, Vector> entry : storage.entrySet())\n        {\n            maxHeap.add(new AbstractMap.SimpleEntry<K, Float>(entry.getKey(), entry.getValue().cosineForUnitVector(vector)));\n        }\n        return maxHeap.toList();\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "nearest", "(", "Vector", "vector", ",", "int", "size", ")", "{", "MaxHeap", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "maxHeap", "=", "new", "MaxHeap", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "(", "size", ",", "new", "Comparator", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "(", ")", "{", "@", "Override", "public", "int", "compare", "(", "Map", ".", "Entry", "<", "K", ",", "Float", ">", "o1", ",", "Map", ".", "Entry", "<", "K", ",", "Float", ">", "o2", ")", "{", "return", "o1", ".", "getValue", "(", ")", ".", "compareTo", "(", "o2", ".", "getValue", "(", ")", ")", ";", "}", "}", ")", ";", "for", "(", "Map", ".", "Entry", "<", "K", ",", "Vector", ">", "entry", ":", "storage", ".", "entrySet", "(", ")", ")", "{", "maxHeap", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "K", ",", "Float", ">", "(", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getValue", "(", ")", ".", "cosineForUnitVector", "(", "vector", ")", ")", ")", ";", "}", "return", "maxHeap", ".", "toList", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u4e0e\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed\n\n@param vector \u5411\u91cf\n@param size   topN\u4e2a\n@return \u952e\u503c\u5bf9\u5217\u8868, \u952e\u662f\u76f8\u4f3c\u8bcd\u8bed, \u503c\u662f\u76f8\u4f3c\u5ea6, \u6309\u76f8\u4f3c\u5ea6\u964d\u5e8f\u6392\u5217", "docstring_tokens": ["\u83b7\u53d6\u4e0e\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L125-L141", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.nearest", "original_string": "public List<Map.Entry<K, Float>> nearest(Vector vector)\n    {\n        return nearest(vector, 10);\n    }", "language": "java", "code": "public List<Map.Entry<K, Float>> nearest(Vector vector)\n    {\n        return nearest(vector, 10);\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "nearest", "(", "Vector", "vector", ")", "{", "return", "nearest", "(", "vector", ",", "10", ")", ";", "}"], "docstring": "\u83b7\u53d6\u4e0e\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed\uff08\u9ed8\u8ba410\u4e2a\uff09\n\n@param vector \u5411\u91cf\n@return \u952e\u503c\u5bf9\u5217\u8868, \u952e\u662f\u76f8\u4f3c\u8bcd\u8bed, \u503c\u662f\u76f8\u4f3c\u5ea6, \u6309\u76f8\u4f3c\u5ea6\u964d\u5e8f\u6392\u5217", "docstring_tokens": ["\u83b7\u53d6\u4e0e\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed\uff08\u9ed8\u8ba410\u4e2a\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L149-L152", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.nearest", "original_string": "public List<Map.Entry<K, Float>> nearest(K key)\n    {\n        return nearest(key, 10);\n    }", "language": "java", "code": "public List<Map.Entry<K, Float>> nearest(K key)\n    {\n        return nearest(key, 10);\n    }", "code_tokens": ["public", "List", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "nearest", "(", "K", "key", ")", "{", "return", "nearest", "(", "key", ",", "10", ")", ";", "}"], "docstring": "\u67e5\u8be2\u4e0e\u8bcd\u8bed\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed\n\n@param key \u8bcd\u8bed\n@return \u952e\u503c\u5bf9\u5217\u8868, \u952e\u662f\u76f8\u4f3c\u8bcd\u8bed, \u503c\u662f\u76f8\u4f3c\u5ea6, \u6309\u76f8\u4f3c\u5ea6\u964d\u5e8f\u6392\u5217", "docstring_tokens": ["\u67e5\u8be2\u4e0e\u8bcd\u8bed\u6700\u76f8\u4f3c\u7684\u8bcd\u8bed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L160-L163", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.queryNearest", "original_string": "final List<Map.Entry<K, Float>> queryNearest(String query, int size)\n    {\n        if (query == null || query.length() == 0)\n        {\n            return Collections.emptyList();\n        }\n        try\n        {\n            return nearest(query(query), size);\n        }\n        catch (Exception e)\n        {\n            return Collections.emptyList();\n        }\n    }", "language": "java", "code": "final List<Map.Entry<K, Float>> queryNearest(String query, int size)\n    {\n        if (query == null || query.length() == 0)\n        {\n            return Collections.emptyList();\n        }\n        try\n        {\n            return nearest(query(query), size);\n        }\n        catch (Exception e)\n        {\n            return Collections.emptyList();\n        }\n    }", "code_tokens": ["final", "List", "<", "Map", ".", "Entry", "<", "K", ",", "Float", ">", ">", "queryNearest", "(", "String", "query", ",", "int", "size", ")", "{", "if", "(", "query", "==", "null", "||", "query", ".", "length", "(", ")", "==", "0", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "try", "{", "return", "nearest", "(", "query", "(", "query", ")", ",", "size", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "return", "Collections", ".", "emptyList", "(", ")", ";", "}", "}"], "docstring": "\u6267\u884c\u67e5\u8be2\u6700\u76f8\u4f3c\u7684\u5bf9\u8c61\uff08\u5b50\u7c7b\u901a\u8fc7query\u65b9\u6cd5\u51b3\u5b9a\u5982\u4f55\u89e3\u6790query\uff0c\u7136\u540e\u901a\u8fc7\u6b64\u65b9\u6cd5\u6267\u884c\u67e5\u8be2\uff09\n\n@param query \u67e5\u8be2\u8bed\u53e5\uff08\u6216\u8005\u8bf4\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5bb9\uff09\n@param size  \u9700\u8981\u8fd4\u56de\u524d\u591a\u5c11\u4e2a\u5bf9\u8c61\n@return", "docstring_tokens": ["\u6267\u884c\u67e5\u8be2\u6700\u76f8\u4f3c\u7684\u5bf9\u8c61\uff08\u5b50\u7c7b\u901a\u8fc7query\u65b9\u6cd5\u51b3\u5b9a\u5982\u4f55\u89e3\u6790query\uff0c\u7136\u540e\u901a\u8fc7\u6b64\u65b9\u6cd5\u6267\u884c\u67e5\u8be2\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L172-L186", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java", "func_name": "AbstractVectorModel.dimension", "original_string": "public int dimension()\n    {\n        if (storage == null || storage.isEmpty())\n        {\n            return 0;\n        }\n        return storage.values().iterator().next().size();\n    }", "language": "java", "code": "public int dimension()\n    {\n        if (storage == null || storage.isEmpty())\n        {\n            return 0;\n        }\n        return storage.values().iterator().next().size();\n    }", "code_tokens": ["public", "int", "dimension", "(", ")", "{", "if", "(", "storage", "==", "null", "||", "storage", ".", "isEmpty", "(", ")", ")", "{", "return", "0", ";", "}", "return", "storage", ".", "values", "(", ")", ".", "iterator", "(", ")", ".", "next", "(", ")", ".", "size", "(", ")", ";", "}"], "docstring": "\u6a21\u578b\u4e2d\u7684\u8bcd\u5411\u91cf\u7ef4\u5ea6\n\n@return", "docstring_tokens": ["\u6a21\u578b\u4e2d\u7684\u8bcd\u5411\u91cf\u7ef4\u5ea6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word2vec/AbstractVectorModel.java#L211-L218", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.predict", "original_string": "public final List<Pair<String, Double>> predict(String[] context)\n    {\n        List<Pair<String, Double>> result = new ArrayList<Pair<String, Double>>(outcomeNames.length);\n        double[] p = eval(context);\n        for (int i = 0; i < p.length; ++i)\n        {\n            result.add(new Pair<String, Double>(outcomeNames[i], p[i]));\n        }\n        return result;\n    }", "language": "java", "code": "public final List<Pair<String, Double>> predict(String[] context)\n    {\n        List<Pair<String, Double>> result = new ArrayList<Pair<String, Double>>(outcomeNames.length);\n        double[] p = eval(context);\n        for (int i = 0; i < p.length; ++i)\n        {\n            result.add(new Pair<String, Double>(outcomeNames[i], p[i]));\n        }\n        return result;\n    }", "code_tokens": ["public", "final", "List", "<", "Pair", "<", "String", ",", "Double", ">", ">", "predict", "(", "String", "[", "]", "context", ")", "{", "List", "<", "Pair", "<", "String", ",", "Double", ">", ">", "result", "=", "new", "ArrayList", "<", "Pair", "<", "String", ",", "Double", ">", ">", "(", "outcomeNames", ".", "length", ")", ";", "double", "[", "]", "p", "=", "eval", "(", "context", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "p", ".", "length", ";", "++", "i", ")", "{", "result", ".", "add", "(", "new", "Pair", "<", "String", ",", "Double", ">", "(", "outcomeNames", "[", "i", "]", ",", "p", "[", "i", "]", ")", ")", ";", "}", "return", "result", ";", "}"], "docstring": "\u9884\u6d4b\u5206\u5e03\n\n@param context\n@return", "docstring_tokens": ["\u9884\u6d4b\u5206\u5e03"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L76-L85", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.predictBest", "original_string": "public final Pair<String, Double> predictBest(String[] context)\n    {\n        List<Pair<String, Double>> resultList = predict(context);\n        double bestP = -1.0;\n        Pair<String, Double> bestPair = null;\n        for (Pair<String, Double> pair : resultList)\n        {\n            if (pair.getSecond() > bestP)\n            {\n                bestP = pair.getSecond();\n                bestPair = pair;\n            }\n        }\n\n        return bestPair;\n    }", "language": "java", "code": "public final Pair<String, Double> predictBest(String[] context)\n    {\n        List<Pair<String, Double>> resultList = predict(context);\n        double bestP = -1.0;\n        Pair<String, Double> bestPair = null;\n        for (Pair<String, Double> pair : resultList)\n        {\n            if (pair.getSecond() > bestP)\n            {\n                bestP = pair.getSecond();\n                bestPair = pair;\n            }\n        }\n\n        return bestPair;\n    }", "code_tokens": ["public", "final", "Pair", "<", "String", ",", "Double", ">", "predictBest", "(", "String", "[", "]", "context", ")", "{", "List", "<", "Pair", "<", "String", ",", "Double", ">", ">", "resultList", "=", "predict", "(", "context", ")", ";", "double", "bestP", "=", "-", "1.0", ";", "Pair", "<", "String", ",", "Double", ">", "bestPair", "=", "null", ";", "for", "(", "Pair", "<", "String", ",", "Double", ">", "pair", ":", "resultList", ")", "{", "if", "(", "pair", ".", "getSecond", "(", ")", ">", "bestP", ")", "{", "bestP", "=", "pair", ".", "getSecond", "(", ")", ";", "bestPair", "=", "pair", ";", "}", "}", "return", "bestPair", ";", "}"], "docstring": "\u9884\u6d4b\u6982\u7387\u6700\u9ad8\u7684\u5206\u7c7b\n\n@param context\n@return", "docstring_tokens": ["\u9884\u6d4b\u6982\u7387\u6700\u9ad8\u7684\u5206\u7c7b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L93-L108", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.predict", "original_string": "public final List<Pair<String, Double>> predict(Collection<String> context)\n    {\n        return predict(context.toArray(new String[0]));\n    }", "language": "java", "code": "public final List<Pair<String, Double>> predict(Collection<String> context)\n    {\n        return predict(context.toArray(new String[0]));\n    }", "code_tokens": ["public", "final", "List", "<", "Pair", "<", "String", ",", "Double", ">", ">", "predict", "(", "Collection", "<", "String", ">", "context", ")", "{", "return", "predict", "(", "context", ".", "toArray", "(", "new", "String", "[", "0", "]", ")", ")", ";", "}"], "docstring": "\u9884\u6d4b\u5206\u5e03\n\n@param context\n@return", "docstring_tokens": ["\u9884\u6d4b\u5206\u5e03"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L116-L119", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.eval", "original_string": "public final double[] eval(String[] context, double[] outsums)\n    {\n        assert context != null;\n        int[] scontexts = new int[context.length];\n        for (int i = 0; i < context.length; i++)\n        {\n            Integer ci = pmap.get(context[i]);\n            scontexts[i] = ci == null ? -1 : ci;\n        }\n        prior.logPrior(outsums);\n        return eval(scontexts, outsums, evalParams);\n    }", "language": "java", "code": "public final double[] eval(String[] context, double[] outsums)\n    {\n        assert context != null;\n        int[] scontexts = new int[context.length];\n        for (int i = 0; i < context.length; i++)\n        {\n            Integer ci = pmap.get(context[i]);\n            scontexts[i] = ci == null ? -1 : ci;\n        }\n        prior.logPrior(outsums);\n        return eval(scontexts, outsums, evalParams);\n    }", "code_tokens": ["public", "final", "double", "[", "]", "eval", "(", "String", "[", "]", "context", ",", "double", "[", "]", "outsums", ")", "{", "assert", "context", "!=", "null", ";", "int", "[", "]", "scontexts", "=", "new", "int", "[", "context", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "context", ".", "length", ";", "i", "++", ")", "{", "Integer", "ci", "=", "pmap", ".", "get", "(", "context", "[", "i", "]", ")", ";", "scontexts", "[", "i", "]", "=", "ci", "==", "null", "?", "-", "1", ":", "ci", ";", "}", "prior", ".", "logPrior", "(", "outsums", ")", ";", "return", "eval", "(", "scontexts", ",", "outsums", ",", "evalParams", ")", ";", "}"], "docstring": "\u9884\u6d4b\u5206\u5e03\n\n@param context \u73af\u5883\n@param outsums \u5148\u9a8c\u5206\u5e03\n@return \u6982\u7387\u6570\u7ec4", "docstring_tokens": ["\u9884\u6d4b\u5206\u5e03"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L128-L139", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.eval", "original_string": "public static double[] eval(int[] context, double[] prior, EvalParameters model)\n    {\n        Context[] params = model.getParams();\n        int numfeats[] = new int[model.getNumOutcomes()];\n        int[] activeOutcomes;\n        double[] activeParameters;\n        double value = 1;\n        for (int ci = 0; ci < context.length; ci++)\n        {\n            if (context[ci] >= 0)\n            {\n                Context predParams = params[context[ci]];\n                activeOutcomes = predParams.getOutcomes();\n                activeParameters = predParams.getParameters();\n                for (int ai = 0; ai < activeOutcomes.length; ai++)\n                {\n                    int oid = activeOutcomes[ai];\n                    numfeats[oid]++;\n                    prior[oid] += activeParameters[ai] * value;\n                }\n            }\n        }\n\n        double normal = 0.0;\n        for (int oid = 0; oid < model.getNumOutcomes(); oid++)\n        {\n            if (model.getCorrectionParam() != 0)\n            {\n                prior[oid] = Math\n                        .exp(prior[oid]\n                                     * model.getConstantInverse()\n                                     + ((1.0 - ((double) numfeats[oid] / model\n                                .getCorrectionConstant())) * model.getCorrectionParam()));\n            }\n            else\n            {\n                prior[oid] = Math.exp(prior[oid] * model.getConstantInverse());\n            }\n            normal += prior[oid];\n        }\n\n        for (int oid = 0; oid < model.getNumOutcomes(); oid++)\n        {\n            prior[oid] /= normal;\n        }\n        return prior;\n    }", "language": "java", "code": "public static double[] eval(int[] context, double[] prior, EvalParameters model)\n    {\n        Context[] params = model.getParams();\n        int numfeats[] = new int[model.getNumOutcomes()];\n        int[] activeOutcomes;\n        double[] activeParameters;\n        double value = 1;\n        for (int ci = 0; ci < context.length; ci++)\n        {\n            if (context[ci] >= 0)\n            {\n                Context predParams = params[context[ci]];\n                activeOutcomes = predParams.getOutcomes();\n                activeParameters = predParams.getParameters();\n                for (int ai = 0; ai < activeOutcomes.length; ai++)\n                {\n                    int oid = activeOutcomes[ai];\n                    numfeats[oid]++;\n                    prior[oid] += activeParameters[ai] * value;\n                }\n            }\n        }\n\n        double normal = 0.0;\n        for (int oid = 0; oid < model.getNumOutcomes(); oid++)\n        {\n            if (model.getCorrectionParam() != 0)\n            {\n                prior[oid] = Math\n                        .exp(prior[oid]\n                                     * model.getConstantInverse()\n                                     + ((1.0 - ((double) numfeats[oid] / model\n                                .getCorrectionConstant())) * model.getCorrectionParam()));\n            }\n            else\n            {\n                prior[oid] = Math.exp(prior[oid] * model.getConstantInverse());\n            }\n            normal += prior[oid];\n        }\n\n        for (int oid = 0; oid < model.getNumOutcomes(); oid++)\n        {\n            prior[oid] /= normal;\n        }\n        return prior;\n    }", "code_tokens": ["public", "static", "double", "[", "]", "eval", "(", "int", "[", "]", "context", ",", "double", "[", "]", "prior", ",", "EvalParameters", "model", ")", "{", "Context", "[", "]", "params", "=", "model", ".", "getParams", "(", ")", ";", "int", "numfeats", "[", "]", "=", "new", "int", "[", "model", ".", "getNumOutcomes", "(", ")", "]", ";", "int", "[", "]", "activeOutcomes", ";", "double", "[", "]", "activeParameters", ";", "double", "value", "=", "1", ";", "for", "(", "int", "ci", "=", "0", ";", "ci", "<", "context", ".", "length", ";", "ci", "++", ")", "{", "if", "(", "context", "[", "ci", "]", ">=", "0", ")", "{", "Context", "predParams", "=", "params", "[", "context", "[", "ci", "]", "]", ";", "activeOutcomes", "=", "predParams", ".", "getOutcomes", "(", ")", ";", "activeParameters", "=", "predParams", ".", "getParameters", "(", ")", ";", "for", "(", "int", "ai", "=", "0", ";", "ai", "<", "activeOutcomes", ".", "length", ";", "ai", "++", ")", "{", "int", "oid", "=", "activeOutcomes", "[", "ai", "]", ";", "numfeats", "[", "oid", "]", "++", ";", "prior", "[", "oid", "]", "+=", "activeParameters", "[", "ai", "]", "*", "value", ";", "}", "}", "}", "double", "normal", "=", "0.0", ";", "for", "(", "int", "oid", "=", "0", ";", "oid", "<", "model", ".", "getNumOutcomes", "(", ")", ";", "oid", "++", ")", "{", "if", "(", "model", ".", "getCorrectionParam", "(", ")", "!=", "0", ")", "{", "prior", "[", "oid", "]", "=", "Math", ".", "exp", "(", "prior", "[", "oid", "]", "*", "model", ".", "getConstantInverse", "(", ")", "+", "(", "(", "1.0", "-", "(", "(", "double", ")", "numfeats", "[", "oid", "]", "/", "model", ".", "getCorrectionConstant", "(", ")", ")", ")", "*", "model", ".", "getCorrectionParam", "(", ")", ")", ")", ";", "}", "else", "{", "prior", "[", "oid", "]", "=", "Math", ".", "exp", "(", "prior", "[", "oid", "]", "*", "model", ".", "getConstantInverse", "(", ")", ")", ";", "}", "normal", "+=", "prior", "[", "oid", "]", ";", "}", "for", "(", "int", "oid", "=", "0", ";", "oid", "<", "model", ".", "getNumOutcomes", "(", ")", ";", "oid", "++", ")", "{", "prior", "[", "oid", "]", "/=", "normal", ";", "}", "return", "prior", ";", "}"], "docstring": "\u9884\u6d4b\n@param context \u73af\u5883\n@param prior \u5148\u9a8c\u6982\u7387\n@param model \u7279\u5f81\u51fd\u6570\n@return", "docstring_tokens": ["\u9884\u6d4b"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L148-L194", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.create", "original_string": "public static MaxEntModel create(String path)\n    {\n        MaxEntModel m = new MaxEntModel();\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            DataOutputStream out = new DataOutputStream(IOUtil.newOutputStream(path + Predefine.BIN_EXT));\n            br.readLine();  // type\n            m.correctionConstant = Integer.parseInt(br.readLine());  // correctionConstant\n            out.writeInt(m.correctionConstant);\n            m.correctionParam = Double.parseDouble(br.readLine());  // getCorrectionParameter\n            out.writeDouble(m.correctionParam);\n            // label\n            int numOutcomes = Integer.parseInt(br.readLine());\n            out.writeInt(numOutcomes);\n            String[] outcomeLabels = new String[numOutcomes];\n            m.outcomeNames = outcomeLabels;\n            for (int i = 0; i < numOutcomes; i++)\n            {\n                outcomeLabels[i] = br.readLine();\n                TextUtility.writeString(outcomeLabels[i], out);\n            }\n            // pattern\n            int numOCTypes = Integer.parseInt(br.readLine());\n            out.writeInt(numOCTypes);\n            int[][] outcomePatterns = new int[numOCTypes][];\n            for (int i = 0; i < numOCTypes; i++)\n            {\n                StringTokenizer tok = new StringTokenizer(br.readLine(), \" \");\n                int[] infoInts = new int[tok.countTokens()];\n                out.writeInt(infoInts.length);\n                for (int j = 0; tok.hasMoreTokens(); j++)\n                {\n                    infoInts[j] = Integer.parseInt(tok.nextToken());\n                    out.writeInt(infoInts[j]);\n                }\n                outcomePatterns[i] = infoInts;\n            }\n            // feature\n            int NUM_PREDS = Integer.parseInt(br.readLine());\n            out.writeInt(NUM_PREDS);\n            String[] predLabels = new String[NUM_PREDS];\n            m.pmap = new DoubleArrayTrie<Integer>();\n            TreeMap<String, Integer> tmpMap = new TreeMap<String, Integer>();\n            for (int i = 0; i < NUM_PREDS; i++)\n            {\n                predLabels[i] = br.readLine();\n                assert !tmpMap.containsKey(predLabels[i]) : \"\u91cd\u590d\u7684\u952e\uff1a \" + predLabels[i] + \" \u8bf7\u4f7f\u7528 -Dfile.encoding=UTF-8 \u8bad\u7ec3\";\n                TextUtility.writeString(predLabels[i], out);\n                tmpMap.put(predLabels[i], i);\n            }\n            m.pmap.build(tmpMap);\n            for (Map.Entry<String, Integer> entry : tmpMap.entrySet())\n            {\n                out.writeInt(entry.getValue());\n            }\n            m.pmap.save(out);\n            // params\n            Context[] params = new Context[NUM_PREDS];\n            int pid = 0;\n            for (int i = 0; i < outcomePatterns.length; i++)\n            {\n                int[] outcomePattern = new int[outcomePatterns[i].length - 1];\n                for (int k = 1; k < outcomePatterns[i].length; k++)\n                {\n                    outcomePattern[k - 1] = outcomePatterns[i][k];\n                }\n                for (int j = 0; j < outcomePatterns[i][0]; j++)\n                {\n                    double[] contextParameters = new double[outcomePatterns[i].length - 1];\n                    for (int k = 1; k < outcomePatterns[i].length; k++)\n                    {\n                        contextParameters[k - 1] = Double.parseDouble(br.readLine());\n                        out.writeDouble(contextParameters[k - 1]);\n                    }\n                    params[pid] = new Context(outcomePattern, contextParameters);\n                    pid++;\n                }\n            }\n            // prior\n            m.prior = new UniformPrior();\n            m.prior.setLabels(outcomeLabels);\n            // eval\n            m.evalParams = new EvalParameters(params, m.correctionParam, m.correctionConstant, outcomeLabels.length);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.severe(\"\u4ece\" + path + \"\u52a0\u8f7d\u6700\u5927\u71b5\u6a21\u578b\u5931\u8d25\uff01\" + TextUtility.exceptionToString(e));\n            return null;\n        }\n        return m;\n    }", "language": "java", "code": "public static MaxEntModel create(String path)\n    {\n        MaxEntModel m = new MaxEntModel();\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            DataOutputStream out = new DataOutputStream(IOUtil.newOutputStream(path + Predefine.BIN_EXT));\n            br.readLine();  // type\n            m.correctionConstant = Integer.parseInt(br.readLine());  // correctionConstant\n            out.writeInt(m.correctionConstant);\n            m.correctionParam = Double.parseDouble(br.readLine());  // getCorrectionParameter\n            out.writeDouble(m.correctionParam);\n            // label\n            int numOutcomes = Integer.parseInt(br.readLine());\n            out.writeInt(numOutcomes);\n            String[] outcomeLabels = new String[numOutcomes];\n            m.outcomeNames = outcomeLabels;\n            for (int i = 0; i < numOutcomes; i++)\n            {\n                outcomeLabels[i] = br.readLine();\n                TextUtility.writeString(outcomeLabels[i], out);\n            }\n            // pattern\n            int numOCTypes = Integer.parseInt(br.readLine());\n            out.writeInt(numOCTypes);\n            int[][] outcomePatterns = new int[numOCTypes][];\n            for (int i = 0; i < numOCTypes; i++)\n            {\n                StringTokenizer tok = new StringTokenizer(br.readLine(), \" \");\n                int[] infoInts = new int[tok.countTokens()];\n                out.writeInt(infoInts.length);\n                for (int j = 0; tok.hasMoreTokens(); j++)\n                {\n                    infoInts[j] = Integer.parseInt(tok.nextToken());\n                    out.writeInt(infoInts[j]);\n                }\n                outcomePatterns[i] = infoInts;\n            }\n            // feature\n            int NUM_PREDS = Integer.parseInt(br.readLine());\n            out.writeInt(NUM_PREDS);\n            String[] predLabels = new String[NUM_PREDS];\n            m.pmap = new DoubleArrayTrie<Integer>();\n            TreeMap<String, Integer> tmpMap = new TreeMap<String, Integer>();\n            for (int i = 0; i < NUM_PREDS; i++)\n            {\n                predLabels[i] = br.readLine();\n                assert !tmpMap.containsKey(predLabels[i]) : \"\u91cd\u590d\u7684\u952e\uff1a \" + predLabels[i] + \" \u8bf7\u4f7f\u7528 -Dfile.encoding=UTF-8 \u8bad\u7ec3\";\n                TextUtility.writeString(predLabels[i], out);\n                tmpMap.put(predLabels[i], i);\n            }\n            m.pmap.build(tmpMap);\n            for (Map.Entry<String, Integer> entry : tmpMap.entrySet())\n            {\n                out.writeInt(entry.getValue());\n            }\n            m.pmap.save(out);\n            // params\n            Context[] params = new Context[NUM_PREDS];\n            int pid = 0;\n            for (int i = 0; i < outcomePatterns.length; i++)\n            {\n                int[] outcomePattern = new int[outcomePatterns[i].length - 1];\n                for (int k = 1; k < outcomePatterns[i].length; k++)\n                {\n                    outcomePattern[k - 1] = outcomePatterns[i][k];\n                }\n                for (int j = 0; j < outcomePatterns[i][0]; j++)\n                {\n                    double[] contextParameters = new double[outcomePatterns[i].length - 1];\n                    for (int k = 1; k < outcomePatterns[i].length; k++)\n                    {\n                        contextParameters[k - 1] = Double.parseDouble(br.readLine());\n                        out.writeDouble(contextParameters[k - 1]);\n                    }\n                    params[pid] = new Context(outcomePattern, contextParameters);\n                    pid++;\n                }\n            }\n            // prior\n            m.prior = new UniformPrior();\n            m.prior.setLabels(outcomeLabels);\n            // eval\n            m.evalParams = new EvalParameters(params, m.correctionParam, m.correctionConstant, outcomeLabels.length);\n            out.close();\n        }\n        catch (Exception e)\n        {\n            logger.severe(\"\u4ece\" + path + \"\u52a0\u8f7d\u6700\u5927\u71b5\u6a21\u578b\u5931\u8d25\uff01\" + TextUtility.exceptionToString(e));\n            return null;\n        }\n        return m;\n    }", "code_tokens": ["public", "static", "MaxEntModel", "create", "(", "String", "path", ")", "{", "MaxEntModel", "m", "=", "new", "MaxEntModel", "(", ")", ";", "try", "{", "BufferedReader", "br", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "path", "+", "Predefine", ".", "BIN_EXT", ")", ")", ";", "br", ".", "readLine", "(", ")", ";", "// type", "m", ".", "correctionConstant", "=", "Integer", ".", "parseInt", "(", "br", ".", "readLine", "(", ")", ")", ";", "// correctionConstant", "out", ".", "writeInt", "(", "m", ".", "correctionConstant", ")", ";", "m", ".", "correctionParam", "=", "Double", ".", "parseDouble", "(", "br", ".", "readLine", "(", ")", ")", ";", "// getCorrectionParameter", "out", ".", "writeDouble", "(", "m", ".", "correctionParam", ")", ";", "// label", "int", "numOutcomes", "=", "Integer", ".", "parseInt", "(", "br", ".", "readLine", "(", ")", ")", ";", "out", ".", "writeInt", "(", "numOutcomes", ")", ";", "String", "[", "]", "outcomeLabels", "=", "new", "String", "[", "numOutcomes", "]", ";", "m", ".", "outcomeNames", "=", "outcomeLabels", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numOutcomes", ";", "i", "++", ")", "{", "outcomeLabels", "[", "i", "]", "=", "br", ".", "readLine", "(", ")", ";", "TextUtility", ".", "writeString", "(", "outcomeLabels", "[", "i", "]", ",", "out", ")", ";", "}", "// pattern", "int", "numOCTypes", "=", "Integer", ".", "parseInt", "(", "br", ".", "readLine", "(", ")", ")", ";", "out", ".", "writeInt", "(", "numOCTypes", ")", ";", "int", "[", "]", "[", "]", "outcomePatterns", "=", "new", "int", "[", "numOCTypes", "]", "[", "", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numOCTypes", ";", "i", "++", ")", "{", "StringTokenizer", "tok", "=", "new", "StringTokenizer", "(", "br", ".", "readLine", "(", ")", ",", "\" \"", ")", ";", "int", "[", "]", "infoInts", "=", "new", "int", "[", "tok", ".", "countTokens", "(", ")", "]", ";", "out", ".", "writeInt", "(", "infoInts", ".", "length", ")", ";", "for", "(", "int", "j", "=", "0", ";", "tok", ".", "hasMoreTokens", "(", ")", ";", "j", "++", ")", "{", "infoInts", "[", "j", "]", "=", "Integer", ".", "parseInt", "(", "tok", ".", "nextToken", "(", ")", ")", ";", "out", ".", "writeInt", "(", "infoInts", "[", "j", "]", ")", ";", "}", "outcomePatterns", "[", "i", "]", "=", "infoInts", ";", "}", "// feature", "int", "NUM_PREDS", "=", "Integer", ".", "parseInt", "(", "br", ".", "readLine", "(", ")", ")", ";", "out", ".", "writeInt", "(", "NUM_PREDS", ")", ";", "String", "[", "]", "predLabels", "=", "new", "String", "[", "NUM_PREDS", "]", ";", "m", ".", "pmap", "=", "new", "DoubleArrayTrie", "<", "Integer", ">", "(", ")", ";", "TreeMap", "<", "String", ",", "Integer", ">", "tmpMap", "=", "new", "TreeMap", "<", "String", ",", "Integer", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "NUM_PREDS", ";", "i", "++", ")", "{", "predLabels", "[", "i", "]", "=", "br", ".", "readLine", "(", ")", ";", "assert", "!", "tmpMap", ".", "containsKey", "(", "predLabels", "[", "i", "]", ")", ":", "\"\u91cd\u590d\u7684\u952e\uff1a \" + predLab", "l", "[i] + \" \u8bf7\u4f7f", "\u7528", " ", "-", "f", "le.encoding=UTF-8 \u8bad\u7ec3\";", "", "TextUtility", ".", "writeString", "(", "predLabels", "[", "i", "]", ",", "out", ")", ";", "tmpMap", ".", "put", "(", "predLabels", "[", "i", "]", ",", "i", ")", ";", "}", "m", ".", "pmap", ".", "build", "(", "tmpMap", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "tmpMap", ".", "entrySet", "(", ")", ")", "{", "out", ".", "writeInt", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "m", ".", "pmap", ".", "save", "(", "out", ")", ";", "// params", "Context", "[", "]", "params", "=", "new", "Context", "[", "NUM_PREDS", "]", ";", "int", "pid", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "outcomePatterns", ".", "length", ";", "i", "++", ")", "{", "int", "[", "]", "outcomePattern", "=", "new", "int", "[", "outcomePatterns", "[", "i", "]", ".", "length", "-", "1", "]", ";", "for", "(", "int", "k", "=", "1", ";", "k", "<", "outcomePatterns", "[", "i", "]", ".", "length", ";", "k", "++", ")", "{", "outcomePattern", "[", "k", "-", "1", "]", "=", "outcomePatterns", "[", "i", "]", "[", "k", "]", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "outcomePatterns", "[", "i", "]", "[", "0", "]", ";", "j", "++", ")", "{", "double", "[", "]", "contextParameters", "=", "new", "double", "[", "outcomePatterns", "[", "i", "]", ".", "length", "-", "1", "]", ";", "for", "(", "int", "k", "=", "1", ";", "k", "<", "outcomePatterns", "[", "i", "]", ".", "length", ";", "k", "++", ")", "{", "contextParameters", "[", "k", "-", "1", "]", "=", "Double", ".", "parseDouble", "(", "br", ".", "readLine", "(", ")", ")", ";", "out", ".", "writeDouble", "(", "contextParameters", "[", "k", "-", "1", "]", ")", ";", "}", "params", "[", "pid", "]", "=", "new", "Context", "(", "outcomePattern", ",", "contextParameters", ")", ";", "pid", "++", ";", "}", "}", "// prior", "m", ".", "prior", "=", "new", "UniformPrior", "(", ")", ";", "m", ".", "prior", ".", "setLabels", "(", "outcomeLabels", ")", ";", "// eval", "m", ".", "evalParams", "=", "new", "EvalParameters", "(", "params", ",", "m", ".", "correctionParam", ",", "m", ".", "correctionConstant", ",", "outcomeLabels", ".", "length", ")", ";", "out", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "severe", "(", "\"\u4ece\" +", "p", "th +", "\"", "\u8f7d\u6700\u5927\u71b5\u6a21\u578b\u5931\u8d25\uff01\" + TextUtility.excepti", "n", "oString(e))", ";", "", "", "", "", "", "", "return", "null", ";", "}", "return", "m", ";", "}"], "docstring": "\u4ece\u6587\u4ef6\u52a0\u8f7d\uff0c\u540c\u65f6\u7f13\u5b58\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\n@param path\n@return", "docstring_tokens": ["\u4ece\u6587\u4ef6\u52a0\u8f7d\uff0c\u540c\u65f6\u7f13\u5b58\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L201-L293", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.create", "original_string": "public static MaxEntModel create(ByteArray byteArray)\n    {\n        MaxEntModel m = new MaxEntModel();\n        m.correctionConstant = byteArray.nextInt();  // correctionConstant\n        m.correctionParam = byteArray.nextDouble();  // getCorrectionParameter\n        // label\n        int numOutcomes = byteArray.nextInt();\n        String[] outcomeLabels = new String[numOutcomes];\n        m.outcomeNames = outcomeLabels;\n        for (int i = 0; i < numOutcomes; i++) outcomeLabels[i] = byteArray.nextString();\n        // pattern\n        int numOCTypes = byteArray.nextInt();\n        int[][] outcomePatterns = new int[numOCTypes][];\n        for (int i = 0; i < numOCTypes; i++)\n        {\n            int length = byteArray.nextInt();\n            int[] infoInts = new int[length];\n            for (int j = 0; j < length; j++)\n            {\n                infoInts[j] = byteArray.nextInt();\n            }\n            outcomePatterns[i] = infoInts;\n        }\n        // feature\n        int NUM_PREDS = byteArray.nextInt();\n        String[] predLabels = new String[NUM_PREDS];\n        m.pmap = new DoubleArrayTrie<Integer>();\n        for (int i = 0; i < NUM_PREDS; i++)\n        {\n            predLabels[i] = byteArray.nextString();\n        }\n        Integer[] v = new Integer[NUM_PREDS];\n        for (int i = 0; i < v.length; i++)\n        {\n            v[i] = byteArray.nextInt();\n        }\n        m.pmap.load(byteArray, v);\n        // params\n        Context[] params = new Context[NUM_PREDS];\n        int pid = 0;\n        for (int i = 0; i < outcomePatterns.length; i++)\n        {\n            int[] outcomePattern = new int[outcomePatterns[i].length - 1];\n            for (int k = 1; k < outcomePatterns[i].length; k++)\n            {\n                outcomePattern[k - 1] = outcomePatterns[i][k];\n            }\n            for (int j = 0; j < outcomePatterns[i][0]; j++)\n            {\n                double[] contextParameters = new double[outcomePatterns[i].length - 1];\n                for (int k = 1; k < outcomePatterns[i].length; k++)\n                {\n                    contextParameters[k - 1] = byteArray.nextDouble();\n                }\n                params[pid] = new Context(outcomePattern, contextParameters);\n                pid++;\n            }\n        }\n        // prior\n        m.prior = new UniformPrior();\n        m.prior.setLabels(outcomeLabels);\n        // eval\n        m.evalParams = new EvalParameters(params, m.correctionParam, m.correctionConstant, outcomeLabels.length);\n        return m;\n    }", "language": "java", "code": "public static MaxEntModel create(ByteArray byteArray)\n    {\n        MaxEntModel m = new MaxEntModel();\n        m.correctionConstant = byteArray.nextInt();  // correctionConstant\n        m.correctionParam = byteArray.nextDouble();  // getCorrectionParameter\n        // label\n        int numOutcomes = byteArray.nextInt();\n        String[] outcomeLabels = new String[numOutcomes];\n        m.outcomeNames = outcomeLabels;\n        for (int i = 0; i < numOutcomes; i++) outcomeLabels[i] = byteArray.nextString();\n        // pattern\n        int numOCTypes = byteArray.nextInt();\n        int[][] outcomePatterns = new int[numOCTypes][];\n        for (int i = 0; i < numOCTypes; i++)\n        {\n            int length = byteArray.nextInt();\n            int[] infoInts = new int[length];\n            for (int j = 0; j < length; j++)\n            {\n                infoInts[j] = byteArray.nextInt();\n            }\n            outcomePatterns[i] = infoInts;\n        }\n        // feature\n        int NUM_PREDS = byteArray.nextInt();\n        String[] predLabels = new String[NUM_PREDS];\n        m.pmap = new DoubleArrayTrie<Integer>();\n        for (int i = 0; i < NUM_PREDS; i++)\n        {\n            predLabels[i] = byteArray.nextString();\n        }\n        Integer[] v = new Integer[NUM_PREDS];\n        for (int i = 0; i < v.length; i++)\n        {\n            v[i] = byteArray.nextInt();\n        }\n        m.pmap.load(byteArray, v);\n        // params\n        Context[] params = new Context[NUM_PREDS];\n        int pid = 0;\n        for (int i = 0; i < outcomePatterns.length; i++)\n        {\n            int[] outcomePattern = new int[outcomePatterns[i].length - 1];\n            for (int k = 1; k < outcomePatterns[i].length; k++)\n            {\n                outcomePattern[k - 1] = outcomePatterns[i][k];\n            }\n            for (int j = 0; j < outcomePatterns[i][0]; j++)\n            {\n                double[] contextParameters = new double[outcomePatterns[i].length - 1];\n                for (int k = 1; k < outcomePatterns[i].length; k++)\n                {\n                    contextParameters[k - 1] = byteArray.nextDouble();\n                }\n                params[pid] = new Context(outcomePattern, contextParameters);\n                pid++;\n            }\n        }\n        // prior\n        m.prior = new UniformPrior();\n        m.prior.setLabels(outcomeLabels);\n        // eval\n        m.evalParams = new EvalParameters(params, m.correctionParam, m.correctionConstant, outcomeLabels.length);\n        return m;\n    }", "code_tokens": ["public", "static", "MaxEntModel", "create", "(", "ByteArray", "byteArray", ")", "{", "MaxEntModel", "m", "=", "new", "MaxEntModel", "(", ")", ";", "m", ".", "correctionConstant", "=", "byteArray", ".", "nextInt", "(", ")", ";", "// correctionConstant", "m", ".", "correctionParam", "=", "byteArray", ".", "nextDouble", "(", ")", ";", "// getCorrectionParameter", "// label", "int", "numOutcomes", "=", "byteArray", ".", "nextInt", "(", ")", ";", "String", "[", "]", "outcomeLabels", "=", "new", "String", "[", "numOutcomes", "]", ";", "m", ".", "outcomeNames", "=", "outcomeLabels", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numOutcomes", ";", "i", "++", ")", "outcomeLabels", "[", "i", "]", "=", "byteArray", ".", "nextString", "(", ")", ";", "// pattern", "int", "numOCTypes", "=", "byteArray", ".", "nextInt", "(", ")", ";", "int", "[", "]", "[", "]", "outcomePatterns", "=", "new", "int", "[", "numOCTypes", "]", "[", "", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "numOCTypes", ";", "i", "++", ")", "{", "int", "length", "=", "byteArray", ".", "nextInt", "(", ")", ";", "int", "[", "]", "infoInts", "=", "new", "int", "[", "length", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "length", ";", "j", "++", ")", "{", "infoInts", "[", "j", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "outcomePatterns", "[", "i", "]", "=", "infoInts", ";", "}", "// feature", "int", "NUM_PREDS", "=", "byteArray", ".", "nextInt", "(", ")", ";", "String", "[", "]", "predLabels", "=", "new", "String", "[", "NUM_PREDS", "]", ";", "m", ".", "pmap", "=", "new", "DoubleArrayTrie", "<", "Integer", ">", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "NUM_PREDS", ";", "i", "++", ")", "{", "predLabels", "[", "i", "]", "=", "byteArray", ".", "nextString", "(", ")", ";", "}", "Integer", "[", "]", "v", "=", "new", "Integer", "[", "NUM_PREDS", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "v", ".", "length", ";", "i", "++", ")", "{", "v", "[", "i", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "m", ".", "pmap", ".", "load", "(", "byteArray", ",", "v", ")", ";", "// params", "Context", "[", "]", "params", "=", "new", "Context", "[", "NUM_PREDS", "]", ";", "int", "pid", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "outcomePatterns", ".", "length", ";", "i", "++", ")", "{", "int", "[", "]", "outcomePattern", "=", "new", "int", "[", "outcomePatterns", "[", "i", "]", ".", "length", "-", "1", "]", ";", "for", "(", "int", "k", "=", "1", ";", "k", "<", "outcomePatterns", "[", "i", "]", ".", "length", ";", "k", "++", ")", "{", "outcomePattern", "[", "k", "-", "1", "]", "=", "outcomePatterns", "[", "i", "]", "[", "k", "]", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "outcomePatterns", "[", "i", "]", "[", "0", "]", ";", "j", "++", ")", "{", "double", "[", "]", "contextParameters", "=", "new", "double", "[", "outcomePatterns", "[", "i", "]", ".", "length", "-", "1", "]", ";", "for", "(", "int", "k", "=", "1", ";", "k", "<", "outcomePatterns", "[", "i", "]", ".", "length", ";", "k", "++", ")", "{", "contextParameters", "[", "k", "-", "1", "]", "=", "byteArray", ".", "nextDouble", "(", ")", ";", "}", "params", "[", "pid", "]", "=", "new", "Context", "(", "outcomePattern", ",", "contextParameters", ")", ";", "pid", "++", ";", "}", "}", "// prior", "m", ".", "prior", "=", "new", "UniformPrior", "(", ")", ";", "m", ".", "prior", ".", "setLabels", "(", "outcomeLabels", ")", ";", "// eval", "m", ".", "evalParams", "=", "new", "EvalParameters", "(", "params", ",", "m", ".", "correctionParam", ",", "m", ".", "correctionConstant", ",", "outcomeLabels", ".", "length", ")", ";", "return", "m", ";", "}"], "docstring": "\u4ece\u5b57\u8282\u6d41\u5feb\u901f\u52a0\u8f7d\n@param byteArray\n@return", "docstring_tokens": ["\u4ece\u5b57\u8282\u6d41\u5feb\u901f\u52a0\u8f7d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L300-L364", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java", "func_name": "MaxEntModel.load", "original_string": "public static MaxEntModel load(String txtPath)\n    {\n        ByteArray byteArray = ByteArray.createByteArray(txtPath + Predefine.BIN_EXT);\n        if (byteArray != null) return create(byteArray);\n        return create(txtPath);\n    }", "language": "java", "code": "public static MaxEntModel load(String txtPath)\n    {\n        ByteArray byteArray = ByteArray.createByteArray(txtPath + Predefine.BIN_EXT);\n        if (byteArray != null) return create(byteArray);\n        return create(txtPath);\n    }", "code_tokens": ["public", "static", "MaxEntModel", "load", "(", "String", "txtPath", ")", "{", "ByteArray", "byteArray", "=", "ByteArray", ".", "createByteArray", "(", "txtPath", "+", "Predefine", ".", "BIN_EXT", ")", ";", "if", "(", "byteArray", "!=", "null", ")", "return", "create", "(", "byteArray", ")", ";", "return", "create", "(", "txtPath", ")", ";", "}"], "docstring": "\u52a0\u8f7d\u6700\u5927\u71b5\u6a21\u578b<br>\n\u5982\u679c\u5b58\u5728\u7f13\u5b58\u7684\u8bdd\uff0c\u4f18\u5148\u8bfb\u53d6\u7f13\u5b58\uff0c\u5426\u5219\u8bfb\u53d6txt\uff0c\u5e76\u4e14\u5efa\u7acb\u7f13\u5b58\n@param txtPath txt\u7684\u8def\u5f84\uff0c\u5373\u4f7f\u4e0d\u5b58\u5728.txt\uff0c\u53ea\u5b58\u5728.bin\uff0c\u4e5f\u5e94\u4f20\u5165txt\u7684\u8def\u5f84\uff0c\u65b9\u6cd5\u5185\u90e8\u4f1a\u81ea\u52a8\u52a0.bin\u540e\u7f00\n@return", "docstring_tokens": ["\u52a0\u8f7d\u6700\u5927\u71b5\u6a21\u578b<br", ">", "\u5982\u679c\u5b58\u5728\u7f13\u5b58\u7684\u8bdd\uff0c\u4f18\u5148\u8bfb\u53d6\u7f13\u5b58\uff0c\u5426\u5219\u8bfb\u53d6txt\uff0c\u5e76\u4e14\u5efa\u7acb\u7f13\u5b58"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/maxent/MaxEntModel.java#L372-L377", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.set_composite_vector", "original_string": "void set_composite_vector()\n    {\n        composite_.clear();\n        for (Document<K> document : documents_)\n        {\n            composite_.add_vector(document.feature());\n        }\n    }", "language": "java", "code": "void set_composite_vector()\n    {\n        composite_.clear();\n        for (Document<K> document : documents_)\n        {\n            composite_.add_vector(document.feature());\n        }\n    }", "code_tokens": ["void", "set_composite_vector", "(", ")", "{", "composite_", ".", "clear", "(", ")", ";", "for", "(", "Document", "<", "K", ">", "document", ":", "documents_", ")", "{", "composite_", ".", "add_vector", "(", "document", ".", "feature", "(", ")", ")", ";", "}", "}"], "docstring": "Add the vectors of all documents to a composite vector.", "docstring_tokens": ["Add", "the", "vectors", "of", "all", "documents", "to", "a", "composite", "vector", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L42-L49", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.clear", "original_string": "void clear()\n    {\n        documents_.clear();\n        composite_.clear();\n        if (centroid_ != null)\n            centroid_.clear();\n        if (sectioned_clusters_ != null)\n            sectioned_clusters_.clear();\n        sectioned_gain_ = 0.0;\n    }", "language": "java", "code": "void clear()\n    {\n        documents_.clear();\n        composite_.clear();\n        if (centroid_ != null)\n            centroid_.clear();\n        if (sectioned_clusters_ != null)\n            sectioned_clusters_.clear();\n        sectioned_gain_ = 0.0;\n    }", "code_tokens": ["void", "clear", "(", ")", "{", "documents_", ".", "clear", "(", ")", ";", "composite_", ".", "clear", "(", ")", ";", "if", "(", "centroid_", "!=", "null", ")", "centroid_", ".", "clear", "(", ")", ";", "if", "(", "sectioned_clusters_", "!=", "null", ")", "sectioned_clusters_", ".", "clear", "(", ")", ";", "sectioned_gain_", "=", "0.0", ";", "}"], "docstring": "Clear status.", "docstring_tokens": ["Clear", "status", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L54-L63", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.centroid_vector", "original_string": "SparseVector centroid_vector()\n    {\n        if (documents_.size() > 0 && composite_.size() == 0)\n            set_composite_vector();\n        centroid_ = (SparseVector) composite_vector().clone();\n        centroid_.normalize();\n        return centroid_;\n    }", "language": "java", "code": "SparseVector centroid_vector()\n    {\n        if (documents_.size() > 0 && composite_.size() == 0)\n            set_composite_vector();\n        centroid_ = (SparseVector) composite_vector().clone();\n        centroid_.normalize();\n        return centroid_;\n    }", "code_tokens": ["SparseVector", "centroid_vector", "(", ")", "{", "if", "(", "documents_", ".", "size", "(", ")", ">", "0", "&&", "composite_", ".", "size", "(", ")", "==", "0", ")", "set_composite_vector", "(", ")", ";", "centroid_", "=", "(", "SparseVector", ")", "composite_vector", "(", ")", ".", "clone", "(", ")", ";", "centroid_", ".", "normalize", "(", ")", ";", "return", "centroid_", ";", "}"], "docstring": "Get the pointer of a centroid vector.\n\n@return the pointer of a centroid vector", "docstring_tokens": ["Get", "the", "pointer", "of", "a", "centroid", "vector", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L81-L88", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.add_document", "original_string": "void add_document(Document doc)\n    {\n        doc.feature().normalize();\n        documents_.add(doc);\n        composite_.add_vector(doc.feature());\n    }", "language": "java", "code": "void add_document(Document doc)\n    {\n        doc.feature().normalize();\n        documents_.add(doc);\n        composite_.add_vector(doc.feature());\n    }", "code_tokens": ["void", "add_document", "(", "Document", "doc", ")", "{", "doc", ".", "feature", "(", ")", ".", "normalize", "(", ")", ";", "documents_", ".", "add", "(", "doc", ")", ";", "composite_", ".", "add_vector", "(", "doc", ".", "feature", "(", ")", ")", ";", "}"], "docstring": "Add a document.\n\n@param doc the pointer of a document object", "docstring_tokens": ["Add", "a", "document", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L115-L120", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.remove_document", "original_string": "void remove_document(int index)\n    {\n        ListIterator<Document<K>> listIterator = documents_.listIterator(index);\n        Document<K> document = listIterator.next();\n        listIterator.set(null);\n        composite_.sub_vector(document.feature());\n    }", "language": "java", "code": "void remove_document(int index)\n    {\n        ListIterator<Document<K>> listIterator = documents_.listIterator(index);\n        Document<K> document = listIterator.next();\n        listIterator.set(null);\n        composite_.sub_vector(document.feature());\n    }", "code_tokens": ["void", "remove_document", "(", "int", "index", ")", "{", "ListIterator", "<", "Document", "<", "K", ">>", "listIterator", "=", "documents_", ".", "listIterator", "(", "index", ")", ";", "Document", "<", "K", ">", "document", "=", "listIterator", ".", "next", "(", ")", ";", "listIterator", ".", "set", "(", "null", ")", ";", "composite_", ".", "sub_vector", "(", "document", ".", "feature", "(", ")", ")", ";", "}"], "docstring": "Remove a document from this cluster.\n\n@param index the index of vector container of documents", "docstring_tokens": ["Remove", "a", "document", "from", "this", "cluster", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L127-L133", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.remove_document", "original_string": "void remove_document(Document doc)\n    {\n        for (Document<K> document : documents_)\n        {\n            if (document.equals(doc))\n            {\n                remove_document(doc);\n                return;\n            }\n        }\n    }", "language": "java", "code": "void remove_document(Document doc)\n    {\n        for (Document<K> document : documents_)\n        {\n            if (document.equals(doc))\n            {\n                remove_document(doc);\n                return;\n            }\n        }\n    }", "code_tokens": ["void", "remove_document", "(", "Document", "doc", ")", "{", "for", "(", "Document", "<", "K", ">", "document", ":", "documents_", ")", "{", "if", "(", "document", ".", "equals", "(", "doc", ")", ")", "{", "remove_document", "(", "doc", ")", ";", "return", ";", "}", "}", "}"], "docstring": "Remove a document from this cluster.\n\n@param doc the pointer of a document object", "docstring_tokens": ["Remove", "a", "document", "from", "this", "cluster", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L140-L150", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.refresh", "original_string": "void refresh()\n    {\n        ListIterator<Document<K>> listIterator = documents_.listIterator();\n        while (listIterator.hasNext())\n        {\n            if (listIterator.next() == null)\n                listIterator.remove();\n        }\n    }", "language": "java", "code": "void refresh()\n    {\n        ListIterator<Document<K>> listIterator = documents_.listIterator();\n        while (listIterator.hasNext())\n        {\n            if (listIterator.next() == null)\n                listIterator.remove();\n        }\n    }", "code_tokens": ["void", "refresh", "(", ")", "{", "ListIterator", "<", "Document", "<", "K", ">>", "listIterator", "=", "documents_", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "listIterator", ".", "next", "(", ")", "==", "null", ")", "listIterator", ".", "remove", "(", ")", ";", "}", "}"], "docstring": "Delete removed documents from the internal container.", "docstring_tokens": ["Delete", "removed", "documents", "from", "the", "internal", "container", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L156-L164", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.set_sectioned_gain", "original_string": "void set_sectioned_gain()\n    {\n        double gain = 0.0f;\n        if (sectioned_gain_ == 0 && sectioned_clusters_.size() > 1)\n        {\n            for (Cluster<K> cluster : sectioned_clusters_)\n            {\n                gain += cluster.composite_vector().norm();\n            }\n            gain -= composite_.norm();\n        }\n        sectioned_gain_ = gain;\n    }", "language": "java", "code": "void set_sectioned_gain()\n    {\n        double gain = 0.0f;\n        if (sectioned_gain_ == 0 && sectioned_clusters_.size() > 1)\n        {\n            for (Cluster<K> cluster : sectioned_clusters_)\n            {\n                gain += cluster.composite_vector().norm();\n            }\n            gain -= composite_.norm();\n        }\n        sectioned_gain_ = gain;\n    }", "code_tokens": ["void", "set_sectioned_gain", "(", ")", "{", "double", "gain", "=", "0.0f", ";", "if", "(", "sectioned_gain_", "==", "0", "&&", "sectioned_clusters_", ".", "size", "(", ")", ">", "1", ")", "{", "for", "(", "Cluster", "<", "K", ">", "cluster", ":", "sectioned_clusters_", ")", "{", "gain", "+=", "cluster", ".", "composite_vector", "(", ")", ".", "norm", "(", ")", ";", "}", "gain", "-=", "composite_", ".", "norm", "(", ")", ";", "}", "sectioned_gain_", "=", "gain", ";", "}"], "docstring": "Set a gain when the cluster sectioned.", "docstring_tokens": ["Set", "a", "gain", "when", "the", "cluster", "sectioned", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L179-L191", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.choose_smartly", "original_string": "void choose_smartly(int ndocs, List<Document> docs)\n    {\n        int siz = size();\n        double[] closest = new double[siz];\n        if (siz < ndocs)\n            ndocs = siz;\n        int index, count = 0;\n\n        index = random.nextInt(siz);  // initial center\n        docs.add(documents_.get(index));\n        ++count;\n        double potential = 0.0;\n        for (int i = 0; i < documents_.size(); i++)\n        {\n            double dist = 1.0 - SparseVector.inner_product(documents_.get(i).feature(), documents_.get(index).feature());\n            potential += dist;\n            closest[i] = dist;\n        }\n\n        // choose each center\n        while (count < ndocs)\n        {\n            double randval = random.nextDouble() * potential;\n\n            for (index = 0; index < documents_.size(); index++)\n            {\n                double dist = closest[index];\n                if (randval <= dist)\n                    break;\n                randval -= dist;\n            }\n            if (index == documents_.size())\n                index--;\n            docs.add(documents_.get(index));\n            ++count;\n\n            double new_potential = 0.0;\n            for (int i = 0; i < documents_.size(); i++)\n            {\n                double dist = 1.0 - SparseVector.inner_product(documents_.get(i).feature(), documents_.get(index).feature());\n                double min = closest[i];\n                if (dist < min)\n                {\n                    closest[i] = dist;\n                    min = dist;\n                }\n                new_potential += min;\n            }\n            potential = new_potential;\n        }\n    }", "language": "java", "code": "void choose_smartly(int ndocs, List<Document> docs)\n    {\n        int siz = size();\n        double[] closest = new double[siz];\n        if (siz < ndocs)\n            ndocs = siz;\n        int index, count = 0;\n\n        index = random.nextInt(siz);  // initial center\n        docs.add(documents_.get(index));\n        ++count;\n        double potential = 0.0;\n        for (int i = 0; i < documents_.size(); i++)\n        {\n            double dist = 1.0 - SparseVector.inner_product(documents_.get(i).feature(), documents_.get(index).feature());\n            potential += dist;\n            closest[i] = dist;\n        }\n\n        // choose each center\n        while (count < ndocs)\n        {\n            double randval = random.nextDouble() * potential;\n\n            for (index = 0; index < documents_.size(); index++)\n            {\n                double dist = closest[index];\n                if (randval <= dist)\n                    break;\n                randval -= dist;\n            }\n            if (index == documents_.size())\n                index--;\n            docs.add(documents_.get(index));\n            ++count;\n\n            double new_potential = 0.0;\n            for (int i = 0; i < documents_.size(); i++)\n            {\n                double dist = 1.0 - SparseVector.inner_product(documents_.get(i).feature(), documents_.get(index).feature());\n                double min = closest[i];\n                if (dist < min)\n                {\n                    closest[i] = dist;\n                    min = dist;\n                }\n                new_potential += min;\n            }\n            potential = new_potential;\n        }\n    }", "code_tokens": ["void", "choose_smartly", "(", "int", "ndocs", ",", "List", "<", "Document", ">", "docs", ")", "{", "int", "siz", "=", "size", "(", ")", ";", "double", "[", "]", "closest", "=", "new", "double", "[", "siz", "]", ";", "if", "(", "siz", "<", "ndocs", ")", "ndocs", "=", "siz", ";", "int", "index", ",", "count", "=", "0", ";", "index", "=", "random", ".", "nextInt", "(", "siz", ")", ";", "// initial center", "docs", ".", "add", "(", "documents_", ".", "get", "(", "index", ")", ")", ";", "++", "count", ";", "double", "potential", "=", "0.0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "documents_", ".", "size", "(", ")", ";", "i", "++", ")", "{", "double", "dist", "=", "1.0", "-", "SparseVector", ".", "inner_product", "(", "documents_", ".", "get", "(", "i", ")", ".", "feature", "(", ")", ",", "documents_", ".", "get", "(", "index", ")", ".", "feature", "(", ")", ")", ";", "potential", "+=", "dist", ";", "closest", "[", "i", "]", "=", "dist", ";", "}", "// choose each center", "while", "(", "count", "<", "ndocs", ")", "{", "double", "randval", "=", "random", ".", "nextDouble", "(", ")", "*", "potential", ";", "for", "(", "index", "=", "0", ";", "index", "<", "documents_", ".", "size", "(", ")", ";", "index", "++", ")", "{", "double", "dist", "=", "closest", "[", "index", "]", ";", "if", "(", "randval", "<=", "dist", ")", "break", ";", "randval", "-=", "dist", ";", "}", "if", "(", "index", "==", "documents_", ".", "size", "(", ")", ")", "index", "--", ";", "docs", ".", "add", "(", "documents_", ".", "get", "(", "index", ")", ")", ";", "++", "count", ";", "double", "new_potential", "=", "0.0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "documents_", ".", "size", "(", ")", ";", "i", "++", ")", "{", "double", "dist", "=", "1.0", "-", "SparseVector", ".", "inner_product", "(", "documents_", ".", "get", "(", "i", ")", ".", "feature", "(", ")", ",", "documents_", ".", "get", "(", "index", ")", ".", "feature", "(", ")", ")", ";", "double", "min", "=", "closest", "[", "i", "]", ";", "if", "(", "dist", "<", "min", ")", "{", "closest", "[", "i", "]", "=", "dist", ";", "min", "=", "dist", ";", "}", "new_potential", "+=", "min", ";", "}", "potential", "=", "new_potential", ";", "}", "}"], "docstring": "\u9009\u53d6\u521d\u59cb\u8d28\u5fc3\n\n@param ndocs \u8d28\u5fc3\u6570\u91cf\n@param docs  \u8f93\u51fa\u5230\u8be5\u5217\u8868\u4e2d", "docstring_tokens": ["\u9009\u53d6\u521d\u59cb\u8d28\u5fc3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L232-L282", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java", "func_name": "Cluster.section", "original_string": "void section(int nclusters)\n    {\n        if (size() < nclusters)\n            return;\n\n        sectioned_clusters_ = new ArrayList<Cluster<K>>(nclusters);\n        List<Document> centroids = new ArrayList<Document>(nclusters);\n        // choose_randomly(nclusters, centroids);\n        choose_smartly(nclusters, centroids);\n        for (int i = 0; i < centroids.size(); i++)\n        {\n            Cluster<K> cluster = new Cluster<K>();\n            sectioned_clusters_.add(cluster);\n        }\n\n        for (Document<K> d : documents_)\n        {\n            double max_similarity = -1.0;\n            int max_index = 0;\n            for (int j = 0; j < centroids.size(); j++)\n            {\n                double similarity = SparseVector.inner_product(d.feature(), centroids.get(j).feature());\n                if (max_similarity < similarity)\n                {\n                    max_similarity = similarity;\n                    max_index = j;\n                }\n            }\n            sectioned_clusters_.get(max_index).add_document(d);\n        }\n    }", "language": "java", "code": "void section(int nclusters)\n    {\n        if (size() < nclusters)\n            return;\n\n        sectioned_clusters_ = new ArrayList<Cluster<K>>(nclusters);\n        List<Document> centroids = new ArrayList<Document>(nclusters);\n        // choose_randomly(nclusters, centroids);\n        choose_smartly(nclusters, centroids);\n        for (int i = 0; i < centroids.size(); i++)\n        {\n            Cluster<K> cluster = new Cluster<K>();\n            sectioned_clusters_.add(cluster);\n        }\n\n        for (Document<K> d : documents_)\n        {\n            double max_similarity = -1.0;\n            int max_index = 0;\n            for (int j = 0; j < centroids.size(); j++)\n            {\n                double similarity = SparseVector.inner_product(d.feature(), centroids.get(j).feature());\n                if (max_similarity < similarity)\n                {\n                    max_similarity = similarity;\n                    max_index = j;\n                }\n            }\n            sectioned_clusters_.get(max_index).add_document(d);\n        }\n    }", "code_tokens": ["void", "section", "(", "int", "nclusters", ")", "{", "if", "(", "size", "(", ")", "<", "nclusters", ")", "return", ";", "sectioned_clusters_", "=", "new", "ArrayList", "<", "Cluster", "<", "K", ">", ">", "(", "nclusters", ")", ";", "List", "<", "Document", ">", "centroids", "=", "new", "ArrayList", "<", "Document", ">", "(", "nclusters", ")", ";", "// choose_randomly(nclusters, centroids);", "choose_smartly", "(", "nclusters", ",", "centroids", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "centroids", ".", "size", "(", ")", ";", "i", "++", ")", "{", "Cluster", "<", "K", ">", "cluster", "=", "new", "Cluster", "<", "K", ">", "(", ")", ";", "sectioned_clusters_", ".", "add", "(", "cluster", ")", ";", "}", "for", "(", "Document", "<", "K", ">", "d", ":", "documents_", ")", "{", "double", "max_similarity", "=", "-", "1.0", ";", "int", "max_index", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "centroids", ".", "size", "(", ")", ";", "j", "++", ")", "{", "double", "similarity", "=", "SparseVector", ".", "inner_product", "(", "d", ".", "feature", "(", ")", ",", "centroids", ".", "get", "(", "j", ")", ".", "feature", "(", ")", ")", ";", "if", "(", "max_similarity", "<", "similarity", ")", "{", "max_similarity", "=", "similarity", ";", "max_index", "=", "j", ";", "}", "}", "sectioned_clusters_", ".", "get", "(", "max_index", ")", ".", "add_document", "(", "d", ")", ";", "}", "}"], "docstring": "\u5c06\u672c\u7c07\u5212\u5206\u4e3anclusters\u4e2a\u7c07\n\n@param nclusters", "docstring_tokens": ["\u5c06\u672c\u7c07\u5212\u5206\u4e3anclusters\u4e2a\u7c07"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/cluster/Cluster.java#L289-L319", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronNameGenderClassifier.java", "func_name": "PerceptronNameGenderClassifier.extractGivenName", "original_string": "public static String extractGivenName(String name)\n    {\n        if (name.length() <= 2)\n            return \"_\" + name.substring(name.length() - 1);\n        else\n            return name.substring(name.length() - 2);\n\n    }", "language": "java", "code": "public static String extractGivenName(String name)\n    {\n        if (name.length() <= 2)\n            return \"_\" + name.substring(name.length() - 1);\n        else\n            return name.substring(name.length() - 2);\n\n    }", "code_tokens": ["public", "static", "String", "extractGivenName", "(", "String", "name", ")", "{", "if", "(", "name", ".", "length", "(", ")", "<=", "2", ")", "return", "\"_\"", "+", "name", ".", "substring", "(", "name", ".", "length", "(", ")", "-", "1", ")", ";", "else", "return", "name", ".", "substring", "(", "name", ".", "length", "(", ")", "-", "2", ")", ";", "}"], "docstring": "\u53bb\u6389\u59d3\u6c0f\uff0c\u622a\u53d6\u4e2d\u56fd\u4eba\u540d\u4e2d\u7684\u540d\u5b57\n\n@param name \u59d3\u540d\n@return \u540d", "docstring_tokens": ["\u53bb\u6389\u59d3\u6c0f\uff0c\u622a\u53d6\u4e2d\u56fd\u4eba\u540d\u4e2d\u7684\u540d\u5b57"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/PerceptronNameGenderClassifier.java#L63-L70", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/nt/OrganizationDictionary.java", "func_name": "OrganizationDictionary.parsePattern", "original_string": "public static void parsePattern(List<NT> ntList, List<Vertex> vertexList, final WordNet wordNetOptimum, final WordNet wordNetAll)\n    {\n//        ListIterator<Vertex> listIterator = vertexList.listIterator();\n        StringBuilder sbPattern = new StringBuilder(ntList.size());\n        for (NT nt : ntList)\n        {\n            sbPattern.append(nt.toString());\n        }\n        String pattern = sbPattern.toString();\n        final Vertex[] wordArray = vertexList.toArray(new Vertex[0]);\n        trie.parseText(pattern, new AhoCorasickDoubleArrayTrie.IHit<String>()\n        {\n            @Override\n            public void hit(int begin, int end, String keyword)\n            {\n                StringBuilder sbName = new StringBuilder();\n                for (int i = begin; i < end; ++i)\n                {\n                    sbName.append(wordArray[i].realWord);\n                }\n                String name = sbName.toString();\n                // \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574\n                if (isBadCase(name)) return;\n\n                // \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57\n                if (HanLP.Config.DEBUG)\n                {\n                    System.out.printf(\"\u8bc6\u522b\u51fa\u673a\u6784\u540d\uff1a%s %s\\n\", name, keyword);\n                }\n                int offset = 0;\n                for (int i = 0; i < begin; ++i)\n                {\n                    offset += wordArray[i].realWord.length();\n                }\n                wordNetOptimum.insert(offset, new Vertex(Predefine.TAG_GROUP, name, ATTRIBUTE, WORD_ID), wordNetAll);\n            }\n        });\n    }", "language": "java", "code": "public static void parsePattern(List<NT> ntList, List<Vertex> vertexList, final WordNet wordNetOptimum, final WordNet wordNetAll)\n    {\n//        ListIterator<Vertex> listIterator = vertexList.listIterator();\n        StringBuilder sbPattern = new StringBuilder(ntList.size());\n        for (NT nt : ntList)\n        {\n            sbPattern.append(nt.toString());\n        }\n        String pattern = sbPattern.toString();\n        final Vertex[] wordArray = vertexList.toArray(new Vertex[0]);\n        trie.parseText(pattern, new AhoCorasickDoubleArrayTrie.IHit<String>()\n        {\n            @Override\n            public void hit(int begin, int end, String keyword)\n            {\n                StringBuilder sbName = new StringBuilder();\n                for (int i = begin; i < end; ++i)\n                {\n                    sbName.append(wordArray[i].realWord);\n                }\n                String name = sbName.toString();\n                // \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574\n                if (isBadCase(name)) return;\n\n                // \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57\n                if (HanLP.Config.DEBUG)\n                {\n                    System.out.printf(\"\u8bc6\u522b\u51fa\u673a\u6784\u540d\uff1a%s %s\\n\", name, keyword);\n                }\n                int offset = 0;\n                for (int i = 0; i < begin; ++i)\n                {\n                    offset += wordArray[i].realWord.length();\n                }\n                wordNetOptimum.insert(offset, new Vertex(Predefine.TAG_GROUP, name, ATTRIBUTE, WORD_ID), wordNetAll);\n            }\n        });\n    }", "code_tokens": ["public", "static", "void", "parsePattern", "(", "List", "<", "NT", ">", "ntList", ",", "List", "<", "Vertex", ">", "vertexList", ",", "final", "WordNet", "wordNetOptimum", ",", "final", "WordNet", "wordNetAll", ")", "{", "//        ListIterator<Vertex> listIterator = vertexList.listIterator();", "StringBuilder", "sbPattern", "=", "new", "StringBuilder", "(", "ntList", ".", "size", "(", ")", ")", ";", "for", "(", "NT", "nt", ":", "ntList", ")", "{", "sbPattern", ".", "append", "(", "nt", ".", "toString", "(", ")", ")", ";", "}", "String", "pattern", "=", "sbPattern", ".", "toString", "(", ")", ";", "final", "Vertex", "[", "]", "wordArray", "=", "vertexList", ".", "toArray", "(", "new", "Vertex", "[", "0", "]", ")", ";", "trie", ".", "parseText", "(", "pattern", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "String", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "String", "keyword", ")", "{", "StringBuilder", "sbName", "=", "new", "StringBuilder", "(", ")", ";", "for", "(", "int", "i", "=", "begin", ";", "i", "<", "end", ";", "++", "i", ")", "{", "sbName", ".", "append", "(", "wordArray", "[", "i", "]", ".", "realWord", ")", ";", "}", "String", "name", "=", "sbName", ".", "toString", "(", ")", ";", "// \u5bf9\u4e00\u4e9bbad case\u505a\u51fa\u8c03\u6574", "if", "(", "isBadCase", "(", "name", ")", ")", "return", ";", "// \u6b63\u5f0f\u7b97\u5b83\u662f\u4e00\u4e2a\u540d\u5b57", "if", "(", "HanLP", ".", "Config", ".", "DEBUG", ")", "{", "System", ".", "out", ".", "printf", "(", "\"\u8bc6\u522b\u51fa\u673a\u6784\u540d\uff1a%s %s\\n\", name, keywor", "d", ";", "", "", "", "", "}", "int", "offset", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "begin", ";", "++", "i", ")", "{", "offset", "+=", "wordArray", "[", "i", "]", ".", "realWord", ".", "length", "(", ")", ";", "}", "wordNetOptimum", ".", "insert", "(", "offset", ",", "new", "Vertex", "(", "Predefine", ".", "TAG_GROUP", ",", "name", ",", "ATTRIBUTE", ",", "WORD_ID", ")", ",", "wordNetAll", ")", ";", "}", "}", ")", ";", "}"], "docstring": "\u6a21\u5f0f\u5339\u914d\n\n@param ntList         \u786e\u5b9a\u7684\u6807\u6ce8\u5e8f\u5217\n@param vertexList     \u539f\u59cb\u7684\u672a\u52a0\u89d2\u8272\u6807\u6ce8\u7684\u5e8f\u5217\n@param wordNetOptimum \u5f85\u4f18\u5316\u7684\u56fe\n@param wordNetAll", "docstring_tokens": ["\u6a21\u5f0f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/nt/OrganizationDictionary.java#L3745-L3782", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/MathUtility.java", "func_name": "MathUtility.normalizeExp", "original_string": "public static void normalizeExp(Map<String, Double> predictionScores)\n    {\n        Set<Map.Entry<String, Double>> entrySet = predictionScores.entrySet();\n        double max = Double.NEGATIVE_INFINITY;\n        for (Map.Entry<String, Double> entry : entrySet)\n        {\n            max = Math.max(max, entry.getValue());\n        }\n\n        double sum = 0.0;\n        //\u901a\u8fc7\u51cf\u53bb\u6700\u5927\u503c\u9632\u6b62\u6d6e\u70b9\u6570\u6ea2\u51fa\n        for (Map.Entry<String, Double> entry : entrySet)\n        {\n            Double value = Math.exp(entry.getValue() - max);\n            entry.setValue(value);\n\n            sum += value;\n        }\n\n        if (sum != 0.0)\n        {\n            for (Map.Entry<String, Double> entry : entrySet)\n            {\n                predictionScores.put(entry.getKey(), entry.getValue() / sum);\n            }\n        }\n    }", "language": "java", "code": "public static void normalizeExp(Map<String, Double> predictionScores)\n    {\n        Set<Map.Entry<String, Double>> entrySet = predictionScores.entrySet();\n        double max = Double.NEGATIVE_INFINITY;\n        for (Map.Entry<String, Double> entry : entrySet)\n        {\n            max = Math.max(max, entry.getValue());\n        }\n\n        double sum = 0.0;\n        //\u901a\u8fc7\u51cf\u53bb\u6700\u5927\u503c\u9632\u6b62\u6d6e\u70b9\u6570\u6ea2\u51fa\n        for (Map.Entry<String, Double> entry : entrySet)\n        {\n            Double value = Math.exp(entry.getValue() - max);\n            entry.setValue(value);\n\n            sum += value;\n        }\n\n        if (sum != 0.0)\n        {\n            for (Map.Entry<String, Double> entry : entrySet)\n            {\n                predictionScores.put(entry.getKey(), entry.getValue() / sum);\n            }\n        }\n    }", "code_tokens": ["public", "static", "void", "normalizeExp", "(", "Map", "<", "String", ",", "Double", ">", "predictionScores", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "Double", ">", ">", "entrySet", "=", "predictionScores", ".", "entrySet", "(", ")", ";", "double", "max", "=", "Double", ".", "NEGATIVE_INFINITY", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Double", ">", "entry", ":", "entrySet", ")", "{", "max", "=", "Math", ".", "max", "(", "max", ",", "entry", ".", "getValue", "(", ")", ")", ";", "}", "double", "sum", "=", "0.0", ";", "//\u901a\u8fc7\u51cf\u53bb\u6700\u5927\u503c\u9632\u6b62\u6d6e\u70b9\u6570\u6ea2\u51fa", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Double", ">", "entry", ":", "entrySet", ")", "{", "Double", "value", "=", "Math", ".", "exp", "(", "entry", ".", "getValue", "(", ")", "-", "max", ")", ";", "entry", ".", "setValue", "(", "value", ")", ";", "sum", "+=", "value", ";", "}", "if", "(", "sum", "!=", "0.0", ")", "{", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Double", ">", "entry", ":", "entrySet", ")", "{", "predictionScores", ".", "put", "(", "entry", ".", "getKey", "(", ")", ",", "entry", ".", "getValue", "(", ")", "/", "sum", ")", ";", "}", "}", "}"], "docstring": "\u4f7f\u7528log-sum-exp\u6280\u5de7\u6765\u5f52\u4e00\u5316\u4e00\u7ec4\u5bf9\u6570\u503c\n\n@param predictionScores", "docstring_tokens": ["\u4f7f\u7528log", "-", "sum", "-", "exp\u6280\u5de7\u6765\u5f52\u4e00\u5316\u4e00\u7ec4\u5bf9\u6570\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/MathUtility.java#L70-L96", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/MathUtility.java", "func_name": "MathUtility.calculateWeight", "original_string": "public static double calculateWeight(Vertex from, Vertex to)\n    {\n        int frequency = from.getAttribute().totalFrequency;\n        if (frequency == 0)\n        {\n            frequency = 1;  // \u9632\u6b62\u53d1\u751f\u9664\u96f6\u9519\u8bef\n        }\n//        int nTwoWordsFreq = BiGramDictionary.getBiFrequency(from.word, to.word);\n        int nTwoWordsFreq = CoreBiGramTableDictionary.getBiFrequency(from.wordID, to.wordID);\n        double value = -Math.log(dSmoothingPara * frequency / (MAX_FREQUENCY) + (1 - dSmoothingPara) * ((1 - dTemp) * nTwoWordsFreq / frequency + dTemp));\n        if (value < 0.0)\n        {\n            value = -value;\n        }\n//        logger.info(String.format(\"%5s frequency:%6d, %s nTwoWordsFreq:%3d, weight:%.2f\", from.word, frequency, from.word + \"@\" + to.word, nTwoWordsFreq, value));\n        return value;\n    }", "language": "java", "code": "public static double calculateWeight(Vertex from, Vertex to)\n    {\n        int frequency = from.getAttribute().totalFrequency;\n        if (frequency == 0)\n        {\n            frequency = 1;  // \u9632\u6b62\u53d1\u751f\u9664\u96f6\u9519\u8bef\n        }\n//        int nTwoWordsFreq = BiGramDictionary.getBiFrequency(from.word, to.word);\n        int nTwoWordsFreq = CoreBiGramTableDictionary.getBiFrequency(from.wordID, to.wordID);\n        double value = -Math.log(dSmoothingPara * frequency / (MAX_FREQUENCY) + (1 - dSmoothingPara) * ((1 - dTemp) * nTwoWordsFreq / frequency + dTemp));\n        if (value < 0.0)\n        {\n            value = -value;\n        }\n//        logger.info(String.format(\"%5s frequency:%6d, %s nTwoWordsFreq:%3d, weight:%.2f\", from.word, frequency, from.word + \"@\" + to.word, nTwoWordsFreq, value));\n        return value;\n    }", "code_tokens": ["public", "static", "double", "calculateWeight", "(", "Vertex", "from", ",", "Vertex", "to", ")", "{", "int", "frequency", "=", "from", ".", "getAttribute", "(", ")", ".", "totalFrequency", ";", "if", "(", "frequency", "==", "0", ")", "{", "frequency", "=", "1", ";", "// \u9632\u6b62\u53d1\u751f\u9664\u96f6\u9519\u8bef", "}", "//        int nTwoWordsFreq = BiGramDictionary.getBiFrequency(from.word, to.word);", "int", "nTwoWordsFreq", "=", "CoreBiGramTableDictionary", ".", "getBiFrequency", "(", "from", ".", "wordID", ",", "to", ".", "wordID", ")", ";", "double", "value", "=", "-", "Math", ".", "log", "(", "dSmoothingPara", "*", "frequency", "/", "(", "MAX_FREQUENCY", ")", "+", "(", "1", "-", "dSmoothingPara", ")", "*", "(", "(", "1", "-", "dTemp", ")", "*", "nTwoWordsFreq", "/", "frequency", "+", "dTemp", ")", ")", ";", "if", "(", "value", "<", "0.0", ")", "{", "value", "=", "-", "value", ";", "}", "//        logger.info(String.format(\"%5s frequency:%6d, %s nTwoWordsFreq:%3d, weight:%.2f\", from.word, frequency, from.word + \"@\" + to.word, nTwoWordsFreq, value));", "return", "value", ";", "}"], "docstring": "\u4ece\u4e00\u4e2a\u8bcd\u5230\u53e6\u4e00\u4e2a\u8bcd\u7684\u8bcd\u7684\u82b1\u8d39\n\n@param from \u524d\u9762\u7684\u8bcd\n@param to   \u540e\u9762\u7684\u8bcd\n@return \u5206\u6570", "docstring_tokens": ["\u4ece\u4e00\u4e2a\u8bcd\u5230\u53e6\u4e00\u4e2a\u8bcd\u7684\u8bcd\u7684\u82b1\u8d39"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/MathUtility.java#L130-L146", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tf", "original_string": "public static <TERM> Map<TERM, Double> tf(Collection<TERM> document, TfType type)\n    {\n        Map<TERM, Double> tf = new HashMap<TERM, Double>();\n        for (TERM term : document)\n        {\n            Double f = tf.get(term);\n            if (f == null) f = 0.0;\n            tf.put(term, f + 1);\n        }\n        if (type != TfType.NATURAL)\n        {\n            for (TERM term : tf.keySet())\n            {\n                switch (type)\n                {\n                    case LOGARITHM:\n                        tf.put(term, 1 + Math.log(tf.get(term)));\n                        break;\n                    case BOOLEAN:\n                        tf.put(term, tf.get(term) == 0.0 ? 0.0 : 1.0);\n                        break;\n                }\n            }\n        }\n        return tf;\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> tf(Collection<TERM> document, TfType type)\n    {\n        Map<TERM, Double> tf = new HashMap<TERM, Double>();\n        for (TERM term : document)\n        {\n            Double f = tf.get(term);\n            if (f == null) f = 0.0;\n            tf.put(term, f + 1);\n        }\n        if (type != TfType.NATURAL)\n        {\n            for (TERM term : tf.keySet())\n            {\n                switch (type)\n                {\n                    case LOGARITHM:\n                        tf.put(term, 1 + Math.log(tf.get(term)));\n                        break;\n                    case BOOLEAN:\n                        tf.put(term, tf.get(term) == 0.0 ? 0.0 : 1.0);\n                        break;\n                }\n            }\n        }\n        return tf;\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "tf", "(", "Collection", "<", "TERM", ">", "document", ",", "TfType", "type", ")", "{", "Map", "<", "TERM", ",", "Double", ">", "tf", "=", "new", "HashMap", "<", "TERM", ",", "Double", ">", "(", ")", ";", "for", "(", "TERM", "term", ":", "document", ")", "{", "Double", "f", "=", "tf", ".", "get", "(", "term", ")", ";", "if", "(", "f", "==", "null", ")", "f", "=", "0.0", ";", "tf", ".", "put", "(", "term", ",", "f", "+", "1", ")", ";", "}", "if", "(", "type", "!=", "TfType", ".", "NATURAL", ")", "{", "for", "(", "TERM", "term", ":", "tf", ".", "keySet", "(", ")", ")", "{", "switch", "(", "type", ")", "{", "case", "LOGARITHM", ":", "tf", ".", "put", "(", "term", ",", "1", "+", "Math", ".", "log", "(", "tf", ".", "get", "(", "term", ")", ")", ")", ";", "break", ";", "case", "BOOLEAN", ":", "tf", ".", "put", "(", "term", ",", "tf", ".", "get", "(", "term", ")", "==", "0.0", "?", "0.0", ":", "1.0", ")", ";", "break", ";", "}", "}", "}", "return", "tf", ";", "}"], "docstring": "\u5355\u6587\u6863\u8bcd\u9891\n\n@param document \u8bcd\u888b\n@param type     \u8bcd\u9891\u8ba1\u7b97\u65b9\u5f0f\n@param <TERM>   \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u5305\u542b\u8bcd\u9891\u7684Map", "docstring_tokens": ["\u5355\u6587\u6863\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L54-L79", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tf", "original_string": "public static <TERM> Map<TERM, Double> tf(Collection<TERM> document)\n    {\n        return tf(document, TfType.NATURAL);\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> tf(Collection<TERM> document)\n    {\n        return tf(document, TfType.NATURAL);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "tf", "(", "Collection", "<", "TERM", ">", "document", ")", "{", "return", "tf", "(", "document", ",", "TfType", ".", "NATURAL", ")", ";", "}"], "docstring": "\u5355\u6587\u6863\u8bcd\u9891\n\n@param document \u8bcd\u888b\n@param <TERM>   \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u5305\u542b\u8bcd\u9891\u7684Map", "docstring_tokens": ["\u5355\u6587\u6863\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L88-L91", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tfs", "original_string": "public static <TERM> Iterable<Map<TERM, Double>> tfs(Iterable<Collection<TERM>> documents, TfType type)\n    {\n        List<Map<TERM, Double>> tfs = new ArrayList<Map<TERM, Double>>();\n        for (Collection<TERM> document : documents)\n        {\n            tfs.add(tf(document, type));\n        }\n        return tfs;\n    }", "language": "java", "code": "public static <TERM> Iterable<Map<TERM, Double>> tfs(Iterable<Collection<TERM>> documents, TfType type)\n    {\n        List<Map<TERM, Double>> tfs = new ArrayList<Map<TERM, Double>>();\n        for (Collection<TERM> document : documents)\n        {\n            tfs.add(tf(document, type));\n        }\n        return tfs;\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Iterable", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "tfs", "(", "Iterable", "<", "Collection", "<", "TERM", ">", ">", "documents", ",", "TfType", "type", ")", "{", "List", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "tfs", "=", "new", "ArrayList", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "(", ")", ";", "for", "(", "Collection", "<", "TERM", ">", "document", ":", "documents", ")", "{", "tfs", ".", "add", "(", "tf", "(", "document", ",", "type", ")", ")", ";", "}", "return", "tfs", ";", "}"], "docstring": "\u591a\u6587\u6863\u8bcd\u9891\n\n@param documents \u591a\u4e2a\u6587\u6863\uff0c\u6bcf\u4e2a\u6587\u6863\u90fd\u662f\u4e00\u4e2a\u8bcd\u888b\n@param type      \u8bcd\u9891\u8ba1\u7b97\u65b9\u5f0f\n@param <TERM>    \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u5305\u542b\u8bcd\u9891\u7684Map\u7684\u5217\u8868", "docstring_tokens": ["\u591a\u6587\u6863\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L101-L109", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tfs", "original_string": "public static <TERM> Iterable<Map<TERM, Double>> tfs(Iterable<Collection<TERM>> documents)\n    {\n        return tfs(documents, TfType.NATURAL);\n    }", "language": "java", "code": "public static <TERM> Iterable<Map<TERM, Double>> tfs(Iterable<Collection<TERM>> documents)\n    {\n        return tfs(documents, TfType.NATURAL);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Iterable", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "tfs", "(", "Iterable", "<", "Collection", "<", "TERM", ">", ">", "documents", ")", "{", "return", "tfs", "(", "documents", ",", "TfType", ".", "NATURAL", ")", ";", "}"], "docstring": "\u591a\u6587\u6863\u8bcd\u9891\n\n@param documents \u591a\u4e2a\u6587\u6863\uff0c\u6bcf\u4e2a\u6587\u6863\u90fd\u662f\u4e00\u4e2a\u8bcd\u888b\n@param <TERM>    \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u5305\u542b\u8bcd\u9891\u7684Map\u7684\u5217\u8868", "docstring_tokens": ["\u591a\u6587\u6863\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L118-L121", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.idf", "original_string": "public static <TERM> Map<TERM, Double> idf(Iterable<Iterable<TERM>> documentVocabularies,\n                                               boolean smooth, boolean addOne)\n    {\n        Map<TERM, Integer> df = new HashMap<TERM, Integer>();\n        int d = smooth ? 1 : 0;\n        int a = addOne ? 1 : 0;\n        int n = d;\n        for (Iterable<TERM> documentVocabulary : documentVocabularies)\n        {\n            n += 1;\n            for (TERM term : documentVocabulary)\n            {\n                Integer t = df.get(term);\n                if (t == null) t = d;\n                df.put(term, t + 1);\n            }\n        }\n        Map<TERM, Double> idf = new HashMap<TERM, Double>();\n        for (Map.Entry<TERM, Integer> e : df.entrySet())\n        {\n            TERM term = e.getKey();\n            double f = e.getValue();\n            idf.put(term, Math.log(n / f) + a);\n        }\n        return idf;\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> idf(Iterable<Iterable<TERM>> documentVocabularies,\n                                               boolean smooth, boolean addOne)\n    {\n        Map<TERM, Integer> df = new HashMap<TERM, Integer>();\n        int d = smooth ? 1 : 0;\n        int a = addOne ? 1 : 0;\n        int n = d;\n        for (Iterable<TERM> documentVocabulary : documentVocabularies)\n        {\n            n += 1;\n            for (TERM term : documentVocabulary)\n            {\n                Integer t = df.get(term);\n                if (t == null) t = d;\n                df.put(term, t + 1);\n            }\n        }\n        Map<TERM, Double> idf = new HashMap<TERM, Double>();\n        for (Map.Entry<TERM, Integer> e : df.entrySet())\n        {\n            TERM term = e.getKey();\n            double f = e.getValue();\n            idf.put(term, Math.log(n / f) + a);\n        }\n        return idf;\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "idf", "(", "Iterable", "<", "Iterable", "<", "TERM", ">", ">", "documentVocabularies", ",", "boolean", "smooth", ",", "boolean", "addOne", ")", "{", "Map", "<", "TERM", ",", "Integer", ">", "df", "=", "new", "HashMap", "<", "TERM", ",", "Integer", ">", "(", ")", ";", "int", "d", "=", "smooth", "?", "1", ":", "0", ";", "int", "a", "=", "addOne", "?", "1", ":", "0", ";", "int", "n", "=", "d", ";", "for", "(", "Iterable", "<", "TERM", ">", "documentVocabulary", ":", "documentVocabularies", ")", "{", "n", "+=", "1", ";", "for", "(", "TERM", "term", ":", "documentVocabulary", ")", "{", "Integer", "t", "=", "df", ".", "get", "(", "term", ")", ";", "if", "(", "t", "==", "null", ")", "t", "=", "d", ";", "df", ".", "put", "(", "term", ",", "t", "+", "1", ")", ";", "}", "}", "Map", "<", "TERM", ",", "Double", ">", "idf", "=", "new", "HashMap", "<", "TERM", ",", "Double", ">", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "TERM", ",", "Integer", ">", "e", ":", "df", ".", "entrySet", "(", ")", ")", "{", "TERM", "term", "=", "e", ".", "getKey", "(", ")", ";", "double", "f", "=", "e", ".", "getValue", "(", ")", ";", "idf", ".", "put", "(", "term", ",", "Math", ".", "log", "(", "n", "/", "f", ")", "+", "a", ")", ";", "}", "return", "idf", ";", "}"], "docstring": "\u4e00\u7cfb\u5217\u6587\u6863\u7684\u5012\u6392\u8bcd\u9891\n\n@param documentVocabularies \u8bcd\u8868\n@param smooth               \u5e73\u6ed1\u53c2\u6570\uff0c\u89c6\u4f5c\u989d\u5916\u6709\u4e00\u4e2a\u6587\u6863\uff0c\u8be5\u6587\u6863\u542b\u6709smooth\u4e2a\u6bcf\u4e2a\u8bcd\u8bed\n@param addOne               tf-idf\u52a0\u4e00\u5e73\u6ed1\n@param <TERM>               \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->\u5012\u6392\u6587\u6863\u7684Map", "docstring_tokens": ["\u4e00\u7cfb\u5217\u6587\u6863\u7684\u5012\u6392\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L132-L157", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.idf", "original_string": "public static <TERM> Map<TERM, Double> idf(Iterable<Iterable<TERM>> documentVocabularies)\n    {\n        return idf(documentVocabularies, true, true);\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> idf(Iterable<Iterable<TERM>> documentVocabularies)\n    {\n        return idf(documentVocabularies, true, true);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "idf", "(", "Iterable", "<", "Iterable", "<", "TERM", ">", ">", "documentVocabularies", ")", "{", "return", "idf", "(", "documentVocabularies", ",", "true", ",", "true", ")", ";", "}"], "docstring": "\u5e73\u6ed1\u5904\u7406\u540e\u7684\u4e00\u7cfb\u5217\u6587\u6863\u7684\u5012\u6392\u8bcd\u9891\n\n@param documentVocabularies \u8bcd\u8868\n@param <TERM>               \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->\u5012\u6392\u6587\u6863\u7684Map", "docstring_tokens": ["\u5e73\u6ed1\u5904\u7406\u540e\u7684\u4e00\u7cfb\u5217\u6587\u6863\u7684\u5012\u6392\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L166-L169", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tfIdf", "original_string": "public static <TERM> Map<TERM, Double> tfIdf(Map<TERM, Double> tf, Map<TERM, Double> idf,\n                                                 Normalization normalization)\n    {\n        Map<TERM, Double> tfIdf = new HashMap<TERM, Double>();\n        for (TERM term : tf.keySet())\n        {\n            Double TF = tf.get(term);\n            if (TF == null) TF = 1.;\n            Double IDF = idf.get(term);\n            if (IDF == null) IDF = 1.;\n            tfIdf.put(term, TF * IDF);\n        }\n        if (normalization == Normalization.COSINE)\n        {\n            double n = 0.0;\n            for (double x : tfIdf.values())\n            {\n                n += x * x;\n            }\n            n = Math.sqrt(n);\n\n            for (TERM term : tfIdf.keySet())\n            {\n                tfIdf.put(term, tfIdf.get(term) / n);\n            }\n        }\n        return tfIdf;\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> tfIdf(Map<TERM, Double> tf, Map<TERM, Double> idf,\n                                                 Normalization normalization)\n    {\n        Map<TERM, Double> tfIdf = new HashMap<TERM, Double>();\n        for (TERM term : tf.keySet())\n        {\n            Double TF = tf.get(term);\n            if (TF == null) TF = 1.;\n            Double IDF = idf.get(term);\n            if (IDF == null) IDF = 1.;\n            tfIdf.put(term, TF * IDF);\n        }\n        if (normalization == Normalization.COSINE)\n        {\n            double n = 0.0;\n            for (double x : tfIdf.values())\n            {\n                n += x * x;\n            }\n            n = Math.sqrt(n);\n\n            for (TERM term : tfIdf.keySet())\n            {\n                tfIdf.put(term, tfIdf.get(term) / n);\n            }\n        }\n        return tfIdf;\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "tfIdf", "(", "Map", "<", "TERM", ",", "Double", ">", "tf", ",", "Map", "<", "TERM", ",", "Double", ">", "idf", ",", "Normalization", "normalization", ")", "{", "Map", "<", "TERM", ",", "Double", ">", "tfIdf", "=", "new", "HashMap", "<", "TERM", ",", "Double", ">", "(", ")", ";", "for", "(", "TERM", "term", ":", "tf", ".", "keySet", "(", ")", ")", "{", "Double", "TF", "=", "tf", ".", "get", "(", "term", ")", ";", "if", "(", "TF", "==", "null", ")", "TF", "=", "1.", ";", "Double", "IDF", "=", "idf", ".", "get", "(", "term", ")", ";", "if", "(", "IDF", "==", "null", ")", "IDF", "=", "1.", ";", "tfIdf", ".", "put", "(", "term", ",", "TF", "*", "IDF", ")", ";", "}", "if", "(", "normalization", "==", "Normalization", ".", "COSINE", ")", "{", "double", "n", "=", "0.0", ";", "for", "(", "double", "x", ":", "tfIdf", ".", "values", "(", ")", ")", "{", "n", "+=", "x", "*", "x", ";", "}", "n", "=", "Math", ".", "sqrt", "(", "n", ")", ";", "for", "(", "TERM", "term", ":", "tfIdf", ".", "keySet", "(", ")", ")", "{", "tfIdf", ".", "put", "(", "term", ",", "tfIdf", ".", "get", "(", "term", ")", "/", "n", ")", ";", "}", "}", "return", "tfIdf", ";", "}"], "docstring": "\u8ba1\u7b97\u6587\u6863\u7684tf-idf\n\n@param tf            \u8bcd\u9891\n@param idf           \u5012\u6392\u9891\u7387\n@param normalization \u6b63\u89c4\u5316\n@param <TERM>        \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->tf-idf\u7684Map", "docstring_tokens": ["\u8ba1\u7b97\u6587\u6863\u7684tf", "-", "idf"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L180-L207", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.tfIdf", "original_string": "public static <TERM> Map<TERM, Double> tfIdf(Map<TERM, Double> tf, Map<TERM, Double> idf)\n    {\n        return tfIdf(tf, idf, Normalization.NONE);\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> tfIdf(Map<TERM, Double> tf, Map<TERM, Double> idf)\n    {\n        return tfIdf(tf, idf, Normalization.NONE);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "tfIdf", "(", "Map", "<", "TERM", ",", "Double", ">", "tf", ",", "Map", "<", "TERM", ",", "Double", ">", "idf", ")", "{", "return", "tfIdf", "(", "tf", ",", "idf", ",", "Normalization", ".", "NONE", ")", ";", "}"], "docstring": "\u8ba1\u7b97\u6587\u6863\u7684tf-idf\uff08\u4e0d\u6b63\u89c4\u5316\uff09\n\n@param tf     \u8bcd\u9891\n@param idf    \u5012\u6392\u9891\u7387\n@param <TERM> \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->tf-idf\u7684Map", "docstring_tokens": ["\u8ba1\u7b97\u6587\u6863\u7684tf", "-", "idf\uff08\u4e0d\u6b63\u89c4\u5316\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L217-L220", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.idfFromTfs", "original_string": "public static <TERM> Map<TERM, Double> idfFromTfs(Iterable<Map<TERM, Double>> tfs, boolean smooth, boolean addOne)\n    {\n        return idf(new KeySetIterable<TERM, Double>(tfs), smooth, addOne);\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> idfFromTfs(Iterable<Map<TERM, Double>> tfs, boolean smooth, boolean addOne)\n    {\n        return idf(new KeySetIterable<TERM, Double>(tfs), smooth, addOne);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "idfFromTfs", "(", "Iterable", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "tfs", ",", "boolean", "smooth", ",", "boolean", "addOne", ")", "{", "return", "idf", "(", "new", "KeySetIterable", "<", "TERM", ",", "Double", ">", "(", "tfs", ")", ",", "smooth", ",", "addOne", ")", ";", "}"], "docstring": "\u4ece\u8bcd\u9891\u96c6\u5408\u5efa\u7acb\u5012\u6392\u9891\u7387\n\n@param tfs    \u6b21\u54c1\u96c6\u5408\n@param smooth \u5e73\u6ed1\u53c2\u6570\uff0c\u89c6\u4f5c\u989d\u5916\u6709\u4e00\u4e2a\u6587\u6863\uff0c\u8be5\u6587\u6863\u542b\u6709smooth\u4e2a\u6bcf\u4e2a\u8bcd\u8bed\n@param addOne tf-idf\u52a0\u4e00\u5e73\u6ed1\n@param <TERM> \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->\u5012\u6392\u6587\u6863\u7684Map", "docstring_tokens": ["\u4ece\u8bcd\u9891\u96c6\u5408\u5efa\u7acb\u5012\u6392\u9891\u7387"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L231-L234", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java", "func_name": "TfIdf.idfFromTfs", "original_string": "public static <TERM> Map<TERM, Double> idfFromTfs(Iterable<Map<TERM, Double>> tfs)\n    {\n        return idfFromTfs(tfs, true, true);\n    }", "language": "java", "code": "public static <TERM> Map<TERM, Double> idfFromTfs(Iterable<Map<TERM, Double>> tfs)\n    {\n        return idfFromTfs(tfs, true, true);\n    }", "code_tokens": ["public", "static", "<", "TERM", ">", "Map", "<", "TERM", ",", "Double", ">", "idfFromTfs", "(", "Iterable", "<", "Map", "<", "TERM", ",", "Double", ">", ">", "tfs", ")", "{", "return", "idfFromTfs", "(", "tfs", ",", "true", ",", "true", ")", ";", "}"], "docstring": "\u4ece\u8bcd\u9891\u96c6\u5408\u5efa\u7acb\u5012\u6392\u9891\u7387\uff08\u9ed8\u8ba4\u5e73\u6ed1\u8bcd\u9891\uff0c\u4e14\u52a0\u4e00\u5e73\u6ed1tf-idf\uff09\n\n@param tfs    \u6b21\u54c1\u96c6\u5408\n@param <TERM> \u8bcd\u8bed\u7c7b\u578b\n@return \u4e00\u4e2a\u8bcd\u8bed->\u5012\u6392\u6587\u6863\u7684Map", "docstring_tokens": ["\u4ece\u8bcd\u9891\u96c6\u5408\u5efa\u7acb\u5012\u6392\u9891\u7387\uff08\u9ed8\u8ba4\u5e73\u6ed1\u8bcd\u9891\uff0c\u4e14\u52a0\u4e00\u5e73\u6ed1tf", "-", "idf\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/mining/word/TfIdf.java#L243-L246", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.convert2Array", "original_string": "public static Pinyin[] convert2Array(String complexText, boolean removeTone)\n    {\n        return PinyinUtil.convertList2Array(convert(complexText, removeTone));\n    }", "language": "java", "code": "public static Pinyin[] convert2Array(String complexText, boolean removeTone)\n    {\n        return PinyinUtil.convertList2Array(convert(complexText, removeTone));\n    }", "code_tokens": ["public", "static", "Pinyin", "[", "]", "convert2Array", "(", "String", "complexText", ",", "boolean", "removeTone", ")", "{", "return", "PinyinUtil", ".", "convertList2Array", "(", "convert", "(", "complexText", ",", "removeTone", ")", ")", ";", "}"], "docstring": "\u5c06\u62fc\u97f3\u6587\u672c\u8f6c\u5316\u4e3a\u5b8c\u6574\u7684\u62fc\u97f3\uff0c\u652f\u6301\u6c49\u82f1\u6df7\u5408\u7684\u6742\u4e71\u6587\u672c\uff0c\u6ce8\u610f\u5982\u679c\u6df7\u7528\u62fc\u97f3\u548c\u8f93\u5165\u6cd5\u5934\u7684\u8bdd\uff0c\u5e76\u4e0d\u4f1a\u6709\u591a\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u58f0\u8c03\u4e5f\u4e0d\u4f1a\u51c6\u7684\n@param complexText\n@return", "docstring_tokens": ["\u5c06\u62fc\u97f3\u6587\u672c\u8f6c\u5316\u4e3a\u5b8c\u6574\u7684\u62fc\u97f3\uff0c\u652f\u6301\u6c49\u82f1\u6df7\u5408\u7684\u6742\u4e71\u6587\u672c\uff0c\u6ce8\u610f\u5982\u679c\u6df7\u7528\u62fc\u97f3\u548c\u8f93\u5165\u6cd5\u5934\u7684\u8bdd\uff0c\u5e76\u4e0d\u4f1a\u6709\u591a\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u58f0\u8c03\u4e5f\u4e0d\u4f1a\u51c6\u7684"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L59-L62", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.convert", "original_string": "public static List<Pinyin> convert(String complexText)\n    {\n        List<Pinyin> pinyinList = new LinkedList<Pinyin>();\n        Collection<Token> tokenize = trie.tokenize(complexText);\n//        System.out.println(tokenize);\n        for (Token token : tokenize)\n        {\n            String fragment = token.getFragment();\n            if (token.isMatch())\n            {\n                // \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c\n                pinyinList.add(convertSingle(fragment));\n            }\n            else\n            {\n                pinyinList.addAll(PinyinDictionary.convertToPinyin(fragment));\n            }\n        }\n\n        return pinyinList;\n    }", "language": "java", "code": "public static List<Pinyin> convert(String complexText)\n    {\n        List<Pinyin> pinyinList = new LinkedList<Pinyin>();\n        Collection<Token> tokenize = trie.tokenize(complexText);\n//        System.out.println(tokenize);\n        for (Token token : tokenize)\n        {\n            String fragment = token.getFragment();\n            if (token.isMatch())\n            {\n                // \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c\n                pinyinList.add(convertSingle(fragment));\n            }\n            else\n            {\n                pinyinList.addAll(PinyinDictionary.convertToPinyin(fragment));\n            }\n        }\n\n        return pinyinList;\n    }", "code_tokens": ["public", "static", "List", "<", "Pinyin", ">", "convert", "(", "String", "complexText", ")", "{", "List", "<", "Pinyin", ">", "pinyinList", "=", "new", "LinkedList", "<", "Pinyin", ">", "(", ")", ";", "Collection", "<", "Token", ">", "tokenize", "=", "trie", ".", "tokenize", "(", "complexText", ")", ";", "//        System.out.println(tokenize);", "for", "(", "Token", "token", ":", "tokenize", ")", "{", "String", "fragment", "=", "token", ".", "getFragment", "(", ")", ";", "if", "(", "token", ".", "isMatch", "(", ")", ")", "{", "// \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c", "pinyinList", ".", "add", "(", "convertSingle", "(", "fragment", ")", ")", ";", "}", "else", "{", "pinyinList", ".", "addAll", "(", "PinyinDictionary", ".", "convertToPinyin", "(", "fragment", ")", ")", ";", "}", "}", "return", "pinyinList", ";", "}"], "docstring": "\u6587\u672c\u8f6c\u62fc\u97f3\n@param complexText\n@return", "docstring_tokens": ["\u6587\u672c\u8f6c\u62fc\u97f3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L69-L89", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.convert", "original_string": "public static List<Pinyin> convert(String complexText, boolean removeTone)\n    {\n        List<Pinyin> pinyinList = convert(complexText);\n        if (removeTone)\n        {\n            makeToneToTheSame(pinyinList);\n        }\n        return pinyinList;\n    }", "language": "java", "code": "public static List<Pinyin> convert(String complexText, boolean removeTone)\n    {\n        List<Pinyin> pinyinList = convert(complexText);\n        if (removeTone)\n        {\n            makeToneToTheSame(pinyinList);\n        }\n        return pinyinList;\n    }", "code_tokens": ["public", "static", "List", "<", "Pinyin", ">", "convert", "(", "String", "complexText", ",", "boolean", "removeTone", ")", "{", "List", "<", "Pinyin", ">", "pinyinList", "=", "convert", "(", "complexText", ")", ";", "if", "(", "removeTone", ")", "{", "makeToneToTheSame", "(", "pinyinList", ")", ";", "}", "return", "pinyinList", ";", "}"], "docstring": "\u6587\u672c\u8f6c\u62fc\u97f3\n@param complexText \u6587\u672c\n@param removeTone \u662f\u5426\u5c06\u6240\u6709\u7684\u97f3\u8c03\u90fd\u540c\u4e00\u5316\n@return", "docstring_tokens": ["\u6587\u672c\u8f6c\u62fc\u97f3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L97-L105", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.convert2Pair", "original_string": "public static Pair<List<Pinyin>, List<Boolean>> convert2Pair(String complexText, boolean removeTone)\n    {\n        List<Pinyin> pinyinList = new LinkedList<Pinyin>();\n        List<Boolean> booleanList = new LinkedList<Boolean>();\n        Collection<Token> tokenize = trie.tokenize(complexText);\n        for (Token token : tokenize)\n        {\n            String fragment = token.getFragment();\n            if (token.isMatch())\n            {\n                // \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c\n                Pinyin pinyin = convertSingle(fragment);\n                pinyinList.add(pinyin);\n                if (fragment.length() == pinyin.getPinyinWithoutTone().length())\n                {\n                    booleanList.add(true);\n                }\n                else\n                {\n                    booleanList.add(false);\n                }\n            }\n            else\n            {\n                List<Pinyin> pinyinListFragment = PinyinDictionary.convertToPinyin(fragment);\n                pinyinList.addAll(pinyinListFragment);\n                for (int i = 0; i < pinyinListFragment.size(); ++i)\n                {\n                    booleanList.add(true);\n                }\n            }\n        }\n        makeToneToTheSame(pinyinList);\n        return new Pair<List<Pinyin>, List<Boolean>>(pinyinList, booleanList);\n    }", "language": "java", "code": "public static Pair<List<Pinyin>, List<Boolean>> convert2Pair(String complexText, boolean removeTone)\n    {\n        List<Pinyin> pinyinList = new LinkedList<Pinyin>();\n        List<Boolean> booleanList = new LinkedList<Boolean>();\n        Collection<Token> tokenize = trie.tokenize(complexText);\n        for (Token token : tokenize)\n        {\n            String fragment = token.getFragment();\n            if (token.isMatch())\n            {\n                // \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c\n                Pinyin pinyin = convertSingle(fragment);\n                pinyinList.add(pinyin);\n                if (fragment.length() == pinyin.getPinyinWithoutTone().length())\n                {\n                    booleanList.add(true);\n                }\n                else\n                {\n                    booleanList.add(false);\n                }\n            }\n            else\n            {\n                List<Pinyin> pinyinListFragment = PinyinDictionary.convertToPinyin(fragment);\n                pinyinList.addAll(pinyinListFragment);\n                for (int i = 0; i < pinyinListFragment.size(); ++i)\n                {\n                    booleanList.add(true);\n                }\n            }\n        }\n        makeToneToTheSame(pinyinList);\n        return new Pair<List<Pinyin>, List<Boolean>>(pinyinList, booleanList);\n    }", "code_tokens": ["public", "static", "Pair", "<", "List", "<", "Pinyin", ">", ",", "List", "<", "Boolean", ">", ">", "convert2Pair", "(", "String", "complexText", ",", "boolean", "removeTone", ")", "{", "List", "<", "Pinyin", ">", "pinyinList", "=", "new", "LinkedList", "<", "Pinyin", ">", "(", ")", ";", "List", "<", "Boolean", ">", "booleanList", "=", "new", "LinkedList", "<", "Boolean", ">", "(", ")", ";", "Collection", "<", "Token", ">", "tokenize", "=", "trie", ".", "tokenize", "(", "complexText", ")", ";", "for", "(", "Token", "token", ":", "tokenize", ")", "{", "String", "fragment", "=", "token", ".", "getFragment", "(", ")", ";", "if", "(", "token", ".", "isMatch", "(", ")", ")", "{", "// \u662f\u62fc\u97f3\u6216\u62fc\u97f3\u7684\u4e00\u90e8\u5206\uff0c\u7528map\u8f6c", "Pinyin", "pinyin", "=", "convertSingle", "(", "fragment", ")", ";", "pinyinList", ".", "add", "(", "pinyin", ")", ";", "if", "(", "fragment", ".", "length", "(", ")", "==", "pinyin", ".", "getPinyinWithoutTone", "(", ")", ".", "length", "(", ")", ")", "{", "booleanList", ".", "add", "(", "true", ")", ";", "}", "else", "{", "booleanList", ".", "add", "(", "false", ")", ";", "}", "}", "else", "{", "List", "<", "Pinyin", ">", "pinyinListFragment", "=", "PinyinDictionary", ".", "convertToPinyin", "(", "fragment", ")", ";", "pinyinList", ".", "addAll", "(", "pinyinListFragment", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "pinyinListFragment", ".", "size", "(", ")", ";", "++", "i", ")", "{", "booleanList", ".", "add", "(", "true", ")", ";", "}", "}", "}", "makeToneToTheSame", "(", "pinyinList", ")", ";", "return", "new", "Pair", "<", "List", "<", "Pinyin", ">", ",", "List", "<", "Boolean", ">", ">", "(", "pinyinList", ",", "booleanList", ")", ";", "}"], "docstring": "\u5c06\u6df7\u5408\u6587\u672c\u8f6c\u4e3a\u62fc\u97f3\n@param complexText \u6df7\u5408\u6c49\u5b57\u3001\u62fc\u97f3\u3001\u8f93\u5165\u6cd5\u5934\u7684\u6587\u672c\uff0c\u6bd4\u5982\u201c\u98de\u6d41zh\u4e0bsqianch\u201d\n@param removeTone\n@return \u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u952e\u4e3a\u62fc\u97f3\u5217\u8868\uff0c\u503c\u4e3a\u7c7b\u578b\uff08true\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u62fc\u97f3\uff0cfalse\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8f93\u5165\u6cd5\u5934\uff09", "docstring_tokens": ["\u5c06\u6df7\u5408\u6587\u672c\u8f6c\u4e3a\u62fc\u97f3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L113-L147", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.convertSingle", "original_string": "public static Pinyin convertSingle(String single)\n    {\n        Pinyin pinyin = map.get(single);\n        if (pinyin == null) return Pinyin.none5;\n\n        return pinyin;\n    }", "language": "java", "code": "public static Pinyin convertSingle(String single)\n    {\n        Pinyin pinyin = map.get(single);\n        if (pinyin == null) return Pinyin.none5;\n\n        return pinyin;\n    }", "code_tokens": ["public", "static", "Pinyin", "convertSingle", "(", "String", "single", ")", "{", "Pinyin", "pinyin", "=", "map", ".", "get", "(", "single", ")", ";", "if", "(", "pinyin", "==", "null", ")", "return", "Pinyin", ".", "none5", ";", "return", "pinyin", ";", "}"], "docstring": "\u5c06\u5355\u4e2a\u97f3\u8282\u8f6c\u4e3a\u62fc\u97f3\n@param single\n@return", "docstring_tokens": ["\u5c06\u5355\u4e2a\u97f3\u8282\u8f6c\u4e3a\u62fc\u97f3"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L154-L160", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java", "func_name": "String2PinyinConverter.makeToneToTheSame", "original_string": "public static List<Pinyin> makeToneToTheSame(List<Pinyin> pinyinList)\n    {\n        ListIterator<Pinyin> listIterator = pinyinList.listIterator();\n        while (listIterator.hasNext())\n        {\n            listIterator.set(convert2Tone5(listIterator.next()));\n        }\n\n        return pinyinList;\n    }", "language": "java", "code": "public static List<Pinyin> makeToneToTheSame(List<Pinyin> pinyinList)\n    {\n        ListIterator<Pinyin> listIterator = pinyinList.listIterator();\n        while (listIterator.hasNext())\n        {\n            listIterator.set(convert2Tone5(listIterator.next()));\n        }\n\n        return pinyinList;\n    }", "code_tokens": ["public", "static", "List", "<", "Pinyin", ">", "makeToneToTheSame", "(", "List", "<", "Pinyin", ">", "pinyinList", ")", "{", "ListIterator", "<", "Pinyin", ">", "listIterator", "=", "pinyinList", ".", "listIterator", "(", ")", ";", "while", "(", "listIterator", ".", "hasNext", "(", ")", ")", "{", "listIterator", ".", "set", "(", "convert2Tone5", "(", "listIterator", ".", "next", "(", ")", ")", ")", ";", "}", "return", "pinyinList", ";", "}"], "docstring": "\u5c06\u6240\u6709\u97f3\u8c03\u90fd\u8f6c\u4e3a1\n@param pinyinList\n@return", "docstring_tokens": ["\u5c06\u6240\u6709\u97f3\u8c03\u90fd\u8f6c\u4e3a1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/String2PinyinConverter.java#L177-L186", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/AbstractDependencyParser.java", "func_name": "AbstractDependencyParser.setDeprelTranslater", "original_string": "public IDependencyParser setDeprelTranslater(String deprelTranslatorPath)\n    {\n        deprelTranslater = GlobalObjectPool.get(deprelTranslatorPath);\n        if (deprelTranslater != null) return this;\n\n        IOUtil.LineIterator iterator = new IOUtil.LineIterator(deprelTranslatorPath);\n        deprelTranslater = new TreeMap<String, String>();\n        while (iterator.hasNext())\n        {\n            String[] args = iterator.next().split(\"\\\\s\");\n            deprelTranslater.put(args[0], args[1]);\n        }\n        if (deprelTranslater.size() == 0)\n        {\n            deprelTranslater = null;\n        }\n        GlobalObjectPool.put(deprelTranslatorPath, deprelTranslater);\n\n        return this;\n    }", "language": "java", "code": "public IDependencyParser setDeprelTranslater(String deprelTranslatorPath)\n    {\n        deprelTranslater = GlobalObjectPool.get(deprelTranslatorPath);\n        if (deprelTranslater != null) return this;\n\n        IOUtil.LineIterator iterator = new IOUtil.LineIterator(deprelTranslatorPath);\n        deprelTranslater = new TreeMap<String, String>();\n        while (iterator.hasNext())\n        {\n            String[] args = iterator.next().split(\"\\\\s\");\n            deprelTranslater.put(args[0], args[1]);\n        }\n        if (deprelTranslater.size() == 0)\n        {\n            deprelTranslater = null;\n        }\n        GlobalObjectPool.put(deprelTranslatorPath, deprelTranslater);\n\n        return this;\n    }", "code_tokens": ["public", "IDependencyParser", "setDeprelTranslater", "(", "String", "deprelTranslatorPath", ")", "{", "deprelTranslater", "=", "GlobalObjectPool", ".", "get", "(", "deprelTranslatorPath", ")", ";", "if", "(", "deprelTranslater", "!=", "null", ")", "return", "this", ";", "IOUtil", ".", "LineIterator", "iterator", "=", "new", "IOUtil", ".", "LineIterator", "(", "deprelTranslatorPath", ")", ";", "deprelTranslater", "=", "new", "TreeMap", "<", "String", ",", "String", ">", "(", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "String", "[", "]", "args", "=", "iterator", ".", "next", "(", ")", ".", "split", "(", "\"\\\\s\"", ")", ";", "deprelTranslater", ".", "put", "(", "args", "[", "0", "]", ",", "args", "[", "1", "]", ")", ";", "}", "if", "(", "deprelTranslater", ".", "size", "(", ")", "==", "0", ")", "{", "deprelTranslater", "=", "null", ";", "}", "GlobalObjectPool", ".", "put", "(", "deprelTranslatorPath", ",", "deprelTranslater", ")", ";", "return", "this", ";", "}"], "docstring": "\u8bbe\u7f6e\u6620\u5c04\u8868\n@param deprelTranslatorPath \u6620\u5c04\u8868\u8def\u5f84\n@return", "docstring_tokens": ["\u8bbe\u7f6e\u6620\u5c04\u8868"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/AbstractDependencyParser.java#L99-L118", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java", "func_name": "SuffixDictionary.add", "original_string": "public void add(String word)\n    {\n        word = reverse(word);\n        trie.put(word, word.length());\n    }", "language": "java", "code": "public void add(String word)\n    {\n        word = reverse(word);\n        trie.put(word, word.length());\n    }", "code_tokens": ["public", "void", "add", "(", "String", "word", ")", "{", "word", "=", "reverse", "(", "word", ")", ";", "trie", ".", "put", "(", "word", ",", "word", ".", "length", "(", ")", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u4e00\u4e2a\u8bcd\u8bed\n@param word", "docstring_tokens": ["\u6dfb\u52a0\u4e00\u4e2a\u8bcd\u8bed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java#L35-L39", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java", "func_name": "SuffixDictionary.get", "original_string": "public int get(String suffix)\n    {\n        suffix = reverse(suffix);\n        Integer length = trie.get(suffix);\n        if (length == null) return 0;\n\n        return length;\n    }", "language": "java", "code": "public int get(String suffix)\n    {\n        suffix = reverse(suffix);\n        Integer length = trie.get(suffix);\n        if (length == null) return 0;\n\n        return length;\n    }", "code_tokens": ["public", "int", "get", "(", "String", "suffix", ")", "{", "suffix", "=", "reverse", "(", "suffix", ")", ";", "Integer", "length", "=", "trie", ".", "get", "(", "suffix", ")", ";", "if", "(", "length", "==", "null", ")", "return", "0", ";", "return", "length", ";", "}"], "docstring": "\u67e5\u627e\u662f\u5426\u6709\u8be5\u540e\u7f00\n@param suffix\n@return", "docstring_tokens": ["\u67e5\u627e\u662f\u5426\u6709\u8be5\u540e\u7f00"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java#L62-L69", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java", "func_name": "SuffixDictionary.endsWith", "original_string": "public boolean endsWith(String word)\n    {\n        word = reverse(word);\n        return trie.commonPrefixSearchWithValue(word).size() > 0;\n    }", "language": "java", "code": "public boolean endsWith(String word)\n    {\n        word = reverse(word);\n        return trie.commonPrefixSearchWithValue(word).size() > 0;\n    }", "code_tokens": ["public", "boolean", "endsWith", "(", "String", "word", ")", "{", "word", "=", "reverse", "(", "word", ")", ";", "return", "trie", ".", "commonPrefixSearchWithValue", "(", "word", ")", ".", "size", "(", ")", ">", "0", ";", "}"], "docstring": "\u8bcd\u8bed\u662f\u5426\u4ee5\u8be5\u8bcd\u5178\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u7ed3\u5c3e\n@param word\n@return", "docstring_tokens": ["\u8bcd\u8bed\u662f\u5426\u4ee5\u8be5\u8bcd\u5178\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\u7ed3\u5c3e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java#L76-L80", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java", "func_name": "SuffixDictionary.getLongestSuffixLength", "original_string": "public int getLongestSuffixLength(String word)\n    {\n        word = reverse(word);\n        LinkedList<Map.Entry<String, Integer>> suffixList = trie.commonPrefixSearchWithValue(word);\n        if (suffixList.size() == 0) return 0;\n        return suffixList.getLast().getValue();\n    }", "language": "java", "code": "public int getLongestSuffixLength(String word)\n    {\n        word = reverse(word);\n        LinkedList<Map.Entry<String, Integer>> suffixList = trie.commonPrefixSearchWithValue(word);\n        if (suffixList.size() == 0) return 0;\n        return suffixList.getLast().getValue();\n    }", "code_tokens": ["public", "int", "getLongestSuffixLength", "(", "String", "word", ")", "{", "word", "=", "reverse", "(", "word", ")", ";", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", ">", "suffixList", "=", "trie", ".", "commonPrefixSearchWithValue", "(", "word", ")", ";", "if", "(", "suffixList", ".", "size", "(", ")", "==", "0", ")", "return", "0", ";", "return", "suffixList", ".", "getLast", "(", ")", ".", "getValue", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u6700\u957f\u7684\u540e\u7f00\n@param word\n@return", "docstring_tokens": ["\u83b7\u53d6\u6700\u957f\u7684\u540e\u7f00"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java#L87-L93", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java", "func_name": "SuffixDictionary.entrySet", "original_string": "public Set<Map.Entry<String, Integer>> entrySet()\n    {\n        Set<Map.Entry<String, Integer>> treeSet = new LinkedHashSet<Map.Entry<String, Integer>>();\n        for (Map.Entry<String, Integer> entry : trie.entrySet())\n        {\n            treeSet.add(new AbstractMap.SimpleEntry<String, Integer>(reverse(entry.getKey()), entry.getValue()));\n        }\n\n        return treeSet;\n    }", "language": "java", "code": "public Set<Map.Entry<String, Integer>> entrySet()\n    {\n        Set<Map.Entry<String, Integer>> treeSet = new LinkedHashSet<Map.Entry<String, Integer>>();\n        for (Map.Entry<String, Integer> entry : trie.entrySet())\n        {\n            treeSet.add(new AbstractMap.SimpleEntry<String, Integer>(reverse(entry.getKey()), entry.getValue()));\n        }\n\n        return treeSet;\n    }", "code_tokens": ["public", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", ">", "entrySet", "(", ")", "{", "Set", "<", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", ">", "treeSet", "=", "new", "LinkedHashSet", "<", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", ">", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "Integer", ">", "entry", ":", "trie", ".", "entrySet", "(", ")", ")", "{", "treeSet", ".", "add", "(", "new", "AbstractMap", ".", "SimpleEntry", "<", "String", ",", "Integer", ">", "(", "reverse", "(", "entry", ".", "getKey", "(", ")", ")", ",", "entry", ".", "getValue", "(", ")", ")", ")", ";", "}", "return", "treeSet", ";", "}"], "docstring": "\u952e\u503c\u5bf9\n@return", "docstring_tokens": ["\u952e\u503c\u5bf9"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/SuffixDictionary.java#L104-L113", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.getAttribute", "original_string": "public static CoreDictionary.Attribute getAttribute(String word)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.get(word);\n        if (attribute != null) return attribute;\n        return CustomDictionary.get(word);\n    }", "language": "java", "code": "public static CoreDictionary.Attribute getAttribute(String word)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.get(word);\n        if (attribute != null) return attribute;\n        return CustomDictionary.get(word);\n    }", "code_tokens": ["public", "static", "CoreDictionary", ".", "Attribute", "getAttribute", "(", "String", "word", ")", "{", "CoreDictionary", ".", "Attribute", "attribute", "=", "CoreDictionary", ".", "get", "(", "word", ")", ";", "if", "(", "attribute", "!=", "null", ")", "return", "attribute", ";", "return", "CustomDictionary", ".", "get", "(", "word", ")", ";", "}"], "docstring": "\u4eceHanLP\u7684\u8bcd\u5e93\u4e2d\u63d0\u53d6\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\uff08\u5305\u62ec\u6838\u5fc3\u8bcd\u5178\u548c\u7528\u6237\u8bcd\u5178\uff09\n\n@param word \u5355\u8bcd\n@return \u5305\u542b\u8bcd\u6027\u4e0e\u9891\u6b21\u7684\u4fe1\u606f", "docstring_tokens": ["\u4eceHanLP\u7684\u8bcd\u5e93\u4e2d\u63d0\u53d6\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\uff08\u5305\u62ec\u6838\u5fc3\u8bcd\u5178\u548c\u7528\u6237\u8bcd\u5178\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L35-L40", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.getFrequency", "original_string": "public static int getFrequency(String word)\n    {\n        CoreDictionary.Attribute attribute = getAttribute(word);\n        if (attribute == null) return 0;\n        return attribute.totalFrequency;\n    }", "language": "java", "code": "public static int getFrequency(String word)\n    {\n        CoreDictionary.Attribute attribute = getAttribute(word);\n        if (attribute == null) return 0;\n        return attribute.totalFrequency;\n    }", "code_tokens": ["public", "static", "int", "getFrequency", "(", "String", "word", ")", "{", "CoreDictionary", ".", "Attribute", "attribute", "=", "getAttribute", "(", "word", ")", ";", "if", "(", "attribute", "==", "null", ")", "return", "0", ";", "return", "attribute", ".", "totalFrequency", ";", "}"], "docstring": "\u83b7\u53d6\u67d0\u4e2a\u5355\u8bcd\u7684\u8bcd\u9891\n@param word\n@return", "docstring_tokens": ["\u83b7\u53d6\u67d0\u4e2a\u5355\u8bcd\u7684\u8bcd\u9891"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L68-L73", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.setAttribute", "original_string": "public static boolean setAttribute(String word, CoreDictionary.Attribute attribute)\n    {\n        if (attribute == null) return false;\n\n        if (CoreDictionary.trie.set(word, attribute)) return true;\n        if (CustomDictionary.dat.set(word, attribute)) return true;\n        if (CustomDictionary.trie == null)\n        {\n            CustomDictionary.add(word);\n        }\n        CustomDictionary.trie.put(word, attribute);\n        return true;\n    }", "language": "java", "code": "public static boolean setAttribute(String word, CoreDictionary.Attribute attribute)\n    {\n        if (attribute == null) return false;\n\n        if (CoreDictionary.trie.set(word, attribute)) return true;\n        if (CustomDictionary.dat.set(word, attribute)) return true;\n        if (CustomDictionary.trie == null)\n        {\n            CustomDictionary.add(word);\n        }\n        CustomDictionary.trie.put(word, attribute);\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "setAttribute", "(", "String", "word", ",", "CoreDictionary", ".", "Attribute", "attribute", ")", "{", "if", "(", "attribute", "==", "null", ")", "return", "false", ";", "if", "(", "CoreDictionary", ".", "trie", ".", "set", "(", "word", ",", "attribute", ")", ")", "return", "true", ";", "if", "(", "CustomDictionary", ".", "dat", ".", "set", "(", "word", ",", "attribute", ")", ")", "return", "true", ";", "if", "(", "CustomDictionary", ".", "trie", "==", "null", ")", "{", "CustomDictionary", ".", "add", "(", "word", ")", ";", "}", "CustomDictionary", ".", "trie", ".", "put", "(", "word", ",", "attribute", ")", ";", "return", "true", ";", "}"], "docstring": "\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\n@param word\n@param attribute\n@return", "docstring_tokens": ["\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L81-L93", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.setAttribute", "original_string": "public static boolean setAttribute(String word, Nature... natures)\n    {\n        if (natures == null) return false;\n\n        CoreDictionary.Attribute attribute = new CoreDictionary.Attribute(natures, new int[natures.length]);\n        Arrays.fill(attribute.frequency, 1);\n\n        return setAttribute(word, attribute);\n    }", "language": "java", "code": "public static boolean setAttribute(String word, Nature... natures)\n    {\n        if (natures == null) return false;\n\n        CoreDictionary.Attribute attribute = new CoreDictionary.Attribute(natures, new int[natures.length]);\n        Arrays.fill(attribute.frequency, 1);\n\n        return setAttribute(word, attribute);\n    }", "code_tokens": ["public", "static", "boolean", "setAttribute", "(", "String", "word", ",", "Nature", "...", "natures", ")", "{", "if", "(", "natures", "==", "null", ")", "return", "false", ";", "CoreDictionary", ".", "Attribute", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "natures", ",", "new", "int", "[", "natures", ".", "length", "]", ")", ";", "Arrays", ".", "fill", "(", "attribute", ".", "frequency", ",", "1", ")", ";", "return", "setAttribute", "(", "word", ",", "attribute", ")", ";", "}"], "docstring": "\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\n@param word\n@param natures\n@return", "docstring_tokens": ["\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L101-L109", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.setAttribute", "original_string": "public static boolean setAttribute(String word, String... natures)\n    {\n        if (natures == null) return false;\n\n        Nature[] natureArray = new Nature[natures.length];\n        for (int i = 0; i < natureArray.length; i++)\n        {\n            natureArray[i] = Nature.create(natures[i]);\n        }\n\n        return setAttribute(word, natureArray);\n    }", "language": "java", "code": "public static boolean setAttribute(String word, String... natures)\n    {\n        if (natures == null) return false;\n\n        Nature[] natureArray = new Nature[natures.length];\n        for (int i = 0; i < natureArray.length; i++)\n        {\n            natureArray[i] = Nature.create(natures[i]);\n        }\n\n        return setAttribute(word, natureArray);\n    }", "code_tokens": ["public", "static", "boolean", "setAttribute", "(", "String", "word", ",", "String", "...", "natures", ")", "{", "if", "(", "natures", "==", "null", ")", "return", "false", ";", "Nature", "[", "]", "natureArray", "=", "new", "Nature", "[", "natures", ".", "length", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "natureArray", ".", "length", ";", "i", "++", ")", "{", "natureArray", "[", "i", "]", "=", "Nature", ".", "create", "(", "natures", "[", "i", "]", ")", ";", "}", "return", "setAttribute", "(", "word", ",", "natureArray", ")", ";", "}"], "docstring": "\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\n@param word\n@param natures\n@return", "docstring_tokens": ["\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L117-L128", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.setAttribute", "original_string": "public static boolean setAttribute(String word, String natureWithFrequency)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.Attribute.create(natureWithFrequency);\n        return setAttribute(word, attribute);\n    }", "language": "java", "code": "public static boolean setAttribute(String word, String natureWithFrequency)\n    {\n        CoreDictionary.Attribute attribute = CoreDictionary.Attribute.create(natureWithFrequency);\n        return setAttribute(word, attribute);\n    }", "code_tokens": ["public", "static", "boolean", "setAttribute", "(", "String", "word", ",", "String", "natureWithFrequency", ")", "{", "CoreDictionary", ".", "Attribute", "attribute", "=", "CoreDictionary", ".", "Attribute", ".", "create", "(", "natureWithFrequency", ")", ";", "return", "setAttribute", "(", "word", ",", "attribute", ")", ";", "}"], "docstring": "\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027\n@param word\n@param natureWithFrequency\n@return", "docstring_tokens": ["\u8bbe\u7f6e\u67d0\u4e2a\u5355\u8bcd\u7684\u5c5e\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L137-L141", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java", "func_name": "LexiconUtility.convertStringToNature", "original_string": "public static Nature convertStringToNature(String name, LinkedHashSet<Nature> customNatureCollector)\n    {\n        Nature nature = Nature.fromString(name);\n        if (nature == null)\n        {\n            nature = Nature.create(name);\n            if (customNatureCollector != null) customNatureCollector.add(nature);\n        }\n        return nature;\n    }", "language": "java", "code": "public static Nature convertStringToNature(String name, LinkedHashSet<Nature> customNatureCollector)\n    {\n        Nature nature = Nature.fromString(name);\n        if (nature == null)\n        {\n            nature = Nature.create(name);\n            if (customNatureCollector != null) customNatureCollector.add(nature);\n        }\n        return nature;\n    }", "code_tokens": ["public", "static", "Nature", "convertStringToNature", "(", "String", "name", ",", "LinkedHashSet", "<", "Nature", ">", "customNatureCollector", ")", "{", "Nature", "nature", "=", "Nature", ".", "fromString", "(", "name", ")", ";", "if", "(", "nature", "==", "null", ")", "{", "nature", "=", "Nature", ".", "create", "(", "name", ")", ";", "if", "(", "customNatureCollector", "!=", "null", ")", "customNatureCollector", ".", "add", "(", "nature", ")", ";", "}", "return", "nature", ";", "}"], "docstring": "\u5c06\u5b57\u7b26\u4e32\u8bcd\u6027\u8f6c\u4e3aEnum\u8bcd\u6027\n@param name \u8bcd\u6027\u540d\u79f0\n@param customNatureCollector \u4e00\u4e2a\u6536\u96c6\u96c6\u5408\n@return \u8f6c\u6362\u7ed3\u679c", "docstring_tokens": ["\u5c06\u5b57\u7b26\u4e32\u8bcd\u6027\u8f6c\u4e3aEnum\u8bcd\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/utility/LexiconUtility.java#L149-L158", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java", "func_name": "State.addEmit", "original_string": "public void addEmit(int keyword)\n    {\n        if (this.emits == null)\n        {\n            this.emits = new TreeSet<Integer>(Collections.reverseOrder());\n        }\n        this.emits.add(keyword);\n    }", "language": "java", "code": "public void addEmit(int keyword)\n    {\n        if (this.emits == null)\n        {\n            this.emits = new TreeSet<Integer>(Collections.reverseOrder());\n        }\n        this.emits.add(keyword);\n    }", "code_tokens": ["public", "void", "addEmit", "(", "int", "keyword", ")", "{", "if", "(", "this", ".", "emits", "==", "null", ")", "{", "this", ".", "emits", "=", "new", "TreeSet", "<", "Integer", ">", "(", "Collections", ".", "reverseOrder", "(", ")", ")", ";", "}", "this", ".", "emits", ".", "add", "(", "keyword", ")", ";", "}"], "docstring": "\u6dfb\u52a0\u4e00\u4e2a\u5339\u914d\u5230\u7684\u6a21\u5f0f\u4e32\uff08\u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7740\u8fd9\u4e2a\u6a21\u5f0f\u4e32)\n@param keyword", "docstring_tokens": ["\u6dfb\u52a0\u4e00\u4e2a\u5339\u914d\u5230\u7684\u6a21\u5f0f\u4e32\uff08\u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7740\u8fd9\u4e2a\u6a21\u5f0f\u4e32", ")"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java#L79-L86", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java", "func_name": "State.getLargestValueId", "original_string": "public Integer getLargestValueId()\n    {\n        if (emits == null || emits.size() == 0) return null;\n\n        return emits.iterator().next();\n    }", "language": "java", "code": "public Integer getLargestValueId()\n    {\n        if (emits == null || emits.size() == 0) return null;\n\n        return emits.iterator().next();\n    }", "code_tokens": ["public", "Integer", "getLargestValueId", "(", ")", "{", "if", "(", "emits", "==", "null", "||", "emits", ".", "size", "(", ")", "==", "0", ")", "return", "null", ";", "return", "emits", ".", "iterator", "(", ")", ".", "next", "(", ")", ";", "}"], "docstring": "\u83b7\u53d6\u6700\u5927\u7684\u503c\n@return", "docstring_tokens": ["\u83b7\u53d6\u6700\u5927\u7684\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java#L92-L97", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java", "func_name": "State.setFailure", "original_string": "public void setFailure(State failState, int fail[])\n    {\n        this.failure = failState;\n        fail[index] = failState.index;\n    }", "language": "java", "code": "public void setFailure(State failState, int fail[])\n    {\n        this.failure = failState;\n        fail[index] = failState.index;\n    }", "code_tokens": ["public", "void", "setFailure", "(", "State", "failState", ",", "int", "fail", "[", "]", ")", "{", "this", ".", "failure", "=", "failState", ";", "fail", "[", "index", "]", "=", "failState", ".", "index", ";", "}"], "docstring": "\u8bbe\u7f6efailure\u72b6\u6001\n@param failState", "docstring_tokens": ["\u8bbe\u7f6efailure\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java#L142-L146", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java", "func_name": "State.nextState", "original_string": "private State nextState(Character character, boolean ignoreRootState)\n    {\n        State nextState = this.success.get(character);\n        if (!ignoreRootState && nextState == null && this.depth == 0)\n        {\n            nextState = this;\n        }\n        return nextState;\n    }", "language": "java", "code": "private State nextState(Character character, boolean ignoreRootState)\n    {\n        State nextState = this.success.get(character);\n        if (!ignoreRootState && nextState == null && this.depth == 0)\n        {\n            nextState = this;\n        }\n        return nextState;\n    }", "code_tokens": ["private", "State", "nextState", "(", "Character", "character", ",", "boolean", "ignoreRootState", ")", "{", "State", "nextState", "=", "this", ".", "success", ".", "get", "(", "character", ")", ";", "if", "(", "!", "ignoreRootState", "&&", "nextState", "==", "null", "&&", "this", ".", "depth", "==", "0", ")", "{", "nextState", "=", "this", ";", "}", "return", "nextState", ";", "}"], "docstring": "\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n@param character \u5e0c\u671b\u6309\u6b64\u5b57\u7b26\u8f6c\u79fb\n@param ignoreRootState \u662f\u5426\u5ffd\u7565\u6839\u8282\u70b9\uff0c\u5982\u679c\u662f\u6839\u8282\u70b9\u81ea\u5df1\u8c03\u7528\u5219\u5e94\u8be5\u662ftrue\uff0c\u5426\u5219\u4e3afalse\n@return \u8f6c\u79fb\u7ed3\u679c", "docstring_tokens": ["\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/AhoCorasick/State.java#L154-L162", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/util/CorpusUtil.java", "func_name": "CorpusUtil.compile", "original_string": "public static IWord compile(IWord word)\n    {\n        String label = word.getLabel();\n        if (\"nr\".equals(label)) return new Word(word.getValue(), TAG_PEOPLE);\n        else if (\"m\".equals(label) || \"mq\".equals(label)) return new Word(word.getValue(), TAG_NUMBER);\n        else if (\"t\".equals(label)) return new Word(word.getValue(), TAG_TIME);\n        else if (\"ns\".equals(label)) return new Word(word.getValue(), TAG_PLACE);\n//        switch (word.getLabel())\n//        {\n//            case \"nr\":\n//                return new Word(word.getValue(), TAG_PEOPLE);\n//            case \"m\":\n//            case \"mq\":\n//                return new Word(word.getValue(), TAG_NUMBER);\n//            case \"t\":\n//                return new Word(word.getValue(), TAG_TIME);\n//            case \"ns\":\n//                return new Word(word.getValue(), TAG_TIME);\n//        }\n\n        return word;\n    }", "language": "java", "code": "public static IWord compile(IWord word)\n    {\n        String label = word.getLabel();\n        if (\"nr\".equals(label)) return new Word(word.getValue(), TAG_PEOPLE);\n        else if (\"m\".equals(label) || \"mq\".equals(label)) return new Word(word.getValue(), TAG_NUMBER);\n        else if (\"t\".equals(label)) return new Word(word.getValue(), TAG_TIME);\n        else if (\"ns\".equals(label)) return new Word(word.getValue(), TAG_PLACE);\n//        switch (word.getLabel())\n//        {\n//            case \"nr\":\n//                return new Word(word.getValue(), TAG_PEOPLE);\n//            case \"m\":\n//            case \"mq\":\n//                return new Word(word.getValue(), TAG_NUMBER);\n//            case \"t\":\n//                return new Word(word.getValue(), TAG_TIME);\n//            case \"ns\":\n//                return new Word(word.getValue(), TAG_TIME);\n//        }\n\n        return word;\n    }", "code_tokens": ["public", "static", "IWord", "compile", "(", "IWord", "word", ")", "{", "String", "label", "=", "word", ".", "getLabel", "(", ")", ";", "if", "(", "\"nr\"", ".", "equals", "(", "label", ")", ")", "return", "new", "Word", "(", "word", ".", "getValue", "(", ")", ",", "TAG_PEOPLE", ")", ";", "else", "if", "(", "\"m\"", ".", "equals", "(", "label", ")", "||", "\"mq\"", ".", "equals", "(", "label", ")", ")", "return", "new", "Word", "(", "word", ".", "getValue", "(", ")", ",", "TAG_NUMBER", ")", ";", "else", "if", "(", "\"t\"", ".", "equals", "(", "label", ")", ")", "return", "new", "Word", "(", "word", ".", "getValue", "(", ")", ",", "TAG_TIME", ")", ";", "else", "if", "(", "\"ns\"", ".", "equals", "(", "label", ")", ")", "return", "new", "Word", "(", "word", ".", "getValue", "(", ")", ",", "TAG_PLACE", ")", ";", "//        switch (word.getLabel())", "//        {", "//            case \"nr\":", "//                return new Word(word.getValue(), TAG_PEOPLE);", "//            case \"m\":", "//            case \"mq\":", "//                return new Word(word.getValue(), TAG_NUMBER);", "//            case \"t\":", "//                return new Word(word.getValue(), TAG_TIME);", "//            case \"ns\":", "//                return new Word(word.getValue(), TAG_TIME);", "//        }", "return", "word", ";", "}"], "docstring": "\u7f16\u8bd1\u5355\u8bcd\n\n@param word\n@return", "docstring_tokens": ["\u7f16\u8bd1\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/util/CorpusUtil.java#L45-L66", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/util/CorpusUtil.java", "func_name": "CorpusUtil.convert2CompatibleList", "original_string": "public static List<List<IWord>> convert2CompatibleList(List<List<Word>> simpleSentenceList)\n    {\n        List<List<IWord>> compatibleList = new LinkedList<List<IWord>>();\n        for (List<Word> wordList : simpleSentenceList)\n        {\n            compatibleList.add(new LinkedList<IWord>(wordList));\n        }\n        return compatibleList;\n    }", "language": "java", "code": "public static List<List<IWord>> convert2CompatibleList(List<List<Word>> simpleSentenceList)\n    {\n        List<List<IWord>> compatibleList = new LinkedList<List<IWord>>();\n        for (List<Word> wordList : simpleSentenceList)\n        {\n            compatibleList.add(new LinkedList<IWord>(wordList));\n        }\n        return compatibleList;\n    }", "code_tokens": ["public", "static", "List", "<", "List", "<", "IWord", ">", ">", "convert2CompatibleList", "(", "List", "<", "List", "<", "Word", ">", ">", "simpleSentenceList", ")", "{", "List", "<", "List", "<", "IWord", ">>", "compatibleList", "=", "new", "LinkedList", "<", "List", "<", "IWord", ">", ">", "(", ")", ";", "for", "(", "List", "<", "Word", ">", "wordList", ":", "simpleSentenceList", ")", "{", "compatibleList", ".", "add", "(", "new", "LinkedList", "<", "IWord", ">", "(", "wordList", ")", ")", ";", "}", "return", "compatibleList", ";", "}"], "docstring": "\u5c06word\u5217\u8868\u8f6c\u4e3a\u517c\u5bb9\u7684IWord\u5217\u8868\n\n@param simpleSentenceList\n@return", "docstring_tokens": ["\u5c06word\u5217\u8868\u8f6c\u4e3a\u517c\u5bb9\u7684IWord\u5217\u8868"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/util/CorpusUtil.java#L74-L82", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/tokenizer/URLTokenizer.java", "func_name": "URLTokenizer.segment", "original_string": "public static List<Term> segment(String text)\n    {\n        List<Term> termList = new LinkedList<Term>();\n        Matcher matcher = WEB_URL.matcher(text);\n        int begin = 0;\n        int end;\n        while (matcher.find())\n        {\n            end = matcher.start();\n            termList.addAll(SEGMENT.seg(text.substring(begin, end)));\n            termList.add(new Term(matcher.group(), Nature.xu));\n            begin = matcher.end();\n        }\n        if (begin < text.length()) termList.addAll(SEGMENT.seg(text.substring(begin)));\n\n        return termList;\n    }", "language": "java", "code": "public static List<Term> segment(String text)\n    {\n        List<Term> termList = new LinkedList<Term>();\n        Matcher matcher = WEB_URL.matcher(text);\n        int begin = 0;\n        int end;\n        while (matcher.find())\n        {\n            end = matcher.start();\n            termList.addAll(SEGMENT.seg(text.substring(begin, end)));\n            termList.add(new Term(matcher.group(), Nature.xu));\n            begin = matcher.end();\n        }\n        if (begin < text.length()) termList.addAll(SEGMENT.seg(text.substring(begin)));\n\n        return termList;\n    }", "code_tokens": ["public", "static", "List", "<", "Term", ">", "segment", "(", "String", "text", ")", "{", "List", "<", "Term", ">", "termList", "=", "new", "LinkedList", "<", "Term", ">", "(", ")", ";", "Matcher", "matcher", "=", "WEB_URL", ".", "matcher", "(", "text", ")", ";", "int", "begin", "=", "0", ";", "int", "end", ";", "while", "(", "matcher", ".", "find", "(", ")", ")", "{", "end", "=", "matcher", ".", "start", "(", ")", ";", "termList", ".", "addAll", "(", "SEGMENT", ".", "seg", "(", "text", ".", "substring", "(", "begin", ",", "end", ")", ")", ")", ";", "termList", ".", "add", "(", "new", "Term", "(", "matcher", ".", "group", "(", ")", ",", "Nature", ".", "xu", ")", ")", ";", "begin", "=", "matcher", ".", "end", "(", ")", ";", "}", "if", "(", "begin", "<", "text", ".", "length", "(", ")", ")", "termList", ".", "addAll", "(", "SEGMENT", ".", "seg", "(", "text", ".", "substring", "(", "begin", ")", ")", ")", ";", "return", "termList", ";", "}"], "docstring": "\u5206\u8bcd\n@param text \u6587\u672c\n@return \u5206\u8bcd\u7ed3\u679c", "docstring_tokens": ["\u5206\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/tokenizer/URLTokenizer.java#L41-L57", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/py/PinyinUtil.java", "func_name": "PinyinUtil.convertPinyinList2TonePinyinList", "original_string": "public static List<String> convertPinyinList2TonePinyinList(List<Pinyin> pinyinList)\n    {\n        List<String> tonePinyinList = new ArrayList<String>(pinyinList.size());\n        for (Pinyin pinyin : pinyinList)\n        {\n            tonePinyinList.add(pinyin.getPinyinWithToneMark());\n        }\n\n        return tonePinyinList;\n    }", "language": "java", "code": "public static List<String> convertPinyinList2TonePinyinList(List<Pinyin> pinyinList)\n    {\n        List<String> tonePinyinList = new ArrayList<String>(pinyinList.size());\n        for (Pinyin pinyin : pinyinList)\n        {\n            tonePinyinList.add(pinyin.getPinyinWithToneMark());\n        }\n\n        return tonePinyinList;\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "convertPinyinList2TonePinyinList", "(", "List", "<", "Pinyin", ">", "pinyinList", ")", "{", "List", "<", "String", ">", "tonePinyinList", "=", "new", "ArrayList", "<", "String", ">", "(", "pinyinList", ".", "size", "(", ")", ")", ";", "for", "(", "Pinyin", "pinyin", ":", "pinyinList", ")", "{", "tonePinyinList", ".", "add", "(", "pinyin", ".", "getPinyinWithToneMark", "(", ")", ")", ";", "}", "return", "tonePinyinList", ";", "}"], "docstring": "\u8f6c\u6362List<Pinyin> pinyinList\u5230List<String>\uff0c\u5176\u4e2d\u7684String\u4e3a\u5e26\u58f0\u8c03\u7b26\u53f7\u5f62\u5f0f\n@param pinyinList\n@return", "docstring_tokens": ["\u8f6c\u6362List<Pinyin", ">", "pinyinList\u5230List<String", ">", "\uff0c\u5176\u4e2d\u7684String\u4e3a\u5e26\u58f0\u8c03\u7b26\u53f7\u5f62\u5f0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/py/PinyinUtil.java#L163-L172", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/CompactArray.java", "func_name": "CompactArray.set", "original_string": "public void set(int index, float value)\n    {\n        if (index < offset + array.length && index >= offset)\n        {\n            array[index - offset] += value;\n        }\n        else if (index < offset)\n        {  //expand from left\n            int gap = offset - index;\n            int newSize = gap + array.length;\n            float[] newArray = new float[newSize];\n            newArray[0] = value;\n            for (int i = 0; i < array.length; i++)\n            {\n                newArray[gap + i] = array[i];\n            }\n            this.offset = index;\n            this.array = newArray;\n        }\n        else\n        {\n            int gap = index - (array.length + offset - 1);\n            int newSize = array.length + gap;\n            float[] newArray = new float[newSize];\n            newArray[newSize - 1] = value;\n            for (int i = 0; i < array.length; i++)\n            {\n                newArray[i] = array[i];\n            }\n            this.array = newArray;\n        }\n    }", "language": "java", "code": "public void set(int index, float value)\n    {\n        if (index < offset + array.length && index >= offset)\n        {\n            array[index - offset] += value;\n        }\n        else if (index < offset)\n        {  //expand from left\n            int gap = offset - index;\n            int newSize = gap + array.length;\n            float[] newArray = new float[newSize];\n            newArray[0] = value;\n            for (int i = 0; i < array.length; i++)\n            {\n                newArray[gap + i] = array[i];\n            }\n            this.offset = index;\n            this.array = newArray;\n        }\n        else\n        {\n            int gap = index - (array.length + offset - 1);\n            int newSize = array.length + gap;\n            float[] newArray = new float[newSize];\n            newArray[newSize - 1] = value;\n            for (int i = 0; i < array.length; i++)\n            {\n                newArray[i] = array[i];\n            }\n            this.array = newArray;\n        }\n    }", "code_tokens": ["public", "void", "set", "(", "int", "index", ",", "float", "value", ")", "{", "if", "(", "index", "<", "offset", "+", "array", ".", "length", "&&", "index", ">=", "offset", ")", "{", "array", "[", "index", "-", "offset", "]", "+=", "value", ";", "}", "else", "if", "(", "index", "<", "offset", ")", "{", "//expand from left", "int", "gap", "=", "offset", "-", "index", ";", "int", "newSize", "=", "gap", "+", "array", ".", "length", ";", "float", "[", "]", "newArray", "=", "new", "float", "[", "newSize", "]", ";", "newArray", "[", "0", "]", "=", "value", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "newArray", "[", "gap", "+", "i", "]", "=", "array", "[", "i", "]", ";", "}", "this", ".", "offset", "=", "index", ";", "this", ".", "array", "=", "newArray", ";", "}", "else", "{", "int", "gap", "=", "index", "-", "(", "array", ".", "length", "+", "offset", "-", "1", ")", ";", "int", "newSize", "=", "array", ".", "length", "+", "gap", ";", "float", "[", "]", "newArray", "=", "new", "float", "[", "newSize", "]", ";", "newArray", "[", "newSize", "-", "1", "]", "=", "value", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "newArray", "[", "i", "]", "=", "array", "[", "i", "]", ";", "}", "this", ".", "array", "=", "newArray", ";", "}", "}"], "docstring": "\u5c06index\u5904\u7684\u5143\u7d20\u8bbe\u7f6e\u4e3avalue\n\n@param index\n@param value", "docstring_tokens": ["\u5c06index\u5904\u7684\u5143\u7d20\u8bbe\u7f6e\u4e3avalue"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/perceptron/structures/CompactArray.java#L33-L64", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/bigram/BigramDependencyModel.java", "func_name": "BigramDependencyModel.get", "original_string": "public static String get(String fromWord, String fromPos, String toWord, String toPos)\n    {\n        String dependency = get(fromWord + \"@\" + toWord);\n        if (dependency == null) dependency = get(fromWord + \"@\" + WordNatureWeightModelMaker.wrapTag(toPos));\n        if (dependency == null) dependency = get(WordNatureWeightModelMaker.wrapTag(fromPos) + \"@\" + toWord);\n        if (dependency == null) dependency = get(WordNatureWeightModelMaker.wrapTag(fromPos) + \"@\" + WordNatureWeightModelMaker.wrapTag(toPos));\n        if (dependency == null) dependency = \"\u672a\u77e5\";\n\n        return dependency;\n    }", "language": "java", "code": "public static String get(String fromWord, String fromPos, String toWord, String toPos)\n    {\n        String dependency = get(fromWord + \"@\" + toWord);\n        if (dependency == null) dependency = get(fromWord + \"@\" + WordNatureWeightModelMaker.wrapTag(toPos));\n        if (dependency == null) dependency = get(WordNatureWeightModelMaker.wrapTag(fromPos) + \"@\" + toWord);\n        if (dependency == null) dependency = get(WordNatureWeightModelMaker.wrapTag(fromPos) + \"@\" + WordNatureWeightModelMaker.wrapTag(toPos));\n        if (dependency == null) dependency = \"\u672a\u77e5\";\n\n        return dependency;\n    }", "code_tokens": ["public", "static", "String", "get", "(", "String", "fromWord", ",", "String", "fromPos", ",", "String", "toWord", ",", "String", "toPos", ")", "{", "String", "dependency", "=", "get", "(", "fromWord", "+", "\"@\"", "+", "toWord", ")", ";", "if", "(", "dependency", "==", "null", ")", "dependency", "=", "get", "(", "fromWord", "+", "\"@\"", "+", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "toPos", ")", ")", ";", "if", "(", "dependency", "==", "null", ")", "dependency", "=", "get", "(", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "fromPos", ")", "+", "\"@\"", "+", "toWord", ")", ";", "if", "(", "dependency", "==", "null", ")", "dependency", "=", "get", "(", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "fromPos", ")", "+", "\"@\"", "+", "WordNatureWeightModelMaker", ".", "wrapTag", "(", "toPos", ")", ")", ";", "if", "(", "dependency", "==", "null", ")", "dependency", "=", "\"\u672a\u77e5\";", "", "return", "dependency", ";", "}"], "docstring": "\u83b7\u53d6\u4e00\u4e2a\u8bcd\u548c\u53e6\u4e00\u4e2a\u8bcd\u6700\u53ef\u80fd\u7684\u4f9d\u5b58\u5173\u7cfb\n@param fromWord\n@param fromPos\n@param toWord\n@param toPos\n@return", "docstring_tokens": ["\u83b7\u53d6\u4e00\u4e2a\u8bcd\u548c\u53e6\u4e00\u4e2a\u8bcd\u6700\u53ef\u80fd\u7684\u4f9d\u5b58\u5173\u7cfb"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/bigram/BigramDependencyModel.java#L119-L128", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/summary/KeywordExtractor.java", "func_name": "KeywordExtractor.getKeywords", "original_string": "public List<String> getKeywords(String document, int size)\n    {\n        return getKeywords(defaultSegment.seg(document), size);\n    }", "language": "java", "code": "public List<String> getKeywords(String document, int size)\n    {\n        return getKeywords(defaultSegment.seg(document), size);\n    }", "code_tokens": ["public", "List", "<", "String", ">", "getKeywords", "(", "String", "document", ",", "int", "size", ")", "{", "return", "getKeywords", "(", "defaultSegment", ".", "seg", "(", "document", ")", ",", "size", ")", ";", "}"], "docstring": "\u63d0\u53d6\u5173\u952e\u8bcd\n\n@param document \u5173\u952e\u8bcd\n@param size     \u9700\u8981\u51e0\u4e2a\u5173\u952e\u8bcd\n@return", "docstring_tokens": ["\u63d0\u53d6\u5173\u952e\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/summary/KeywordExtractor.java#L81-L84", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/io/EasyReader.java", "func_name": "EasyReader.read", "original_string": "public void read(LineHandler handler, int size) throws Exception\n    {\n        File rootFile = new File(root);\n        File[] files;\n        if (rootFile.isDirectory())\n        {\n            files = rootFile.listFiles(new FileFilter()\n            {\n                @Override\n                public boolean accept(File pathname)\n                {\n                    return pathname.isFile() && !pathname.getName().endsWith(\".bin\");\n                }\n            });\n            if (files == null)\n            {\n                if (rootFile.isFile())\n                    files = new File[]{rootFile};\n                else return;\n            }\n        }\n        else\n        {\n            files = new File[]{rootFile};\n        }\n\n        int n = 0;\n        int totalAddress = 0;\n        long start = System.currentTimeMillis();\n        for (File file : files)\n        {\n            if (size-- == 0) break;\n            if (file.isDirectory()) continue;\n            if (verbose) System.out.printf(\"\u6b63\u5728\u5904\u7406%s, %d / %d\\n\", file.getName(), ++n, files.length);\n            IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(file.getAbsolutePath());\n            while (lineIterator.hasNext())\n            {\n                ++totalAddress;\n                String line = lineIterator.next();\n                if (line.length() == 0) continue;\n                handler.handle(line);\n            }\n        }\n        handler.done();\n        if (verbose) System.out.printf(\"\u5904\u7406\u4e86 %.2f \u4e07\u884c\uff0c\u82b1\u8d39\u4e86 %.2f min\\n\", totalAddress / 10000.0, (System.currentTimeMillis() - start) / 1000.0 / 60.0);\n    }", "language": "java", "code": "public void read(LineHandler handler, int size) throws Exception\n    {\n        File rootFile = new File(root);\n        File[] files;\n        if (rootFile.isDirectory())\n        {\n            files = rootFile.listFiles(new FileFilter()\n            {\n                @Override\n                public boolean accept(File pathname)\n                {\n                    return pathname.isFile() && !pathname.getName().endsWith(\".bin\");\n                }\n            });\n            if (files == null)\n            {\n                if (rootFile.isFile())\n                    files = new File[]{rootFile};\n                else return;\n            }\n        }\n        else\n        {\n            files = new File[]{rootFile};\n        }\n\n        int n = 0;\n        int totalAddress = 0;\n        long start = System.currentTimeMillis();\n        for (File file : files)\n        {\n            if (size-- == 0) break;\n            if (file.isDirectory()) continue;\n            if (verbose) System.out.printf(\"\u6b63\u5728\u5904\u7406%s, %d / %d\\n\", file.getName(), ++n, files.length);\n            IOUtil.LineIterator lineIterator = new IOUtil.LineIterator(file.getAbsolutePath());\n            while (lineIterator.hasNext())\n            {\n                ++totalAddress;\n                String line = lineIterator.next();\n                if (line.length() == 0) continue;\n                handler.handle(line);\n            }\n        }\n        handler.done();\n        if (verbose) System.out.printf(\"\u5904\u7406\u4e86 %.2f \u4e07\u884c\uff0c\u82b1\u8d39\u4e86 %.2f min\\n\", totalAddress / 10000.0, (System.currentTimeMillis() - start) / 1000.0 / 60.0);\n    }", "code_tokens": ["public", "void", "read", "(", "LineHandler", "handler", ",", "int", "size", ")", "throws", "Exception", "{", "File", "rootFile", "=", "new", "File", "(", "root", ")", ";", "File", "[", "]", "files", ";", "if", "(", "rootFile", ".", "isDirectory", "(", ")", ")", "{", "files", "=", "rootFile", ".", "listFiles", "(", "new", "FileFilter", "(", ")", "{", "@", "Override", "public", "boolean", "accept", "(", "File", "pathname", ")", "{", "return", "pathname", ".", "isFile", "(", ")", "&&", "!", "pathname", ".", "getName", "(", ")", ".", "endsWith", "(", "\".bin\"", ")", ";", "}", "}", ")", ";", "if", "(", "files", "==", "null", ")", "{", "if", "(", "rootFile", ".", "isFile", "(", ")", ")", "files", "=", "new", "File", "[", "]", "{", "rootFile", "}", ";", "else", "return", ";", "}", "}", "else", "{", "files", "=", "new", "File", "[", "]", "{", "rootFile", "}", ";", "}", "int", "n", "=", "0", ";", "int", "totalAddress", "=", "0", ";", "long", "start", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "for", "(", "File", "file", ":", "files", ")", "{", "if", "(", "size", "--", "==", "0", ")", "break", ";", "if", "(", "file", ".", "isDirectory", "(", ")", ")", "continue", ";", "if", "(", "verbose", ")", "System", ".", "out", ".", "printf", "(", "\"\u6b63\u5728\u5904\u7406%s, %d / %d\\n\", file.g", "e", "Name", "(", "), ++n,", " ", "f", "i", "es", ".", "l", "ngth)", ";", "", "", "", "IOUtil", ".", "LineIterator", "lineIterator", "=", "new", "IOUtil", ".", "LineIterator", "(", "file", ".", "getAbsolutePath", "(", ")", ")", ";", "while", "(", "lineIterator", ".", "hasNext", "(", ")", ")", "{", "++", "totalAddress", ";", "String", "line", "=", "lineIterator", ".", "next", "(", ")", ";", "if", "(", "line", ".", "length", "(", ")", "==", "0", ")", "continue", ";", "handler", ".", "handle", "(", "line", ")", ";", "}", "}", "handler", ".", "done", "(", ")", ";", "if", "(", "verbose", ")", "System", ".", "out", ".", "printf", "(", "\"\u5904\u7406\u4e86 %.2f \u4e07\u884c\uff0c\u82b1\u8d39\u4e86 %.2f min\\n\", totalAddress / 1", "0", "00.0, (Syste", ".", "urrentT", "i", "e", "Millis", "(", ") - start) / 1000", ".", "0", "/", "60.0)", ";", "", "", "", "", "", "", "}"], "docstring": "\u8bfb\u53d6\n@param handler \u5904\u7406\u903b\u8f91\n@param size \u8bfb\u53d6\u591a\u5c11\u4e2a\u6587\u4ef6\n@throws Exception", "docstring_tokens": ["\u8bfb\u53d6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/io/EasyReader.java#L58-L103", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/cli/Args.java", "func_name": "Args.parseOrExit", "original_string": "public static List<String> parseOrExit(Object target, String[] args)\n    {\n        try\n        {\n            return parse(target, args);\n        }\n        catch (IllegalArgumentException e)\n        {\n            System.err.println(e.getMessage());\n            Args.usage(target);\n            System.exit(1);\n            throw e;\n        }\n    }", "language": "java", "code": "public static List<String> parseOrExit(Object target, String[] args)\n    {\n        try\n        {\n            return parse(target, args);\n        }\n        catch (IllegalArgumentException e)\n        {\n            System.err.println(e.getMessage());\n            Args.usage(target);\n            System.exit(1);\n            throw e;\n        }\n    }", "code_tokens": ["public", "static", "List", "<", "String", ">", "parseOrExit", "(", "Object", "target", ",", "String", "[", "]", "args", ")", "{", "try", "{", "return", "parse", "(", "target", ",", "args", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "System", ".", "err", ".", "println", "(", "e", ".", "getMessage", "(", ")", ")", ";", "Args", ".", "usage", "(", "target", ")", ";", "System", ".", "exit", "(", "1", ")", ";", "throw", "e", ";", "}", "}"], "docstring": "A convenience method for parsing and automatically producing error messages.\n\n@param target Either an instance or a class\n@param args   The arguments you want to parse and populate\n@return The list of arguments that were not consumed", "docstring_tokens": ["A", "convenience", "method", "for", "parsing", "and", "automatically", "producing", "error", "messages", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/cli/Args.java#L30-L43", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/cli/Args.java", "func_name": "Args.byStaticMethodInvocation", "original_string": "public static ValueCreator byStaticMethodInvocation(final Class<?> compatibleType, final String methodName)\n    {\n        return new ValueCreator()\n        {\n            public Object createValue(Class<?> type, String value)\n            {\n                Object v = null;\n                if (compatibleType.isAssignableFrom(type))\n                {\n                    try\n                    {\n                        Method m = type.getMethod(methodName, String.class);\n                        return m.invoke(null, value);\n                    }\n                    catch (NoSuchMethodException e)\n                    {\n                        // ignore\n                    }\n                    catch (Exception e)\n                    {\n                        throw new IllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\", type.toString(), methodName, value));\n                    }\n                }\n                return v;\n            }\n        };\n    }", "language": "java", "code": "public static ValueCreator byStaticMethodInvocation(final Class<?> compatibleType, final String methodName)\n    {\n        return new ValueCreator()\n        {\n            public Object createValue(Class<?> type, String value)\n            {\n                Object v = null;\n                if (compatibleType.isAssignableFrom(type))\n                {\n                    try\n                    {\n                        Method m = type.getMethod(methodName, String.class);\n                        return m.invoke(null, value);\n                    }\n                    catch (NoSuchMethodException e)\n                    {\n                        // ignore\n                    }\n                    catch (Exception e)\n                    {\n                        throw new IllegalArgumentException(String.format(\"could not invoke %s#%s to create an obejct from %s\", type.toString(), methodName, value));\n                    }\n                }\n                return v;\n            }\n        };\n    }", "code_tokens": ["public", "static", "ValueCreator", "byStaticMethodInvocation", "(", "final", "Class", "<", "?", ">", "compatibleType", ",", "final", "String", "methodName", ")", "{", "return", "new", "ValueCreator", "(", ")", "{", "public", "Object", "createValue", "(", "Class", "<", "?", ">", "type", ",", "String", "value", ")", "{", "Object", "v", "=", "null", ";", "if", "(", "compatibleType", ".", "isAssignableFrom", "(", "type", ")", ")", "{", "try", "{", "Method", "m", "=", "type", ".", "getMethod", "(", "methodName", ",", "String", ".", "class", ")", ";", "return", "m", ".", "invoke", "(", "null", ",", "value", ")", ";", "}", "catch", "(", "NoSuchMethodException", "e", ")", "{", "// ignore", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "IllegalArgumentException", "(", "String", ".", "format", "(", "\"could not invoke %s#%s to create an obejct from %s\"", ",", "type", ".", "toString", "(", ")", ",", "methodName", ",", "value", ")", ")", ";", "}", "}", "return", "v", ";", "}", "}", ";", "}"], "docstring": "Creates a {@link ValueCreator} object able to create object assignable from given type,\nusing a static one arg method which name is the the given one taking a String object as parameter\n\n@param compatibleType the base assignable for which this object will try to invoke the given method\n@param methodName     the name of the one arg method taking a String as parameter that will be used to built a new value\n@return null if the object could not be created, the value otherwise", "docstring_tokens": ["Creates", "a", "{", "@link", "ValueCreator", "}", "object", "able", "to", "create", "object", "assignable", "from", "given", "type", "using", "a", "static", "one", "arg", "method", "which", "name", "is", "the", "the", "given", "one", "taking", "a", "String", "object", "as", "parameter"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/cli/Args.java#L599-L625", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java", "func_name": "PersonRecognition.roleObserve", "original_string": "public static List<EnumItem<NR>> roleObserve(List<Vertex> wordSegResult)\n    {\n        List<EnumItem<NR>> tagList = new LinkedList<EnumItem<NR>>();\n        Iterator<Vertex> iterator = wordSegResult.iterator();\n        iterator.next();\n        tagList.add(new EnumItem<NR>(NR.A, NR.K)); //  \u59cb##\u59cb A K\n        while (iterator.hasNext())\n        {\n            Vertex vertex = iterator.next();\n            EnumItem<NR> nrEnumItem = PersonDictionary.dictionary.get(vertex.realWord);\n            if (nrEnumItem == null)\n            {\n                Nature nature = vertex.guessNature();\n                if (nature == nr)\n                {\n                    // \u6709\u4e9b\u53cc\u540d\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6784\u6210\u66f4\u957f\u7684\u4e09\u540d\n                    if (vertex.getAttribute().totalFrequency <= 1000 && vertex.realWord.length() == 2)\n                    {\n                        nrEnumItem = new EnumItem<NR>();\n                        nrEnumItem.labelMap.put(NR.X, 2); // \u8ba4\u4e3a\u662f\u4e09\u5b57\u4eba\u540d\u524d2\u4e2a\u5b57=\u53cc\u5b57\u4eba\u540d\u7684\u53ef\u80fd\u6027\u66f4\u9ad8\n                        nrEnumItem.labelMap.put(NR.G, 1);\n                    }\n                    else\n                        nrEnumItem = new EnumItem<NR>(NR.A, PersonDictionary.transformMatrixDictionary.getTotalFrequency(NR.A));\n                }\n                else if (nature == nnt)\n                {\n                    // \u59d3+\u804c\u4f4d\n                    nrEnumItem = new EnumItem<NR>(NR.G, NR.K);\n                }\n                else\n                {\n                    nrEnumItem = new EnumItem<NR>(NR.A, PersonDictionary.transformMatrixDictionary.getTotalFrequency(NR.A));\n                }\n            }\n            tagList.add(nrEnumItem);\n        }\n        return tagList;\n    }", "language": "java", "code": "public static List<EnumItem<NR>> roleObserve(List<Vertex> wordSegResult)\n    {\n        List<EnumItem<NR>> tagList = new LinkedList<EnumItem<NR>>();\n        Iterator<Vertex> iterator = wordSegResult.iterator();\n        iterator.next();\n        tagList.add(new EnumItem<NR>(NR.A, NR.K)); //  \u59cb##\u59cb A K\n        while (iterator.hasNext())\n        {\n            Vertex vertex = iterator.next();\n            EnumItem<NR> nrEnumItem = PersonDictionary.dictionary.get(vertex.realWord);\n            if (nrEnumItem == null)\n            {\n                Nature nature = vertex.guessNature();\n                if (nature == nr)\n                {\n                    // \u6709\u4e9b\u53cc\u540d\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6784\u6210\u66f4\u957f\u7684\u4e09\u540d\n                    if (vertex.getAttribute().totalFrequency <= 1000 && vertex.realWord.length() == 2)\n                    {\n                        nrEnumItem = new EnumItem<NR>();\n                        nrEnumItem.labelMap.put(NR.X, 2); // \u8ba4\u4e3a\u662f\u4e09\u5b57\u4eba\u540d\u524d2\u4e2a\u5b57=\u53cc\u5b57\u4eba\u540d\u7684\u53ef\u80fd\u6027\u66f4\u9ad8\n                        nrEnumItem.labelMap.put(NR.G, 1);\n                    }\n                    else\n                        nrEnumItem = new EnumItem<NR>(NR.A, PersonDictionary.transformMatrixDictionary.getTotalFrequency(NR.A));\n                }\n                else if (nature == nnt)\n                {\n                    // \u59d3+\u804c\u4f4d\n                    nrEnumItem = new EnumItem<NR>(NR.G, NR.K);\n                }\n                else\n                {\n                    nrEnumItem = new EnumItem<NR>(NR.A, PersonDictionary.transformMatrixDictionary.getTotalFrequency(NR.A));\n                }\n            }\n            tagList.add(nrEnumItem);\n        }\n        return tagList;\n    }", "code_tokens": ["public", "static", "List", "<", "EnumItem", "<", "NR", ">", ">", "roleObserve", "(", "List", "<", "Vertex", ">", "wordSegResult", ")", "{", "List", "<", "EnumItem", "<", "NR", ">>", "tagList", "=", "new", "LinkedList", "<", "EnumItem", "<", "NR", ">", ">", "(", ")", ";", "Iterator", "<", "Vertex", ">", "iterator", "=", "wordSegResult", ".", "iterator", "(", ")", ";", "iterator", ".", "next", "(", ")", ";", "tagList", ".", "add", "(", "new", "EnumItem", "<", "NR", ">", "(", "NR", ".", "A", ",", "NR", ".", "K", ")", ")", ";", "//  \u59cb##\u59cb A K", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Vertex", "vertex", "=", "iterator", ".", "next", "(", ")", ";", "EnumItem", "<", "NR", ">", "nrEnumItem", "=", "PersonDictionary", ".", "dictionary", ".", "get", "(", "vertex", ".", "realWord", ")", ";", "if", "(", "nrEnumItem", "==", "null", ")", "{", "Nature", "nature", "=", "vertex", ".", "guessNature", "(", ")", ";", "if", "(", "nature", "==", "nr", ")", "{", "// \u6709\u4e9b\u53cc\u540d\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6784\u6210\u66f4\u957f\u7684\u4e09\u540d", "if", "(", "vertex", ".", "getAttribute", "(", ")", ".", "totalFrequency", "<=", "1000", "&&", "vertex", ".", "realWord", ".", "length", "(", ")", "==", "2", ")", "{", "nrEnumItem", "=", "new", "EnumItem", "<", "NR", ">", "(", ")", ";", "nrEnumItem", ".", "labelMap", ".", "put", "(", "NR", ".", "X", ",", "2", ")", ";", "// \u8ba4\u4e3a\u662f\u4e09\u5b57\u4eba\u540d\u524d2\u4e2a\u5b57=\u53cc\u5b57\u4eba\u540d\u7684\u53ef\u80fd\u6027\u66f4\u9ad8", "nrEnumItem", ".", "labelMap", ".", "put", "(", "NR", ".", "G", ",", "1", ")", ";", "}", "else", "nrEnumItem", "=", "new", "EnumItem", "<", "NR", ">", "(", "NR", ".", "A", ",", "PersonDictionary", ".", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "NR", ".", "A", ")", ")", ";", "}", "else", "if", "(", "nature", "==", "nnt", ")", "{", "// \u59d3+\u804c\u4f4d", "nrEnumItem", "=", "new", "EnumItem", "<", "NR", ">", "(", "NR", ".", "G", ",", "NR", ".", "K", ")", ";", "}", "else", "{", "nrEnumItem", "=", "new", "EnumItem", "<", "NR", ">", "(", "NR", ".", "A", ",", "PersonDictionary", ".", "transformMatrixDictionary", ".", "getTotalFrequency", "(", "NR", ".", "A", ")", ")", ";", "}", "}", "tagList", ".", "add", "(", "nrEnumItem", ")", ";", "}", "return", "tagList", ";", "}"], "docstring": "\u89d2\u8272\u89c2\u5bdf(\u4ece\u6a21\u578b\u4e2d\u52a0\u8f7d\u6240\u6709\u8bcd\u8bed\u5bf9\u5e94\u7684\u6240\u6709\u89d2\u8272,\u5141\u8bb8\u8fdb\u884c\u4e00\u4e9b\u89c4\u5219\u8865\u5145)\n@param wordSegResult \u7c97\u5206\u7ed3\u679c\n@return", "docstring_tokens": ["\u89d2\u8272\u89c2\u5bdf", "(", "\u4ece\u6a21\u578b\u4e2d\u52a0\u8f7d\u6240\u6709\u8bcd\u8bed\u5bf9\u5e94\u7684\u6240\u6709\u89d2\u8272", "\u5141\u8bb8\u8fdb\u884c\u4e00\u4e9b\u89c4\u5219\u8865\u5145", ")"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java#L80-L118", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java", "func_name": "PersonRecognition.viterbiCompute", "original_string": "public static List<NR> viterbiCompute(List<EnumItem<NR>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, PersonDictionary.transformMatrixDictionary);\n    }", "language": "java", "code": "public static List<NR> viterbiCompute(List<EnumItem<NR>> roleTagList)\n    {\n        return Viterbi.computeEnum(roleTagList, PersonDictionary.transformMatrixDictionary);\n    }", "code_tokens": ["public", "static", "List", "<", "NR", ">", "viterbiCompute", "(", "List", "<", "EnumItem", "<", "NR", ">", ">", "roleTagList", ")", "{", "return", "Viterbi", ".", "computeEnum", "(", "roleTagList", ",", "PersonDictionary", ".", "transformMatrixDictionary", ")", ";", "}"], "docstring": "\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e\n@param roleTagList\n@return", "docstring_tokens": ["\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u6700\u4f18\u6807\u7b7e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java#L125-L128", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java", "func_name": "PersonRecognition.viterbiComputeSimply", "original_string": "public static List<NR> viterbiComputeSimply(List<EnumItem<NR>> roleTagList)\n    {\n        return Viterbi.computeEnumSimply(roleTagList, PersonDictionary.transformMatrixDictionary);\n    }", "language": "java", "code": "public static List<NR> viterbiComputeSimply(List<EnumItem<NR>> roleTagList)\n    {\n        return Viterbi.computeEnumSimply(roleTagList, PersonDictionary.transformMatrixDictionary);\n    }", "code_tokens": ["public", "static", "List", "<", "NR", ">", "viterbiComputeSimply", "(", "List", "<", "EnumItem", "<", "NR", ">", ">", "roleTagList", ")", "{", "return", "Viterbi", ".", "computeEnumSimply", "(", "roleTagList", ",", "PersonDictionary", ".", "transformMatrixDictionary", ")", ";", "}"], "docstring": "\u7b80\u5316\u7684\"\u7ef4\u7279\u6bd4\u7b97\u6cd5\"\u6c42\u89e3\u6700\u4f18\u6807\u7b7e\n@param roleTagList\n@return", "docstring_tokens": ["\u7b80\u5316\u7684", "\u7ef4\u7279\u6bd4\u7b97\u6cd5", "\u6c42\u89e3\u6700\u4f18\u6807\u7b7e"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/recognition/nr/PersonRecognition.java#L135-L138", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java", "func_name": "CommonAhoCorasickSegmentUtil.segment", "original_string": "public static <V> LinkedList<ResultTerm<V>> segment(String text, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        return segment(text.toCharArray(), trie);\n    }", "language": "java", "code": "public static <V> LinkedList<ResultTerm<V>> segment(String text, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        return segment(text.toCharArray(), trie);\n    }", "code_tokens": ["public", "static", "<", "V", ">", "LinkedList", "<", "ResultTerm", "<", "V", ">", ">", "segment", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", "<", "V", ">", "trie", ")", "{", "return", "segment", "(", "text", ".", "toCharArray", "(", ")", ",", "trie", ")", ";", "}"], "docstring": "\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20\n@param text \u6587\u672c\n@param trie \u81ea\u52a8\u673a\n@param <V> \u7c7b\u578b\n@return \u7ed3\u679c\u94fe\u8868", "docstring_tokens": ["\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java#L35-L38", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java", "func_name": "CommonAhoCorasickSegmentUtil.segment", "original_string": "public static <V> LinkedList<ResultTerm<V>> segment(final char[] charArray, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        LinkedList<ResultTerm<V>> termList = new LinkedList<ResultTerm<V>>();\n        final ResultTerm<V>[] wordNet = new ResultTerm[charArray.length];\n        trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<V>()\n        {\n            @Override\n            public void hit(int begin, int end, V value)\n            {\n                if (wordNet[begin] == null || wordNet[begin].word.length() < end - begin)\n                {\n                    wordNet[begin] = new ResultTerm<V>(new String(charArray, begin, end - begin), value, begin);\n                }\n            }\n        });\n        for (int i = 0; i < charArray.length;)\n        {\n            if (wordNet[i] == null)\n            {\n                StringBuilder sbTerm = new StringBuilder();\n                int offset = i;\n                while (i < charArray.length && wordNet[i] == null)\n                {\n                    sbTerm.append(charArray[i]);\n                    ++i;\n                }\n                termList.add(new ResultTerm<V>(sbTerm.toString(), null, offset));\n            }\n            else\n            {\n                termList.add(wordNet[i]);\n                i += wordNet[i].word.length();\n            }\n        }\n        return termList;\n    }", "language": "java", "code": "public static <V> LinkedList<ResultTerm<V>> segment(final char[] charArray, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        LinkedList<ResultTerm<V>> termList = new LinkedList<ResultTerm<V>>();\n        final ResultTerm<V>[] wordNet = new ResultTerm[charArray.length];\n        trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<V>()\n        {\n            @Override\n            public void hit(int begin, int end, V value)\n            {\n                if (wordNet[begin] == null || wordNet[begin].word.length() < end - begin)\n                {\n                    wordNet[begin] = new ResultTerm<V>(new String(charArray, begin, end - begin), value, begin);\n                }\n            }\n        });\n        for (int i = 0; i < charArray.length;)\n        {\n            if (wordNet[i] == null)\n            {\n                StringBuilder sbTerm = new StringBuilder();\n                int offset = i;\n                while (i < charArray.length && wordNet[i] == null)\n                {\n                    sbTerm.append(charArray[i]);\n                    ++i;\n                }\n                termList.add(new ResultTerm<V>(sbTerm.toString(), null, offset));\n            }\n            else\n            {\n                termList.add(wordNet[i]);\n                i += wordNet[i].word.length();\n            }\n        }\n        return termList;\n    }", "code_tokens": ["public", "static", "<", "V", ">", "LinkedList", "<", "ResultTerm", "<", "V", ">", ">", "segment", "(", "final", "char", "[", "]", "charArray", ",", "AhoCorasickDoubleArrayTrie", "<", "V", ">", "trie", ")", "{", "LinkedList", "<", "ResultTerm", "<", "V", ">>", "termList", "=", "new", "LinkedList", "<", "ResultTerm", "<", "V", ">", ">", "(", ")", ";", "final", "ResultTerm", "<", "V", ">", "[", "]", "wordNet", "=", "new", "ResultTerm", "[", "charArray", ".", "length", "]", ";", "trie", ".", "parseText", "(", "charArray", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "V", "value", ")", "{", "if", "(", "wordNet", "[", "begin", "]", "==", "null", "||", "wordNet", "[", "begin", "]", ".", "word", ".", "length", "(", ")", "<", "end", "-", "begin", ")", "{", "wordNet", "[", "begin", "]", "=", "new", "ResultTerm", "<", "V", ">", "(", "new", "String", "(", "charArray", ",", "begin", ",", "end", "-", "begin", ")", ",", "value", ",", "begin", ")", ";", "}", "}", "}", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "charArray", ".", "length", ";", ")", "{", "if", "(", "wordNet", "[", "i", "]", "==", "null", ")", "{", "StringBuilder", "sbTerm", "=", "new", "StringBuilder", "(", ")", ";", "int", "offset", "=", "i", ";", "while", "(", "i", "<", "charArray", ".", "length", "&&", "wordNet", "[", "i", "]", "==", "null", ")", "{", "sbTerm", ".", "append", "(", "charArray", "[", "i", "]", ")", ";", "++", "i", ";", "}", "termList", ".", "add", "(", "new", "ResultTerm", "<", "V", ">", "(", "sbTerm", ".", "toString", "(", ")", ",", "null", ",", "offset", ")", ")", ";", "}", "else", "{", "termList", ".", "add", "(", "wordNet", "[", "i", "]", ")", ";", "i", "+=", "wordNet", "[", "i", "]", ".", "word", ".", "length", "(", ")", ";", "}", "}", "return", "termList", ";", "}"], "docstring": "\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20\n@param charArray \u6587\u672c\n@param trie \u81ea\u52a8\u673a\n@param <V> \u7c7b\u578b\n@return \u7ed3\u679c\u94fe\u8868", "docstring_tokens": ["\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java#L46-L81", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java", "func_name": "CommonAhoCorasickSegmentUtil.segmentReverseOrder", "original_string": "public static <V> LinkedList<ResultTerm<V>> segmentReverseOrder(final char[] charArray, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        LinkedList<ResultTerm<V>> termList = new LinkedList<ResultTerm<V>>();\n        final ResultTerm<V>[] wordNet = new ResultTerm[charArray.length + 1];\n        trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<V>()\n        {\n            @Override\n            public void hit(int begin, int end, V value)\n            {\n                if (wordNet[end] == null || wordNet[end].word.length() < end - begin)\n                {\n                    wordNet[end] = new ResultTerm<V>(new String(charArray, begin, end - begin), value, begin);\n                }\n            }\n        });\n        for (int i = charArray.length; i > 0;)\n        {\n            if (wordNet[i] == null)\n            {\n                StringBuilder sbTerm = new StringBuilder();\n                int offset = i - 1;\n                byte preCharType = CharType.get(charArray[offset]);\n                while (i > 0 && wordNet[i] == null && CharType.get(charArray[i - 1]) == preCharType)\n                {\n                    sbTerm.append(charArray[i - 1]);\n                    preCharType = CharType.get(charArray[i - 1]);\n                    --i;\n                }\n                termList.addFirst(new ResultTerm<V>(sbTerm.reverse().toString(), null, offset));\n            }\n            else\n            {\n                termList.addFirst(wordNet[i]);\n                i -= wordNet[i].word.length();\n            }\n        }\n        return termList;\n    }", "language": "java", "code": "public static <V> LinkedList<ResultTerm<V>> segmentReverseOrder(final char[] charArray, AhoCorasickDoubleArrayTrie<V> trie)\n    {\n        LinkedList<ResultTerm<V>> termList = new LinkedList<ResultTerm<V>>();\n        final ResultTerm<V>[] wordNet = new ResultTerm[charArray.length + 1];\n        trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<V>()\n        {\n            @Override\n            public void hit(int begin, int end, V value)\n            {\n                if (wordNet[end] == null || wordNet[end].word.length() < end - begin)\n                {\n                    wordNet[end] = new ResultTerm<V>(new String(charArray, begin, end - begin), value, begin);\n                }\n            }\n        });\n        for (int i = charArray.length; i > 0;)\n        {\n            if (wordNet[i] == null)\n            {\n                StringBuilder sbTerm = new StringBuilder();\n                int offset = i - 1;\n                byte preCharType = CharType.get(charArray[offset]);\n                while (i > 0 && wordNet[i] == null && CharType.get(charArray[i - 1]) == preCharType)\n                {\n                    sbTerm.append(charArray[i - 1]);\n                    preCharType = CharType.get(charArray[i - 1]);\n                    --i;\n                }\n                termList.addFirst(new ResultTerm<V>(sbTerm.reverse().toString(), null, offset));\n            }\n            else\n            {\n                termList.addFirst(wordNet[i]);\n                i -= wordNet[i].word.length();\n            }\n        }\n        return termList;\n    }", "code_tokens": ["public", "static", "<", "V", ">", "LinkedList", "<", "ResultTerm", "<", "V", ">", ">", "segmentReverseOrder", "(", "final", "char", "[", "]", "charArray", ",", "AhoCorasickDoubleArrayTrie", "<", "V", ">", "trie", ")", "{", "LinkedList", "<", "ResultTerm", "<", "V", ">>", "termList", "=", "new", "LinkedList", "<", "ResultTerm", "<", "V", ">", ">", "(", ")", ";", "final", "ResultTerm", "<", "V", ">", "[", "]", "wordNet", "=", "new", "ResultTerm", "[", "charArray", ".", "length", "+", "1", "]", ";", "trie", ".", "parseText", "(", "charArray", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "V", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "V", "value", ")", "{", "if", "(", "wordNet", "[", "end", "]", "==", "null", "||", "wordNet", "[", "end", "]", ".", "word", ".", "length", "(", ")", "<", "end", "-", "begin", ")", "{", "wordNet", "[", "end", "]", "=", "new", "ResultTerm", "<", "V", ">", "(", "new", "String", "(", "charArray", ",", "begin", ",", "end", "-", "begin", ")", ",", "value", ",", "begin", ")", ";", "}", "}", "}", ")", ";", "for", "(", "int", "i", "=", "charArray", ".", "length", ";", "i", ">", "0", ";", ")", "{", "if", "(", "wordNet", "[", "i", "]", "==", "null", ")", "{", "StringBuilder", "sbTerm", "=", "new", "StringBuilder", "(", ")", ";", "int", "offset", "=", "i", "-", "1", ";", "byte", "preCharType", "=", "CharType", ".", "get", "(", "charArray", "[", "offset", "]", ")", ";", "while", "(", "i", ">", "0", "&&", "wordNet", "[", "i", "]", "==", "null", "&&", "CharType", ".", "get", "(", "charArray", "[", "i", "-", "1", "]", ")", "==", "preCharType", ")", "{", "sbTerm", ".", "append", "(", "charArray", "[", "i", "-", "1", "]", ")", ";", "preCharType", "=", "CharType", ".", "get", "(", "charArray", "[", "i", "-", "1", "]", ")", ";", "--", "i", ";", "}", "termList", ".", "addFirst", "(", "new", "ResultTerm", "<", "V", ">", "(", "sbTerm", ".", "reverse", "(", ")", ".", "toString", "(", ")", ",", "null", ",", "offset", ")", ")", ";", "}", "else", "{", "termList", ".", "addFirst", "(", "wordNet", "[", "i", "]", ")", ";", "i", "-=", "wordNet", "[", "i", "]", ".", "word", ".", "length", "(", ")", ";", "}", "}", "return", "termList", ";", "}"], "docstring": "\u9006\u5411\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20\n@param charArray \u6587\u672c\n@param trie \u81ea\u52a8\u673a\n@param <V> \u7c7b\u578b\n@return \u7ed3\u679c\u94fe\u8868", "docstring_tokens": ["\u9006\u5411\u6700\u957f\u5206\u8bcd\uff0c\u5408\u5e76\u672a\u77e5\u8bed\u7d20"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/seg/Other/CommonAhoCorasickSegmentUtil.java#L102-L139", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/AutoBytePool.java", "func_name": "AutoBytePool.resize", "original_string": "void resize(int size, byte value)\n    {\n        if (size > _capacity)\n        {\n            resizeBuf(size);\n        }\n        while (_size < size)\n        {\n            _buf[_size++] = value;\n        }\n    }", "language": "java", "code": "void resize(int size, byte value)\n    {\n        if (size > _capacity)\n        {\n            resizeBuf(size);\n        }\n        while (_size < size)\n        {\n            _buf[_size++] = value;\n        }\n    }", "code_tokens": ["void", "resize", "(", "int", "size", ",", "byte", "value", ")", "{", "if", "(", "size", ">", "_capacity", ")", "{", "resizeBuf", "(", "size", ")", ";", "}", "while", "(", "_size", "<", "size", ")", "{", "_buf", "[", "_size", "++", "]", "=", "value", ";", "}", "}"], "docstring": "\u91cd\u8bbe\u5927\u5c0f\uff0c\u5e76\u4e14\u5728\u672b\u5c3e\u52a0\u4e00\u4e2a\u503c\n@param size \u5927\u5c0f\n@param value \u503c", "docstring_tokens": ["\u91cd\u8bbe\u5927\u5c0f\uff0c\u5e76\u4e14\u5728\u672b\u5c3e\u52a0\u4e00\u4e2a\u503c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/AutoBytePool.java#L112-L122", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/AutoBytePool.java", "func_name": "AutoBytePool.resizeBuf", "original_string": "private void resizeBuf(int size)\n    {\n        int capacity;\n        if (size >= _capacity * 2)\n        {\n            capacity = size;\n        }\n        else\n        {\n            capacity = 1;\n            while (capacity < size)\n            {\n                capacity <<= 1;\n            }\n        }\n        byte[] buf = new byte[capacity];\n        if (_size > 0)\n        {\n            System.arraycopy(_buf, 0, buf, 0, _size);\n        }\n        _buf = buf;\n        _capacity = capacity;\n    }", "language": "java", "code": "private void resizeBuf(int size)\n    {\n        int capacity;\n        if (size >= _capacity * 2)\n        {\n            capacity = size;\n        }\n        else\n        {\n            capacity = 1;\n            while (capacity < size)\n            {\n                capacity <<= 1;\n            }\n        }\n        byte[] buf = new byte[capacity];\n        if (_size > 0)\n        {\n            System.arraycopy(_buf, 0, buf, 0, _size);\n        }\n        _buf = buf;\n        _capacity = capacity;\n    }", "code_tokens": ["private", "void", "resizeBuf", "(", "int", "size", ")", "{", "int", "capacity", ";", "if", "(", "size", ">=", "_capacity", "*", "2", ")", "{", "capacity", "=", "size", ";", "}", "else", "{", "capacity", "=", "1", ";", "while", "(", "capacity", "<", "size", ")", "{", "capacity", "<<=", "1", ";", "}", "}", "byte", "[", "]", "buf", "=", "new", "byte", "[", "capacity", "]", ";", "if", "(", "_size", ">", "0", ")", "{", "System", ".", "arraycopy", "(", "_buf", ",", "0", ",", "buf", ",", "0", ",", "_size", ")", ";", "}", "_buf", "=", "buf", ";", "_capacity", "=", "capacity", ";", "}"], "docstring": "\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f\n@param size \u5927\u5c0f", "docstring_tokens": ["\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/AutoBytePool.java#L140-L162", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.loadMainDictionary", "original_string": "public static boolean loadMainDictionary(String mainPath, String path[], DoubleArrayTrie<CoreDictionary.Attribute> dat, boolean isCache)\n    {\n        logger.info(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\u5f00\u59cb\u52a0\u8f7d:\" + mainPath);\n        if (loadDat(mainPath, dat)) return true;\n        TreeMap<String, CoreDictionary.Attribute> map = new TreeMap<String, CoreDictionary.Attribute>();\n        LinkedHashSet<Nature> customNatureCollector = new LinkedHashSet<Nature>();\n        try\n        {\n            //String path[] = HanLP.Config.CustomDictionaryPath;\n            for (String p : path)\n            {\n                Nature defaultNature = Nature.n;\n                File file = new File(p);\n                String fileName = file.getName();\n                int cut = fileName.lastIndexOf(' ');\n                if (cut > 0)\n                {\n                    // \u6709\u9ed8\u8ba4\u8bcd\u6027\n                    String nature = fileName.substring(cut + 1);\n                    p = file.getParent() + File.separator + fileName.substring(0, cut);\n                    try\n                    {\n                        defaultNature = LexiconUtility.convertStringToNature(nature, customNatureCollector);\n                    }\n                    catch (Exception e)\n                    {\n                        logger.severe(\"\u914d\u7f6e\u6587\u4ef6\u3010\" + p + \"\u3011\u5199\u9519\u4e86\uff01\" + e);\n                        continue;\n                    }\n                }\n                logger.info(\"\u4ee5\u9ed8\u8ba4\u8bcd\u6027[\" + defaultNature + \"]\u52a0\u8f7d\u81ea\u5b9a\u4e49\u8bcd\u5178\" + p + \"\u4e2d\u2026\u2026\");\n                boolean success = load(p, defaultNature, map, customNatureCollector);\n                if (!success) logger.warning(\"\u5931\u8d25\uff1a\" + p);\n            }\n            if (map.size() == 0)\n            {\n                logger.warning(\"\u6ca1\u6709\u52a0\u8f7d\u5230\u4efb\u4f55\u8bcd\u6761\");\n                map.put(Predefine.TAG_OTHER, null);     // \u5f53\u4f5c\u7a7a\u767d\u5360\u4f4d\u7b26\n            }\n            logger.info(\"\u6b63\u5728\u6784\u5efaDoubleArrayTrie\u2026\u2026\");\n            dat.build(map);\n            if (isCache)\n            {\n                // \u7f13\u5b58\u6210dat\u6587\u4ef6\uff0c\u4e0b\u6b21\u52a0\u8f7d\u4f1a\u5feb\u5f88\u591a\n                logger.info(\"\u6b63\u5728\u7f13\u5b58\u8bcd\u5178\u4e3adat\u6587\u4ef6\u2026\u2026\");\n                // \u7f13\u5b58\u503c\u6587\u4ef6\n                List<CoreDictionary.Attribute> attributeList = new LinkedList<CoreDictionary.Attribute>();\n                for (Map.Entry<String, CoreDictionary.Attribute> entry : map.entrySet())\n                {\n                    attributeList.add(entry.getValue());\n                }\n                DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(mainPath + Predefine.BIN_EXT)));\n                // \u7f13\u5b58\u7528\u6237\u8bcd\u6027\n                if (customNatureCollector.isEmpty()) // \u70ed\u66f4\u65b0\n                {\n                    for (int i = Nature.begin.ordinal() + 1; i < Nature.values().length; ++i)\n                    {\n                        customNatureCollector.add(Nature.values()[i]);\n                    }\n                }\n                IOUtil.writeCustomNature(out, customNatureCollector);\n                // \u7f13\u5b58\u6b63\u6587\n                out.writeInt(attributeList.size());\n                for (CoreDictionary.Attribute attribute : attributeList)\n                {\n                    attribute.save(out);\n                }\n                dat.save(out);\n                out.close();\n            }\n        }\n        catch (FileNotFoundException e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u4e0d\u5b58\u5728\uff01\" + e);\n            return false;\n        }\n        catch (IOException e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u8bfb\u53d6\u9519\u8bef\uff01\" + e);\n            return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u7f13\u5b58\u5931\u8d25\uff01\\n\" + TextUtility.exceptionToString(e));\n        }\n        return true;\n    }", "language": "java", "code": "public static boolean loadMainDictionary(String mainPath, String path[], DoubleArrayTrie<CoreDictionary.Attribute> dat, boolean isCache)\n    {\n        logger.info(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\u5f00\u59cb\u52a0\u8f7d:\" + mainPath);\n        if (loadDat(mainPath, dat)) return true;\n        TreeMap<String, CoreDictionary.Attribute> map = new TreeMap<String, CoreDictionary.Attribute>();\n        LinkedHashSet<Nature> customNatureCollector = new LinkedHashSet<Nature>();\n        try\n        {\n            //String path[] = HanLP.Config.CustomDictionaryPath;\n            for (String p : path)\n            {\n                Nature defaultNature = Nature.n;\n                File file = new File(p);\n                String fileName = file.getName();\n                int cut = fileName.lastIndexOf(' ');\n                if (cut > 0)\n                {\n                    // \u6709\u9ed8\u8ba4\u8bcd\u6027\n                    String nature = fileName.substring(cut + 1);\n                    p = file.getParent() + File.separator + fileName.substring(0, cut);\n                    try\n                    {\n                        defaultNature = LexiconUtility.convertStringToNature(nature, customNatureCollector);\n                    }\n                    catch (Exception e)\n                    {\n                        logger.severe(\"\u914d\u7f6e\u6587\u4ef6\u3010\" + p + \"\u3011\u5199\u9519\u4e86\uff01\" + e);\n                        continue;\n                    }\n                }\n                logger.info(\"\u4ee5\u9ed8\u8ba4\u8bcd\u6027[\" + defaultNature + \"]\u52a0\u8f7d\u81ea\u5b9a\u4e49\u8bcd\u5178\" + p + \"\u4e2d\u2026\u2026\");\n                boolean success = load(p, defaultNature, map, customNatureCollector);\n                if (!success) logger.warning(\"\u5931\u8d25\uff1a\" + p);\n            }\n            if (map.size() == 0)\n            {\n                logger.warning(\"\u6ca1\u6709\u52a0\u8f7d\u5230\u4efb\u4f55\u8bcd\u6761\");\n                map.put(Predefine.TAG_OTHER, null);     // \u5f53\u4f5c\u7a7a\u767d\u5360\u4f4d\u7b26\n            }\n            logger.info(\"\u6b63\u5728\u6784\u5efaDoubleArrayTrie\u2026\u2026\");\n            dat.build(map);\n            if (isCache)\n            {\n                // \u7f13\u5b58\u6210dat\u6587\u4ef6\uff0c\u4e0b\u6b21\u52a0\u8f7d\u4f1a\u5feb\u5f88\u591a\n                logger.info(\"\u6b63\u5728\u7f13\u5b58\u8bcd\u5178\u4e3adat\u6587\u4ef6\u2026\u2026\");\n                // \u7f13\u5b58\u503c\u6587\u4ef6\n                List<CoreDictionary.Attribute> attributeList = new LinkedList<CoreDictionary.Attribute>();\n                for (Map.Entry<String, CoreDictionary.Attribute> entry : map.entrySet())\n                {\n                    attributeList.add(entry.getValue());\n                }\n                DataOutputStream out = new DataOutputStream(new BufferedOutputStream(IOUtil.newOutputStream(mainPath + Predefine.BIN_EXT)));\n                // \u7f13\u5b58\u7528\u6237\u8bcd\u6027\n                if (customNatureCollector.isEmpty()) // \u70ed\u66f4\u65b0\n                {\n                    for (int i = Nature.begin.ordinal() + 1; i < Nature.values().length; ++i)\n                    {\n                        customNatureCollector.add(Nature.values()[i]);\n                    }\n                }\n                IOUtil.writeCustomNature(out, customNatureCollector);\n                // \u7f13\u5b58\u6b63\u6587\n                out.writeInt(attributeList.size());\n                for (CoreDictionary.Attribute attribute : attributeList)\n                {\n                    attribute.save(out);\n                }\n                dat.save(out);\n                out.close();\n            }\n        }\n        catch (FileNotFoundException e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u4e0d\u5b58\u5728\uff01\" + e);\n            return false;\n        }\n        catch (IOException e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u8bfb\u53d6\u9519\u8bef\uff01\" + e);\n            return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPath + \"\u7f13\u5b58\u5931\u8d25\uff01\\n\" + TextUtility.exceptionToString(e));\n        }\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "loadMainDictionary", "(", "String", "mainPath", ",", "String", "path", "[", "]", ",", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", "dat", ",", "boolean", "isCache", ")", "{", "logger", ".", "info", "(", "\"\u81ea\u5b9a\u4e49\u8bcd\u5178\u5f00\u59cb\u52a0\u8f7d:\" + mainPath);", "", "", "", "", "if", "(", "loadDat", "(", "mainPath", ",", "dat", ")", ")", "return", "true", ";", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "map", "=", "new", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "LinkedHashSet", "<", "Nature", ">", "customNatureCollector", "=", "new", "LinkedHashSet", "<", "Nature", ">", "(", ")", ";", "try", "{", "//String path[] = HanLP.Config.CustomDictionaryPath;", "for", "(", "String", "p", ":", "path", ")", "{", "Nature", "defaultNature", "=", "Nature", ".", "n", ";", "File", "file", "=", "new", "File", "(", "p", ")", ";", "String", "fileName", "=", "file", ".", "getName", "(", ")", ";", "int", "cut", "=", "fileName", ".", "lastIndexOf", "(", "'", "'", ")", ";", "if", "(", "cut", ">", "0", ")", "{", "// \u6709\u9ed8\u8ba4\u8bcd\u6027", "String", "nature", "=", "fileName", ".", "substring", "(", "cut", "+", "1", ")", ";", "p", "=", "file", ".", "getParent", "(", ")", "+", "File", ".", "separator", "+", "fileName", ".", "substring", "(", "0", ",", "cut", ")", ";", "try", "{", "defaultNature", "=", "LexiconUtility", ".", "convertStringToNature", "(", "nature", ",", "customNatureCollector", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "severe", "(", "\"\u914d\u7f6e\u6587\u4ef6\u3010\" + p + \"\u3011\u5199", "\u4e86", "\"", "+", "e);", "", "", "", "", "continue", ";", "}", "}", "logger", ".", "info", "(", "\"\u4ee5\u9ed8\u8ba4\u8bcd\u6027[\" + default", "a", "ure + \"]\u52a0\u8f7d\u81ea\u5b9a\u4e49", "\u5178", " + p + \"\u4e2d\u2026\u2026\");", "", "", "", "", "", "", "boolean", "success", "=", "load", "(", "p", ",", "defaultNature", ",", "map", ",", "customNatureCollector", ")", ";", "if", "(", "!", "success", ")", "logger", ".", "warning", "(", "\"\u5931\u8d25\uff1a\" + p);", "", "", "", "", "}", "if", "(", "map", ".", "size", "(", ")", "==", "0", ")", "{", "logger", ".", "warning", "(", "\"\u6ca1\u6709\u52a0\u8f7d\u5230\u4efb\u4f55\u8bcd\u6761\");", "", "", "map", ".", "put", "(", "Predefine", ".", "TAG_OTHER", ",", "null", ")", ";", "// \u5f53\u4f5c\u7a7a\u767d\u5360\u4f4d\u7b26", "}", "logger", ".", "info", "(", "\"\u6b63\u5728\u6784\u5efaDoubleArrayTrie\u2026\u2026\");", "", "", "dat", ".", "build", "(", "map", ")", ";", "if", "(", "isCache", ")", "{", "// \u7f13\u5b58\u6210dat\u6587\u4ef6\uff0c\u4e0b\u6b21\u52a0\u8f7d\u4f1a\u5feb\u5f88\u591a", "logger", ".", "info", "(", "\"\u6b63\u5728\u7f13\u5b58\u8bcd\u5178\u4e3adat\u6587\u4ef6\u2026\u2026\");", "", "", "// \u7f13\u5b58\u503c\u6587\u4ef6", "List", "<", "CoreDictionary", ".", "Attribute", ">", "attributeList", "=", "new", "LinkedList", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "for", "(", "Map", ".", "Entry", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "entry", ":", "map", ".", "entrySet", "(", ")", ")", "{", "attributeList", ".", "add", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "DataOutputStream", "out", "=", "new", "DataOutputStream", "(", "new", "BufferedOutputStream", "(", "IOUtil", ".", "newOutputStream", "(", "mainPath", "+", "Predefine", ".", "BIN_EXT", ")", ")", ")", ";", "// \u7f13\u5b58\u7528\u6237\u8bcd\u6027", "if", "(", "customNatureCollector", ".", "isEmpty", "(", ")", ")", "// \u70ed\u66f4\u65b0", "{", "for", "(", "int", "i", "=", "Nature", ".", "begin", ".", "ordinal", "(", ")", "+", "1", ";", "i", "<", "Nature", ".", "values", "(", ")", ".", "length", ";", "++", "i", ")", "{", "customNatureCollector", ".", "add", "(", "Nature", ".", "values", "(", ")", "[", "i", "]", ")", ";", "}", "}", "IOUtil", ".", "writeCustomNature", "(", "out", ",", "customNatureCollector", ")", ";", "// \u7f13\u5b58\u6b63\u6587", "out", ".", "writeInt", "(", "attributeList", ".", "size", "(", ")", ")", ";", "for", "(", "CoreDictionary", ".", "Attribute", "attribute", ":", "attributeList", ")", "{", "attribute", ".", "save", "(", "out", ")", ";", "}", "dat", ".", "save", "(", "out", ")", ";", "out", ".", "close", "(", ")", ";", "}", "}", "catch", "(", "FileNotFoundException", "e", ")", "{", "logger", ".", "severe", "(", "\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPat", " ", " \"\u4e0d\u5b58\u5728\uff01\" ", " ", ");", "", "", "", "", "return", "false", ";", "}", "catch", "(", "IOException", "e", ")", "{", "logger", ".", "severe", "(", "\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPat", " ", " \"\u8bfb\u53d6\u9519\u8bef\uff01\"", "+", "e);", "", "", "", "", "return", "false", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + mainPat", " ", " \"\u7f13\u5b58\u5931\u8d25\uff01\\", "\"", "+ TextUtility.excep", "i", "nToString(e", ")", ");", "", "", "", "", "", "}", "return", "true", ";", "}"], "docstring": "\u52a0\u8f7d\u8bcd\u5178\n@param mainPath \u7f13\u5b58\u6587\u4ef6\u6587\u4ef6\u540d\n@param path \u81ea\u5b9a\u4e49\u8bcd\u5178\n@param isCache \u662f\u5426\u7f13\u5b58\u7ed3\u679c", "docstring_tokens": ["\u52a0\u8f7d\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L67-L153", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.load", "original_string": "public static boolean load(String path, Nature defaultNature, TreeMap<String, CoreDictionary.Attribute> map, LinkedHashSet<Nature> customNatureCollector)\n    {\n        try\n        {\n            String splitter = \"\\\\s\";\n            if (path.endsWith(\".csv\"))\n            {\n                splitter = \",\";\n            }\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            String line;\n            boolean firstLine = true;\n            while ((line = br.readLine()) != null)\n            {\n                if (firstLine)\n                {\n                    line = IOUtil.removeUTF8BOM(line);\n                    firstLine = false;\n                }\n                String[] param = line.split(splitter);\n                if (param[0].length() == 0) continue;   // \u6392\u9664\u7a7a\u884c\n                if (HanLP.Config.Normalization) param[0] = CharTable.convert(param[0]); // \u6b63\u89c4\u5316\n\n                int natureCount = (param.length - 1) / 2;\n                CoreDictionary.Attribute attribute;\n                if (natureCount == 0)\n                {\n                    attribute = new CoreDictionary.Attribute(defaultNature);\n                }\n                else\n                {\n                    attribute = new CoreDictionary.Attribute(natureCount);\n                    for (int i = 0; i < natureCount; ++i)\n                    {\n                        attribute.nature[i] = LexiconUtility.convertStringToNature(param[1 + 2 * i], customNatureCollector);\n                        attribute.frequency[i] = Integer.parseInt(param[2 + 2 * i]);\n                        attribute.totalFrequency += attribute.frequency[i];\n                    }\n                }\n//                if (updateAttributeIfExist(param[0], attribute, map, rewriteTable)) continue;\n                map.put(param[0], attribute);\n            }\n            br.close();\n        }\n        catch (Exception e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + path + \"\u8bfb\u53d6\u9519\u8bef\uff01\" + e);\n            return false;\n        }\n\n        return true;\n    }", "language": "java", "code": "public static boolean load(String path, Nature defaultNature, TreeMap<String, CoreDictionary.Attribute> map, LinkedHashSet<Nature> customNatureCollector)\n    {\n        try\n        {\n            String splitter = \"\\\\s\";\n            if (path.endsWith(\".csv\"))\n            {\n                splitter = \",\";\n            }\n            BufferedReader br = new BufferedReader(new InputStreamReader(IOUtil.newInputStream(path), \"UTF-8\"));\n            String line;\n            boolean firstLine = true;\n            while ((line = br.readLine()) != null)\n            {\n                if (firstLine)\n                {\n                    line = IOUtil.removeUTF8BOM(line);\n                    firstLine = false;\n                }\n                String[] param = line.split(splitter);\n                if (param[0].length() == 0) continue;   // \u6392\u9664\u7a7a\u884c\n                if (HanLP.Config.Normalization) param[0] = CharTable.convert(param[0]); // \u6b63\u89c4\u5316\n\n                int natureCount = (param.length - 1) / 2;\n                CoreDictionary.Attribute attribute;\n                if (natureCount == 0)\n                {\n                    attribute = new CoreDictionary.Attribute(defaultNature);\n                }\n                else\n                {\n                    attribute = new CoreDictionary.Attribute(natureCount);\n                    for (int i = 0; i < natureCount; ++i)\n                    {\n                        attribute.nature[i] = LexiconUtility.convertStringToNature(param[1 + 2 * i], customNatureCollector);\n                        attribute.frequency[i] = Integer.parseInt(param[2 + 2 * i]);\n                        attribute.totalFrequency += attribute.frequency[i];\n                    }\n                }\n//                if (updateAttributeIfExist(param[0], attribute, map, rewriteTable)) continue;\n                map.put(param[0], attribute);\n            }\n            br.close();\n        }\n        catch (Exception e)\n        {\n            logger.severe(\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + path + \"\u8bfb\u53d6\u9519\u8bef\uff01\" + e);\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "load", "(", "String", "path", ",", "Nature", "defaultNature", ",", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "map", ",", "LinkedHashSet", "<", "Nature", ">", "customNatureCollector", ")", "{", "try", "{", "String", "splitter", "=", "\"\\\\s\"", ";", "if", "(", "path", ".", "endsWith", "(", "\".csv\"", ")", ")", "{", "splitter", "=", "\",\"", ";", "}", "BufferedReader", "br", "=", "new", "BufferedReader", "(", "new", "InputStreamReader", "(", "IOUtil", ".", "newInputStream", "(", "path", ")", ",", "\"UTF-8\"", ")", ")", ";", "String", "line", ";", "boolean", "firstLine", "=", "true", ";", "while", "(", "(", "line", "=", "br", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "if", "(", "firstLine", ")", "{", "line", "=", "IOUtil", ".", "removeUTF8BOM", "(", "line", ")", ";", "firstLine", "=", "false", ";", "}", "String", "[", "]", "param", "=", "line", ".", "split", "(", "splitter", ")", ";", "if", "(", "param", "[", "0", "]", ".", "length", "(", ")", "==", "0", ")", "continue", ";", "// \u6392\u9664\u7a7a\u884c", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "param", "[", "0", "]", "=", "CharTable", ".", "convert", "(", "param", "[", "0", "]", ")", ";", "// \u6b63\u89c4\u5316", "int", "natureCount", "=", "(", "param", ".", "length", "-", "1", ")", "/", "2", ";", "CoreDictionary", ".", "Attribute", "attribute", ";", "if", "(", "natureCount", "==", "0", ")", "{", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "defaultNature", ")", ";", "}", "else", "{", "attribute", "=", "new", "CoreDictionary", ".", "Attribute", "(", "natureCount", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "natureCount", ";", "++", "i", ")", "{", "attribute", ".", "nature", "[", "i", "]", "=", "LexiconUtility", ".", "convertStringToNature", "(", "param", "[", "1", "+", "2", "*", "i", "]", ",", "customNatureCollector", ")", ";", "attribute", ".", "frequency", "[", "i", "]", "=", "Integer", ".", "parseInt", "(", "param", "[", "2", "+", "2", "*", "i", "]", ")", ";", "attribute", ".", "totalFrequency", "+=", "attribute", ".", "frequency", "[", "i", "]", ";", "}", "}", "//                if (updateAttributeIfExist(param[0], attribute, map, rewriteTable)) continue;", "map", ".", "put", "(", "param", "[", "0", "]", ",", "attribute", ")", ";", "}", "br", ".", "close", "(", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "severe", "(", "\"\u81ea\u5b9a\u4e49\u8bcd\u5178\" + path + ", "\u8bfb", "\u9519\u8bef\uff01\"", "+", "e);", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u52a0\u8f7d\u7528\u6237\u8bcd\u5178\uff08\u8ffd\u52a0\uff09\n\n@param path          \u8bcd\u5178\u8def\u5f84\n@param defaultNature \u9ed8\u8ba4\u8bcd\u6027\n@param customNatureCollector \u6536\u96c6\u7528\u6237\u8bcd\u6027\n@return", "docstring_tokens": ["\u52a0\u8f7d\u7528\u6237\u8bcd\u5178\uff08\u8ffd\u52a0\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L169-L220", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.updateAttributeIfExist", "original_string": "private static boolean updateAttributeIfExist(String key, CoreDictionary.Attribute attribute, TreeMap<String, CoreDictionary.Attribute> map, TreeMap<Integer, CoreDictionary.Attribute> rewriteTable)\n    {\n        int wordID = CoreDictionary.getWordID(key);\n        CoreDictionary.Attribute attributeExisted;\n        if (wordID != -1)\n        {\n            attributeExisted = CoreDictionary.get(wordID);\n            attributeExisted.nature = attribute.nature;\n            attributeExisted.frequency = attribute.frequency;\n            attributeExisted.totalFrequency = attribute.totalFrequency;\n            // \u6536\u96c6\u8be5\u8986\u5199\n            rewriteTable.put(wordID, attribute);\n            return true;\n        }\n\n        attributeExisted = map.get(key);\n        if (attributeExisted != null)\n        {\n            attributeExisted.nature = attribute.nature;\n            attributeExisted.frequency = attribute.frequency;\n            attributeExisted.totalFrequency = attribute.totalFrequency;\n            return true;\n        }\n\n        return false;\n    }", "language": "java", "code": "private static boolean updateAttributeIfExist(String key, CoreDictionary.Attribute attribute, TreeMap<String, CoreDictionary.Attribute> map, TreeMap<Integer, CoreDictionary.Attribute> rewriteTable)\n    {\n        int wordID = CoreDictionary.getWordID(key);\n        CoreDictionary.Attribute attributeExisted;\n        if (wordID != -1)\n        {\n            attributeExisted = CoreDictionary.get(wordID);\n            attributeExisted.nature = attribute.nature;\n            attributeExisted.frequency = attribute.frequency;\n            attributeExisted.totalFrequency = attribute.totalFrequency;\n            // \u6536\u96c6\u8be5\u8986\u5199\n            rewriteTable.put(wordID, attribute);\n            return true;\n        }\n\n        attributeExisted = map.get(key);\n        if (attributeExisted != null)\n        {\n            attributeExisted.nature = attribute.nature;\n            attributeExisted.frequency = attribute.frequency;\n            attributeExisted.totalFrequency = attribute.totalFrequency;\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["private", "static", "boolean", "updateAttributeIfExist", "(", "String", "key", ",", "CoreDictionary", ".", "Attribute", "attribute", ",", "TreeMap", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "map", ",", "TreeMap", "<", "Integer", ",", "CoreDictionary", ".", "Attribute", ">", "rewriteTable", ")", "{", "int", "wordID", "=", "CoreDictionary", ".", "getWordID", "(", "key", ")", ";", "CoreDictionary", ".", "Attribute", "attributeExisted", ";", "if", "(", "wordID", "!=", "-", "1", ")", "{", "attributeExisted", "=", "CoreDictionary", ".", "get", "(", "wordID", ")", ";", "attributeExisted", ".", "nature", "=", "attribute", ".", "nature", ";", "attributeExisted", ".", "frequency", "=", "attribute", ".", "frequency", ";", "attributeExisted", ".", "totalFrequency", "=", "attribute", ".", "totalFrequency", ";", "// \u6536\u96c6\u8be5\u8986\u5199", "rewriteTable", ".", "put", "(", "wordID", ",", "attribute", ")", ";", "return", "true", ";", "}", "attributeExisted", "=", "map", ".", "get", "(", "key", ")", ";", "if", "(", "attributeExisted", "!=", "null", ")", "{", "attributeExisted", ".", "nature", "=", "attribute", ".", "nature", ";", "attributeExisted", ".", "frequency", "=", "attribute", ".", "frequency", ";", "attributeExisted", ".", "totalFrequency", "=", "attribute", ".", "totalFrequency", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u8be5\u8bcd\u6761,\u76f4\u63a5\u66f4\u65b0\u8be5\u8bcd\u6761\u7684\u5c5e\u6027\n@param key \u8bcd\u8bed\n@param attribute \u8bcd\u8bed\u7684\u5c5e\u6027\n@param map \u52a0\u8f7d\u671f\u95f4\u7684map\n@param rewriteTable\n@return \u662f\u5426\u66f4\u65b0\u4e86", "docstring_tokens": ["\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u8be5\u8bcd\u6761", "\u76f4\u63a5\u66f4\u65b0\u8be5\u8bcd\u6761\u7684\u5c5e\u6027"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L230-L255", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.add", "original_string": "public static boolean add(String word, String natureWithFrequency)\n    {\n        if (contains(word)) return false;\n        return insert(word, natureWithFrequency);\n    }", "language": "java", "code": "public static boolean add(String word, String natureWithFrequency)\n    {\n        if (contains(word)) return false;\n        return insert(word, natureWithFrequency);\n    }", "code_tokens": ["public", "static", "boolean", "add", "(", "String", "word", ",", "String", "natureWithFrequency", ")", "{", "if", "(", "contains", "(", "word", ")", ")", "return", "false", ";", "return", "insert", "(", "word", ",", "natureWithFrequency", ")", ";", "}"], "docstring": "\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u975e\u8986\u76d6\u6a21\u5f0f\uff09<br>\n\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6\n\n@param word                \u65b0\u8bcd \u5982\u201c\u88f8\u5a5a\u201d\n@param natureWithFrequency \u8bcd\u6027\u548c\u5176\u5bf9\u5e94\u7684\u9891\u6b21\uff0c\u6bd4\u5982\u201cnz 1 v 2\u201d\uff0cnull\u65f6\u8868\u793a\u201cnz 1\u201d\n@return \u662f\u5426\u63d2\u5165\u6210\u529f\uff08\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u662f\u4e0d\u8986\u76d6\u3001natureWithFrequency\u6709\u95ee\u9898\u7b49\uff0c\u540e\u8005\u53ef\u4ee5\u901a\u8fc7\u8c03\u8bd5\u6a21\u5f0f\u4e86\u89e3\u539f\u56e0\uff09", "docstring_tokens": ["\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u975e\u8986\u76d6\u6a21\u5f0f\uff09<br", ">", "\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L265-L269", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.add", "original_string": "public static boolean add(String word)\n    {\n        if (HanLP.Config.Normalization) word = CharTable.convert(word);\n        if (contains(word)) return false;\n        return insert(word, null);\n    }", "language": "java", "code": "public static boolean add(String word)\n    {\n        if (HanLP.Config.Normalization) word = CharTable.convert(word);\n        if (contains(word)) return false;\n        return insert(word, null);\n    }", "code_tokens": ["public", "static", "boolean", "add", "(", "String", "word", ")", "{", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "word", "=", "CharTable", ".", "convert", "(", "word", ")", ";", "if", "(", "contains", "(", "word", ")", ")", "return", "false", ";", "return", "insert", "(", "word", ",", "null", ")", ";", "}"], "docstring": "\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u975e\u8986\u76d6\u6a21\u5f0f\uff09<br>\n\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6\n\n@param word                \u65b0\u8bcd \u5982\u201c\u88f8\u5a5a\u201d\n@return \u662f\u5426\u63d2\u5165\u6210\u529f\uff08\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u662f\u4e0d\u8986\u76d6\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u8bd5\u6a21\u5f0f\u4e86\u89e3\u539f\u56e0\uff09", "docstring_tokens": ["\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u975e\u8986\u76d6\u6a21\u5f0f\uff09<br", ">", "\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L278-L283", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.insert", "original_string": "public static boolean insert(String word, String natureWithFrequency)\n    {\n        if (word == null) return false;\n        if (HanLP.Config.Normalization) word = CharTable.convert(word);\n        CoreDictionary.Attribute att = natureWithFrequency == null ? new CoreDictionary.Attribute(Nature.nz, 1) : CoreDictionary.Attribute.create(natureWithFrequency);\n        if (att == null) return false;\n        if (dat.set(word, att)) return true;\n        if (trie == null) trie = new BinTrie<CoreDictionary.Attribute>();\n        trie.put(word, att);\n        return true;\n    }", "language": "java", "code": "public static boolean insert(String word, String natureWithFrequency)\n    {\n        if (word == null) return false;\n        if (HanLP.Config.Normalization) word = CharTable.convert(word);\n        CoreDictionary.Attribute att = natureWithFrequency == null ? new CoreDictionary.Attribute(Nature.nz, 1) : CoreDictionary.Attribute.create(natureWithFrequency);\n        if (att == null) return false;\n        if (dat.set(word, att)) return true;\n        if (trie == null) trie = new BinTrie<CoreDictionary.Attribute>();\n        trie.put(word, att);\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "insert", "(", "String", "word", ",", "String", "natureWithFrequency", ")", "{", "if", "(", "word", "==", "null", ")", "return", "false", ";", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "word", "=", "CharTable", ".", "convert", "(", "word", ")", ";", "CoreDictionary", ".", "Attribute", "att", "=", "natureWithFrequency", "==", "null", "?", "new", "CoreDictionary", ".", "Attribute", "(", "Nature", ".", "nz", ",", "1", ")", ":", "CoreDictionary", ".", "Attribute", ".", "create", "(", "natureWithFrequency", ")", ";", "if", "(", "att", "==", "null", ")", "return", "false", ";", "if", "(", "dat", ".", "set", "(", "word", ",", "att", ")", ")", "return", "true", ";", "if", "(", "trie", "==", "null", ")", "trie", "=", "new", "BinTrie", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", ";", "trie", ".", "put", "(", "word", ",", "att", ")", ";", "return", "true", ";", "}"], "docstring": "\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u8986\u76d6\u6a21\u5f0f\uff09<br>\n\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6\n\n@param word                \u65b0\u8bcd \u5982\u201c\u88f8\u5a5a\u201d\n@param natureWithFrequency \u8bcd\u6027\u548c\u5176\u5bf9\u5e94\u7684\u9891\u6b21\uff0c\u6bd4\u5982\u201cnz 1 v 2\u201d\uff0cnull\u65f6\u8868\u793a\u201cnz 1\u201d\u3002\n@return \u662f\u5426\u63d2\u5165\u6210\u529f\uff08\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u662fnatureWithFrequency\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u8bd5\u6a21\u5f0f\u4e86\u89e3\u539f\u56e0\uff09", "docstring_tokens": ["\u5f80\u81ea\u5b9a\u4e49\u8bcd\u5178\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8bcd\uff08\u8986\u76d6\u6a21\u5f0f\uff09<br", ">", "\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L293-L303", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.loadDat", "original_string": "public static boolean loadDat(String path, String customDicPath[], DoubleArrayTrie<CoreDictionary.Attribute> dat)\n    {\n        try\n        {\n            if (isDicNeedUpdate(path, customDicPath))\n            {\n                return false;\n            }\n            ByteArray byteArray = ByteArray.createByteArray(path + Predefine.BIN_EXT);\n            if (byteArray == null) return false;\n            int size = byteArray.nextInt();\n            if (size < 0)   // \u4e00\u79cd\u517c\u5bb9\u63aa\u65bd,\u5f53size\u5c0f\u4e8e\u96f6\u8868\u793a\u6587\u4ef6\u5934\u90e8\u50a8\u5b58\u4e86-size\u4e2a\u7528\u6237\u8bcd\u6027\n            {\n                while (++size <= 0)\n                {\n                    Nature.create(byteArray.nextString());\n                }\n                size = byteArray.nextInt();\n            }\n            CoreDictionary.Attribute[] attributes = new CoreDictionary.Attribute[size];\n            final Nature[] natureIndexArray = Nature.values();\n            for (int i = 0; i < size; ++i)\n            {\n                // \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570\n                int currentTotalFrequency = byteArray.nextInt();\n                int length = byteArray.nextInt();\n                attributes[i] = new CoreDictionary.Attribute(length);\n                attributes[i].totalFrequency = currentTotalFrequency;\n                for (int j = 0; j < length; ++j)\n                {\n                    attributes[i].nature[j] = natureIndexArray[byteArray.nextInt()];\n                    attributes[i].frequency[j] = byteArray.nextInt();\n                }\n            }\n            if (!dat.load(byteArray, attributes)) return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n        return true;\n    }", "language": "java", "code": "public static boolean loadDat(String path, String customDicPath[], DoubleArrayTrie<CoreDictionary.Attribute> dat)\n    {\n        try\n        {\n            if (isDicNeedUpdate(path, customDicPath))\n            {\n                return false;\n            }\n            ByteArray byteArray = ByteArray.createByteArray(path + Predefine.BIN_EXT);\n            if (byteArray == null) return false;\n            int size = byteArray.nextInt();\n            if (size < 0)   // \u4e00\u79cd\u517c\u5bb9\u63aa\u65bd,\u5f53size\u5c0f\u4e8e\u96f6\u8868\u793a\u6587\u4ef6\u5934\u90e8\u50a8\u5b58\u4e86-size\u4e2a\u7528\u6237\u8bcd\u6027\n            {\n                while (++size <= 0)\n                {\n                    Nature.create(byteArray.nextString());\n                }\n                size = byteArray.nextInt();\n            }\n            CoreDictionary.Attribute[] attributes = new CoreDictionary.Attribute[size];\n            final Nature[] natureIndexArray = Nature.values();\n            for (int i = 0; i < size; ++i)\n            {\n                // \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570\n                int currentTotalFrequency = byteArray.nextInt();\n                int length = byteArray.nextInt();\n                attributes[i] = new CoreDictionary.Attribute(length);\n                attributes[i].totalFrequency = currentTotalFrequency;\n                for (int j = 0; j < length; ++j)\n                {\n                    attributes[i].nature[j] = natureIndexArray[byteArray.nextInt()];\n                    attributes[i].frequency[j] = byteArray.nextInt();\n                }\n            }\n            if (!dat.load(byteArray, attributes)) return false;\n        }\n        catch (Exception e)\n        {\n            logger.warning(\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + TextUtility.exceptionToString(e));\n            return false;\n        }\n        return true;\n    }", "code_tokens": ["public", "static", "boolean", "loadDat", "(", "String", "path", ",", "String", "customDicPath", "[", "]", ",", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", "dat", ")", "{", "try", "{", "if", "(", "isDicNeedUpdate", "(", "path", ",", "customDicPath", ")", ")", "{", "return", "false", ";", "}", "ByteArray", "byteArray", "=", "ByteArray", ".", "createByteArray", "(", "path", "+", "Predefine", ".", "BIN_EXT", ")", ";", "if", "(", "byteArray", "==", "null", ")", "return", "false", ";", "int", "size", "=", "byteArray", ".", "nextInt", "(", ")", ";", "if", "(", "size", "<", "0", ")", "// \u4e00\u79cd\u517c\u5bb9\u63aa\u65bd,\u5f53size\u5c0f\u4e8e\u96f6\u8868\u793a\u6587\u4ef6\u5934\u90e8\u50a8\u5b58\u4e86-size\u4e2a\u7528\u6237\u8bcd\u6027", "{", "while", "(", "++", "size", "<=", "0", ")", "{", "Nature", ".", "create", "(", "byteArray", ".", "nextString", "(", ")", ")", ";", "}", "size", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "CoreDictionary", ".", "Attribute", "[", "]", "attributes", "=", "new", "CoreDictionary", ".", "Attribute", "[", "size", "]", ";", "final", "Nature", "[", "]", "natureIndexArray", "=", "Nature", ".", "values", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "++", "i", ")", "{", "// \u7b2c\u4e00\u4e2a\u662f\u5168\u90e8\u9891\u6b21\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8bcd\u6027\u4e2a\u6570", "int", "currentTotalFrequency", "=", "byteArray", ".", "nextInt", "(", ")", ";", "int", "length", "=", "byteArray", ".", "nextInt", "(", ")", ";", "attributes", "[", "i", "]", "=", "new", "CoreDictionary", ".", "Attribute", "(", "length", ")", ";", "attributes", "[", "i", "]", ".", "totalFrequency", "=", "currentTotalFrequency", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "length", ";", "++", "j", ")", "{", "attributes", "[", "i", "]", ".", "nature", "[", "j", "]", "=", "natureIndexArray", "[", "byteArray", ".", "nextInt", "(", ")", "]", ";", "attributes", "[", "i", "]", ".", "frequency", "[", "j", "]", "=", "byteArray", ".", "nextInt", "(", ")", ";", "}", "}", "if", "(", "!", "dat", ".", "load", "(", "byteArray", ",", "attributes", ")", ")", "return", "false", ";", "}", "catch", "(", "Exception", "e", ")", "{", "logger", ".", "warning", "(", "\"\u8bfb\u53d6\u5931\u8d25\uff0c\u95ee\u9898\u53d1\u751f\u5728\" + TextUtility.excep", "i", "nToString(e", ")", ");", "", "", "", "", "", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4\n\n@param path \u4e3b\u8bcd\u5178\u8def\u5f84\n@param customDicPath \u7528\u6237\u8bcd\u5178\u8def\u5f84\n@return", "docstring_tokens": ["\u4ece\u78c1\u76d8\u52a0\u8f7d\u53cc\u6570\u7ec4"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L329-L371", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.isDicNeedUpdate", "original_string": "private static boolean isDicNeedUpdate(String mainPath, String path[])\n    {\n        if (HanLP.Config.IOAdapter != null &&\n            !HanLP.Config.IOAdapter.getClass().getName().contains(\"com.hankcs.hanlp.corpus.io.FileIOAdapter\"))\n        {\n            return false;\n        }\n        String binPath = mainPath + Predefine.BIN_EXT;\n        File binFile = new File(binPath);\n        if (!binFile.exists())\n        {\n            return true;\n        }\n        long lastModified = binFile.lastModified();\n        //String path[] = HanLP.Config.CustomDictionaryPath;\n        for (String p : path)\n        {\n            File f = new File(p);\n            String fileName = f.getName();\n            int cut = fileName.lastIndexOf(' ');\n            if (cut > 0)\n            {\n                p = f.getParent() + File.separator + fileName.substring(0, cut);\n            }\n            f = new File(p);\n            if (f.exists() && f.lastModified() > lastModified)\n            {\n                IOUtil.deleteFile(binPath); // \u5220\u6389\u7f13\u5b58\n                logger.info(\"\u5df2\u6e05\u9664\u81ea\u5b9a\u4e49\u8bcd\u5178\u7f13\u5b58\u6587\u4ef6\uff01\");\n                return true;\n            }\n        }\n        return false;\n    }", "language": "java", "code": "private static boolean isDicNeedUpdate(String mainPath, String path[])\n    {\n        if (HanLP.Config.IOAdapter != null &&\n            !HanLP.Config.IOAdapter.getClass().getName().contains(\"com.hankcs.hanlp.corpus.io.FileIOAdapter\"))\n        {\n            return false;\n        }\n        String binPath = mainPath + Predefine.BIN_EXT;\n        File binFile = new File(binPath);\n        if (!binFile.exists())\n        {\n            return true;\n        }\n        long lastModified = binFile.lastModified();\n        //String path[] = HanLP.Config.CustomDictionaryPath;\n        for (String p : path)\n        {\n            File f = new File(p);\n            String fileName = f.getName();\n            int cut = fileName.lastIndexOf(' ');\n            if (cut > 0)\n            {\n                p = f.getParent() + File.separator + fileName.substring(0, cut);\n            }\n            f = new File(p);\n            if (f.exists() && f.lastModified() > lastModified)\n            {\n                IOUtil.deleteFile(binPath); // \u5220\u6389\u7f13\u5b58\n                logger.info(\"\u5df2\u6e05\u9664\u81ea\u5b9a\u4e49\u8bcd\u5178\u7f13\u5b58\u6587\u4ef6\uff01\");\n                return true;\n            }\n        }\n        return false;\n    }", "code_tokens": ["private", "static", "boolean", "isDicNeedUpdate", "(", "String", "mainPath", ",", "String", "path", "[", "]", ")", "{", "if", "(", "HanLP", ".", "Config", ".", "IOAdapter", "!=", "null", "&&", "!", "HanLP", ".", "Config", ".", "IOAdapter", ".", "getClass", "(", ")", ".", "getName", "(", ")", ".", "contains", "(", "\"com.hankcs.hanlp.corpus.io.FileIOAdapter\"", ")", ")", "{", "return", "false", ";", "}", "String", "binPath", "=", "mainPath", "+", "Predefine", ".", "BIN_EXT", ";", "File", "binFile", "=", "new", "File", "(", "binPath", ")", ";", "if", "(", "!", "binFile", ".", "exists", "(", ")", ")", "{", "return", "true", ";", "}", "long", "lastModified", "=", "binFile", ".", "lastModified", "(", ")", ";", "//String path[] = HanLP.Config.CustomDictionaryPath;", "for", "(", "String", "p", ":", "path", ")", "{", "File", "f", "=", "new", "File", "(", "p", ")", ";", "String", "fileName", "=", "f", ".", "getName", "(", ")", ";", "int", "cut", "=", "fileName", ".", "lastIndexOf", "(", "'", "'", ")", ";", "if", "(", "cut", ">", "0", ")", "{", "p", "=", "f", ".", "getParent", "(", ")", "+", "File", ".", "separator", "+", "fileName", ".", "substring", "(", "0", ",", "cut", ")", ";", "}", "f", "=", "new", "File", "(", "p", ")", ";", "if", "(", "f", ".", "exists", "(", ")", "&&", "f", ".", "lastModified", "(", ")", ">", "lastModified", ")", "{", "IOUtil", ".", "deleteFile", "(", "binPath", ")", ";", "// \u5220\u6389\u7f13\u5b58", "logger", ".", "info", "(", "\"\u5df2\u6e05\u9664\u81ea\u5b9a\u4e49\u8bcd\u5178\u7f13\u5b58\u6587\u4ef6\uff01\");", "", "", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "\u83b7\u53d6\u672c\u5730\u8bcd\u5178\u66f4\u65b0\u72b6\u6001\n@return true \u8868\u793a\u672c\u5730\u8bcd\u5178\u6bd4\u7f13\u5b58\u6587\u4ef6\u65b0\uff0c\u9700\u8981\u5220\u9664\u7f13\u5b58", "docstring_tokens": ["\u83b7\u53d6\u672c\u5730\u8bcd\u5178\u66f4\u65b0\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L377-L410", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.get", "original_string": "public static CoreDictionary.Attribute get(String key)\n    {\n        if (HanLP.Config.Normalization) key = CharTable.convert(key);\n        CoreDictionary.Attribute attribute = dat.get(key);\n        if (attribute != null) return attribute;\n        if (trie == null) return null;\n        return trie.get(key);\n    }", "language": "java", "code": "public static CoreDictionary.Attribute get(String key)\n    {\n        if (HanLP.Config.Normalization) key = CharTable.convert(key);\n        CoreDictionary.Attribute attribute = dat.get(key);\n        if (attribute != null) return attribute;\n        if (trie == null) return null;\n        return trie.get(key);\n    }", "code_tokens": ["public", "static", "CoreDictionary", ".", "Attribute", "get", "(", "String", "key", ")", "{", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "key", "=", "CharTable", ".", "convert", "(", "key", ")", ";", "CoreDictionary", ".", "Attribute", "attribute", "=", "dat", ".", "get", "(", "key", ")", ";", "if", "(", "attribute", "!=", "null", ")", "return", "attribute", ";", "if", "(", "trie", "==", "null", ")", "return", "null", ";", "return", "trie", ".", "get", "(", "key", ")", ";", "}"], "docstring": "\u67e5\u5355\u8bcd\n\n@param key\n@return", "docstring_tokens": ["\u67e5\u5355\u8bcd"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L418-L425", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.remove", "original_string": "public static void remove(String key)\n    {\n        if (HanLP.Config.Normalization) key = CharTable.convert(key);\n        if (trie == null) return;\n        trie.remove(key);\n    }", "language": "java", "code": "public static void remove(String key)\n    {\n        if (HanLP.Config.Normalization) key = CharTable.convert(key);\n        if (trie == null) return;\n        trie.remove(key);\n    }", "code_tokens": ["public", "static", "void", "remove", "(", "String", "key", ")", "{", "if", "(", "HanLP", ".", "Config", ".", "Normalization", ")", "key", "=", "CharTable", ".", "convert", "(", "key", ")", ";", "if", "(", "trie", "==", "null", ")", "return", ";", "trie", ".", "remove", "(", "key", ")", ";", "}"], "docstring": "\u5220\u9664\u5355\u8bcd<br>\n\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6\n\n@param key", "docstring_tokens": ["\u5220\u9664\u5355\u8bcd<br", ">", "\u52a8\u6001\u589e\u5220\u4e0d\u4f1a\u6301\u4e45\u5316\u5230\u8bcd\u5178\u6587\u4ef6"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L433-L438", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.commonPrefixSearch", "original_string": "public static LinkedList<Map.Entry<String, CoreDictionary.Attribute>> commonPrefixSearch(String key)\n    {\n        return trie.commonPrefixSearchWithValue(key);\n    }", "language": "java", "code": "public static LinkedList<Map.Entry<String, CoreDictionary.Attribute>> commonPrefixSearch(String key)\n    {\n        return trie.commonPrefixSearchWithValue(key);\n    }", "code_tokens": ["public", "static", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", ">", "commonPrefixSearch", "(", "String", "key", ")", "{", "return", "trie", ".", "commonPrefixSearchWithValue", "(", "key", ")", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n\n@param key\n@return", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L446-L449", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.commonPrefixSearch", "original_string": "public static LinkedList<Map.Entry<String, CoreDictionary.Attribute>> commonPrefixSearch(char[] chars, int begin)\n    {\n        return trie.commonPrefixSearchWithValue(chars, begin);\n    }", "language": "java", "code": "public static LinkedList<Map.Entry<String, CoreDictionary.Attribute>> commonPrefixSearch(char[] chars, int begin)\n    {\n        return trie.commonPrefixSearchWithValue(chars, begin);\n    }", "code_tokens": ["public", "static", "LinkedList", "<", "Map", ".", "Entry", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", ">", "commonPrefixSearch", "(", "char", "[", "]", "chars", ",", "int", "begin", ")", "{", "return", "trie", ".", "commonPrefixSearchWithValue", "(", "chars", ",", "begin", ")", ";", "}"], "docstring": "\u524d\u7f00\u67e5\u8be2\n\n@param chars\n@param begin\n@return", "docstring_tokens": ["\u524d\u7f00\u67e5\u8be2"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L458-L461", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.contains", "original_string": "public static boolean contains(String key)\n    {\n        if (dat.exactMatchSearch(key) >= 0) return true;\n        return trie != null && trie.containsKey(key);\n    }", "language": "java", "code": "public static boolean contains(String key)\n    {\n        if (dat.exactMatchSearch(key) >= 0) return true;\n        return trie != null && trie.containsKey(key);\n    }", "code_tokens": ["public", "static", "boolean", "contains", "(", "String", "key", ")", "{", "if", "(", "dat", ".", "exactMatchSearch", "(", "key", ")", ">=", "0", ")", "return", "true", ";", "return", "trie", "!=", "null", "&&", "trie", ".", "containsKey", "(", "key", ")", ";", "}"], "docstring": "\u8bcd\u5178\u4e2d\u662f\u5426\u542b\u6709\u8bcd\u8bed\n@param key \u8bcd\u8bed\n@return \u662f\u5426\u5305\u542b", "docstring_tokens": ["\u8bcd\u5178\u4e2d\u662f\u5426\u542b\u6709\u8bcd\u8bed"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L481-L485", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.parseText", "original_string": "public static void parseText(char[] text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            trie.parseText(text, processor);\n        }\n        DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "language": "java", "code": "public static void parseText(char[] text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            trie.parseText(text, processor);\n        }\n        DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "code_tokens": ["public", "static", "void", "parseText", "(", "char", "[", "]", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "processor", ")", "{", "if", "(", "trie", "!=", "null", ")", "{", "trie", ".", "parseText", "(", "text", ",", "processor", ")", ";", "}", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", ".", "Searcher", "searcher", "=", "dat", ".", "getSearcher", "(", "text", ",", "0", ")", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "processor", ".", "hit", "(", "searcher", ".", "begin", ",", "searcher", ".", "begin", "+", "searcher", ".", "length", ",", "searcher", ".", "value", ")", ";", "}", "}"], "docstring": "\u89e3\u6790\u4e00\u6bb5\u6587\u672c\uff08\u76ee\u524d\u91c7\u7528\u4e86BinTrie+DAT\u7684\u6df7\u5408\u50a8\u5b58\u5f62\u5f0f\uff0c\u6b64\u65b9\u6cd5\u53ef\u4ee5\u7edf\u4e00\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff09\n@param text         \u6587\u672c\n@param processor    \u5904\u7406\u5668", "docstring_tokens": ["\u89e3\u6790\u4e00\u6bb5\u6587\u672c\uff08\u76ee\u524d\u91c7\u7528\u4e86BinTrie", "+", "DAT\u7684\u6df7\u5408\u50a8\u5b58\u5f62\u5f0f\uff0c\u6b64\u65b9\u6cd5\u53ef\u4ee5\u7edf\u4e00\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L560-L571", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.parseText", "original_string": "public static void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            BaseSearcher searcher = CustomDictionary.getSearcher(text);\n            int offset;\n            Map.Entry<String, CoreDictionary.Attribute> entry;\n            while ((entry = searcher.next()) != null)\n            {\n                offset = searcher.getOffset();\n                processor.hit(offset, offset + entry.getKey().length(), entry.getValue());\n            }\n        }\n        DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "language": "java", "code": "public static void parseText(String text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            BaseSearcher searcher = CustomDictionary.getSearcher(text);\n            int offset;\n            Map.Entry<String, CoreDictionary.Attribute> entry;\n            while ((entry = searcher.next()) != null)\n            {\n                offset = searcher.getOffset();\n                processor.hit(offset, offset + entry.getKey().length(), entry.getValue());\n            }\n        }\n        DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(text, 0);\n        while (searcher.next())\n        {\n            processor.hit(searcher.begin, searcher.begin + searcher.length, searcher.value);\n        }\n    }", "code_tokens": ["public", "static", "void", "parseText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "processor", ")", "{", "if", "(", "trie", "!=", "null", ")", "{", "BaseSearcher", "searcher", "=", "CustomDictionary", ".", "getSearcher", "(", "text", ")", ";", "int", "offset", ";", "Map", ".", "Entry", "<", "String", ",", "CoreDictionary", ".", "Attribute", ">", "entry", ";", "while", "(", "(", "entry", "=", "searcher", ".", "next", "(", ")", ")", "!=", "null", ")", "{", "offset", "=", "searcher", ".", "getOffset", "(", ")", ";", "processor", ".", "hit", "(", "offset", ",", "offset", "+", "entry", ".", "getKey", "(", ")", ".", "length", "(", ")", ",", "entry", ".", "getValue", "(", ")", ")", ";", "}", "}", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", ".", "Searcher", "searcher", "=", "dat", ".", "getSearcher", "(", "text", ",", "0", ")", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "processor", ".", "hit", "(", "searcher", ".", "begin", ",", "searcher", ".", "begin", "+", "searcher", ".", "length", ",", "searcher", ".", "value", ")", ";", "}", "}"], "docstring": "\u89e3\u6790\u4e00\u6bb5\u6587\u672c\uff08\u76ee\u524d\u91c7\u7528\u4e86BinTrie+DAT\u7684\u6df7\u5408\u50a8\u5b58\u5f62\u5f0f\uff0c\u6b64\u65b9\u6cd5\u53ef\u4ee5\u7edf\u4e00\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff09\n@param text         \u6587\u672c\n@param processor    \u5904\u7406\u5668", "docstring_tokens": ["\u89e3\u6790\u4e00\u6bb5\u6587\u672c\uff08\u76ee\u524d\u91c7\u7528\u4e86BinTrie", "+", "DAT\u7684\u6df7\u5408\u50a8\u5b58\u5f62\u5f0f\uff0c\u6b64\u65b9\u6cd5\u53ef\u4ee5\u7edf\u4e00\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L578-L596", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.parseLongestText", "original_string": "public static void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            final int[] lengthArray = new int[text.length()];\n            final CoreDictionary.Attribute[] attributeArray = new CoreDictionary.Attribute[text.length()];\n            char[] charArray = text.toCharArray();\n            DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(charArray, 0);\n            while (searcher.next())\n            {\n                lengthArray[searcher.begin] = searcher.length;\n                attributeArray[searcher.begin] = searcher.value;\n            }\n            trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n            {\n                @Override\n                public void hit(int begin, int end, CoreDictionary.Attribute value)\n                {\n                    int length = end - begin;\n                    if (length > lengthArray[begin])\n                    {\n                        lengthArray[begin] = length;\n                        attributeArray[begin] = value;\n                    }\n                }\n            });\n            for (int i = 0; i < charArray.length;)\n            {\n                if (lengthArray[i] == 0)\n                {\n                    ++i;\n                }\n                else\n                {\n                    processor.hit(i, i + lengthArray[i], attributeArray[i]);\n                    i += lengthArray[i];\n                }\n            }\n        }\n        else\n            dat.parseLongestText(text, processor);\n    }", "language": "java", "code": "public static void parseLongestText(String text, AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute> processor)\n    {\n        if (trie != null)\n        {\n            final int[] lengthArray = new int[text.length()];\n            final CoreDictionary.Attribute[] attributeArray = new CoreDictionary.Attribute[text.length()];\n            char[] charArray = text.toCharArray();\n            DoubleArrayTrie<CoreDictionary.Attribute>.Searcher searcher = dat.getSearcher(charArray, 0);\n            while (searcher.next())\n            {\n                lengthArray[searcher.begin] = searcher.length;\n                attributeArray[searcher.begin] = searcher.value;\n            }\n            trie.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n            {\n                @Override\n                public void hit(int begin, int end, CoreDictionary.Attribute value)\n                {\n                    int length = end - begin;\n                    if (length > lengthArray[begin])\n                    {\n                        lengthArray[begin] = length;\n                        attributeArray[begin] = value;\n                    }\n                }\n            });\n            for (int i = 0; i < charArray.length;)\n            {\n                if (lengthArray[i] == 0)\n                {\n                    ++i;\n                }\n                else\n                {\n                    processor.hit(i, i + lengthArray[i], attributeArray[i]);\n                    i += lengthArray[i];\n                }\n            }\n        }\n        else\n            dat.parseLongestText(text, processor);\n    }", "code_tokens": ["public", "static", "void", "parseLongestText", "(", "String", "text", ",", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "processor", ")", "{", "if", "(", "trie", "!=", "null", ")", "{", "final", "int", "[", "]", "lengthArray", "=", "new", "int", "[", "text", ".", "length", "(", ")", "]", ";", "final", "CoreDictionary", ".", "Attribute", "[", "]", "attributeArray", "=", "new", "CoreDictionary", ".", "Attribute", "[", "text", ".", "length", "(", ")", "]", ";", "char", "[", "]", "charArray", "=", "text", ".", "toCharArray", "(", ")", ";", "DoubleArrayTrie", "<", "CoreDictionary", ".", "Attribute", ">", ".", "Searcher", "searcher", "=", "dat", ".", "getSearcher", "(", "charArray", ",", "0", ")", ";", "while", "(", "searcher", ".", "next", "(", ")", ")", "{", "lengthArray", "[", "searcher", ".", "begin", "]", "=", "searcher", ".", "length", ";", "attributeArray", "[", "searcher", ".", "begin", "]", "=", "searcher", ".", "value", ";", "}", "trie", ".", "parseText", "(", "charArray", ",", "new", "AhoCorasickDoubleArrayTrie", ".", "IHit", "<", "CoreDictionary", ".", "Attribute", ">", "(", ")", "{", "@", "Override", "public", "void", "hit", "(", "int", "begin", ",", "int", "end", ",", "CoreDictionary", ".", "Attribute", "value", ")", "{", "int", "length", "=", "end", "-", "begin", ";", "if", "(", "length", ">", "lengthArray", "[", "begin", "]", ")", "{", "lengthArray", "[", "begin", "]", "=", "length", ";", "attributeArray", "[", "begin", "]", "=", "value", ";", "}", "}", "}", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "charArray", ".", "length", ";", ")", "{", "if", "(", "lengthArray", "[", "i", "]", "==", "0", ")", "{", "++", "i", ";", "}", "else", "{", "processor", ".", "hit", "(", "i", ",", "i", "+", "lengthArray", "[", "i", "]", ",", "attributeArray", "[", "i", "]", ")", ";", "i", "+=", "lengthArray", "[", "i", "]", ";", "}", "}", "}", "else", "dat", ".", "parseLongestText", "(", "text", ",", "processor", ")", ";", "}"], "docstring": "\u6700\u957f\u5339\u914d\n\n@param text      \u6587\u672c\n@param processor \u5904\u7406\u5668", "docstring_tokens": ["\u6700\u957f\u5339\u914d"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L604-L645", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java", "func_name": "CustomDictionary.reload", "original_string": "public static boolean reload()\n    {\n        String path[] = HanLP.Config.CustomDictionaryPath;\n        if (path == null || path.length == 0) return false;\n        IOUtil.deleteFile(path[0] + Predefine.BIN_EXT); // \u5220\u6389\u7f13\u5b58\n        return loadMainDictionary(path[0]);\n    }", "language": "java", "code": "public static boolean reload()\n    {\n        String path[] = HanLP.Config.CustomDictionaryPath;\n        if (path == null || path.length == 0) return false;\n        IOUtil.deleteFile(path[0] + Predefine.BIN_EXT); // \u5220\u6389\u7f13\u5b58\n        return loadMainDictionary(path[0]);\n    }", "code_tokens": ["public", "static", "boolean", "reload", "(", ")", "{", "String", "path", "[", "]", "=", "HanLP", ".", "Config", ".", "CustomDictionaryPath", ";", "if", "(", "path", "==", "null", "||", "path", ".", "length", "==", "0", ")", "return", "false", ";", "IOUtil", ".", "deleteFile", "(", "path", "[", "0", "]", "+", "Predefine", ".", "BIN_EXT", ")", ";", "// \u5220\u6389\u7f13\u5b58", "return", "loadMainDictionary", "(", "path", "[", "0", "]", ")", ";", "}"], "docstring": "\u70ed\u66f4\u65b0\uff08\u91cd\u65b0\u52a0\u8f7d\uff09<br>\n\u96c6\u7fa4\u73af\u5883\uff08\u6216\u5176\u4ed6IOAdapter\uff09\u9700\u8981\u81ea\u884c\u5220\u9664\u7f13\u5b58\u6587\u4ef6\uff08\u8def\u5f84 = HanLP.Config.CustomDictionaryPath[0] + Predefine.BIN_EXT\uff09\n@return \u662f\u5426\u52a0\u8f7d\u6210\u529f", "docstring_tokens": ["\u70ed\u66f4\u65b0\uff08\u91cd\u65b0\u52a0\u8f7d\uff09<br", ">", "\u96c6\u7fa4\u73af\u5883\uff08\u6216\u5176\u4ed6IOAdapter\uff09\u9700\u8981\u81ea\u884c\u5220\u9664\u7f13\u5b58\u6587\u4ef6\uff08\u8def\u5f84", "=", "HanLP", ".", "Config", ".", "CustomDictionaryPath", "[", "0", "]", "+", "Predefine", ".", "BIN_EXT\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dictionary/CustomDictionary.java#L652-L658", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/model/perceptron/instance/NERInstance.java", "func_name": "NERInstance.extractFeature", "original_string": "protected int[] extractFeature(String[] wordArray, String[] posArray, FeatureMap featureMap, int position)\n    {\n        List<Integer> featVec = new ArrayList<Integer>();\n\n        String pre2Word = position >= 2 ? wordArray[position - 2] : \"_B_\";\n        String preWord = position >= 1 ? wordArray[position - 1] : \"_B_\";\n        String curWord = wordArray[position];\n        String nextWord = position <= wordArray.length - 2 ? wordArray[position + 1] : \"_E_\";\n        String next2Word = position <= wordArray.length - 3 ? wordArray[position + 2] : \"_E_\";\n\n        String pre2Pos = position >= 2 ? posArray[position - 2] : \"_B_\";\n        String prePos = position >= 1 ? posArray[position - 1] : \"_B_\";\n        String curPos = posArray[position];\n        String nextPos = position <= posArray.length - 2 ? posArray[position + 1] : \"_E_\";\n        String next2Pos = position <= posArray.length - 3 ? posArray[position + 2] : \"_E_\";\n\n        StringBuilder sb = new StringBuilder();\n        addFeatureThenClear(sb.append(pre2Word).append('1'), featVec, featureMap);\n        addFeatureThenClear(sb.append(preWord).append('2'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curWord).append('3'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextWord).append('4'), featVec, featureMap);\n        addFeatureThenClear(sb.append(next2Word).append('5'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(pre2Word).append(preWord).append('6'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(preWord).append(curWord).append('7'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(curWord).append(nextWord).append('8'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(nextWord).append(next2Word).append('9'), featVec, featureMap);\n\n        addFeatureThenClear(sb.append(pre2Pos).append('A'), featVec, featureMap);\n        addFeatureThenClear(sb.append(prePos).append('B'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curPos).append('C'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextPos).append('D'), featVec, featureMap);\n        addFeatureThenClear(sb.append(next2Pos).append('E'), featVec, featureMap);\n        addFeatureThenClear(sb.append(pre2Pos).append(prePos).append('F'), featVec, featureMap);\n        addFeatureThenClear(sb.append(prePos).append(curPos).append('G'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curPos).append(nextPos).append('H'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextPos).append(next2Pos).append('I'), featVec, featureMap);\n\n        return toFeatureArray(featVec);\n    }", "language": "java", "code": "protected int[] extractFeature(String[] wordArray, String[] posArray, FeatureMap featureMap, int position)\n    {\n        List<Integer> featVec = new ArrayList<Integer>();\n\n        String pre2Word = position >= 2 ? wordArray[position - 2] : \"_B_\";\n        String preWord = position >= 1 ? wordArray[position - 1] : \"_B_\";\n        String curWord = wordArray[position];\n        String nextWord = position <= wordArray.length - 2 ? wordArray[position + 1] : \"_E_\";\n        String next2Word = position <= wordArray.length - 3 ? wordArray[position + 2] : \"_E_\";\n\n        String pre2Pos = position >= 2 ? posArray[position - 2] : \"_B_\";\n        String prePos = position >= 1 ? posArray[position - 1] : \"_B_\";\n        String curPos = posArray[position];\n        String nextPos = position <= posArray.length - 2 ? posArray[position + 1] : \"_E_\";\n        String next2Pos = position <= posArray.length - 3 ? posArray[position + 2] : \"_E_\";\n\n        StringBuilder sb = new StringBuilder();\n        addFeatureThenClear(sb.append(pre2Word).append('1'), featVec, featureMap);\n        addFeatureThenClear(sb.append(preWord).append('2'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curWord).append('3'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextWord).append('4'), featVec, featureMap);\n        addFeatureThenClear(sb.append(next2Word).append('5'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(pre2Word).append(preWord).append('6'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(preWord).append(curWord).append('7'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(curWord).append(nextWord).append('8'), featVec, featureMap);\n//        addFeatureThenClear(sb.append(nextWord).append(next2Word).append('9'), featVec, featureMap);\n\n        addFeatureThenClear(sb.append(pre2Pos).append('A'), featVec, featureMap);\n        addFeatureThenClear(sb.append(prePos).append('B'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curPos).append('C'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextPos).append('D'), featVec, featureMap);\n        addFeatureThenClear(sb.append(next2Pos).append('E'), featVec, featureMap);\n        addFeatureThenClear(sb.append(pre2Pos).append(prePos).append('F'), featVec, featureMap);\n        addFeatureThenClear(sb.append(prePos).append(curPos).append('G'), featVec, featureMap);\n        addFeatureThenClear(sb.append(curPos).append(nextPos).append('H'), featVec, featureMap);\n        addFeatureThenClear(sb.append(nextPos).append(next2Pos).append('I'), featVec, featureMap);\n\n        return toFeatureArray(featVec);\n    }", "code_tokens": ["protected", "int", "[", "]", "extractFeature", "(", "String", "[", "]", "wordArray", ",", "String", "[", "]", "posArray", ",", "FeatureMap", "featureMap", ",", "int", "position", ")", "{", "List", "<", "Integer", ">", "featVec", "=", "new", "ArrayList", "<", "Integer", ">", "(", ")", ";", "String", "pre2Word", "=", "position", ">=", "2", "?", "wordArray", "[", "position", "-", "2", "]", ":", "\"_B_\"", ";", "String", "preWord", "=", "position", ">=", "1", "?", "wordArray", "[", "position", "-", "1", "]", ":", "\"_B_\"", ";", "String", "curWord", "=", "wordArray", "[", "position", "]", ";", "String", "nextWord", "=", "position", "<=", "wordArray", ".", "length", "-", "2", "?", "wordArray", "[", "position", "+", "1", "]", ":", "\"_E_\"", ";", "String", "next2Word", "=", "position", "<=", "wordArray", ".", "length", "-", "3", "?", "wordArray", "[", "position", "+", "2", "]", ":", "\"_E_\"", ";", "String", "pre2Pos", "=", "position", ">=", "2", "?", "posArray", "[", "position", "-", "2", "]", ":", "\"_B_\"", ";", "String", "prePos", "=", "position", ">=", "1", "?", "posArray", "[", "position", "-", "1", "]", ":", "\"_B_\"", ";", "String", "curPos", "=", "posArray", "[", "position", "]", ";", "String", "nextPos", "=", "position", "<=", "posArray", ".", "length", "-", "2", "?", "posArray", "[", "position", "+", "1", "]", ":", "\"_E_\"", ";", "String", "next2Pos", "=", "position", "<=", "posArray", ".", "length", "-", "3", "?", "posArray", "[", "position", "+", "2", "]", ":", "\"_E_\"", ";", "StringBuilder", "sb", "=", "new", "StringBuilder", "(", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "pre2Word", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "preWord", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "curWord", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "nextWord", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "next2Word", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "//        addFeatureThenClear(sb.append(pre2Word).append(preWord).append('6'), featVec, featureMap);", "//        addFeatureThenClear(sb.append(preWord).append(curWord).append('7'), featVec, featureMap);", "//        addFeatureThenClear(sb.append(curWord).append(nextWord).append('8'), featVec, featureMap);", "//        addFeatureThenClear(sb.append(nextWord).append(next2Word).append('9'), featVec, featureMap);", "addFeatureThenClear", "(", "sb", ".", "append", "(", "pre2Pos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "prePos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "curPos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "nextPos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "next2Pos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "pre2Pos", ")", ".", "append", "(", "prePos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "prePos", ")", ".", "append", "(", "curPos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "curPos", ")", ".", "append", "(", "nextPos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "addFeatureThenClear", "(", "sb", ".", "append", "(", "nextPos", ")", ".", "append", "(", "next2Pos", ")", ".", "append", "(", "'", "'", ")", ",", "featVec", ",", "featureMap", ")", ";", "return", "toFeatureArray", "(", "featVec", ")", ";", "}"], "docstring": "\u63d0\u53d6\u7279\u5f81\uff0coverride\u6b64\u65b9\u6cd5\u6765\u62d3\u5c55\u81ea\u5df1\u7684\u7279\u5f81\u6a21\u677f\n\n@param wordArray  \u8bcd\u8bed\n@param posArray   \u8bcd\u6027\n@param featureMap \u50a8\u5b58\u7279\u5f81\u7684\u7ed3\u6784\n@param position   \u5f53\u524d\u63d0\u53d6\u7684\u8bcd\u8bed\u6240\u5728\u7684\u4f4d\u7f6e\n@return \u7279\u5f81\u5411\u91cf", "docstring_tokens": ["\u63d0\u53d6\u7279\u5f81\uff0coverride\u6b64\u65b9\u6cd5\u6765\u62d3\u5c55\u81ea\u5df1\u7684\u7279\u5f81\u6a21\u677f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/model/perceptron/instance/NERInstance.java#L60-L98", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/StringDictionaryMaker.java", "func_name": "StringDictionaryMaker.load", "original_string": "public static StringDictionary load(String path, String separator)\n    {\n        StringDictionary dictionary = new StringDictionary(separator);\n        if (dictionary.load(path)) return dictionary;\n        return null;\n    }", "language": "java", "code": "public static StringDictionary load(String path, String separator)\n    {\n        StringDictionary dictionary = new StringDictionary(separator);\n        if (dictionary.load(path)) return dictionary;\n        return null;\n    }", "code_tokens": ["public", "static", "StringDictionary", "load", "(", "String", "path", ",", "String", "separator", ")", "{", "StringDictionary", "dictionary", "=", "new", "StringDictionary", "(", "separator", ")", ";", "if", "(", "dictionary", ".", "load", "(", "path", ")", ")", "return", "dictionary", ";", "return", "null", ";", "}"], "docstring": "\u52a0\u8f7d\u8bcd\u5178\n@param path\n@param separator\n@return", "docstring_tokens": ["\u52a0\u8f7d\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/StringDictionaryMaker.java#L29-L34", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/corpus/dictionary/StringDictionaryMaker.java", "func_name": "StringDictionaryMaker.combine", "original_string": "public static StringDictionary combine(StringDictionary... args)\n    {\n        StringDictionary[] dictionaries = args.clone();\n        StringDictionary mainDictionary = dictionaries[0];\n        for (int i = 1; i < dictionaries.length; ++i)\n        {\n            mainDictionary.combine(dictionaries[i]);\n        }\n\n        return mainDictionary;\n    }", "language": "java", "code": "public static StringDictionary combine(StringDictionary... args)\n    {\n        StringDictionary[] dictionaries = args.clone();\n        StringDictionary mainDictionary = dictionaries[0];\n        for (int i = 1; i < dictionaries.length; ++i)\n        {\n            mainDictionary.combine(dictionaries[i]);\n        }\n\n        return mainDictionary;\n    }", "code_tokens": ["public", "static", "StringDictionary", "combine", "(", "StringDictionary", "...", "args", ")", "{", "StringDictionary", "[", "]", "dictionaries", "=", "args", ".", "clone", "(", ")", ";", "StringDictionary", "mainDictionary", "=", "dictionaries", "[", "0", "]", ";", "for", "(", "int", "i", "=", "1", ";", "i", "<", "dictionaries", ".", "length", ";", "++", "i", ")", "{", "mainDictionary", ".", "combine", "(", "dictionaries", "[", "i", "]", ")", ";", "}", "return", "mainDictionary", ";", "}"], "docstring": "\u5408\u5e76\u8bcd\u5178\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u4e3b\u8bcd\u5178\n@param args\n@return", "docstring_tokens": ["\u5408\u5e76\u8bcd\u5178\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u4e3b\u8bcd\u5178"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/corpus/dictionary/StringDictionaryMaker.java#L51-L61", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/classification/classifiers/NaiveBayesClassifier.java", "func_name": "NaiveBayesClassifier.selectFeatures", "original_string": "protected BaseFeatureData selectFeatures(IDataSet dataSet)\n    {\n        ChiSquareFeatureExtractor chiSquareFeatureExtractor = new ChiSquareFeatureExtractor();\n\n        logger.start(\"\u4f7f\u7528\u5361\u65b9\u68c0\u6d4b\u9009\u62e9\u7279\u5f81\u4e2d...\");\n        //FeatureStats\u5bf9\u8c61\u5305\u542b\u6587\u6863\u4e2d\u6240\u6709\u7279\u5f81\u53ca\u5176\u7edf\u8ba1\u4fe1\u606f\n        BaseFeatureData featureData = chiSquareFeatureExtractor.extractBasicFeatureData(dataSet); //\u6267\u884c\u7edf\u8ba1\n\n        //\u6211\u4eec\u4f20\u5165\u8fd9\u4e9b\u7edf\u8ba1\u4fe1\u606f\u5230\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\u4e2d\uff0c\u5f97\u5230\u7279\u5f81\u4e0e\u5176\u5206\u503c\n        Map<Integer, Double> selectedFeatures = chiSquareFeatureExtractor.chi_square(featureData);\n\n        //\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u5220\u6389\u65e0\u7528\u7684\u7279\u5f81\u5e76\u91cd\u5efa\u7279\u5f81\u6620\u5c04\u8868\n        int[][] featureCategoryJointCount = new int[selectedFeatures.size()][];\n        featureData.wordIdTrie = new BinTrie<Integer>();\n        String[] wordIdArray = dataSet.getLexicon().getWordIdArray();\n        int p = -1;\n        for (Integer feature : selectedFeatures.keySet())\n        {\n            featureCategoryJointCount[++p] = featureData.featureCategoryJointCount[feature];\n            featureData.wordIdTrie.put(wordIdArray[feature], p);\n        }\n        logger.finish(\",\u9009\u4e2d\u7279\u5f81\u6570:%d / %d = %.2f%%\\n\", featureCategoryJointCount.length,\n                      featureData.featureCategoryJointCount.length,\n                      featureCategoryJointCount.length / (double)featureData.featureCategoryJointCount.length * 100.);\n        featureData.featureCategoryJointCount = featureCategoryJointCount;\n\n        return featureData;\n    }", "language": "java", "code": "protected BaseFeatureData selectFeatures(IDataSet dataSet)\n    {\n        ChiSquareFeatureExtractor chiSquareFeatureExtractor = new ChiSquareFeatureExtractor();\n\n        logger.start(\"\u4f7f\u7528\u5361\u65b9\u68c0\u6d4b\u9009\u62e9\u7279\u5f81\u4e2d...\");\n        //FeatureStats\u5bf9\u8c61\u5305\u542b\u6587\u6863\u4e2d\u6240\u6709\u7279\u5f81\u53ca\u5176\u7edf\u8ba1\u4fe1\u606f\n        BaseFeatureData featureData = chiSquareFeatureExtractor.extractBasicFeatureData(dataSet); //\u6267\u884c\u7edf\u8ba1\n\n        //\u6211\u4eec\u4f20\u5165\u8fd9\u4e9b\u7edf\u8ba1\u4fe1\u606f\u5230\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\u4e2d\uff0c\u5f97\u5230\u7279\u5f81\u4e0e\u5176\u5206\u503c\n        Map<Integer, Double> selectedFeatures = chiSquareFeatureExtractor.chi_square(featureData);\n\n        //\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u5220\u6389\u65e0\u7528\u7684\u7279\u5f81\u5e76\u91cd\u5efa\u7279\u5f81\u6620\u5c04\u8868\n        int[][] featureCategoryJointCount = new int[selectedFeatures.size()][];\n        featureData.wordIdTrie = new BinTrie<Integer>();\n        String[] wordIdArray = dataSet.getLexicon().getWordIdArray();\n        int p = -1;\n        for (Integer feature : selectedFeatures.keySet())\n        {\n            featureCategoryJointCount[++p] = featureData.featureCategoryJointCount[feature];\n            featureData.wordIdTrie.put(wordIdArray[feature], p);\n        }\n        logger.finish(\",\u9009\u4e2d\u7279\u5f81\u6570:%d / %d = %.2f%%\\n\", featureCategoryJointCount.length,\n                      featureData.featureCategoryJointCount.length,\n                      featureCategoryJointCount.length / (double)featureData.featureCategoryJointCount.length * 100.);\n        featureData.featureCategoryJointCount = featureCategoryJointCount;\n\n        return featureData;\n    }", "code_tokens": ["protected", "BaseFeatureData", "selectFeatures", "(", "IDataSet", "dataSet", ")", "{", "ChiSquareFeatureExtractor", "chiSquareFeatureExtractor", "=", "new", "ChiSquareFeatureExtractor", "(", ")", ";", "logger", ".", "start", "(", "\"\u4f7f\u7528\u5361\u65b9\u68c0\u6d4b\u9009\u62e9\u7279\u5f81\u4e2d...\");", "", "", "//FeatureStats\u5bf9\u8c61\u5305\u542b\u6587\u6863\u4e2d\u6240\u6709\u7279\u5f81\u53ca\u5176\u7edf\u8ba1\u4fe1\u606f", "BaseFeatureData", "featureData", "=", "chiSquareFeatureExtractor", ".", "extractBasicFeatureData", "(", "dataSet", ")", ";", "//\u6267\u884c\u7edf\u8ba1", "//\u6211\u4eec\u4f20\u5165\u8fd9\u4e9b\u7edf\u8ba1\u4fe1\u606f\u5230\u7279\u5f81\u9009\u62e9\u7b97\u6cd5\u4e2d\uff0c\u5f97\u5230\u7279\u5f81\u4e0e\u5176\u5206\u503c", "Map", "<", "Integer", ",", "Double", ">", "selectedFeatures", "=", "chiSquareFeatureExtractor", ".", "chi_square", "(", "featureData", ")", ";", "//\u4ece\u7edf\u8ba1\u6570\u636e\u4e2d\u5220\u6389\u65e0\u7528\u7684\u7279\u5f81\u5e76\u91cd\u5efa\u7279\u5f81\u6620\u5c04\u8868", "int", "[", "]", "[", "]", "featureCategoryJointCount", "=", "new", "int", "[", "selectedFeatures", ".", "size", "(", ")", "]", "[", "", "]", ";", "featureData", ".", "wordIdTrie", "=", "new", "BinTrie", "<", "Integer", ">", "(", ")", ";", "String", "[", "]", "wordIdArray", "=", "dataSet", ".", "getLexicon", "(", ")", ".", "getWordIdArray", "(", ")", ";", "int", "p", "=", "-", "1", ";", "for", "(", "Integer", "feature", ":", "selectedFeatures", ".", "keySet", "(", ")", ")", "{", "featureCategoryJointCount", "[", "++", "p", "]", "=", "featureData", ".", "featureCategoryJointCount", "[", "feature", "]", ";", "featureData", ".", "wordIdTrie", ".", "put", "(", "wordIdArray", "[", "feature", "]", ",", "p", ")", ";", "}", "logger", ".", "finish", "(", "\",\u9009\u4e2d\u7279\u5f81\u6570:%d / %d = %.2f%%\\n\", featureC", "a", "egoryJointCount.length,", "", "", "", "featureData", ".", "featureCategoryJointCount", ".", "length", ",", "featureCategoryJointCount", ".", "length", "/", "(", "double", ")", "featureData", ".", "featureCategoryJointCount", ".", "length", "*", "100.", ")", ";", "featureData", ".", "featureCategoryJointCount", "=", "featureCategoryJointCount", ";", "return", "featureData", ";", "}"], "docstring": "\u7edf\u8ba1\u7279\u5f81\u5e76\u4e14\u6267\u884c\u7279\u5f81\u9009\u62e9\uff0c\u8fd4\u56de\u4e00\u4e2aFeatureStats\u5bf9\u8c61\uff0c\u7528\u4e8e\u8ba1\u7b97\u6a21\u578b\u4e2d\u7684\u6982\u7387\n\n@param dataSet\n@return", "docstring_tokens": ["\u7edf\u8ba1\u7279\u5f81\u5e76\u4e14\u6267\u884c\u7279\u5f81\u9009\u62e9\uff0c\u8fd4\u56de\u4e00\u4e2aFeatureStats\u5bf9\u8c61\uff0c\u7528\u4e8e\u8ba1\u7b97\u6a21\u578b\u4e2d\u7684\u6982\u7387"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/classification/classifiers/NaiveBayesClassifier.java#L177-L204", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/collection/dartsclone/details/Keyset.java", "func_name": "Keyset.getKeyByte", "original_string": "byte getKeyByte(int keyId, int byteId)\n    {\n        if (byteId >= _keys[keyId].length)\n        {\n            return 0;\n        }\n        return _keys[keyId][byteId];\n    }", "language": "java", "code": "byte getKeyByte(int keyId, int byteId)\n    {\n        if (byteId >= _keys[keyId].length)\n        {\n            return 0;\n        }\n        return _keys[keyId][byteId];\n    }", "code_tokens": ["byte", "getKeyByte", "(", "int", "keyId", ",", "int", "byteId", ")", "{", "if", "(", "byteId", ">=", "_keys", "[", "keyId", "]", ".", "length", ")", "{", "return", "0", ";", "}", "return", "_keys", "[", "keyId", "]", "[", "byteId", "]", ";", "}"], "docstring": "\u83b7\u53d6\u67d0\u4e2akey\u7684\u67d0\u4e00\u4e2a\u5b57\u8282\n@param keyId key\u7684id\n@param byteId \u5b57\u8282\u7684\u4e0b\u6807\uff08\u7b2c\u51e0\u4e2a\u5b57\u8282\uff09\n@return \u5b57\u8282\uff0c\u8fd4\u56de0\u8868\u793a\u8d8a\u754c\u4e86", "docstring_tokens": ["\u83b7\u53d6\u67d0\u4e2akey\u7684\u67d0\u4e00\u4e2a\u5b57\u8282"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/collection/dartsclone/details/Keyset.java#L49-L56", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.constructWithCopy", "original_string": "public static Matrix constructWithCopy(double[][] A)\n    {\n        int m = A.length;\n        int n = A[0].length;\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            if (A[i].length != n)\n            {\n                throw new IllegalArgumentException\n                        (\"All rows must have the same length.\");\n            }\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public static Matrix constructWithCopy(double[][] A)\n    {\n        int m = A.length;\n        int n = A[0].length;\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            if (A[i].length != n)\n            {\n                throw new IllegalArgumentException\n                        (\"All rows must have the same length.\");\n            }\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "static", "Matrix", "constructWithCopy", "(", "double", "[", "]", "[", "]", "A", ")", "{", "int", "m", "=", "A", ".", "length", ";", "int", "n", "=", "A", "[", "0", "]", ".", "length", ";", "Matrix", "X", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "C", "=", "X", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "if", "(", "A", "[", "i", "]", ".", "length", "!=", "n", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"All rows must have the same length.\"", ")", ";", "}", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "C", "[", "i", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "X", ";", "}"], "docstring": "Construct a matrix from a copy of a 2-D array.\n\n@param A Two-dimensional array of doubles.\n@throws IllegalArgumentException All rows must have the same length", "docstring_tokens": ["Construct", "a", "matrix", "from", "a", "copy", "of", "a", "2", "-", "D", "array", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L199-L218", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.copy", "original_string": "public Matrix copy()\n    {\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix copy()\n    {\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "copy", "(", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "C", "=", "X", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "C", "[", "i", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "X", ";", "}"], "docstring": "Make a deep copy of a matrix", "docstring_tokens": ["Make", "a", "deep", "copy", "of", "a", "matrix"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L224-L236", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getArrayCopy", "original_string": "public double[][] getArrayCopy()\n    {\n        double[][] C = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return C;\n    }", "language": "java", "code": "public double[][] getArrayCopy()\n    {\n        double[][] C = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j];\n            }\n        }\n        return C;\n    }", "code_tokens": ["public", "double", "[", "]", "[", "]", "getArrayCopy", "(", ")", "{", "double", "[", "]", "[", "]", "C", "=", "new", "double", "[", "m", "]", "[", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "C", "[", "i", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "C", ";", "}"], "docstring": "Copy the internal two-dimensional array.\n\n@return Two-dimensional array copy of matrix elements.", "docstring_tokens": ["Copy", "the", "internal", "two", "-", "dimensional", "array", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L264-L275", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getColumnPackedCopy", "original_string": "public double[] getColumnPackedCopy()\n    {\n        double[] vals = new double[m * n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                vals[i + j * m] = A[i][j];\n            }\n        }\n        return vals;\n    }", "language": "java", "code": "public double[] getColumnPackedCopy()\n    {\n        double[] vals = new double[m * n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                vals[i + j * m] = A[i][j];\n            }\n        }\n        return vals;\n    }", "code_tokens": ["public", "double", "[", "]", "getColumnPackedCopy", "(", ")", "{", "double", "[", "]", "vals", "=", "new", "double", "[", "m", "*", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "vals", "[", "i", "+", "j", "*", "m", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "vals", ";", "}"], "docstring": "Make a one-dimensional column packed copy of the internal array.\n\n@return Matrix elements packed in a one-dimensional array by columns.", "docstring_tokens": ["Make", "a", "one", "-", "dimensional", "column", "packed", "copy", "of", "the", "internal", "array", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L283-L294", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getRowPackedCopy", "original_string": "public double[] getRowPackedCopy()\n    {\n        double[] vals = new double[m * n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                vals[i * n + j] = A[i][j];\n            }\n        }\n        return vals;\n    }", "language": "java", "code": "public double[] getRowPackedCopy()\n    {\n        double[] vals = new double[m * n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                vals[i * n + j] = A[i][j];\n            }\n        }\n        return vals;\n    }", "code_tokens": ["public", "double", "[", "]", "getRowPackedCopy", "(", ")", "{", "double", "[", "]", "vals", "=", "new", "double", "[", "m", "*", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "vals", "[", "i", "*", "n", "+", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "vals", ";", "}"], "docstring": "Make a one-dimensional row packed copy of the internal array.\n\n@return Matrix elements packed in a one-dimensional array by rows.", "docstring_tokens": ["Make", "a", "one", "-", "dimensional", "row", "packed", "copy", "of", "the", "internal", "array", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L302-L313", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getMatrix", "original_string": "public Matrix getMatrix(int i0, int i1, int j0, int j1)\n    {\n        Matrix X = new Matrix(i1 - i0 + 1, j1 - j0 + 1);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    B[i - i0][j - j0] = A[i][j];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix getMatrix(int i0, int i1, int j0, int j1)\n    {\n        Matrix X = new Matrix(i1 - i0 + 1, j1 - j0 + 1);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    B[i - i0][j - j0] = A[i][j];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "getMatrix", "(", "int", "i0", ",", "int", "i1", ",", "int", "j0", ",", "int", "j1", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "i1", "-", "i0", "+", "1", ",", "j1", "-", "j0", "+", "1", ")", ";", "double", "[", "]", "[", "]", "B", "=", "X", ".", "getArray", "(", ")", ";", "try", "{", "for", "(", "int", "i", "=", "i0", ";", "i", "<=", "i1", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "j0", ";", "j", "<=", "j1", ";", "j", "++", ")", "{", "B", "[", "i", "-", "i0", "]", "[", "j", "-", "j0", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "return", "X", ";", "}"], "docstring": "Get a submatrix.\n\n@param i0 Initial row index\n@param i1 Final row index\n@param j0 Initial column index\n@param j1 Final column index\n@return A(i0:i1, j0:j1)\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Get", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L362-L381", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getMatrix", "original_string": "public Matrix getMatrix(int[] r, int[] c)\n    {\n        Matrix X = new Matrix(r.length, c.length);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    B[i][j] = A[r[i]][c[j]];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix getMatrix(int[] r, int[] c)\n    {\n        Matrix X = new Matrix(r.length, c.length);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    B[i][j] = A[r[i]][c[j]];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "getMatrix", "(", "int", "[", "]", "r", ",", "int", "[", "]", "c", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "r", ".", "length", ",", "c", ".", "length", ")", ";", "double", "[", "]", "[", "]", "B", "=", "X", ".", "getArray", "(", ")", ";", "try", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "r", ".", "length", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "c", ".", "length", ";", "j", "++", ")", "{", "B", "[", "i", "]", "[", "j", "]", "=", "A", "[", "r", "[", "i", "]", "]", "[", "c", "[", "j", "]", "]", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "return", "X", ";", "}"], "docstring": "Get a submatrix.\n\n@param r Array of row indices.\n@param c Array of column indices.\n@return A(r(:), c(:))\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Get", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L392-L411", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getMatrix", "original_string": "public Matrix getMatrix(int i0, int i1, int[] c)\n    {\n        Matrix X = new Matrix(i1 - i0 + 1, c.length);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    B[i - i0][j] = A[i][c[j]];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix getMatrix(int i0, int i1, int[] c)\n    {\n        Matrix X = new Matrix(i1 - i0 + 1, c.length);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    B[i - i0][j] = A[i][c[j]];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "getMatrix", "(", "int", "i0", ",", "int", "i1", ",", "int", "[", "]", "c", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "i1", "-", "i0", "+", "1", ",", "c", ".", "length", ")", ";", "double", "[", "]", "[", "]", "B", "=", "X", ".", "getArray", "(", ")", ";", "try", "{", "for", "(", "int", "i", "=", "i0", ";", "i", "<=", "i1", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "c", ".", "length", ";", "j", "++", ")", "{", "B", "[", "i", "-", "i0", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "c", "[", "j", "]", "]", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "return", "X", ";", "}"], "docstring": "Get a submatrix.\n\n@param i0 Initial row index\n@param i1 Final row index\n@param c  Array of column indices.\n@return A(i0:i1, c(:))\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Get", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L423-L442", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.getMatrix", "original_string": "public Matrix getMatrix(int[] r, int j0, int j1)\n    {\n        Matrix X = new Matrix(r.length, j1 - j0 + 1);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    B[i][j - j0] = A[r[i]][j];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix getMatrix(int[] r, int j0, int j1)\n    {\n        Matrix X = new Matrix(r.length, j1 - j0 + 1);\n        double[][] B = X.getArray();\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    B[i][j - j0] = A[r[i]][j];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "getMatrix", "(", "int", "[", "]", "r", ",", "int", "j0", ",", "int", "j1", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "r", ".", "length", ",", "j1", "-", "j0", "+", "1", ")", ";", "double", "[", "]", "[", "]", "B", "=", "X", ".", "getArray", "(", ")", ";", "try", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "r", ".", "length", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "j0", ";", "j", "<=", "j1", ";", "j", "++", ")", "{", "B", "[", "i", "]", "[", "j", "-", "j0", "]", "=", "A", "[", "r", "[", "i", "]", "]", "[", "j", "]", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "return", "X", ";", "}"], "docstring": "Get a submatrix.\n\n@param r  Array of row indices.\n@param j0 Initial column index\n@param j1 Final column index\n@return A(r(:), j0:j1)\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Get", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L454-L473", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.setMatrix", "original_string": "public void setMatrix(int i0, int i1, int j0, int j1, Matrix X)\n    {\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    A[i][j] = X.get(i - i0, j - j0);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "language": "java", "code": "public void setMatrix(int i0, int i1, int j0, int j1, Matrix X)\n    {\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    A[i][j] = X.get(i - i0, j - j0);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "code_tokens": ["public", "void", "setMatrix", "(", "int", "i0", ",", "int", "i1", ",", "int", "j0", ",", "int", "j1", ",", "Matrix", "X", ")", "{", "try", "{", "for", "(", "int", "i", "=", "i0", ";", "i", "<=", "i1", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "j0", ";", "j", "<=", "j1", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "j", "]", "=", "X", ".", "get", "(", "i", "-", "i0", ",", "j", "-", "j0", ")", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "}"], "docstring": "Set a submatrix.\n\n@param i0 Initial row index\n@param i1 Final row index\n@param j0 Initial column index\n@param j1 Final column index\n@param X  A(i0:i1,j0:j1)\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Set", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L500-L516", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.setMatrix", "original_string": "public void setMatrix(int[] r, int[] c, Matrix X)\n    {\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    A[r[i]][c[j]] = X.get(i, j);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "language": "java", "code": "public void setMatrix(int[] r, int[] c, Matrix X)\n    {\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    A[r[i]][c[j]] = X.get(i, j);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "code_tokens": ["public", "void", "setMatrix", "(", "int", "[", "]", "r", ",", "int", "[", "]", "c", ",", "Matrix", "X", ")", "{", "try", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "r", ".", "length", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "c", ".", "length", ";", "j", "++", ")", "{", "A", "[", "r", "[", "i", "]", "]", "[", "c", "[", "j", "]", "]", "=", "X", ".", "get", "(", "i", ",", "j", ")", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "}"], "docstring": "Set a submatrix.\n\n@param r Array of row indices.\n@param c Array of column indices.\n@param X A(r(:),c(:))\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Set", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L527-L543", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.setMatrix", "original_string": "public void setMatrix(int[] r, int j0, int j1, Matrix X)\n    {\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    A[r[i]][j] = X.get(i, j - j0);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "language": "java", "code": "public void setMatrix(int[] r, int j0, int j1, Matrix X)\n    {\n        try\n        {\n            for (int i = 0; i < r.length; i++)\n            {\n                for (int j = j0; j <= j1; j++)\n                {\n                    A[r[i]][j] = X.get(i, j - j0);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "code_tokens": ["public", "void", "setMatrix", "(", "int", "[", "]", "r", ",", "int", "j0", ",", "int", "j1", ",", "Matrix", "X", ")", "{", "try", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "r", ".", "length", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "j0", ";", "j", "<=", "j1", ";", "j", "++", ")", "{", "A", "[", "r", "[", "i", "]", "]", "[", "j", "]", "=", "X", ".", "get", "(", "i", ",", "j", "-", "j0", ")", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "}"], "docstring": "Set a submatrix.\n\n@param r  Array of row indices.\n@param j0 Initial column index\n@param j1 Final column index\n@param X  A(r(:),j0:j1)\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Set", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L555-L571", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.setMatrix", "original_string": "public void setMatrix(int i0, int i1, int[] c, Matrix X)\n    {\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    A[i][c[j]] = X.get(i - i0, j);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "language": "java", "code": "public void setMatrix(int i0, int i1, int[] c, Matrix X)\n    {\n        try\n        {\n            for (int i = i0; i <= i1; i++)\n            {\n                for (int j = 0; j < c.length; j++)\n                {\n                    A[i][c[j]] = X.get(i - i0, j);\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            throw new ArrayIndexOutOfBoundsException(\"Submatrix indices\");\n        }\n    }", "code_tokens": ["public", "void", "setMatrix", "(", "int", "i0", ",", "int", "i1", ",", "int", "[", "]", "c", ",", "Matrix", "X", ")", "{", "try", "{", "for", "(", "int", "i", "=", "i0", ";", "i", "<=", "i1", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "c", ".", "length", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "c", "[", "j", "]", "]", "=", "X", ".", "get", "(", "i", "-", "i0", ",", "j", ")", ";", "}", "}", "}", "catch", "(", "ArrayIndexOutOfBoundsException", "e", ")", "{", "throw", "new", "ArrayIndexOutOfBoundsException", "(", "\"Submatrix indices\"", ")", ";", "}", "}"], "docstring": "Set a submatrix.\n\n@param i0 Initial row index\n@param i1 Final row index\n@param c  Array of column indices.\n@param X  A(i0:i1,c(:))\n@throws ArrayIndexOutOfBoundsException Submatrix indices", "docstring_tokens": ["Set", "a", "submatrix", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L583-L599", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.norm1", "original_string": "public double norm1()\n    {\n        double f = 0;\n        for (int j = 0; j < n; j++)\n        {\n            double s = 0;\n            for (int i = 0; i < m; i++)\n            {\n                s += Math.abs(A[i][j]);\n            }\n            f = Math.max(f, s);\n        }\n        return f;\n    }", "language": "java", "code": "public double norm1()\n    {\n        double f = 0;\n        for (int j = 0; j < n; j++)\n        {\n            double s = 0;\n            for (int i = 0; i < m; i++)\n            {\n                s += Math.abs(A[i][j]);\n            }\n            f = Math.max(f, s);\n        }\n        return f;\n    }", "code_tokens": ["public", "double", "norm1", "(", ")", "{", "double", "f", "=", "0", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "double", "s", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "s", "+=", "Math", ".", "abs", "(", "A", "[", "i", "]", "[", "j", "]", ")", ";", "}", "f", "=", "Math", ".", "max", "(", "f", ",", "s", ")", ";", "}", "return", "f", ";", "}"], "docstring": "One norm\n\n@return maximum column sum.", "docstring_tokens": ["One", "norm"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L627-L640", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.plus", "original_string": "public Matrix plus(Matrix B)\n    {\n        checkMatrixDimensions(B);\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j] + B.A[i][j];\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix plus(Matrix B)\n    {\n        checkMatrixDimensions(B);\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = A[i][j] + B.A[i][j];\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "plus", "(", "Matrix", "B", ")", "{", "checkMatrixDimensions", "(", "B", ")", ";", "Matrix", "X", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "C", "=", "X", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "C", "[", "i", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", "+", "B", ".", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "X", ";", "}"], "docstring": "C = A + B\n\n@param B another matrix\n@return A + B", "docstring_tokens": ["C", "=", "A", "+", "B"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L690-L703", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.plusEquals", "original_string": "public Matrix plusEquals(Matrix B)\n    {\n        checkMatrixDimensions(B);\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = A[i][j] + B.A[i][j];\n            }\n        }\n        return this;\n    }", "language": "java", "code": "public Matrix plusEquals(Matrix B)\n    {\n        checkMatrixDimensions(B);\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = A[i][j] + B.A[i][j];\n            }\n        }\n        return this;\n    }", "code_tokens": ["public", "Matrix", "plusEquals", "(", "Matrix", "B", ")", "{", "checkMatrixDimensions", "(", "B", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", "+", "B", ".", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "this", ";", "}"], "docstring": "A = A + B\n\n@param B another matrix\n@return A + B", "docstring_tokens": ["A", "=", "A", "+", "B"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L712-L723", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.times", "original_string": "public Matrix times(double s)\n    {\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = s * A[i][j];\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix times(double s)\n    {\n        Matrix X = new Matrix(m, n);\n        double[][] C = X.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                C[i][j] = s * A[i][j];\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "times", "(", "double", "s", ")", "{", "Matrix", "X", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "C", "=", "X", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "C", "[", "i", "]", "[", "j", "]", "=", "s", "*", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "X", ";", "}"], "docstring": "Multiply a matrix by a scalar, C = s*A\n\n@param s scalar\n@return s*A", "docstring_tokens": ["Multiply", "a", "matrix", "by", "a", "scalar", "C", "=", "s", "*", "A"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L900-L912", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.timesEquals", "original_string": "public Matrix timesEquals(double s)\n    {\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = s * A[i][j];\n            }\n        }\n        return this;\n    }", "language": "java", "code": "public Matrix timesEquals(double s)\n    {\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = s * A[i][j];\n            }\n        }\n        return this;\n    }", "code_tokens": ["public", "Matrix", "timesEquals", "(", "double", "s", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "j", "]", "=", "s", "*", "A", "[", "i", "]", "[", "j", "]", ";", "}", "}", "return", "this", ";", "}"], "docstring": "Multiply a matrix by a scalar in place, A = s*A\n\n@param s scalar\n@return replace A by s*A", "docstring_tokens": ["Multiply", "a", "matrix", "by", "a", "scalar", "in", "place", "A", "=", "s", "*", "A"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L921-L931", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.times", "original_string": "public Matrix times(Matrix B)\n    {\n        if (B.m != n)\n        {\n            throw new IllegalArgumentException(\"Matrix inner dimensions must agree.\");\n        }\n        Matrix X = new Matrix(m, B.n);\n        double[][] C = X.getArray();\n        double[] Bcolj = new double[n];\n        for (int j = 0; j < B.n; j++)\n        {\n            for (int k = 0; k < n; k++)\n            {\n                Bcolj[k] = B.A[k][j];\n            }\n            for (int i = 0; i < m; i++)\n            {\n                double[] Arowi = A[i];\n                double s = 0;\n                for (int k = 0; k < n; k++)\n                {\n                    s += Arowi[k] * Bcolj[k];\n                }\n                C[i][j] = s;\n            }\n        }\n        return X;\n    }", "language": "java", "code": "public Matrix times(Matrix B)\n    {\n        if (B.m != n)\n        {\n            throw new IllegalArgumentException(\"Matrix inner dimensions must agree.\");\n        }\n        Matrix X = new Matrix(m, B.n);\n        double[][] C = X.getArray();\n        double[] Bcolj = new double[n];\n        for (int j = 0; j < B.n; j++)\n        {\n            for (int k = 0; k < n; k++)\n            {\n                Bcolj[k] = B.A[k][j];\n            }\n            for (int i = 0; i < m; i++)\n            {\n                double[] Arowi = A[i];\n                double s = 0;\n                for (int k = 0; k < n; k++)\n                {\n                    s += Arowi[k] * Bcolj[k];\n                }\n                C[i][j] = s;\n            }\n        }\n        return X;\n    }", "code_tokens": ["public", "Matrix", "times", "(", "Matrix", "B", ")", "{", "if", "(", "B", ".", "m", "!=", "n", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Matrix inner dimensions must agree.\"", ")", ";", "}", "Matrix", "X", "=", "new", "Matrix", "(", "m", ",", "B", ".", "n", ")", ";", "double", "[", "]", "[", "]", "C", "=", "X", ".", "getArray", "(", ")", ";", "double", "[", "]", "Bcolj", "=", "new", "double", "[", "n", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "B", ".", "n", ";", "j", "++", ")", "{", "for", "(", "int", "k", "=", "0", ";", "k", "<", "n", ";", "k", "++", ")", "{", "Bcolj", "[", "k", "]", "=", "B", ".", "A", "[", "k", "]", "[", "j", "]", ";", "}", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "double", "[", "]", "Arowi", "=", "A", "[", "i", "]", ";", "double", "s", "=", "0", ";", "for", "(", "int", "k", "=", "0", ";", "k", "<", "n", ";", "k", "++", ")", "{", "s", "+=", "Arowi", "[", "k", "]", "*", "Bcolj", "[", "k", "]", ";", "}", "C", "[", "i", "]", "[", "j", "]", "=", "s", ";", "}", "}", "return", "X", ";", "}"], "docstring": "Linear algebraic matrix multiplication, A * B\n\n@param B another matrix\n@return Matrix product, A * B\n@throws IllegalArgumentException Matrix inner dimensions must agree.", "docstring_tokens": ["Linear", "algebraic", "matrix", "multiplication", "A", "*", "B"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L941-L968", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.trace", "original_string": "public double trace()\n    {\n        double t = 0;\n        for (int i = 0; i < Math.min(m, n); i++)\n        {\n            t += A[i][i];\n        }\n        return t;\n    }", "language": "java", "code": "public double trace()\n    {\n        double t = 0;\n        for (int i = 0; i < Math.min(m, n); i++)\n        {\n            t += A[i][i];\n        }\n        return t;\n    }", "code_tokens": ["public", "double", "trace", "(", ")", "{", "double", "t", "=", "0", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "Math", ".", "min", "(", "m", ",", "n", ")", ";", "i", "++", ")", "{", "t", "+=", "A", "[", "i", "]", "[", "i", "]", ";", "}", "return", "t", ";", "}"], "docstring": "Matrix trace.\n\n@return sum of the diagonal elements.", "docstring_tokens": ["Matrix", "trace", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L977-L985", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.random", "original_string": "public static Matrix random(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = Math.random();\n            }\n        }\n        return A;\n    }", "language": "java", "code": "public static Matrix random(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = Math.random();\n            }\n        }\n        return A;\n    }", "code_tokens": ["public", "static", "Matrix", "random", "(", "int", "m", ",", "int", "n", ")", "{", "Matrix", "A", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "X", "=", "A", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "X", "[", "i", "]", "[", "j", "]", "=", "Math", ".", "random", "(", ")", ";", "}", "}", "return", "A", ";", "}"], "docstring": "Generate matrix with random elements\n\n@param m Number of rows.\n@param n Number of colums.\n@return An m-by-n matrix with uniformly distributed random elements.", "docstring_tokens": ["Generate", "matrix", "with", "random", "elements"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L995-L1007", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.identity", "original_string": "public static Matrix identity(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = (i == j ? 1.0 : 0.0);\n            }\n        }\n        return A;\n    }", "language": "java", "code": "public static Matrix identity(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = (i == j ? 1.0 : 0.0);\n            }\n        }\n        return A;\n    }", "code_tokens": ["public", "static", "Matrix", "identity", "(", "int", "m", ",", "int", "n", ")", "{", "Matrix", "A", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "X", "=", "A", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "X", "[", "i", "]", "[", "j", "]", "=", "(", "i", "==", "j", "?", "1.0", ":", "0.0", ")", ";", "}", "}", "return", "A", ";", "}"], "docstring": "Generate identity matrix\n\n@param m Number of rows.\n@param n Number of colums.\n@return An m-by-n matrix with ones on the diagonal and zeros elsewhere.", "docstring_tokens": ["Generate", "identity", "matrix"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L1017-L1029", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.print", "original_string": "public void print(int w, int d)\n    {\n        print(new PrintWriter(System.out, true), w, d);\n    }", "language": "java", "code": "public void print(int w, int d)\n    {\n        print(new PrintWriter(System.out, true), w, d);\n    }", "code_tokens": ["public", "void", "print", "(", "int", "w", ",", "int", "d", ")", "{", "print", "(", "new", "PrintWriter", "(", "System", ".", "out", ",", "true", ")", ",", "w", ",", "d", ")", ";", "}"], "docstring": "Print the matrix to stdout.   Line the elements up in columns\nwith a Fortran-like 'Fw.d' style format.\n\n@param w Column width.\n@param d Number of digits after the decimal.", "docstring_tokens": ["Print", "the", "matrix", "to", "stdout", ".", "Line", "the", "elements", "up", "in", "columns", "with", "a", "Fortran", "-", "like", "Fw", ".", "d", "style", "format", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L1040-L1043", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.print", "original_string": "public void print(PrintWriter output, int w, int d)\n    {\n        DecimalFormat format = new DecimalFormat();\n        format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));\n        format.setMinimumIntegerDigits(1);\n        format.setMaximumFractionDigits(d);\n        format.setMinimumFractionDigits(d);\n        format.setGroupingUsed(false);\n        print(output, format, w + 2);\n    }", "language": "java", "code": "public void print(PrintWriter output, int w, int d)\n    {\n        DecimalFormat format = new DecimalFormat();\n        format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));\n        format.setMinimumIntegerDigits(1);\n        format.setMaximumFractionDigits(d);\n        format.setMinimumFractionDigits(d);\n        format.setGroupingUsed(false);\n        print(output, format, w + 2);\n    }", "code_tokens": ["public", "void", "print", "(", "PrintWriter", "output", ",", "int", "w", ",", "int", "d", ")", "{", "DecimalFormat", "format", "=", "new", "DecimalFormat", "(", ")", ";", "format", ".", "setDecimalFormatSymbols", "(", "new", "DecimalFormatSymbols", "(", "Locale", ".", "US", ")", ")", ";", "format", ".", "setMinimumIntegerDigits", "(", "1", ")", ";", "format", ".", "setMaximumFractionDigits", "(", "d", ")", ";", "format", ".", "setMinimumFractionDigits", "(", "d", ")", ";", "format", ".", "setGroupingUsed", "(", "false", ")", ";", "print", "(", "output", ",", "format", ",", "w", "+", "2", ")", ";", "}"], "docstring": "Print the matrix to the output stream.   Line the elements up in\ncolumns with a Fortran-like 'Fw.d' style format.\n\n@param output Output stream.\n@param w      Column width.\n@param d      Number of digits after the decimal.", "docstring_tokens": ["Print", "the", "matrix", "to", "the", "output", "stream", ".", "Line", "the", "elements", "up", "in", "columns", "with", "a", "Fortran", "-", "like", "Fw", ".", "d", "style", "format", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L1054-L1063", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.print", "original_string": "public void print(NumberFormat format, int width)\n    {\n        print(new PrintWriter(System.out, true), format, width);\n    }", "language": "java", "code": "public void print(NumberFormat format, int width)\n    {\n        print(new PrintWriter(System.out, true), format, width);\n    }", "code_tokens": ["public", "void", "print", "(", "NumberFormat", "format", ",", "int", "width", ")", "{", "print", "(", "new", "PrintWriter", "(", "System", ".", "out", ",", "true", ")", ",", "format", ",", "width", ")", ";", "}"], "docstring": "Print the matrix to stdout.  Line the elements up in columns.\nUse the format object, and right justify within columns of width\ncharacters.\nNote that is the matrix is to be read back in, you probably will want\nto use a NumberFormat that is set to US Locale.\n\n@param format A  Formatting object for individual elements.\n@param width  Field width for each column.\n@see DecimalFormat#setDecimalFormatSymbols", "docstring_tokens": ["Print", "the", "matrix", "to", "stdout", ".", "Line", "the", "elements", "up", "in", "columns", ".", "Use", "the", "format", "object", "and", "right", "justify", "within", "columns", "of", "width", "characters", ".", "Note", "that", "is", "the", "matrix", "is", "to", "be", "read", "back", "in", "you", "probably", "will", "want", "to", "use", "a", "NumberFormat", "that", "is", "set", "to", "US", "Locale", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L1077-L1080", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java", "func_name": "Matrix.print", "original_string": "public void print(PrintWriter output, NumberFormat format, int width)\n    {\n        output.println();  // start on new line.\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                String s = format.format(A[i][j]); // format the number\n                int padding = Math.max(1, width - s.length()); // At _least_ 1 space\n                for (int k = 0; k < padding; k++)\n                    output.print(' ');\n                output.print(s);\n            }\n            output.println();\n        }\n        output.println();   // end with blank line.\n    }\n\n    /**\n     * Read a matrix from a stream.  The format is the same the print method,\n     * so printed matrices can be read back in (provided they were printed using\n     * US Locale).  Elements are separated by\n     * whitespace, all the elements for each row appear on a single line,\n     * the last row is followed by a blank line.\n     *\n     * @param input the input stream.\n     */\n\n    public static Matrix read(BufferedReader input) throws java.io.IOException\n    {\n        StreamTokenizer tokenizer = new StreamTokenizer(input);\n\n        // Although StreamTokenizer will parse numbers, it doesn't recognize\n        // scientific notation (E or D); however, Double.valueOf does.\n        // The strategy here is to disable StreamTokenizer's number parsing.\n        // We'll only get whitespace delimited words, EOL's and EOF's.\n        // These words should all be numbers, for Double.valueOf to parse.\n\n        tokenizer.resetSyntax();\n        tokenizer.wordChars(0, 255);\n        tokenizer.whitespaceChars(0, ' ');\n        tokenizer.eolIsSignificant(true);\n        java.util.Vector<Double> vD = new java.util.Vector<Double>();\n\n        // Ignore initial empty lines\n        while (tokenizer.nextToken() == StreamTokenizer.TT_EOL) ;\n        if (tokenizer.ttype == StreamTokenizer.TT_EOF)\n            throw new java.io.IOException(\"Unexpected EOF on matrix read.\");\n        do\n        {\n            vD.addElement(Double.valueOf(tokenizer.sval)); // Read & store 1st row.\n        }\n        while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);\n\n        int n = vD.size();  // Now we've got the number of columns!\n        double row[] = new double[n];\n        for (int j = 0; j < n; j++)  // extract the elements of the 1st row.\n            row[j] = vD.elementAt(j).doubleValue();\n        java.util.Vector<double[]> v = new java.util.Vector<double[]>();\n        v.addElement(row);  // Start storing rows instead of columns.\n        while (tokenizer.nextToken() == StreamTokenizer.TT_WORD)\n        {\n            // While non-empty lines\n            v.addElement(row = new double[n]);\n            int j = 0;\n            do\n            {\n                if (j >= n) throw new java.io.IOException\n                        (\"Row \" + v.size() + \" is too long.\");\n                row[j++] = Double.valueOf(tokenizer.sval).doubleValue();\n            }\n            while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);\n            if (j < n) throw new java.io.IOException\n                    (\"Row \" + v.size() + \" is too short.\");\n        }\n        int m = v.size();  // Now we've got the number of rows.\n        double[][] A = new double[m][];\n        v.copyInto(A);  // copy the rows out of the vector\n        return new Matrix(A);\n    }\n\n\n/* ------------------------\n   Private Methods\n * ------------------------ */\n\n    /**\n     * Check if size(A) == size(B)\n     **/\n\n    private void checkMatrixDimensions(Matrix B)\n    {\n        if (B.m != m || B.n != n)\n        {\n            throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n        }\n    }\n\n    private static final long serialVersionUID = 1;\n\n    public static Matrix zero(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = 0.0;\n            }\n        }\n        return A;\n    }\n\n    public int rows()\n    {\n        return getRowDimension();\n    }\n\n    public int cols()\n    {\n        return getColumnDimension();\n    }\n\n    /**\n     * \u53d6\u51fa\u7b2cj\u5217\u4f5c\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\n     * @param j\n     * @return\n     */\n    public Matrix col(int j)\n    {\n        double[][] X = new double[m][1];\n        for (int i = 0; i < m; i++)\n        {\n            X[i][0] = A[i][j];\n        }\n        return new Matrix(X);\n    }\n\n    /**\n     * \u53d6\u51fa\u7b2ci\u884c\u4f5c\u4e3a\u4e00\u4e2a\u884c\u5411\u91cf\n     * @param i\n     * @return\n     */\n    public Matrix row(int i)\n    {\n        double[][] X = new double[1][n];\n        for (int j = 0; j < n; j++)\n        {\n            X[0][j] = A[i][j];\n        }\n        return new Matrix(X);\n    }\n\n    public Matrix block(int i, int j, int p, int q)\n    {\n        return getMatrix(i, i + p - 1, j, j + q - 1);\n    }\n\n    /**\n     * \u8fd4\u56de\u77e9\u9635\u7684\u7acb\u65b9\uff08\u4ee5\u6570\u7ec4\u5f62\u5f0f\uff09\n     * @return\n     */\n    public double[][] cube()\n    {\n        double[][] X = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = Math.pow(A[i][j], 3.);\n            }\n        }\n\n        return X;\n    }\n\n    public void setZero()\n    {\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = 0.;\n            }\n        }\n    }\n\n    public void save(DataOutputStream out) throws Exception\n    {\n        out.writeInt(m);\n        out.writeInt(n);\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                out.writeDouble(A[i][j]);\n            }\n        }\n    }\n\n    public boolean load(ByteArray byteArray)\n    {\n        m = byteArray.nextInt();\n        n = byteArray.nextInt();\n        A = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = byteArray.nextDouble();\n            }\n        }\n        return true;\n    }\n}", "language": "java", "code": "public void print(PrintWriter output, NumberFormat format, int width)\n    {\n        output.println();  // start on new line.\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                String s = format.format(A[i][j]); // format the number\n                int padding = Math.max(1, width - s.length()); // At _least_ 1 space\n                for (int k = 0; k < padding; k++)\n                    output.print(' ');\n                output.print(s);\n            }\n            output.println();\n        }\n        output.println();   // end with blank line.\n    }\n\n    /**\n     * Read a matrix from a stream.  The format is the same the print method,\n     * so printed matrices can be read back in (provided they were printed using\n     * US Locale).  Elements are separated by\n     * whitespace, all the elements for each row appear on a single line,\n     * the last row is followed by a blank line.\n     *\n     * @param input the input stream.\n     */\n\n    public static Matrix read(BufferedReader input) throws java.io.IOException\n    {\n        StreamTokenizer tokenizer = new StreamTokenizer(input);\n\n        // Although StreamTokenizer will parse numbers, it doesn't recognize\n        // scientific notation (E or D); however, Double.valueOf does.\n        // The strategy here is to disable StreamTokenizer's number parsing.\n        // We'll only get whitespace delimited words, EOL's and EOF's.\n        // These words should all be numbers, for Double.valueOf to parse.\n\n        tokenizer.resetSyntax();\n        tokenizer.wordChars(0, 255);\n        tokenizer.whitespaceChars(0, ' ');\n        tokenizer.eolIsSignificant(true);\n        java.util.Vector<Double> vD = new java.util.Vector<Double>();\n\n        // Ignore initial empty lines\n        while (tokenizer.nextToken() == StreamTokenizer.TT_EOL) ;\n        if (tokenizer.ttype == StreamTokenizer.TT_EOF)\n            throw new java.io.IOException(\"Unexpected EOF on matrix read.\");\n        do\n        {\n            vD.addElement(Double.valueOf(tokenizer.sval)); // Read & store 1st row.\n        }\n        while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);\n\n        int n = vD.size();  // Now we've got the number of columns!\n        double row[] = new double[n];\n        for (int j = 0; j < n; j++)  // extract the elements of the 1st row.\n            row[j] = vD.elementAt(j).doubleValue();\n        java.util.Vector<double[]> v = new java.util.Vector<double[]>();\n        v.addElement(row);  // Start storing rows instead of columns.\n        while (tokenizer.nextToken() == StreamTokenizer.TT_WORD)\n        {\n            // While non-empty lines\n            v.addElement(row = new double[n]);\n            int j = 0;\n            do\n            {\n                if (j >= n) throw new java.io.IOException\n                        (\"Row \" + v.size() + \" is too long.\");\n                row[j++] = Double.valueOf(tokenizer.sval).doubleValue();\n            }\n            while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);\n            if (j < n) throw new java.io.IOException\n                    (\"Row \" + v.size() + \" is too short.\");\n        }\n        int m = v.size();  // Now we've got the number of rows.\n        double[][] A = new double[m][];\n        v.copyInto(A);  // copy the rows out of the vector\n        return new Matrix(A);\n    }\n\n\n/* ------------------------\n   Private Methods\n * ------------------------ */\n\n    /**\n     * Check if size(A) == size(B)\n     **/\n\n    private void checkMatrixDimensions(Matrix B)\n    {\n        if (B.m != m || B.n != n)\n        {\n            throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n        }\n    }\n\n    private static final long serialVersionUID = 1;\n\n    public static Matrix zero(int m, int n)\n    {\n        Matrix A = new Matrix(m, n);\n        double[][] X = A.getArray();\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = 0.0;\n            }\n        }\n        return A;\n    }\n\n    public int rows()\n    {\n        return getRowDimension();\n    }\n\n    public int cols()\n    {\n        return getColumnDimension();\n    }\n\n    /**\n     * \u53d6\u51fa\u7b2cj\u5217\u4f5c\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\n     * @param j\n     * @return\n     */\n    public Matrix col(int j)\n    {\n        double[][] X = new double[m][1];\n        for (int i = 0; i < m; i++)\n        {\n            X[i][0] = A[i][j];\n        }\n        return new Matrix(X);\n    }\n\n    /**\n     * \u53d6\u51fa\u7b2ci\u884c\u4f5c\u4e3a\u4e00\u4e2a\u884c\u5411\u91cf\n     * @param i\n     * @return\n     */\n    public Matrix row(int i)\n    {\n        double[][] X = new double[1][n];\n        for (int j = 0; j < n; j++)\n        {\n            X[0][j] = A[i][j];\n        }\n        return new Matrix(X);\n    }\n\n    public Matrix block(int i, int j, int p, int q)\n    {\n        return getMatrix(i, i + p - 1, j, j + q - 1);\n    }\n\n    /**\n     * \u8fd4\u56de\u77e9\u9635\u7684\u7acb\u65b9\uff08\u4ee5\u6570\u7ec4\u5f62\u5f0f\uff09\n     * @return\n     */\n    public double[][] cube()\n    {\n        double[][] X = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                X[i][j] = Math.pow(A[i][j], 3.);\n            }\n        }\n\n        return X;\n    }\n\n    public void setZero()\n    {\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = 0.;\n            }\n        }\n    }\n\n    public void save(DataOutputStream out) throws Exception\n    {\n        out.writeInt(m);\n        out.writeInt(n);\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                out.writeDouble(A[i][j]);\n            }\n        }\n    }\n\n    public boolean load(ByteArray byteArray)\n    {\n        m = byteArray.nextInt();\n        n = byteArray.nextInt();\n        A = new double[m][n];\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                A[i][j] = byteArray.nextDouble();\n            }\n        }\n        return true;\n    }\n}", "code_tokens": ["public", "void", "print", "(", "PrintWriter", "output", ",", "NumberFormat", "format", ",", "int", "width", ")", "{", "output", ".", "println", "(", ")", ";", "// start on new line.", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "String", "s", "=", "format", ".", "format", "(", "A", "[", "i", "]", "[", "j", "]", ")", ";", "// format the number", "int", "padding", "=", "Math", ".", "max", "(", "1", ",", "width", "-", "s", ".", "length", "(", ")", ")", ";", "// At _least_ 1 space", "for", "(", "int", "k", "=", "0", ";", "k", "<", "padding", ";", "k", "++", ")", "output", ".", "print", "(", "'", "'", ")", ";", "output", ".", "print", "(", "s", ")", ";", "}", "output", ".", "println", "(", ")", ";", "}", "output", ".", "println", "(", ")", ";", "// end with blank line.", "}", "/**\n     * Read a matrix from a stream.  The format is the same the print method,\n     * so printed matrices can be read back in (provided they were printed using\n     * US Locale).  Elements are separated by\n     * whitespace, all the elements for each row appear on a single line,\n     * the last row is followed by a blank line.\n     *\n     * @param input the input stream.\n     */", "public", "static", "Matrix", "read", "(", "BufferedReader", "input", ")", "throws", "java", ".", "io", ".", "IOException", "{", "StreamTokenizer", "tokenizer", "=", "new", "StreamTokenizer", "(", "input", ")", ";", "// Although StreamTokenizer will parse numbers, it doesn't recognize", "// scientific notation (E or D); however, Double.valueOf does.", "// The strategy here is to disable StreamTokenizer's number parsing.", "// We'll only get whitespace delimited words, EOL's and EOF's.", "// These words should all be numbers, for Double.valueOf to parse.", "tokenizer", ".", "resetSyntax", "(", ")", ";", "tokenizer", ".", "wordChars", "(", "0", ",", "255", ")", ";", "tokenizer", ".", "whitespaceChars", "(", "0", ",", "'", "'", ")", ";", "tokenizer", ".", "eolIsSignificant", "(", "true", ")", ";", "java", ".", "util", ".", "Vector", "<", "Double", ">", "vD", "=", "new", "java", ".", "util", ".", "Vector", "<", "Double", ">", "(", ")", ";", "// Ignore initial empty lines", "while", "(", "tokenizer", ".", "nextToken", "(", ")", "==", "StreamTokenizer", ".", "TT_EOL", ")", ";", "if", "(", "tokenizer", ".", "ttype", "==", "StreamTokenizer", ".", "TT_EOF", ")", "throw", "new", "java", ".", "io", ".", "IOException", "(", "\"Unexpected EOF on matrix read.\"", ")", ";", "do", "{", "vD", ".", "addElement", "(", "Double", ".", "valueOf", "(", "tokenizer", ".", "sval", ")", ")", ";", "// Read & store 1st row.", "}", "while", "(", "tokenizer", ".", "nextToken", "(", ")", "==", "StreamTokenizer", ".", "TT_WORD", ")", ";", "int", "n", "=", "vD", ".", "size", "(", ")", ";", "// Now we've got the number of columns!", "double", "row", "[", "]", "=", "new", "double", "[", "n", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "// extract the elements of the 1st row.", "row", "[", "j", "]", "=", "vD", ".", "elementAt", "(", "j", ")", ".", "doubleValue", "(", ")", ";", "java", ".", "util", ".", "Vector", "<", "double", "[", "]", ">", "v", "=", "new", "java", ".", "util", ".", "Vector", "<", "double", "[", "]", ">", "(", ")", ";", "v", ".", "addElement", "(", "row", ")", ";", "// Start storing rows instead of columns.", "while", "(", "tokenizer", ".", "nextToken", "(", ")", "==", "StreamTokenizer", ".", "TT_WORD", ")", "{", "// While non-empty lines", "v", ".", "addElement", "(", "row", "=", "new", "double", "[", "n", "]", ")", ";", "int", "j", "=", "0", ";", "do", "{", "if", "(", "j", ">=", "n", ")", "throw", "new", "java", ".", "io", ".", "IOException", "(", "\"Row \"", "+", "v", ".", "size", "(", ")", "+", "\" is too long.\"", ")", ";", "row", "[", "j", "++", "]", "=", "Double", ".", "valueOf", "(", "tokenizer", ".", "sval", ")", ".", "doubleValue", "(", ")", ";", "}", "while", "(", "tokenizer", ".", "nextToken", "(", ")", "==", "StreamTokenizer", ".", "TT_WORD", ")", ";", "if", "(", "j", "<", "n", ")", "throw", "new", "java", ".", "io", ".", "IOException", "(", "\"Row \"", "+", "v", ".", "size", "(", ")", "+", "\" is too short.\"", ")", ";", "}", "int", "m", "=", "v", ".", "size", "(", ")", ";", "// Now we've got the number of rows.", "double", "[", "]", "[", "]", "A", "=", "new", "double", "[", "m", "]", "[", "", "]", ";", "v", ".", "copyInto", "(", "A", ")", ";", "// copy the rows out of the vector", "return", "new", "Matrix", "(", "A", ")", ";", "}", "/* ------------------------\n   Private Methods\n * ------------------------ */", "/**\n     * Check if size(A) == size(B)\n     **/", "private", "void", "checkMatrixDimensions", "", "(", "Matrix", "B", ")", "{", "if", "(", "B", ".", "m", "!=", "m", "||", "B", ".", "n", "!=", "n", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Matrix dimensions must agree.\"", ")", ";", "}", "}", "private", "static", "final", "long", "serialVersionUID", "=", "1", ";", "public", "static", "Matrix", "zero", "", "(", "int", "m", ",", "int", "n", ")", "{", "Matrix", "A", "=", "new", "Matrix", "(", "m", ",", "n", ")", ";", "double", "[", "]", "[", "]", "X", "=", "A", ".", "getArray", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "X", "[", "i", "]", "[", "j", "]", "=", "0.0", ";", "}", "}", "return", "A", ";", "}", "public", "int", "rows", "", "(", ")", "{", "return", "getRowDimension", "(", ")", ";", "}", "public", "int", "cols", "", "(", ")", "{", "return", "getColumnDimension", "(", ")", ";", "}", "/**\n     * \u53d6\u51fa\u7b2cj\u5217\u4f5c\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\n     * @param j\n     * @return\n     */", "public", "Matrix", "col", "", "(", "int", "j", ")", "{", "double", "[", "]", "[", "]", "X", "=", "new", "double", "[", "m", "]", "[", "1", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "X", "[", "i", "]", "[", "0", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "return", "new", "Matrix", "(", "X", ")", ";", "}", "/**\n     * \u53d6\u51fa\u7b2ci\u884c\u4f5c\u4e3a\u4e00\u4e2a\u884c\u5411\u91cf\n     * @param i\n     * @return\n     */", "public", "Matrix", "row", "", "(", "int", "i", ")", "{", "double", "[", "]", "[", "]", "X", "=", "new", "double", "[", "1", "]", "[", "n", "]", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "X", "[", "0", "]", "[", "j", "]", "=", "A", "[", "i", "]", "[", "j", "]", ";", "}", "return", "new", "Matrix", "(", "X", ")", ";", "}", "public", "Matrix", "block", "", "(", "int", "i", ",", "int", "j", ",", "int", "p", ",", "int", "q", ")", "{", "return", "getMatrix", "(", "i", ",", "i", "+", "p", "-", "1", ",", "j", ",", "j", "+", "q", "-", "1", ")", ";", "}", "/**\n     * \u8fd4\u56de\u77e9\u9635\u7684\u7acb\u65b9\uff08\u4ee5\u6570\u7ec4\u5f62\u5f0f\uff09\n     * @return\n     */", "public", "double", "[", "]", "[", "]", "cube", "", "(", ")", "{", "double", "[", "]", "[", "]", "X", "=", "new", "double", "[", "m", "]", "[", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "X", "[", "i", "]", "[", "j", "]", "=", "Math", ".", "pow", "(", "A", "[", "i", "]", "[", "j", "]", ",", "3.", ")", ";", "}", "}", "return", "X", ";", "}", "public", "void", "setZero", "", "(", ")", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "j", "]", "=", "0.", ";", "}", "}", "}", "public", "void", "save", "", "(", "DataOutputStream", "out", ")", "throws", "Exception", "{", "out", ".", "writeInt", "(", "m", ")", ";", "out", ".", "writeInt", "(", "n", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "out", ".", "writeDouble", "(", "A", "[", "i", "]", "[", "j", "]", ")", ";", "}", "}", "}", "public", "boolean", "load", "", "(", "ByteArray", "byteArray", ")", "{", "m", "=", "byteArray", ".", "nextInt", "(", ")", ";", "n", "=", "byteArray", ".", "nextInt", "(", ")", ";", "A", "=", "new", "double", "[", "m", "]", "[", "n", "]", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "{", "for", "(", "int", "j", "=", "0", ";", "j", "<", "n", ";", "j", "++", ")", "{", "A", "[", "i", "]", "[", "j", "]", "=", "byteArray", ".", "nextDouble", "(", ")", ";", "}", "}", "return", "true", ";", "}", "}", "", ""], "docstring": "Print the matrix to the output stream.  Line the elements up in columns.\nUse the format object, and right justify within columns of width\ncharacters.\nNote that is the matrix is to be read back in, you probably will want\nto use a NumberFormat that is set to US Locale.\n\n@param output the output stream.\n@param format A formatting object to format the matrix elements\n@param width  Column width.\n@see DecimalFormat#setDecimalFormatSymbols", "docstring_tokens": ["Print", "the", "matrix", "to", "the", "output", "stream", ".", "Line", "the", "elements", "up", "in", "columns", ".", "Use", "the", "format", "object", "and", "right", "justify", "within", "columns", "of", "width", "characters", ".", "Note", "that", "is", "the", "matrix", "is", "to", "be", "read", "back", "in", "you", "probably", "will", "want", "to", "use", "a", "NumberFormat", "that", "is", "set", "to", "US", "Locale", "."], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/Matrix.java#L1100-L1315", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java", "func_name": "State.copy", "original_string": "void copy(State source)\n    {\n        this.ref = source.ref;\n        this.score = source.score;\n        this.previous = source.previous;\n        this.buffer = source.buffer;\n        this.top0 = source.top0;\n        this.top1 = source.top1;\n        this.stack = source.stack;\n        this.last_action = source.last_action;\n        this.heads = source.heads;\n        this.deprels = source.deprels;\n        this.left_most_child = source.left_most_child;\n        this.right_most_child = source.right_most_child;\n        this.left_2nd_most_child = source.left_2nd_most_child;\n        this.right_2nd_most_child = source.right_2nd_most_child;\n        this.nr_left_children = source.nr_left_children;\n        this.nr_right_children = source.nr_right_children;\n    }", "language": "java", "code": "void copy(State source)\n    {\n        this.ref = source.ref;\n        this.score = source.score;\n        this.previous = source.previous;\n        this.buffer = source.buffer;\n        this.top0 = source.top0;\n        this.top1 = source.top1;\n        this.stack = source.stack;\n        this.last_action = source.last_action;\n        this.heads = source.heads;\n        this.deprels = source.deprels;\n        this.left_most_child = source.left_most_child;\n        this.right_most_child = source.right_most_child;\n        this.left_2nd_most_child = source.left_2nd_most_child;\n        this.right_2nd_most_child = source.right_2nd_most_child;\n        this.nr_left_children = source.nr_left_children;\n        this.nr_right_children = source.nr_right_children;\n    }", "code_tokens": ["void", "copy", "(", "State", "source", ")", "{", "this", ".", "ref", "=", "source", ".", "ref", ";", "this", ".", "score", "=", "source", ".", "score", ";", "this", ".", "previous", "=", "source", ".", "previous", ";", "this", ".", "buffer", "=", "source", ".", "buffer", ";", "this", ".", "top0", "=", "source", ".", "top0", ";", "this", ".", "top1", "=", "source", ".", "top1", ";", "this", ".", "stack", "=", "source", ".", "stack", ";", "this", ".", "last_action", "=", "source", ".", "last_action", ";", "this", ".", "heads", "=", "source", ".", "heads", ";", "this", ".", "deprels", "=", "source", ".", "deprels", ";", "this", ".", "left_most_child", "=", "source", ".", "left_most_child", ";", "this", ".", "right_most_child", "=", "source", ".", "right_most_child", ";", "this", ".", "left_2nd_most_child", "=", "source", ".", "left_2nd_most_child", ";", "this", ".", "right_2nd_most_child", "=", "source", ".", "right_2nd_most_child", ";", "this", ".", "nr_left_children", "=", "source", ".", "nr_left_children", ";", "this", ".", "nr_right_children", "=", "source", ".", "nr_right_children", ";", "}"], "docstring": "\u514b\u9686\u4e00\u4e2a\u72b6\u6001\u5230\u81ea\u5df1\n@param source \u6e90\u72b6\u6001", "docstring_tokens": ["\u514b\u9686\u4e00\u4e2a\u72b6\u6001\u5230\u81ea\u5df1"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java#L126-L144", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java", "func_name": "State.refresh_stack_information", "original_string": "void refresh_stack_information()\n    {\n        int sz = stack.size();\n        if (0 == sz)\n        {\n            top0 = -1;\n            top1 = -1;\n        }\n        else if (1 == sz)\n        {\n            top0 = stack.get(sz - 1);\n            top1 = -1;\n        }\n        else\n        {\n            top0 = stack.get(sz - 1);\n            top1 = stack.get(sz - 2);\n        }\n    }", "language": "java", "code": "void refresh_stack_information()\n    {\n        int sz = stack.size();\n        if (0 == sz)\n        {\n            top0 = -1;\n            top1 = -1;\n        }\n        else if (1 == sz)\n        {\n            top0 = stack.get(sz - 1);\n            top1 = -1;\n        }\n        else\n        {\n            top0 = stack.get(sz - 1);\n            top1 = stack.get(sz - 2);\n        }\n    }", "code_tokens": ["void", "refresh_stack_information", "(", ")", "{", "int", "sz", "=", "stack", ".", "size", "(", ")", ";", "if", "(", "0", "==", "sz", ")", "{", "top0", "=", "-", "1", ";", "top1", "=", "-", "1", ";", "}", "else", "if", "(", "1", "==", "sz", ")", "{", "top0", "=", "stack", ".", "get", "(", "sz", "-", "1", ")", ";", "top1", "=", "-", "1", ";", "}", "else", "{", "top0", "=", "stack", ".", "get", "(", "sz", "-", "1", ")", ";", "top1", "=", "stack", ".", "get", "(", "sz", "-", "2", ")", ";", "}", "}"], "docstring": "\u66f4\u65b0\u6808\u7684\u4fe1\u606f", "docstring_tokens": ["\u66f4\u65b0\u6808\u7684\u4fe1\u606f"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java#L149-L167", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java", "func_name": "State.shift", "original_string": "boolean shift(State source)\n    {\n        if (!source.can_shift())\n        {\n            return false;\n        }\n\n        this.copy(source);\n        stack.add(this.buffer);\n        refresh_stack_information();\n        ++this.buffer;\n\n        this.last_action = ActionFactory.make_shift();\n        this.previous = source;\n        return true;\n    }", "language": "java", "code": "boolean shift(State source)\n    {\n        if (!source.can_shift())\n        {\n            return false;\n        }\n\n        this.copy(source);\n        stack.add(this.buffer);\n        refresh_stack_information();\n        ++this.buffer;\n\n        this.last_action = ActionFactory.make_shift();\n        this.previous = source;\n        return true;\n    }", "code_tokens": ["boolean", "shift", "(", "State", "source", ")", "{", "if", "(", "!", "source", ".", "can_shift", "(", ")", ")", "{", "return", "false", ";", "}", "this", ".", "copy", "(", "source", ")", ";", "stack", ".", "add", "(", "this", ".", "buffer", ")", ";", "refresh_stack_information", "(", ")", ";", "++", "this", ".", "buffer", ";", "this", ".", "last_action", "=", "ActionFactory", ".", "make_shift", "(", ")", ";", "this", ".", "previous", "=", "source", ";", "return", "true", ";", "}"], "docstring": "\u4e0d\u5efa\u7acb\u4f9d\u5b58\u5173\u7cfb\uff0c\u53ea\u8f6c\u79fb\u53e5\u6cd5\u5206\u6790\u7684\u7126\u70b9\uff0c\u5373\u539f\u6765\u7684\u53f3\u7126\u70b9\u8bcd\u53d8\u4e3a\u65b0\u7684\u5de6\u7126\u70b9\u8bcd\uff08\u672c\u72b6\u6001\uff09\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n@param source \u53f3\u7126\u70b9\u8bcd\n@return \u662f\u5426shift\u6210\u529f", "docstring_tokens": ["\u4e0d\u5efa\u7acb\u4f9d\u5b58\u5173\u7cfb\uff0c\u53ea\u8f6c\u79fb\u53e5\u6cd5\u5206\u6790\u7684\u7126\u70b9\uff0c\u5373\u539f\u6765\u7684\u53f3\u7126\u70b9\u8bcd\u53d8\u4e3a\u65b0\u7684\u5de6\u7126\u70b9\u8bcd\uff08\u672c\u72b6\u6001\uff09\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/State.java#L174-L189", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java", "func_name": "TransitionSystem.get_possible_actions", "original_string": "void get_possible_actions(State source,\n                              List<Action> actions)\n    {\n        if (0 == L || -1 == R)\n        {\n            System.err.println(\"decoder: not initialized, please check if the root dependency relation is correct set by --root.\");\n            return;\n        }\n        actions.clear();\n\n        if (!source.buffer_empty())\n        {\n            actions.add(ActionFactory.make_shift());\n        }\n\n        if (source.stack_size() == 2)\n        {\n            if (source.buffer_empty())\n            {\n                actions.add(ActionFactory.make_right_arc(R));\n            }\n        }\n        else if (source.stack_size() > 2)\n        {\n            for (int l = 0; l < L; ++l)\n            {\n                if (l == R)\n                {\n                    continue;\n                }\n                actions.add(ActionFactory.make_left_arc(l));\n                actions.add(ActionFactory.make_right_arc(l));\n            }\n        }\n    }", "language": "java", "code": "void get_possible_actions(State source,\n                              List<Action> actions)\n    {\n        if (0 == L || -1 == R)\n        {\n            System.err.println(\"decoder: not initialized, please check if the root dependency relation is correct set by --root.\");\n            return;\n        }\n        actions.clear();\n\n        if (!source.buffer_empty())\n        {\n            actions.add(ActionFactory.make_shift());\n        }\n\n        if (source.stack_size() == 2)\n        {\n            if (source.buffer_empty())\n            {\n                actions.add(ActionFactory.make_right_arc(R));\n            }\n        }\n        else if (source.stack_size() > 2)\n        {\n            for (int l = 0; l < L; ++l)\n            {\n                if (l == R)\n                {\n                    continue;\n                }\n                actions.add(ActionFactory.make_left_arc(l));\n                actions.add(ActionFactory.make_right_arc(l));\n            }\n        }\n    }", "code_tokens": ["void", "get_possible_actions", "(", "State", "source", ",", "List", "<", "Action", ">", "actions", ")", "{", "if", "(", "0", "==", "L", "||", "-", "1", "==", "R", ")", "{", "System", ".", "err", ".", "println", "(", "\"decoder: not initialized, please check if the root dependency relation is correct set by --root.\"", ")", ";", "return", ";", "}", "actions", ".", "clear", "(", ")", ";", "if", "(", "!", "source", ".", "buffer_empty", "(", ")", ")", "{", "actions", ".", "add", "(", "ActionFactory", ".", "make_shift", "(", ")", ")", ";", "}", "if", "(", "source", ".", "stack_size", "(", ")", "==", "2", ")", "{", "if", "(", "source", ".", "buffer_empty", "(", ")", ")", "{", "actions", ".", "add", "(", "ActionFactory", ".", "make_right_arc", "(", "R", ")", ")", ";", "}", "}", "else", "if", "(", "source", ".", "stack_size", "(", ")", ">", "2", ")", "{", "for", "(", "int", "l", "=", "0", ";", "l", "<", "L", ";", "++", "l", ")", "{", "if", "(", "l", "==", "R", ")", "{", "continue", ";", "}", "actions", ".", "add", "(", "ActionFactory", ".", "make_left_arc", "(", "l", ")", ")", ";", "actions", ".", "add", "(", "ActionFactory", ".", "make_right_arc", "(", "l", ")", ")", ";", "}", "}", "}"], "docstring": "\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u53ef\u80fd\u7684\u52a8\u4f5c\uff08\u52a8\u4f5c=shift | left | right + \u4f9d\u5b58\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u4e00\u6761\u65e2\u6709\u65b9\u5411\u53c8\u6709\u4f9d\u5b58\u5173\u7cfb\u540d\u79f0\u7684\u4f9d\u5b58\u8fb9\uff09\n@param source \u5f53\u524d\u72b6\u6001\n@param actions \u8f93\u51fa\u53ef\u80fd\u52a8\u4f5c", "docstring_tokens": ["\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u53ef\u80fd\u7684\u52a8\u4f5c\uff08\u52a8\u4f5c", "=", "shift", "|", "left", "|", "right", "+", "\u4f9d\u5b58\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f\u4e00\u6761\u65e2\u6709\u65b9\u5411\u53c8\u6709\u4f9d\u5b58\u5173\u7cfb\u540d\u79f0\u7684\u4f9d\u5b58\u8fb9\uff09"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java#L67-L101", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java", "func_name": "TransitionSystem.transit", "original_string": "void transit(State source, Action act, State target)\n    {\n        int deprel = 0;\n        int[] deprel_inference = new int[]{deprel};\n        if (ActionUtils.is_shift(act))\n        {\n            target.shift(source);\n        }\n        else if (ActionUtils.is_left_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            target.left_arc(source, deprel);\n        }\n        else if (ActionUtils.is_right_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            target.right_arc(source, deprel);\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transit: %d-%d\", act.name(), act.rel());\n        }\n    }", "language": "java", "code": "void transit(State source, Action act, State target)\n    {\n        int deprel = 0;\n        int[] deprel_inference = new int[]{deprel};\n        if (ActionUtils.is_shift(act))\n        {\n            target.shift(source);\n        }\n        else if (ActionUtils.is_left_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            target.left_arc(source, deprel);\n        }\n        else if (ActionUtils.is_right_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            target.right_arc(source, deprel);\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transit: %d-%d\", act.name(), act.rel());\n        }\n    }", "code_tokens": ["void", "transit", "(", "State", "source", ",", "Action", "act", ",", "State", "target", ")", "{", "int", "deprel", "=", "0", ";", "int", "[", "]", "deprel_inference", "=", "new", "int", "[", "]", "{", "deprel", "}", ";", "if", "(", "ActionUtils", ".", "is_shift", "(", "act", ")", ")", "{", "target", ".", "shift", "(", "source", ")", ";", "}", "else", "if", "(", "ActionUtils", ".", "is_left_arc", "(", "act", ",", "deprel_inference", ")", ")", "{", "deprel", "=", "deprel_inference", "[", "0", "]", ";", "target", ".", "left_arc", "(", "source", ",", "deprel", ")", ";", "}", "else", "if", "(", "ActionUtils", ".", "is_right_arc", "(", "act", ",", "deprel_inference", ")", ")", "{", "deprel", "=", "deprel_inference", "[", "0", "]", ";", "target", ".", "right_arc", "(", "source", ",", "deprel", ")", ";", "}", "else", "{", "System", ".", "err", ".", "printf", "(", "\"unknown transition in transit: %d-%d\"", ",", "act", ".", "name", "(", ")", ",", "act", ".", "rel", "(", ")", ")", ";", "}", "}"], "docstring": "\u8f6c\u79fb\u72b6\u6001\n@param source \u6e90\u72b6\u6001\n@param act \u52a8\u4f5c\n@param target \u76ee\u6807\u72b6\u6001", "docstring_tokens": ["\u8f6c\u79fb\u72b6\u6001"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java#L109-L131", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java", "func_name": "TransitionSystem.transform", "original_string": "int transform(Action act)\n    {\n        int deprel = 0;\n        int[] deprel_inference = new int[]{deprel};\n        if (ActionUtils.is_shift(act))\n        {\n            return 0;\n        }\n        else if (ActionUtils.is_left_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            return 1 + deprel;\n        }\n        else if (ActionUtils.is_right_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            return L + 1 + deprel;\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transform(Action): %d-%d\", act.name(), act.rel());\n        }\n        return -1;\n    }", "language": "java", "code": "int transform(Action act)\n    {\n        int deprel = 0;\n        int[] deprel_inference = new int[]{deprel};\n        if (ActionUtils.is_shift(act))\n        {\n            return 0;\n        }\n        else if (ActionUtils.is_left_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            return 1 + deprel;\n        }\n        else if (ActionUtils.is_right_arc(act, deprel_inference))\n        {\n            deprel = deprel_inference[0];\n            return L + 1 + deprel;\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transform(Action): %d-%d\", act.name(), act.rel());\n        }\n        return -1;\n    }", "code_tokens": ["int", "transform", "(", "Action", "act", ")", "{", "int", "deprel", "=", "0", ";", "int", "[", "]", "deprel_inference", "=", "new", "int", "[", "]", "{", "deprel", "}", ";", "if", "(", "ActionUtils", ".", "is_shift", "(", "act", ")", ")", "{", "return", "0", ";", "}", "else", "if", "(", "ActionUtils", ".", "is_left_arc", "(", "act", ",", "deprel_inference", ")", ")", "{", "deprel", "=", "deprel_inference", "[", "0", "]", ";", "return", "1", "+", "deprel", ";", "}", "else", "if", "(", "ActionUtils", ".", "is_right_arc", "(", "act", ",", "deprel_inference", ")", ")", "{", "deprel", "=", "deprel_inference", "[", "0", "]", ";", "return", "L", "+", "1", "+", "deprel", ";", "}", "else", "{", "System", ".", "err", ".", "printf", "(", "\"unknown transition in transform(Action): %d-%d\"", ",", "act", ".", "name", "(", ")", ",", "act", ".", "rel", "(", ")", ")", ";", "}", "return", "-", "1", ";", "}"], "docstring": "\u8f6c\u6362\u52a8\u4f5c\u4e3a\u52a8\u4f5cid\n@param act \u52a8\u4f5c\n@return \u52a8\u4f5c\u7c7b\u578b\u7684\u4f9d\u5b58\u5173\u7cfbid", "docstring_tokens": ["\u8f6c\u6362\u52a8\u4f5c\u4e3a\u52a8\u4f5cid"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java#L155-L178", "partition": "train"}
{"repo": "hankcs/HanLP", "path": "src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java", "func_name": "TransitionSystem.transform", "original_string": "Action transform(int act)\n    {\n        if (act == 0)\n        {\n            return ActionFactory.make_shift();\n        }\n        else if (act < 1 + L)\n        {\n            return ActionFactory.make_left_arc(act - 1);\n        }\n        else if (act < 1 + 2 * L)\n        {\n            return ActionFactory.make_right_arc(act - 1 - L);\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transform(int): %d\", act);\n        }\n        return new Action();\n    }", "language": "java", "code": "Action transform(int act)\n    {\n        if (act == 0)\n        {\n            return ActionFactory.make_shift();\n        }\n        else if (act < 1 + L)\n        {\n            return ActionFactory.make_left_arc(act - 1);\n        }\n        else if (act < 1 + 2 * L)\n        {\n            return ActionFactory.make_right_arc(act - 1 - L);\n        }\n        else\n        {\n            System.err.printf(\"unknown transition in transform(int): %d\", act);\n        }\n        return new Action();\n    }", "code_tokens": ["Action", "transform", "(", "int", "act", ")", "{", "if", "(", "act", "==", "0", ")", "{", "return", "ActionFactory", ".", "make_shift", "(", ")", ";", "}", "else", "if", "(", "act", "<", "1", "+", "L", ")", "{", "return", "ActionFactory", ".", "make_left_arc", "(", "act", "-", "1", ")", ";", "}", "else", "if", "(", "act", "<", "1", "+", "2", "*", "L", ")", "{", "return", "ActionFactory", ".", "make_right_arc", "(", "act", "-", "1", "-", "L", ")", ";", "}", "else", "{", "System", ".", "err", ".", "printf", "(", "\"unknown transition in transform(int): %d\"", ",", "act", ")", ";", "}", "return", "new", "Action", "(", ")", ";", "}"], "docstring": "\u8f6c\u6362\u52a8\u4f5cid\u4e3a\u52a8\u4f5c\n@param act \u52a8\u4f5c\u7c7b\u578b\u7684\u4f9d\u5b58\u5173\u7cfbid\n@return \u52a8\u4f5c", "docstring_tokens": ["\u8f6c\u6362\u52a8\u4f5cid\u4e3a\u52a8\u4f5c"], "sha": "a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce", "url": "https://github.com/hankcs/HanLP/blob/a538d0722ab2e4980a9dcd9ea40324fc3ddba7ce/src/main/java/com/hankcs/hanlp/dependency/nnparser/TransitionSystem.java#L185-L204", "partition": "train"}